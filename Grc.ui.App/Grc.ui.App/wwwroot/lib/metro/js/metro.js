( () => {
    var qo = Object.defineProperty
      , qn = Object.defineProperties;
    var Zn = Object.getOwnPropertyDescriptors;
    var Xo = Object.getOwnPropertySymbols;
    var $n = Object.prototype.hasOwnProperty
      , tl = Object.prototype.propertyIsEnumerable;
    var ne = Math.pow
      , ao = (t, r, l) => r in t ? qo(t, r, {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: l
    }) : t[r] = l
      , V = (t, r) => {
        for (var l in r || (r = {}))
            $n.call(r, l) && ao(t, l, r[l]);
        if (Xo)
            for (var l of Xo(r))
                tl.call(r, l) && ao(t, l, r[l]);
        return t
    }
      , st = (t, r) => qn(t, Zn(r));
    var Zo = (t, r) => {
        for (var l in r)
            qo(t, l, {
                get: r[l],
                enumerable: !0
            })
    }
    ;
    var I = (t, r, l) => ao(t, typeof r != "symbol" ? r + "" : r, l);
    var L = (t, r, l) => new Promise( (e, o) => {
        var a = c => {
            try {
                s(l.next(c))
            } catch (d) {
                o(d)
            }
        }
          , i = c => {
            try {
                s(l.throw(c))
            } catch (d) {
                o(d)
            }
        }
          , s = c => c.done ? e(c.value) : Promise.resolve(c.value).then(a, i);
        s((l = l.apply(t, r)).next())
    }
    );
    var el = t => !isNaN(t), Ut = "YYYY-MM-DDTHH:mm:ss.sss", rr = "Invalid date", ol = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|m{1,2}|s{1,3}/g, rl = /(%[a-z])/gi, al = "%Y-%m-%dT%H:%M:%S.%Q%t", il = {
        months: "January February March April May June July August September October November December".split(" "),
        monthsShort: "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),
        weekdays: "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
        weekdaysShort: "Sun Mon Tue Wed Thu Fri Sat".split(" "),
        weekdaysMin: "Su Mo Tu We Th Fr Sa".split(" "),
        weekStart: 0
    }, $o = {
        ms: "Milliseconds",
        s: "Seconds",
        m: "Minutes",
        h: "Hours",
        D: "Date",
        d: "Day",
        M: "Month",
        Y: "FullYear",
        y: "Year",
        t: "Time"
    }, Y = {
        ms: "ms",
        s: "second",
        m: "minute",
        h: "hour",
        D: "day",
        W: "week",
        d: "weekDay",
        M: "month",
        Y: "year",
        Y2: "year2",
        t: "time",
        c: "century",
        q: "quarter"
    }, io = (t="") => {
        throw new Error("This argument is required!")
    }
    , tr = (t, r=!0) => {
        try {
            return r ? typeof t != "undefined" : typeof t != "undefined" && t !== null
        } catch (l) {
            return !1
        }
    }
    , le = t => typeof t == "undefined" || t === null, ct = function(t, r, l) {
        let e = "" + t;
        return l && e.length >= l ? e : Array(l + 1 - e.length).join(r) + e
    }, nl = {
        months: "\u0421\u0456\u0447\u0435\u043D\u044C_\u041B\u044E\u0442\u0438\u0439_\u0411\u0435\u0440\u0435\u0437\u0435\u043D\u044C_\u041A\u0432\u0456\u0442\u0435\u043D\u044C_\u0422\u0440\u0430\u0432\u0435\u043D\u044C_\u0427\u0435\u0440\u0432\u0435\u043D\u044C_\u041B\u0438\u043F\u0435\u043D\u044C_\u0421\u0435\u0440\u043F\u0435\u043D\u044C_\u0412\u0435\u0440\u0435\u0441\u0435\u043D\u044C_\u0416\u043E\u0432\u0442\u0435\u043D\u044C_\u041B\u0438\u0441\u0442\u043E\u043F\u0430\u0434_\u0413\u0440\u0443\u0434\u0435\u043D\u044C".split("_"),
        monthsParental: "\u0421\u0456\u0447\u043D\u044F_\u041B\u044E\u0442\u043E\u0433\u043E_\u0411\u0435\u0440\u0435\u0437\u0435\u043D\u044F_\u041A\u0432\u0456\u0442\u043D\u044F_\u0422\u0440\u0430\u0432\u043D\u044F_\u0427\u0435\u0440\u0432\u043D\u044F_\u041B\u0438\u043F\u043D\u044F_\u0421\u0435\u0440\u043F\u043D\u044F_\u0412\u0435\u0440\u0435\u0441\u043D\u044F_\u0416\u043E\u0432\u0442\u043D\u044F_\u041B\u0438\u0441\u0442\u043E\u043F\u0430\u0434\u0430_\u0413\u0440\u0443\u0434\u043D\u044F".split("_"),
        monthsShort: "\u0421\u0456\u0447_\u041B\u044E\u0442_\u0411\u0435\u0440_\u041A\u0432\u0456_\u0422\u0440\u0430_\u0427\u0435\u0440_\u041B\u0438\u043F_\u0421\u0435\u0440_\u0412\u0435\u0440_\u0416\u043E\u0432_\u041B\u0438\u0441_\u0413\u0440\u0443".split("_"),
        weekdays: "\u041D\u0435\u0434\u0456\u043B\u044F_\u041F\u043E\u043D\u0435\u0434\u0456\u043B\u043E\u043A_\u0412\u0456\u0432\u0442\u043E\u0440\u043E\u043A_\u0421\u0435\u0440\u0435\u0434\u0430_\u0427\u0435\u0442\u0432\u0435\u0440_\u041F'\u044F\u0442\u043D\u0438\u0446\u044F_\u0421\u0443\u0431\u043E\u0442\u0430".split("_"),
        weekdaysShort: "\u041D\u0435\u0434_\u041F\u043E\u043D_\u0412\u0456\u0432_\u0421\u0435\u0440_\u0427\u0435\u0442_\u041F\u0442\u043D_\u0421\u0443\u0431".split("_"),
        weekdaysMin: "\u041D\u0434_\u041F\u043D_\u0412\u0442_\u0421\u0440_\u0427\u0442_\u041F\u0442_\u0421\u0431".split("_"),
        weekStart: 1
    }, ll = {
        months: "Januar_Februar_M\xE4rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
        monthsShort: "Jan_Feb_M\xE4r_Apr_Mai_Jun_Jul_Aug_Sep_Okt_Nov_Dez".split("_"),
        weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
        weekdaysShort: "Son_Mon_Die_Mit_Don_Fre_Sam".split("_"),
        weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
        weekStart: 1
    }, O, F = (O = class {
        constructor() {
            let r = [].slice.call(arguments);
            if (this.value = new (Function.prototype.bind.apply(Date, [this].concat(r))),
            this.locale = "en",
            this.weekStart = O.locales.en.weekStart,
            this.utcMode = !1,
            this.mutable = !0,
            !el(this.value.getTime()))
                throw new Error(rr)
        }
        static isDatetime(r) {
            return r instanceof O
        }
        static now(r=!1) {
            return _()[r ? "val" : "time"]()
        }
        static parse(r=io()) {
            return _(Date.parse(r))
        }
        static setLocale(r=io(), l=io()) {
            O.locales[r] = l
        }
        static getLocale(r="en") {
            return tr(O.locales[r], !1) ? O.locales[r] : O.locales.en
        }
        static align(r, l) {
            let e = _(r), o, a;
            switch (l) {
            case Y.s:
                o = e.ms(0);
                break;
            case Y.m:
                o = O.align(e, Y.s)[Y.s](0);
                break;
            case Y.h:
                o = O.align(e, Y.m)[Y.m](0);
                break;
            case Y.D:
                o = O.align(e, Y.h)[Y.h](0);
                break;
            case Y.M:
                o = O.align(e, Y.D)[Y.D](1);
                break;
            case Y.Y:
                o = O.align(e, Y.M)[Y.M](0);
                break;
            case Y.W:
                {
                    a = e.weekDay(),
                    o = O.align(r, Y.D).addDay(-a);
                    break
                }
            default:
                o = e
            }
            return o
        }
        static alignEnd(r, l) {
            let e = _(r), o, a;
            switch (l) {
            case Y.ms:
                o = e.ms(999);
                break;
            case Y.s:
                o = O.alignEnd(e, Y.ms);
                break;
            case Y.m:
                o = O.alignEnd(e, Y.s)[Y.s](59);
                break;
            case Y.h:
                o = O.alignEnd(e, Y.m)[Y.m](59);
                break;
            case Y.D:
                o = O.alignEnd(e, Y.h)[Y.h](23);
                break;
            case Y.M:
                o = O.alignEnd(e, Y.D)[Y.D](1).add(1, Y.M).add(-1, Y.D);
                break;
            case Y.Y:
                o = O.alignEnd(e, Y.D)[Y.M](11)[Y.D](31);
                break;
            case Y.W:
                {
                    a = e.weekDay(),
                    o = O.alignEnd(e, "day").addDay(6 - a);
                    break
                }
            default:
                o = r
            }
            return o
        }
        immutable(r) {
            return this.mutable = !(le(r) || r),
            this
        }
        utc() {
            return this.utcMode = !0,
            this
        }
        local() {
            return this.utcMode = !1,
            this
        }
        useLocale(r, l) {
            return this.locale = l || tr(O.locales[r], !1) ? r : "en",
            this.weekStart = O.getLocale(this.locale).weekStart,
            this
        }
        clone() {
            let r = _(this.value);
            return r.locale = this.locale,
            r.weekStart = this.weekStart,
            r.mutable = this.mutable,
            r
        }
        align(r) {
            return this.mutable ? (this.value = O.align(this, r).val(),
            this) : this.clone().immutable(!1).align(r).immutable(!this.mutable)
        }
        alignEnd(r) {
            return this.mutable ? (this.value = O.alignEnd(this, r).val(),
            this) : this.clone().immutable(!1).alignEnd(r).immutable(!this.mutable)
        }
        val(r) {
            return typeof r == "undefined" || r === null ? this.value : this.mutable ? (this.value = typeof r == "string" ? Date.parse(r) : typeof r == "number" ? new Date(r) : r,
            this) : _(r)
        }
        year2() {
            return +("" + this.year()).slice(-2)
        }
        _set(r, l) {
            let e = "set" + (this.utcMode && r !== "t" ? "UTC" : "") + $o[r];
            if (this.mutable)
                return this.value[e](l),
                this;
            let o = this.clone();
            return o.value[e](l),
            o
        }
        _get(r) {
            let l = "get" + (this.utcMode && r !== "t" ? "UTC" : "") + $o[r];
            return this.value[l]()
        }
        _work(r, l) {
            return !arguments.length || typeof l == "undefined" || l === null ? this._get(r) : this._set(r, l)
        }
        ms(r) {
            return this._work("ms", r)
        }
        second(r) {
            return this._work("s", r)
        }
        minute(r) {
            return this._work("m", r)
        }
        hour(r) {
            return this._work("h", r)
        }
        day(r) {
            return this._work("D", r)
        }
        month(r) {
            return this._work("M", r)
        }
        year(r) {
            return this._work("Y", r)
        }
        time(r) {
            return this._work("t", r)
        }
        weekDay(r) {
            if (!arguments.length || le(r))
                return this.utcMode ? this.value.getUTCDay() : this.value.getDay();
            let l = this.weekDay()
              , e = r - l;
            return this.day(this.day() + e),
            this
        }
        get(r) {
            return typeof this[r] != "function" ? this : this[r]()
        }
        set(r, l) {
            return typeof this[r] != "function" ? this : this[r](l)
        }
        add(r, l) {
            switch (l) {
            case Y.h:
                return this.time(this.time() + r * 60 * 60 * 1e3);
            case Y.m:
                return this.time(this.time() + r * 60 * 1e3);
            case Y.s:
                return this.time(this.time() + r * 1e3);
            case Y.ms:
                return this.time(this.time() + r);
            case Y.D:
                return this.day(this.day() + r);
            case Y.W:
                return this.day(this.day() + r * 7);
            case Y.M:
                return this.month(this.month() + r);
            case Y.Y:
                return this.year(this.year() + r)
            }
        }
        addHour(r) {
            return this.add(r, Y.h)
        }
        addMinute(r) {
            return this.add(r, Y.m)
        }
        addSecond(r) {
            return this.add(r, Y.s)
        }
        addMs(r) {
            return this.add(r, Y.ms)
        }
        addDay(r) {
            return this.add(r, Y.D)
        }
        addWeek(r) {
            return this.add(r, Y.W)
        }
        addMonth(r) {
            return this.add(r, Y.M)
        }
        addYear(r) {
            return this.add(r, Y.Y)
        }
        format(r, l) {
            let e = r || Ut
              , o = O.getLocale(l || this.locale)
              , a = this.year()
              , i = this.year2()
              , s = this.month()
              , c = this.day()
              , d = this.weekDay()
              , p = this.hour()
              , m = this.minute()
              , g = this.second()
              , f = this.ms()
              , u = {
                YY: i,
                YYYY: a,
                M: s + 1,
                MM: ct(s + 1, 0, 2),
                MMM: o.monthsShort[s],
                MMMM: o.months[s],
                D: c,
                DD: ct(c, 0, 2),
                d,
                dd: o.weekdaysMin[d],
                ddd: o.weekdaysShort[d],
                dddd: o.weekdays[d],
                H: p,
                HH: ct(p, 0, 2),
                m,
                mm: ct(m, 0, 2),
                s: g,
                ss: ct(g, 0, 2),
                sss: ct(f, 0, 3)
            };
            return e.replace(ol, (h, b) => b || u[h])
        }
        valueOf() {
            return this.value.valueOf()
        }
        toString() {
            return this.value.toString()
        }
    }
    ,
    I(O, "locales", {
        en: il,
        ua: nl,
        de: ll
    }),
    O), _ = (...t) => t && t[0]instanceof F ? t[0] : new F(...t), sl = F.prototype.format, cl = {
        buddhist() {
            return this.year() + 543
        },
        format(t, r) {
            t = t || Ut;
            let l = {
                BB: (this.buddhist() + "").slice(-2),
                BBBB: this.buddhist()
            }
              , e = t.replace(/(\[[^\]]+])|B{4}|B{2}/g, (o, a) => a || l[o]);
            return sl.bind(this)(e, r)
        }
    };
    Object.assign(F.prototype, cl);
    var dl = (t, r) => {
        let l = t instanceof F ? t.clone().align("month") : _(t), e = r === 0 || r ? r : t.weekStart, o = e ? l.isoWeekDay() : l.weekDay(), a = F.getLocale(l.locale), i = _(), s, c = (p, m) => {
            if (m === 0)
                return p;
            let g = p[0];
            return p.slice(1).concat([g])
        }
        , d = {
            month: a.months[l.month()],
            days: [],
            weekstart: r ? 1 : 0,
            weekdays: c(a.weekdaysMin, e),
            today: i.format("YYYY-MM-DD"),
            weekends: [],
            week: []
        };
        for (l.addDay(e ? -o + 1 : -o),
        s = 0; s < 42; s++)
            d.days.push(l.format("YYYY-MM-DD")),
            l.add(1, "day");
        for (d.weekends = d.days.filter(function(p, m) {
            return e === 0 ? [0, 6, 7, 13, 14, 20, 21, 27, 28, 34, 35, 41].includes(m) : [5, 6, 12, 13, 19, 20, 26, 27, 33, 34, 40, 41].includes(m)
        }),
        l = i.clone(),
        o = e ? l.isoWeekDay() : l.weekDay(),
        l.addDay(e ? -o + 1 : -o),
        s = 0; s < 7; s++)
            d.week.push(l.format("YYYY-MM-DD")),
            l.add(1, "day");
        return d
    }
    ;
    Object.assign(F.prototype, {
        calendar(t) {
            return dl(this, t)
        }
    });
    var pl = F.prototype.format;
    Object.assign(F.prototype, {
        century() {
            return Math.ceil(this.year() / 100)
        },
        format(t, r) {
            t = t || Ut;
            let l = {
                C: this.century()
            }
              , e = t.replace(/(\[[^\]]+])|C/g, (o, a) => a || l[o]);
            return pl.bind(this)(e, r)
        }
    });
    Object.assign(F.prototype, {
        same(t) {
            return this.time() === _(t).time()
        },
        compare(t, r, l="=") {
            let e = _(t), o = _(this.value), a, i;
            switch (l = l || "=",
            ["<", ">", ">=", "<=", "=", "!="].includes(l) === !1 && (l = "="),
            r = (r || "ms").toLowerCase(),
            a = o.align(r).time(),
            i = e.align(r).time(),
            l) {
            case "<":
                return a < i;
            case ">":
                return a > i;
            case "<=":
                return a <= i;
            case ">=":
                return a >= i;
            case "=":
                return a === i;
            case "!=":
                return a !== i
            }
        },
        between(t, r) {
            return this.younger(t) && this.older(r)
        },
        older(t, r) {
            return this.compare(t, r, "<")
        },
        olderOrEqual(t, r) {
            return this.compare(t, r, "<=")
        },
        younger(t, r) {
            return this.compare(t, r, ">")
        },
        youngerOrEqual(t, r) {
            return this.compare(t, r, ">=")
        },
        equal(t, r) {
            return this.compare(t, r, "=")
        },
        notEqual(t, r) {
            return this.compare(t, r, "!=")
        },
        diff(t) {
            let r = _(t)
              , l = Math.abs(this.time() - r.time())
              , e = Math.abs(this.month() - r.month() + 12 * (this.year() - r.year()));
            return {
                ms: l,
                second: Math.ceil(l / 1e3),
                minute: Math.ceil(l / (1e3 * 60)),
                hour: Math.ceil(l / (1e3 * 60 * 60)),
                day: Math.ceil(l / (1e3 * 60 * 60 * 24)),
                month: e,
                year: Math.floor(e / 12)
            }
        },
        distance(t, r) {
            return this.diff(t)[r]
        }
    });
    Object.assign(F.prototype, {
        isLeapYear() {
            let t = this.year();
            return t % 4 === 0 && t % 100 !== 0 || t % 400 === 0
        }
    });
    Object.assign(F.prototype, {
        dayOfYear() {
            let t = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]
              , r = this.month()
              , l = this.day();
            return t[r] + l + (r > 1 && this.isLeapYear() ? 1 : 0)
        }
    });
    Object.assign(F.prototype, {
        daysInMonth() {
            return _(this.value).add(1, "month").day(1).add(-1, "day").day()
        },
        daysInYear() {
            return this.isLeapYear() ? 366 : 365
        },
        daysInYearMap() {
            let t = []
              , r = _(this.value);
            r.month(0).day(1);
            for (let l = 0; l < 12; l++)
                r.add(1, "month").add(-1, "day"),
                t.push(r.day()),
                r.day(1).add(1, "month");
            return t
        },
        daysInYearObj(t, r) {
            let l = this.daysInYearMap()
              , e = {}
              , o = F.getLocale(t || this.locale);
            return l.forEach( (a, i) => e[o[r ? "monthsShort" : "months"][i]] = a),
            e
        }
    });
    Object.assign(F.prototype, {
        decade() {
            return Math.floor(this.year() / 10) * 10
        },
        decadeStart() {
            let t = this.decade();
            return (this.mutable ? this : this.clone()).year(t).month(0).day(1)
        },
        decadeEnd() {
            let t = this.decade() + 9;
            return (this.mutable ? this : this.clone()).year(t).month(11).day(31)
        },
        decadeOfMonth() {
            let t = this.clone().add(1, "month").day(1).add(-1, "day").day() / 3
              , r = this.day();
            return r <= t ? 1 : r <= t * 2 ? 2 : 3
        }
    });
    Object.assign(F, {
        from(t, r, l) {
            let e, o, a, i, s, c, d, p, m, g, f, u, h, b, w, Q, C, B, x, v = function(S, T) {
                return S.map(function($) {
                    return $.toLowerCase()
                }).indexOf(T.toLowerCase())
            }, E = function(S) {
                let T = -1
                  , $ = F.getLocale(l || "en");
                return le(S) ? -1 : (T = v($.months, S),
                T === -1 && typeof $.monthsParental != "undefined" && (T = v($.monthsParental, S)),
                T === -1 && (S = S.substr(0, 3),
                T = v($.monthsShort, S)),
                T === -1 ? -1 : T + 1)
            }, k = function(S) {
                let T = {
                    month: ["M", "mm", "%m"],
                    day: ["D", "dd", "%d"],
                    year: ["YY", "YYYY", "yy", "yyyy", "%y"],
                    hour: ["h", "hh", "%h"],
                    minute: ["m", "mi", "i", "ii", "%i"],
                    second: ["s", "ss", "%s"],
                    ms: ["sss"]
                }, $ = -1, nt, Z;
                for (let ft = 0; ft < T[S].length; ft++)
                    if (nt = T[S][ft],
                    Z = a.indexOf(nt),
                    Z !== -1) {
                        $ = Z;
                        break
                    }
                return $
            };
            if (!r)
                return _();
            if (e = t.replace(/[\/,.:\s]/g, "-"),
            o = r.toLowerCase().replace(/[^a-zA-Z0-9%]/g, "-"),
            a = o.split("-"),
            i = e.split("-"),
            e.replace(/-/g, "").trim() === "")
                throw new Error(rr);
            return s = k("month"),
            c = k("day"),
            d = k("year"),
            p = k("hour"),
            m = k("minute"),
            g = k("second"),
            f = k("ms"),
            s > -1 && i[s] ? isNaN(parseInt(i[s])) ? (i[s] = E(i[s]),
            i[s] === -1 && (s = -1)) : (x = parseInt(i[s]),
            (x < 1 || x > 12) && (s = -1)) : s = -1,
            u = d > -1 && i[d] ? i[d] : 0,
            h = s > -1 && i[s] ? i[s] : 1,
            b = c > -1 && i[c] ? i[c] : 1,
            w = p > -1 && i[p] ? i[p] : 0,
            Q = m > -1 && i[m] ? i[m] : 0,
            C = g > -1 && i[g] ? i[g] : 0,
            B = f > -1 && i[f] ? i[f] : 0,
            _(u, h - 1, b, w, Q, C, B)
        }
    });
    var ml = F.prototype.format;
    Object.assign(F.prototype, {
        ampm(t) {
            let r = this.hour() < 12 ? "AM" : "PM";
            return t ? r.toLowerCase() : r
        },
        hour12: function(t, r) {
            let l = t;
            return arguments.length === 0 ? this.hour() % 12 : (r = r || "am",
            r.toLowerCase() === "pm" && (l += 12),
            this.hour(l))
        },
        format: function(t, r) {
            let l, e, o = this.hour12();
            return t = t || Ut,
            l = {
                a: "[" + this.ampm(!0) + "]",
                A: "[" + this.ampm(!1) + "]",
                h: o,
                hh: ct(o, 0, 2)
            },
            e = t.replace(/(\[[^\]]+])|a|A|h{1,2}/g, (a, i) => i || l[a]),
            ml.bind(this)(e, r)
        }
    });
    var gl = F.prototype.format
      , er = F.align
      , or = F.alignEnd;
    Object.assign(F, {
        align(t, r) {
            let l = _(t), e, o;
            switch (r) {
            case "isoWeek":
                o = l.isoWeekDay(),
                e = er(l, "day").addDay(-o + 1);
                break;
            default:
                e = er.apply(void 0, [l, r])
            }
            return e
        },
        alignEnd(t, r) {
            let l = _(t), e, o;
            switch (r) {
            case "isoWeek":
                o = l.isoWeekDay(),
                e = or(l, "day").addDay(7 - o);
                break;
            default:
                e = or.apply(void 0, [l, r])
            }
            return e
        }
    });
    Object.assign(F.prototype, {
        isoWeekDay(t) {
            let r = (this.weekDay() + 6) % 7 + 1;
            return !arguments.length || le(t) ? r : this.addDay(t - r)
        },
        format(t, r) {
            t = t || Ut;
            let l = {
                I: this.isoWeekDay()
            }
              , e = t.replace(/(\[[^\]]+])|I{1,2}/g, (o, a) => a || l[o]);
            return gl.bind(this)(e, r)
        }
    });
    Object.assign(F, {
        max() {
            return [].slice.call(arguments).map(r => _(r)).sort( (r, l) => l.time() - r.time())[0]
        }
    });
    Object.assign(F.prototype, {
        max() {
            return F.max.apply(this, [this].concat([].slice.call(arguments)))
        }
    });
    Object.assign(F, {
        min() {
            return [].slice.call(arguments).map(r => _(r)).sort( (r, l) => r.time() - l.time())[0]
        }
    });
    Object.assign(F.prototype, {
        min() {
            return F.min.apply(this, [this].concat([].slice.call(arguments)))
        }
    });
    var fl = F.align
      , ul = F.alignEnd
      , Al = F.prototype.add;
    Object.assign(F, {
        align(t, r) {
            let l = _(t), e;
            switch (r) {
            case "quarter":
                e = F.align(l, "day").day(1).month(l.quarter() * 3 - 3);
                break;
            default:
                e = fl.apply(this, [l, r])
            }
            return e
        },
        alignEnd(t, r) {
            let l = _(t), e;
            switch (r) {
            case "quarter":
                e = F.align(l, "quarter").add(3, "month").add(-1, "ms");
                break;
            default:
                e = ul.apply(this, [l, r])
            }
            return e
        }
    });
    Object.assign(F.prototype, {
        quarter() {
            let t = this.month();
            return t <= 2 ? 1 : t <= 5 ? 2 : t <= 8 ? 3 : 4
        },
        add(t, r) {
            return r === "quarter" ? this.month(this.month() + t * 3) : Al.bind(this)(t, r)
        },
        addQuarter(t) {
            return this.add(t, "quarter")
        }
    });
    Object.assign(F, {
        sort(t, r) {
            let l, e, o = {};
            switch (typeof r == "string" || typeof r != "object" || le(r) ? (o.format = Ut,
            o.dir = r && r.toUpperCase() === "DESC" ? "DESC" : "ASC",
            o.returnAs = "datetime") : (o.format = r.format || Ut,
            o.dir = (r.dir || "ASC").toUpperCase(),
            o.returnAs = r.format ? "string" : r.returnAs || "datetime"),
            e = t.map(a => _(a)).sort( (a, i) => a.valueOf() - i.valueOf()),
            o.dir === "DESC" && e.reverse(),
            o.returnAs) {
            case "string":
                l = e.map(a => a.format(o.format));
                break;
            case "date":
                l = e.map(a => a.val());
                break;
            default:
                l = e
            }
            return l
        }
    });
    var hl = F.prototype.format;
    Object.assign(F.prototype, {
        utcOffset() {
            return this.value.getTimezoneOffset()
        },
        timezone() {
            return this.toTimeString().replace(/.+GMT([+-])(\d{2})(\d{2}).+/, "$1$2:$3")
        },
        timezoneName() {
            return this.toTimeString().replace(/.+\((.+?)\)$/, "$1")
        },
        format(t, r) {
            t = t || Ut;
            let l = {
                Z: this.utcMode ? "Z" : this.timezone(),
                ZZ: this.timezone().replace(":", ""),
                ZZZ: "[GMT]" + this.timezone(),
                z: this.timezoneName()
            }
              , e = t.replace(/(\[[^\]]+])|Z{1,3}|z/g, (o, a) => a || l[o]);
            return hl.bind(this)(e, r)
        }
    });
    var bl = F.prototype.format;
    Object.assign(F.prototype, {
        weekNumber(t=0) {
            let r, l, e, o, a, i;
            return e = _(this.year(), 0, 1),
            o = e.weekDay() - t,
            o = o >= 0 ? o : o + 7,
            a = Math.floor((this.time() - e.time() - (this.utcOffset() - e.utcOffset()) * 6e4) / 864e5) + 1,
            o < 4 ? (i = Math.floor((a + o - 1) / 7) + 1,
            i > 52 && (r = _(this.year() + 1, 0, 1),
            l = r.weekDay() - t,
            l = l >= 0 ? l : l + 7,
            i = l < 4 ? 1 : 53)) : (i = Math.floor((a + o - 1) / 7),
            i === 0 && (i = _(this.year() - 1, 11, 31).weekNumber(t),
            t === 1 && a <= 7 - o && (i = 1))),
            i
        },
        isoWeekNumber() {
            let t = new Date(this.time());
            t.setHours(0, 0, 0, 0),
            t.setDate(t.getDate() + 3 - (t.getDay() + 6) % 7);
            let r = new Date(t.getFullYear(),0,4);
            return r.setDate(r.getDate() + 3 - (r.getDay() + 6) % 7),
            1 + Math.round(((t.getTime() - r.getTime()) / 864e5 - 3 + (r.getDay() + 6) % 7) / 7)
        },
        weeksInYear(t=0) {
            let l = _(this.value).month(11).day(31)
              , e = l.weekNumber(t);
            return e === 1 && l.weekDay() === t ? l.add(-1, "day").weekNumber(t) : e
        },
        format: function(t, r) {
            let l, e, o = this.weekNumber(), a = this.isoWeekNumber();
            return t = t || Ut,
            l = {
                W: o,
                WW: ct(o, 0, 2),
                WWW: a,
                WWWW: ct(a, 0, 2)
            },
            e = t.replace(/(\[[^\]]+])|W{1,4}/g, (i, s) => s || l[i]),
            bl.bind(this)(e, r)
        }
    });
    Object.assign(F.prototype, {
        strftime(t, r) {
            let l = t || al
              , e = F.getLocale(r || this.locale)
              , o = this.year()
              , a = this.year2()
              , i = this.month()
              , s = this.day()
              , c = this.weekDay()
              , d = this.hour()
              , p = this.hour12()
              , m = this.minute()
              , g = this.second()
              , f = this.ms()
              , u = this.time()
              , h = ct(s, 0, 2)
              , b = ct(i + 1, 0, 2)
              , w = ct(d, 0, 2)
              , Q = ct(p, 0, 2)
              , C = ct(m, 0, 2)
              , B = ct(g, 0, 2)
              , x = ct(f, 0, 3)
              , v = this
              , E = function() {
                return _(v.value).day(v.day() - (v.weekDay() + 6) % 7 + 3)
            }
              , k = {
                "%a": e.weekdaysShort[c],
                "%A": e.weekdays[c],
                "%b": e.monthsShort[i],
                "%h": e.monthsShort[i],
                "%B": e.months[i],
                "%c": this.toString().substring(0, this.toString().indexOf(" (")),
                "%C": this.century(),
                "%d": h,
                "%D": [h, b, o].join("/"),
                "%e": s,
                "%F": [o, b, h].join("-"),
                "%G": E().year(),
                "%g": ("" + E().year()).slice(2),
                "%H": w,
                "%I": Q,
                "%j": ct(this.dayOfYear(), 0, 3),
                "%k": w,
                "%l": Q,
                "%m": b,
                "%n": i + 1,
                "%M": C,
                "%p": this.ampm(),
                "%P": this.ampm(!0),
                "%s": Math.round(u / 1e3),
                "%S": B,
                "%u": this.isoWeekDay(),
                "%V": this.isoWeekNumber(),
                "%w": c,
                "%x": this.toLocaleDateString(),
                "%X": this.toLocaleTimeString(),
                "%y": a,
                "%Y": o,
                "%z": this.timezone().replace(":", ""),
                "%Z": this.timezoneName(),
                "%r": [Q, C, B].join(":") + " " + this.ampm(),
                "%R": [w, C].join(":"),
                "%T": [w, C, B].join(":"),
                "%Q": x,
                "%q": f,
                "%t": this.timezone()
            };
            return l.replace(rl, S => k[S] === 0 || k[S] ? k[S] : S)
        }
    });
    Object.assign(F, {
        isToday(t) {
            let r = _(t).align("day")
              , l = _().align("day");
            return r.time() === l.time()
        }
    });
    Object.assign(F.prototype, {
        isToday() {
            return F.isToday(this)
        },
        today() {
            let t = _();
            return this.mutable ? this.val(t.val()) : t
        }
    });
    Object.assign(F, {
        isTomorrow(t) {
            let r = _(t).align("day")
              , l = _().align("day").add(1, "day");
            return r.time() === l.time()
        }
    });
    Object.assign(F.prototype, {
        isTomorrow() {
            return F.isTomorrow(this)
        },
        tomorrow() {
            return this.mutable ? this.add(1, "day") : this.clone().immutable(!1).add(1, "day").immutable(!this.mutable)
        }
    });
    Object.assign(F.prototype, {
        toDateString() {
            return this.value.toDateString()
        },
        toISOString() {
            return this.value.toISOString()
        },
        toJSON() {
            return this.value.toJSON()
        },
        toGMTString() {
            return this.value.toGMTString()
        },
        toLocaleDateString() {
            return this.value.toLocaleDateString()
        },
        toLocaleString() {
            return this.value.toLocaleString()
        },
        toLocaleTimeString() {
            return this.value.toLocaleTimeString()
        },
        toTimeString() {
            return this.value.toTimeString()
        },
        toUTCString() {
            return this.value.toUTCString()
        },
        toDate() {
            return new Date(this.value)
        }
    });
    Object.assign(F, {
        timestamp() {
            return new Date().getTime() / 1e3
        }
    });
    Object.assign(F.prototype, {
        unix(t) {
            let r;
            return !arguments.length || le(t) ? Math.floor(this.valueOf() / 1e3) : (r = t * 1e3,
            this.mutable ? this.time(r) : _(this.value).time(r))
        },
        timestamp() {
            return this.unix()
        }
    });
    Object.assign(F, {
        isYesterday(t) {
            let r = _(t).align("day")
              , l = _().align("day").add(-1, "day");
            return r.time() === l.time()
        }
    });
    Object.assign(F.prototype, {
        isYesterday() {
            return F.isYesterday(this)
        },
        yesterday() {
            return this.mutable ? this.add(-1, "day") : this.clone().immutable(!1).add(-1, "day").immutable(!this.mutable)
        }
    });
    var ar = t => {
        let r, l = Math.floor(t / 1e3), e = Math.floor(l / 60), o = Math.floor(e / 60), a = Math.floor(o / 24), i = Math.floor(a / 30), s = Math.floor(i / 12);
        return s >= 1 && (r = `${s} year`),
        i >= 1 && s < 1 && (r = `${i} mon`),
        a >= 1 && a <= 30 && (r = `${a} days`),
        o && o < 24 && (r = `${o} hour`),
        e && e >= 40 && e < 60 && (r = "less a hour"),
        e && e < 40 && (r = `${e} min`),
        l && l >= 30 && l < 60 && (r = `${l} sec`),
        l < 30 && (r = "few sec"),
        r
    }
    ;
    Object.assign(F, {
        timeLapse(t) {
            let r = _(t)
              , l = _()
              , e = l - r;
            return ar(e)
        }
    });
    Object.assign(F.prototype, {
        timeLapse() {
            let t = _() - +this;
            return ar(t)
        }
    });
    var xl = {
        parseTime(t) {
            if (!isNaN(t))
                return Math.abs(+t);
            let r = /([0-9]+d)|([0-9]{1,2}h)|([0-9]{1,2}m)|([0-9]{1,2}s)/gm;
            return t.match(r).reduce( (e, o) => {
                let a;
                return o.includes("d") ? a = 1e3 * 60 * 60 * 24 * parseInt(o) : o.includes("h") ? a = 1e3 * 60 * 60 * parseInt(o) : o.includes("m") ? a = 1e3 * 60 * parseInt(o) : o.includes("s") && (a = 1e3 * parseInt(o)),
                e + a
            }
            , 0)
        }
    };
    Object.assign(F, xl);
    Object.assign(F.prototype, {
        moon() {
            let t = ["new-moon", "waxing-crescent", "first-quarter", "waxing-gibbous", "full-moon", "waning-gibbous", "last-quarter", "waning-crescent"];
            return ( () => {
                let l = this.year(), e = this.month(), o = this.day(), a, i, s, c = a = i = s = 0;
                return e < 3 && (l--,
                e += 12),
                ++e,
                c = 365.25 * l,
                a = 30.6 * e,
                i = c + a + o - 694039.09,
                i /= 29.5305882,
                s = parseInt(i),
                i -= s,
                s = Math.round(i * 8),
                s >= 8 && (s = 0),
                {
                    phase: s,
                    name: t[s]
                }
            }
            )()
        }
    });
    var wl = "3.2.5"
      , vl = "18.05.2025, 14:46:05"
      , Bl = () => {
        console.info(`%c Datetime %c v${wl} %c ${vl} `, "color: #ffffff; font-weight: bold; background: #003152", "color: white; background: darkgreen", "color: white; background: #0080fe;")
    }
    ;
    F.info = Bl;
    F.correctDate = t => _(t).addDay(1).align("day").addMinute(new Date().getTimezoneOffset());
    globalThis.Datetime = F;
    globalThis.datetime = _;
    ( () => {
        "use strict";
        let t = ["january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"]
          , r = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]
          , l = F.getLocale;
        F.getLocale = function(e="en") {
            let o = e;
            if (!Metro)
                return l.call(this, e);
            Metro.locales[o] || (o = "en");
            let a = Metro.locales[o]
              , i = t.map( (m, g) => a[m])
              , s = t.map( (m, g) => a[`${m}_short`])
              , c = r.map( (m, g) => a[m])
              , d = r.map( (m, g) => a[`${m}_short`])
              , p = r.map( (m, g) => a[`${m}_short_2`]);
            return {
                months: i,
                monthsShort: s,
                weekdays: c,
                weekdaysShort: d,
                weekdaysMin: p,
                weekStart: a.weekStart
            }
        }
    }
    )();
    var kl = Object.defineProperty
      , El = (t, r) => {
        for (var l in r)
            kl(t, l, {
                get: r[l],
                enumerable: !0
            })
    }
      , nr = {};
    El(nr, {
        append: () => Zr,
        camelCase: () => sr,
        capitalize: () => He,
        chars: () => ce,
        count: () => hr,
        countChars: () => lo,
        countSubstr: () => br,
        countUniqueChars: () => so,
        countUniqueWords: () => jl,
        countWords: () => Tl,
        dashedName: () => cr,
        decapitalize: () => dr,
        endsWith: () => Ur,
        escapeHtml: () => xr,
        first: () => Er,
        includes: () => Vr,
        insert: () => Yr,
        isAlpha: () => Nr,
        isAlphaDigit: () => Sr,
        isBlank: () => jr,
        isDigit: () => Tr,
        isEmpty: () => xo,
        isLower: () => Rr,
        isString: () => Xr,
        isUpper: () => _r,
        kebab: () => pr,
        last: () => yr,
        lower: () => Pe,
        lpad: () => Mr,
        ltrim: () => ho,
        matches: () => qr,
        nvl: () => oa,
        pad: () => zr,
        prepend: () => $r,
        prune: () => Ir,
        repeat: () => ye,
        reverse: () => mr,
        rpad: () => Fr,
        rtrim: () => bo,
        shorten: () => ea,
        shuffle: () => gr,
        slice: () => Cr,
        snake: () => fr,
        split: () => Or,
        sprintf: () => ke,
        startsWith: () => Jr,
        strip: () => Lr,
        stripBoom: () => ta,
        stripTags: () => Hr,
        stripTagsAll: () => Gr,
        substring: () => de,
        swap: () => ur,
        title: () => Ar,
        trim: () => Qe,
        truncate: () => Ao,
        truncateWithAlign: () => Qr,
        unescapeHtml: () => vr,
        unique: () => Br,
        uniqueWords: () => kr,
        upper: () => uo,
        vsprintf: () => Pr,
        words: () => Nt,
        wrap: () => Kr,
        wrapTag: () => Wr
    });
    var po = "\\d"
      , Ge = "\\s\\uFEFF\\xA0"
      , Rt = "\\uD800-\\uDBFF"
      , _t = "\\uDC00-\\uDFFF"
      , Lt = "\\u0300-\\u036F\\u1AB0-\\u1AFF\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE20-\\uFE2F"
      , lr = "\\0-\\u02FF\\u0370-\\u1AAF\\u1B00-\\u1DBF\\u1E00-\\u20CF\\u2100-\\uD7FF\\uE000-\\uFE1F\\uFE30-\\uFFFF"
      , yl = "\\u2000-\\u206F"
      , Ql = "\\x00-\\x2F\\x3A-\\x40\\x5B-\\x60\\x7b-\\xBF\\xD7\\xF7"
      , Cl = "\\u2700-\\u27BF"
      , _e = "a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F"
      , Je = "\\x41-\\x5a\\xc0-\\xd6\\xd8-\\xde\\u0100\\u0102\\u0104\\u0106\\u0108\\u010a\\u010c\\u010e\\u0110\\u0112\\u0114\\u0116\\u0118\\u011a\\u011c\\u011e\\u0120\\u0122\\u0124\\u0126\\u0128\\u012a\\u012c\\u012e\\u0130\\u0132\\u0134\\u0136\\u0139\\u013b\\u013d\\u013f\\u0141\\u0143\\u0145\\u0147\\u014a\\u014c\\u014e\\u0150\\u0152\\u0154\\u0156\\u0158\\u015a\\u015c\\u015e\\u0160\\u0162\\u0164\\u0166\\u0168\\u016a\\u016c\\u016e\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017b\\u017d\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018b\\u018e-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019c\\u019d\\u019f\\u01a0\\u01a2\\u01a4\\u01a6\\u01a7\\u01a9\\u01ac\\u01ae\\u01af\\u01b1-\\u01b3\\u01b5\\u01b7\\u01b8\\u01bc\\u01c4\\u01c5\\u01c7\\u01c8\\u01ca\\u01cb\\u01cd\\u01cf\\u01d1\\u01d3\\u01d5\\u01d7\\u01d9\\u01db\\u01de\\u01e0\\u01e2\\u01e4\\u01e6\\u01e8\\u01ea\\u01ec\\u01ee\\u01f1\\u01f2\\u01f4\\u01f6-\\u01f8\\u01fa\\u01fc\\u01fe\\u0200\\u0202\\u0204\\u0206\\u0208\\u020a\\u020c\\u020e\\u0210\\u0212\\u0214\\u0216\\u0218\\u021a\\u021c\\u021e\\u0220\\u0222\\u0224\\u0226\\u0228\\u022a\\u022c\\u022e\\u0230\\u0232\\u023a\\u023b\\u023d\\u023e\\u0241\\u0243-\\u0246\\u0248\\u024a\\u024c\\u024e"
      , df = new RegExp("([" + lr + "]|[" + Rt + "][" + _t + "]|[" + Rt + "](?![" + _t + "])|(?:[^" + Rt + "]|^)[" + _t + "])([" + Lt + "]+)","g")
      , pf = new RegExp("([" + Rt + "])([" + _t + "])","g")
      , mf = new RegExp("((?:[" + lr + "]|[" + Rt + "][" + _t + "]|[" + Rt + "](?![" + _t + "])|(?:[^" + Rt + "]|^)[" + _t + "])(?:[" + Lt + "]+))|([" + Rt + "][" + _t + "])|([\\n\\r\\u2028\\u2029])|(.)","g")
      , gf = new RegExp("[" + Ge + "]")
      , Il = new RegExp("^[" + Ge + "]+")
      , Dl = new RegExp("[" + Ge + "]+$")
      , Ml = new RegExp("^" + po + "+$")
      , Fl = /[<>&"'`]/g
      , zl = /(<([^>]+)>)/ig
      , mo = new RegExp("(?:[" + Je + "][" + Lt + "]*)?(?:[" + _e + "][" + Lt + "]*)+|(?:[" + Je + "][" + Lt + "]*)+(?![" + _e + "])|[" + po + "]+|[" + Cl + "]|[^" + Ql + yl + Ge + "]+","g")
      , go = /[A-Z\xC0-\xD6\xD8-\xDE]?[a-z\xDF-\xF6\xF8-\xFF]+|[A-Z\xC0-\xD6\xD8-\xDE]+(?![a-z\xDF-\xF6\xF8-\xFF])|\d+/g
      , Yl = new RegExp("^(?:[" + _e + Je + "][" + Lt + "]*)+$")
      , Ul = new RegExp("^((?:[" + _e + Je + "][" + Lt + "]*)|[" + po + "])+$")
      , fo = /^[\x01-\xFF]*$/
      , N = (t, r="") => !t && typeof t != "number" && typeof t != "boolean" ? r : typeof t == "string" ? t : Array.isArray(t) ? t.join("") : JSON.stringify(t)
      , ir = (t, r) => typeof t > "u" || t === null ? r : t
      , Nt = (t, r, l) => {
        let e;
        return r ? r instanceof RegExp ? e = r : e = new RegExp(r,ir(l, "")) : e = fo.test(t) ? go : mo,
        ir(N(t).match(e), [])
    }
      , He = (t, r=!1) => {
        let l = N(t)
          , e = l.substring(1);
        return l.substring(0, 1).toUpperCase() + (r ? e.toLowerCase() : e)
    }
      , sr = t => Nt(N(t)).map( (r, l) => l === 0 ? r.toLowerCase() : He(r)).join("")
      , cr = t => Nt(N(t)).map(r => r.toLowerCase()).join("-")
      , dr = t => {
        let r = N(t);
        return r.substring(0, 1).toLowerCase() + r.substr(1)
    }
      , pr = (t, r="-") => Nt(N(t)).map(l => l.toLowerCase()).join(r)
      , Pe = t => N(t).toLowerCase()
      , ce = (t, r=[]) => N(t).split("").filter(l => !r.includes(l))
      , mr = (t, r) => ce(N(t), r).reverse().join("")
      , Nl = (t=[]) => {
        let r = [...t], l = r.length, e, o;
        for (; l !== 0; )
            o = Math.floor(Math.random() * l),
            l -= 1,
            e = r[l],
            r[l] = r[o],
            r[o] = e;
        return r
    }
      , gr = t => Nl(N(t).split("")).join("")
      , fr = t => Nt(N(t)).map(r => r.toLowerCase()).join("_")
      , Sl = (t, r) => {
        let l = r.toLowerCase()
          , e = r.toUpperCase();
        return t + (r === l ? e : l)
    }
      , ur = t => N(t).split("").reduce(Sl, "")
      , Ar = (t, r, l="") => {
        let e = N(t)
          , o = fo.test(e) ? go : mo
          , a = Array.isArray(r) ? r : typeof r != "string" ? [] : r.split(l);
        return t.replace(o, (i, s) => s && a.includes(e[s - 1]) ? Pe(i) : He(i))
    }
      , uo = t => N(t).toUpperCase()
      , hr = t => N(t).length
      , Ve = (t=[]) => {
        let r = [...t];
        for (let l = 0; l < r.length; ++l)
            for (let e = l + 1; e < r.length; ++e)
                r[l] === r[e] && r.splice(e--, 1);
        return r
    }
      , lo = (t, r) => ce(t, r).length
      , so = (t, r) => Ve(ce(t, r)).length
      , br = (t, r="") => {
        let l = N(t)
          , e = N(r);
        return l === "" || e === "" ? 0 : l.split(e).length - 1
    }
      , Tl = (t, r, l) => Nt(t, r, l).length
      , jl = (t, r, l) => Ve(Nt(t, r, l)).length
      , Rl = {
        "<": "&lt;",
        ">": "&gt;",
        "&": "&amp;",
        '"': "&quot;",
        "'": "&#x27;",
        "`": "&#x60;"
    };
    function _l(t) {
        return Rl[t]
    }
    var xr = t => N(t).replace(Fl, _l)
      , wr = {
        "<": /(&lt;)|(&#x0*3c;)|(&#0*60;)/gi,
        ">": /(&gt;)|(&#x0*3e;)|(&#0*62;)/gi,
        "&": /(&amp;)|(&#x0*26;)|(&#0*38;)/gi,
        '"': /(&quot;)|(&#x0*22;)|(&#0*34;)/gi,
        "'": /(&#x0*27;)|(&#0*39;)/gi,
        "`": /(&#x0*60;)|(&#0*96;)/gi
    }
      , Jl = Object.keys(wr);
    function Gl(t, r) {
        return t.replace(wr[r], r)
    }
    var vr = t => Jl.reduce(Gl, N(t))
      , Br = (t, r) => Ve(ce(t, r)).join("")
      , kr = (t, r, l) => Ve(Nt(t, r, l)).join("")
      , de = (t, r, l) => N(t).substring(r, l)
      , Er = (t, r=0) => de(N(t), 0, r)
      , yr = (t, r=0) => {
        let l = N(t);
        return l ? de(l, l.length - r) : ""
    }
      , Hl = "\uFEFF"
      , Ee = (t, r, l=9007199254740991) => t < r ? r : t > l ? l : t
      , se = t => t === 1 / 0 ? 9007199254740991 : t === -1 / 0 ? -9007199254740991 : ~~t
      , Ao = (t, r=0, l="...") => {
        let e = N(t)
          , o = r ? Ee(se(r), 0, 9007199254740991) : e.length;
        return de(e, 0, o) + (e.length === o ? "" : l)
    }
      , Qr = (t, r=0, l="...") => {
        let e = Ao(t, r, "");
        return e.slice(t, e.lastIndexOf(" ")) + l
    }
      , Cr = (t, r=1) => {
        let l = N(t)
          , e = []
          , o = Math.round(l.length / r);
        for (let a = 0; a < r; a++)
            e.push(de(l, a * o, o));
        return e
    }
      , Ir = (t, r=0, l="") => {
        let e = N(t)
          , o = r ? Ee(se(r), 0, 9007199254740991) : e.length
          , a = 0
          , i = fo.test(e) ? go : mo;
        return e.replace(i, (s, c) => {
            let d = c + s.length;
            d <= o - l.length && (a = d)
        }
        ),
        e.substring(0, a) + l
    }
      , ye = (t, r=0) => {
        let l = N(t)
          , e = r ? Ee(se(r), 0, 9007199254740991) : l.length
          , o = l;
        if (r === 0)
            return "";
        for (let a = 0; a < e - 1; a++)
            l += o;
        return l
    }
      , co = (t, r=0) => {
        let l = t.length
          , e = r - l;
        return ye(t, e + 1).substring(0, r)
    }
      , Dr = (t, r="", l=0, e=!1) => {
        let o = N(t)
          , a = l ? Ee(se(l), 0, 9007199254740991) : o.length
          , i = r.length
          , s = a - o.length
          , c = s;
        if (s <= 0 || i === 0)
            return o;
        let d = co(r, c);
        return e ? d + o : o + d
    }
      , Mr = (t, r=" ", l=0) => Dr(t, r, l, !0)
      , Fr = (t, r=" ", l=0) => Dr(t, r, l, !1)
      , zr = (t, r="", l=0) => {
        let e = N(t)
          , o = l ? Ee(se(l), 0, 9007199254740991) : e.length
          , a = r.length
          , i = o - e.length
          , s = se(i / 2)
          , c = i % 2;
        return i <= 0 || a === 0 ? e : co(r, s) + e + co(r, s + c)
    }
      , Yr = (t, r="", l=0) => {
        let e = N(t);
        return e.substring(0, l) + r + e.substring(l)
    }
      , Pl = Array.prototype.reduce
      , Vl = Array.prototype.reduceRight
      , Qe = (t, r) => ho(bo(t, r), r)
      , ho = (t, r) => {
        let l = N(t);
        if (!r)
            return l.replace(Il, "");
        if (r === "" || l === "")
            return l;
        typeof r != "string" && (r = "");
        let e = !0;
        return Pl.call(l, (o, a) => e && r.includes(a) ? o : (e = !1,
        o + a), "")
    }
      , bo = (t, r) => {
        let l = N(t);
        if (!r)
            return l.replace(Dl, "");
        if (r === "" || l === "")
            return l;
        typeof r != "string" && (r = "");
        let e = !0;
        return Vl.call(l, (o, a) => e && r.includes(a) ? o : (e = !1,
        a + o), "")
    }
      , Ur = (t, r, l) => N(t).endsWith(r, l)
      , Nr = t => Yl.test(N(t))
      , Sr = t => Ul.test(N(t))
      , Tr = t => Ml.test(N(t))
      , jr = (t, r=!0) => r ? N(t).length === 0 : Qe(t).length === 0
      , xo = t => Qe(t).length === 0
      , Rr = t => Pe(t) === t
      , _r = t => uo(t) === t
      , Jr = (t, r, l) => N(t).startsWith(r, l)
      , Gr = t => N(t).replace(zl, "")
      , Hr = (t, r=[]) => {
        let l = N(t)
          , e = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi;
        return l.replace(e, (o, a) => r.includes(a) ? o : "")
    }
      , At = {
        not_string: /[^s]/,
        not_bool: /[^t]/,
        not_type: /[^T]/,
        not_primitive: /[^v]/,
        number: /[diefg]/,
        numeric_arg: /[bcdiefguxX]/,
        json: /[j]/,
        not_json: /[^j]/,
        text: /^[^\x25]+/,
        modulo: /^\x25{2}/,
        placeholder: /^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,
        key: /^([a-z_][a-z_\d]*)/i,
        key_access: /^\.([a-z_][a-z_\d]*)/i,
        index_access: /^\[(\d+)\]/,
        sign: /^[+-]/
    };
    function Ol(t, r) {
        let l = 1, e = t.length, o, a = "", i, s, c, d, p, m;
        for (let g = 0; g < e; g++)
            if (typeof t[g] == "string")
                a += t[g];
            else if (typeof t[g] == "object") {
                if (i = t[g],
                i.keys) {
                    o = r[l];
                    for (let f = 0; f < i.keys.length; f++) {
                        if (typeof o > "u")
                            throw new Error(ke('[sprintf] Cannot access property "%s" of undefined value "%s"', i.keys[f], i.keys[f - 1]));
                        o = o[i.keys[f]]
                    }
                } else
                    i.param_no ? o = r[i.param_no] : o = r[l++];
                if (At.not_type.test(i.type) && At.not_primitive.test(i.type) && o instanceof Function && (o = o()),
                At.numeric_arg.test(i.type) && typeof o != "number" && isNaN(o))
                    throw new TypeError(ke("[sprintf] expecting number but found %T", o));
                switch (At.number.test(i.type) && (p = o >= 0),
                i.type) {
                case "b":
                    o = parseInt(o, 10).toString(2);
                    break;
                case "c":
                    o = String.fromCharCode(parseInt(o, 10));
                    break;
                case "d":
                case "i":
                    o = parseInt(o, 10);
                    break;
                case "j":
                    o = JSON.stringify(o, null, i.width ? parseInt(i.width) : 0);
                    break;
                case "e":
                    o = i.precision ? parseFloat(o).toExponential(i.precision) : parseFloat(o).toExponential();
                    break;
                case "f":
                    o = i.precision ? parseFloat(o).toFixed(i.precision) : parseFloat(o);
                    break;
                case "g":
                    o = i.precision ? String(Number(o.toPrecision(i.precision))) : parseFloat(o);
                    break;
                case "o":
                    o = (parseInt(o, 10) >>> 0).toString(8);
                    break;
                case "s":
                    o = String(o),
                    o = i.precision ? o.substring(0, i.precision) : o;
                    break;
                case "t":
                    o = String(!!o),
                    o = i.precision ? o.substring(0, i.precision) : o;
                    break;
                case "T":
                    o = Object.prototype.toString.call(o).slice(8, -1).toLowerCase(),
                    o = i.precision ? o.substring(0, i.precision) : o;
                    break;
                case "u":
                    o = parseInt(o, 10) >>> 0;
                    break;
                case "v":
                    o = o.valueOf(),
                    o = i.precision ? o.substring(0, i.precision) : o;
                    break;
                case "x":
                    o = (parseInt(o, 10) >>> 0).toString(16);
                    break;
                case "X":
                    o = (parseInt(o, 10) >>> 0).toString(16).toUpperCase();
                    break
                }
                At.json.test(i.type) ? a += o : (At.number.test(i.type) && (!p || i.sign) ? (m = p ? "+" : "-",
                o = o.toString().replace(At.sign, "")) : m = "",
                c = i.pad_char ? i.pad_char === "0" ? "0" : i.pad_char.charAt(1) : " ",
                d = i.width - (m + o).length,
                s = i.width && d > 0 ? c.repeat(d) : "",
                a += i.align ? m + o + s : c === "0" ? m + s + o : s + m + o)
            }
        return a
    }
    var no = Object.create(null);
    function Ll(t) {
        if (no[t])
            return no[t];
        let r = t, l, e = [], o = 0;
        for (; r; ) {
            if ((l = At.text.exec(r)) !== null)
                e.push(l[0]);
            else if ((l = At.modulo.exec(r)) !== null)
                e.push("%");
            else if ((l = At.placeholder.exec(r)) !== null) {
                if (l[2]) {
                    o |= 1;
                    let a = []
                      , i = l[2]
                      , s = [];
                    if ((s = At.key.exec(i)) !== null)
                        for (a.push(s[1]); (i = i.substring(s[0].length)) !== ""; )
                            if ((s = At.key_access.exec(i)) !== null)
                                a.push(s[1]);
                            else if ((s = At.index_access.exec(i)) !== null)
                                a.push(s[1]);
                            else
                                throw new SyntaxError("[sprintf] failed to parse named argument key");
                    else
                        throw new SyntaxError("[sprintf] failed to parse named argument key");
                    l[2] = a
                } else
                    o |= 2;
                if (o === 3)
                    throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");
                e.push({
                    placeholder: l[0],
                    param_no: l[1],
                    keys: l[2],
                    sign: l[3],
                    pad_char: l[4],
                    align: l[5],
                    width: l[6],
                    precision: l[7],
                    type: l[8]
                })
            } else
                throw new SyntaxError("[sprintf] unexpected placeholder");
            r = r.substring(l[0].length)
        }
        return no[t] = e
    }
    var ke = t => Ol(Ll(t), arguments)
      , Pr = (t, r) => ke.apply(null, [t].concat(r || []))
      , Vr = (t, r, l) => N(t).includes(r, l)
      , Or = (t, r=void 0, l=void 0, e=!0) => N(t).split(r, l).map(o => e ? o.trim() : o).filter(o => e ? !xo(o) : !0)
      , Lr = (t, r=null, l="") => {
        let e = N(t), o;
        return r ? (o = new RegExp(r,"g"),
        e.replace(o, l)) : e
    }
      , Wr = (t, r="div", l={}) => {
        let e = N(t)
          , o = Object.keys(l).map(a => `${a}="${l[a]}"`).join(" ");
        return o && (o = " " + o),
        `<${r}${o}>${e}</${r}>`
    }
      , Kr = (t, r="", l="") => r + N(t) + l
      , Xr = t => typeof t == "string"
      , qr = (t, r, l="") => {
        let e = N(t), o;
        if (!(r instanceof RegExp)) {
            if (o = r ? Qe(N(r)) : "",
            !o)
                return !1;
            r = new RegExp(o,l)
        }
        return r.test(e)
    }
      , Zr = (t, r="", l=1) => N(t) + ye(r, l)
      , $r = (t, r="", l=1) => ye(r, l) + N(t)
      , ta = t => {
        let r = N(t);
        return r === "" ? r : r[0] === Hl ? r.substring(1) : r
    }
      , ea = (t, r=5, l="...") => t && `${t.substring(0, r)}${l}${t.substring(t.length - r)}`
      , Wl = t => typeof t > "u" || t === null
      , oa = (t, ...r) => {
        if (!Wl(t))
            return t;
        if (r.length === 0)
            throw new Error("nvl: No default value provided");
        for (let l of r)
            if (typeof l < "u" && l !== null)
                return l
    }
      , Ce = class {
        constructor(t="", {mutable: r=!0}={}) {
            this.value = t.toString(),
            this.mutable = r
        }
        [Symbol.toPrimitive](t) {
            return t === "number" ? +this.value : this.value
        }
        get[Symbol.toStringTag]() {
            return "Str"
        }
        val(t) {
            return typeof t > "u" || t === null ? this.value : (this.value = t.toString(),
            this)
        }
        get length() {
            return this.value.length
        }
        immutable(t=!0) {
            this.mutable = !t
        }
        toString() {
            return Array.isArray(this.value) ? this.value.join("") : this.value
        }
        _result(t) {
            return this.mutable ? (this.value = t,
            this) : wo(t)
        }
        camelCase() {
            return this._result(sr(this.value))
        }
        capitalize(t) {
            return this._result(He(this.value, t))
        }
        chars(t) {
            return this._result(ce(this.value, t))
        }
        count() {
            return hr(this.value)
        }
        countChars(t) {
            return lo(this.value, t)
        }
        countUniqueChars(t) {
            return so(this.value, t)
        }
        countSubstr(t) {
            return br(this.value, t)
        }
        countWords(t, r) {
            return lo(this.value, t, r)
        }
        countUniqueWords(t, r) {
            return so(this.value, t, r)
        }
        dashedName() {
            return this._result(cr(this.value))
        }
        decapitalize() {
            return this._result(dr(this.value))
        }
        endsWith(t, r) {
            return Ur(this.value, t, r)
        }
        escapeHtml() {
            return this._result(xr(this.value))
        }
        first() {
            return this._result(Er(this.value))
        }
        includes(t, r) {
            return Vr(this.value, t, r)
        }
        insert(t, r) {
            return this._result(Yr(this.value, t, r))
        }
        isAlpha() {
            return Nr(this.value)
        }
        isAlphaDigit() {
            return Sr(this.value)
        }
        isBlank(t) {
            return jr(this.value, t)
        }
        isDigit() {
            return Tr(this.value)
        }
        isEmpty() {
            return xo(this.value)
        }
        isLower() {
            return Rr(this.value)
        }
        static isString(t) {
            return Xr(t)
        }
        isUpper() {
            return _r(this.value)
        }
        kebab(t) {
            return this._result(pr(this.value, t))
        }
        last(t) {
            return this._result(yr(this.value, t))
        }
        lower() {
            return this._result(Pe(this.value))
        }
        matches(t, r) {
            return qr(this.value, t, r)
        }
        pad(t, r) {
            return this._result(zr(this.value, t, r))
        }
        lpad(t, r) {
            return this._result(Mr(this.value, t, r))
        }
        rpad(t, r) {
            return this._result(Fr(this.value, t, r))
        }
        prune(t, r) {
            return this._result(Ir(this.value, t, r))
        }
        repeat(t) {
            return this._result(ye(this.value, t))
        }
        append(t, r) {
            return this._result(Zr(this.value, t, r))
        }
        prepend(t, r) {
            return this._result($r(this.value, t, r))
        }
        reverse(t) {
            return this._result(mr(this.value, t))
        }
        shuffle() {
            return this._result(gr(this.value))
        }
        slice(t) {
            return this._result(Cr(this.value, t))
        }
        snake() {
            return this._result(fr(this.value))
        }
        split(t, r, l) {
            return this._result(Or(this.value, t, r, l))
        }
        sprintf(...t) {
            return this._result(ke(this.value, ...t))
        }
        vsprintf(...t) {
            return this._result(Pr(this.value, ...t))
        }
        startsWith(t, r) {
            return Jr(this.value, t, r)
        }
        stripBoom() {
            return this._result(ta(this.value))
        }
        stripTags(t) {
            return this._result(Hr(this.value, t))
        }
        stripTagsAll() {
            return this._result(Gr(this.value))
        }
        strip(t, r) {
            return this._result(Lr(this.value, t, r))
        }
        substring(t, r) {
            return this._result(de(this.value, t, r))
        }
        swap() {
            return this._result(ur(this.value))
        }
        title(t, r) {
            return this._result(Ar(this.value, t, r))
        }
        trim(t) {
            return this._result(Qe(this.value, t))
        }
        ltrim(t) {
            return this._result(ho(this.value, t))
        }
        rtrim(t) {
            return this._result(bo(this.value, t))
        }
        truncate(t, r) {
            return this._result(Ao(this.value, t, r))
        }
        truncateWithAlign(t, r) {
            return this._result(Qr(this.value, t, r))
        }
        unescapeHtml() {
            return this._result(vr(this.value))
        }
        unique(t) {
            return this._result(Br(this.value, t))
        }
        uniqueWords(t, r) {
            return this._result(kr(this.value, t, r))
        }
        upper() {
            return this._result(uo(this.value))
        }
        words(t, r) {
            return Nt(this.value, t, r)
        }
        wrap(t, r) {
            return this._result(Kr(this.value, t, r))
        }
        wrapTag(t) {
            return this._result(Wr(this.value, t))
        }
        shorten(t, r) {
            return this._result(ea(this.value, t, r))
        }
        nvl(...t) {
            return this._result(oa(this.value, ...t))
        }
    }
    ;
    Object.assign(Ce, nr);
    var wo = (t, r=!0) => new Ce(t,{
        mutable: r
    })
      , Kl = "0.10.2"
      , Xl = "18.05.2025, 14:39:06"
      , ql = () => {
        console.info(`%c String %c v${Kl} %c ${Xl} `, "color: #000000; font-weight: bold; background: #fff200", "color: white; background: darkgreen", "color: white; background: #0080fe;")
    }
    ;
    Ce.info = ql;
    globalThis.Str = Ce;
    globalThis.str = wo;
    var Zl = ["opacity", "zIndex"];
    function $l() {
        return null
    }
    function ts(t) {
        return typeof t == "string" || typeof t == "boolean" || typeof t == "number"
    }
    function ue(t) {
        let r = getComputedStyle(t)
          , l = !!(t.offsetWidth || t.offsetHeight || t.getClientRects().length)
          , e = r.visibility !== "hidden" && r.display !== "none" && r.opacity !== "0" && t.style.display !== "none";
        return l && e
    }
    function es(t) {
        let r = getComputedStyle(t);
        return !ue(t) || +r.opacity == 0 || t.hidden || r.visibility === "hidden"
    }
    function U(t) {
        return t == null
    }
    function pt(t) {
        return t.replace(/-([a-z])/g, function(r, l) {
            return l.toUpperCase()
        })
    }
    function os(t) {
        return t.replace(/([A-Z])/g, function(r) {
            return "-" + r.toLowerCase()
        })
    }
    function Xt(t) {
        let r;
        return !t || Object.prototype.toString.call(t) !== "[object Object]" ? !1 : (r = t.prototype !== void 0,
        r ? r.constructor && typeof r.constructor == "function" : !0)
    }
    function Wt(t) {
        for (let r in t)
            if (Gt(t, r))
                return !1;
        return !0
    }
    function Ae(t) {
        return t instanceof Object && "length"in t
    }
    function Kt(t, r) {
        return r = r || " ",
        t.split(r).map(function(l) {
            return ("" + l).trim()
        }).filter(function(l) {
            return l !== ""
        })
    }
    function pe(t, r) {
        return r || (r = [0, ""]),
        t = String(t),
        r[0] = parseFloat(t),
        r[1] = t.match(/[\d.\-+]*\s*(.*)/)[1] || "",
        r
    }
    function ca(t, r) {
        let l = /[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn|fr|lh|cqw|cqh|cqi|cqb|cqmin|cqmax|q)?$/.exec(t);
        return typeof l[1] != "undefined" ? l[1] : r
    }
    function ra(t, r, l) {
        r = pt(r),
        ["scrollLeft", "scrollTop"].indexOf(r) > -1 ? t[r] = parseInt(l) : t.style[r] = isNaN(l) || Zl.indexOf("" + r) > -1 ? l : parseInt(l) === 0 ? 0 : l + "px"
    }
    function da(t) {
        return t.nodeType === 1 || t.nodeType === 9 || !+t.nodeType
    }
    function vo(t) {
        return typeof t != "string" ? void 0 : t.replace(/-/g, "").toLowerCase()
    }
    function Gt(t, r) {
        return Object.prototype.hasOwnProperty.call(t, r)
    }
    function aa(t) {
        let r = t || globalThis.location.hostname;
        return r === "localhost" || r === "127.0.0.1" || r === "[::1]" || r === "" || r.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/) !== null
    }
    function rs() {
        return "ontouchstart"in window || navigator.maxTouchPoints > 0
    }
    function as(t) {
        let r = t || globalThis.location.hostname;
        return /(^localhost)|(^127\.)|(^192\.168\.)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2\d\.)|(^172\.3[0-1]\.)|(^::1$)|(^[fF][cCdD])/.test(r)
    }
    function is(t) {
        try {
            return JSON.parse(t)
        } catch (r) {
            return t
        }
    }
    var gt = Element.prototype.matches
      , A = (t, r) => new A.init(t,r);
    A.version = "1.5.1";
    A.build_time = "18.05.2025, 14:45:23";
    A.info = () => console.info(`%c Dom %c v${A.version} %c ${A.build_time} `, "color: white; font-weight: bold; background: #fd6a02", "color: white; background: darkgreen", "color: white; background: #0080fe;");
    A.fn = A.prototype = Object.create(Array.prototype);
    A.prototype.constructor = A;
    A.prototype.uid = "";
    A.extend = A.fn.extend = function() {
        let t, r, l = arguments[0] || {}, e = 1, o = arguments.length;
        for (typeof l != "object" && typeof l != "function" && (l = {}),
        e === o && (l = this,
        e--); e < o; e++)
            if ((t = arguments[e]) != null)
                for (r in t)
                    Gt(t, r) && (l[r] = t[r]);
        return l
    }
    ;
    A.assign = function() {
        let t, r, l = arguments[0] || {}, e = 1, o = arguments.length;
        for (typeof l != "object" && typeof l != "function" && (l = {}),
        e === o && (l = this,
        e--); e < o; e++)
            if ((t = arguments[e]) != null)
                for (r in t)
                    Gt(t, r) && t[r] !== void 0 && (l[r] = t[r]);
        return l
    }
    ;
    (function(t) {
        try {
            let s = new Blob([`
            var fakeIdToId = {};
            onmessage = function (event) {
                var data = event.data,
                    name = data.name,
                    fakeId = data.fakeId,
                    time;
                if(data.hasOwnProperty('time')) {
                    time = data.time;
                }
                switch (name) {
                    case 'setInterval':
                        fakeIdToId[fakeId] = setInterval(function () {
                            postMessage({fakeId: fakeId});
                        }, time);
                        break;
                    case 'clearInterval':
                        if (fakeIdToId.hasOwnProperty (fakeId)) {
                            clearInterval(fakeIdToId[fakeId]);
                            delete fakeIdToId[fakeId];
                        }
                        break;
                    case 'setTimeout':
                        fakeIdToId[fakeId] = setTimeout(function () {
                            postMessage({fakeId: fakeId});
                            if (fakeIdToId.hasOwnProperty (fakeId)) {
                                delete fakeIdToId[fakeId];
                            }
                        }, time);
                        break;
                    case 'clearTimeout':
                        if (fakeIdToId.hasOwnProperty (fakeId)) {
                            clearTimeout(fakeIdToId[fakeId]);
                            delete fakeIdToId[fakeId];
                        }
                        break;
                }
            }
        `]);
            t = window.URL.createObjectURL(s)
        } catch (s) {}
        let r, l = {}, e = 0, o = 2147483647, a = "";
        function i() {
            do
                e === o ? e = 0 : e++;
            while (l.hasOwnProperty(e));
            return e
        }
        if (typeof Worker != "undefined")
            try {
                r = new Worker(t),
                window.setInterval = function(s, c) {
                    let d = i();
                    return l[d] = {
                        callback: s,
                        parameters: Array.prototype.slice.call(arguments, 2)
                    },
                    r.postMessage({
                        name: "setInterval",
                        fakeId: d,
                        time: c
                    }),
                    d
                }
                ,
                window.clearInterval = function(s) {
                    l.hasOwnProperty(s) && (delete l[s],
                    r.postMessage({
                        name: "clearInterval",
                        fakeId: s
                    }))
                }
                ,
                window.setTimeout = function(s, c) {
                    let d = i();
                    return l[d] = {
                        callback: s,
                        parameters: Array.prototype.slice.call(arguments, 2),
                        isTimeout: !0
                    },
                    r.postMessage({
                        name: "setTimeout",
                        fakeId: d,
                        time: c
                    }),
                    d
                }
                ,
                window.clearTimeout = function(s) {
                    l.hasOwnProperty(s) && (delete l[s],
                    r.postMessage({
                        name: "clearTimeout",
                        fakeId: s
                    }))
                }
                ,
                window.setImmediate = function(s) {
                    return setTimeout(s, 0)
                }
                ,
                window.clearImmediate = function(s) {
                    clearTimeout(s)
                }
                ,
                r.onmessage = function(s) {
                    let c = s.data, d = c.fakeId, p, m, g;
                    if (l.hasOwnProperty(d) && (p = l[d],
                    g = p.callback,
                    m = p.parameters,
                    p.hasOwnProperty("isTimeout") && p.isTimeout && delete l[d]),
                    typeof g == "string")
                        try {
                            g = new Function(g)
                        } catch (f) {
                            console.error(a + "Error parsing callback code string: ", f)
                        }
                    typeof g == "function" && g.apply(window, m)
                }
                ,
                r.onerror = function(s) {
                    console.error(s)
                }
            } catch (s) {
                console.log("Can't create worker for Intervals, use standard functions.")
            }
    }
    )();
    A.fn.extend({
        _getDefaultElement(t) {
            let r;
            return U(t) ? r = this[0] : t instanceof HTMLElement ? r = t : t instanceof A && t.length > 0 ? r = t[0] : typeof t == "string" ? r = A(t)[0] : r = void 0,
            r
        },
        index: function(t) {
            let r, l = -1;
            return this.length === 0 || (r = this._getDefaultElement(t),
            !r) || r && r.parentNode && A.each(r.parentNode.children, function(e) {
                this === r && (l = e)
            }),
            l
        },
        indexOf: function(t) {
            let r, l = -1;
            return this.length === 0 || (r = this._getDefaultElement(t),
            !r) || this.each(function(e) {
                this === r && (l = e)
            }),
            l
        },
        get: function(t) {
            return t === void 0 ? this : t < 0 ? this[t + this.length] : t > this.length - 1 ? void 0 : this[t]
        },
        eq: function(t) {
            return U(t) ? this : this.length > 0 ? A.extend(A(this.get(t)), {
                _prevObj: this
            }) : this
        },
        is: function(t) {
            let r = !1;
            return this.length === 0 ? !1 : t instanceof A ? this.same(t) : (t === ":selected" ? this.each(function() {
                this.selected && (r = !0)
            }) : t === ":checked" ? this.each(function() {
                this.checked && (r = !0)
            }) : t === ":visible" ? (r = !1,
            this.each(function() {
                ue(this) && (r = !0)
            })) : t === ":hidden" ? this.each(function() {
                let l = getComputedStyle(this);
                (this.getAttribute("type") === "hidden" || this.hidden || l.display === "none" || l.visibility === "hidden" || parseInt(l.opacity) === 0) && (r = !0)
            }) : typeof t == "string" && [":selected"].indexOf(t) === -1 ? this.each(function() {
                gt.call(this, t) && (r = !0)
            }) : Ae(t) ? this.each(function() {
                let l = this;
                A.each(t, function() {
                    l === this && (r = !0)
                })
            }) : typeof t == "object" && t.nodeType === 1 && this.each(function() {
                this === t && (r = !0)
            }),
            r)
        },
        same: function(t) {
            let r = !0;
            return t instanceof A || (t = A(t)),
            this.length !== t.length ? !1 : (this.each(function() {
                t.items().indexOf(this) === -1 && (r = !1)
            }),
            r)
        },
        last: function() {
            return this.eq(this.length - 1)
        },
        first: function() {
            return this.eq(0)
        },
        odd: function() {
            let t = this.filter(function(r, l) {
                return (l + 1) % 2 !== 0
            });
            return A.extend(t, {
                _prevObj: this
            })
        },
        even: function() {
            let t = this.filter(function(r, l) {
                return (l + 1) % 2 === 0
            });
            return A.extend(t, {
                _prevObj: this
            })
        },
        filter: function(t) {
            if (typeof t == "string") {
                let r = t;
                t = function(l) {
                    return gt.call(l, r)
                }
            }
            return A.extend(A.merge(A(), [].filter.call(this, t)), {
                _prevObj: this
            })
        },
        find: function(t) {
            let r = [], l;
            return t instanceof A ? t : (this.length === 0 ? l = this : (this.each(function() {
                let e = this;
                typeof e.querySelectorAll != "undefined" && (r = r.concat([].slice.call(e.querySelectorAll(t))))
            }),
            l = A.merge(A(), r)),
            A.extend(l, {
                _prevObj: this
            }))
        },
        contains: function(t) {
            return this.find(t).length > 0
        },
        children: function(t) {
            let r, l = [];
            return t instanceof A ? t : (this.each(function() {
                let e = this;
                for (r = 0; r < e.children.length; r++)
                    e.children[r].nodeType === 1 && l.push(e.children[r])
            }),
            l = t ? l.filter(function(e) {
                return gt.call(e, t)
            }) : l,
            A.extend(A.merge(A(), l), {
                _prevObj: this
            }))
        },
        parent: function(t) {
            let r = [];
            if (this.length !== 0)
                return t instanceof A ? t : (this.each(function() {
                    this.parentNode && r.indexOf(this.parentNode) === -1 && r.push(this.parentNode)
                }),
                r = t ? r.filter(function(l) {
                    return gt.call(l, t)
                }) : r,
                r.length ? A.extend(A.merge(A(), r), {
                    _prevObj: this
                }) : void 0)
        },
        parents: function(t) {
            let r = [];
            if (this.length !== 0)
                return t instanceof A ? t : (this.each(function() {
                    let l = this.parentNode;
                    for (; l; )
                        l.nodeType === 1 && r.indexOf(l) === -1 && (U(t) || gt.call(l, t)) && r.push(l),
                        l = l.parentNode
                }),
                A.extend(A.merge(A(), r), {
                    _prevObj: this
                }))
        },
        siblings: function(t) {
            let r = [];
            if (this.length !== 0)
                return t instanceof A ? t : (this.each(function() {
                    let l = this;
                    l.parentNode && A.each(l.parentNode.children, function() {
                        l !== this && r.push(this)
                    })
                }),
                t && (r = r.filter(function(l) {
                    return gt.call(l, t)
                })),
                A.extend(A.merge(A(), r), {
                    _prevObj: this
                }))
        },
        _siblingAll: function(t, r) {
            let l = [];
            if (this.length !== 0)
                return r instanceof A ? r : (this.each(function() {
                    let e = this;
                    for (; e && (e = e[t],
                    !!e); )
                        l.push(e)
                }),
                r && (l = l.filter(function(e) {
                    return gt.call(e, r)
                })),
                A.extend(A.merge(A(), l), {
                    _prevObj: this
                }))
        },
        _sibling: function(t, r) {
            let l = [];
            if (this.length !== 0)
                return r instanceof A ? r : (this.each(function() {
                    let e = this[t];
                    e && e.nodeType === 1 && l.push(e)
                }),
                r && (l = l.filter(function(e) {
                    return gt.call(e, r)
                })),
                A.extend(A.merge(A(), l), {
                    _prevObj: this
                }))
        },
        prev: function(t) {
            return this._sibling("previousElementSibling", t)
        },
        next: function(t) {
            return this._sibling("nextElementSibling", t)
        },
        prevAll: function(t) {
            return this._siblingAll("previousElementSibling", t)
        },
        nextAll: function(t) {
            return this._siblingAll("nextElementSibling", t)
        },
        closest: function(t) {
            let r = [];
            if (this.length === 0)
                return;
            if (!t)
                return this.parent();
            let l = this[0];
            for (; l; ) {
                if (gt.call(l, t)) {
                    r.push(l);
                    break
                }
                l = l.parentElement
            }
            return A.extend(A.merge(A(), r.reverse()), {
                _prevObj: this
            })
        },
        has: function(t) {
            let r = [];
            if (this.length !== 0)
                return this.each(function() {
                    A(this).children(t).length > 0 && r.push(this)
                }),
                A.extend(A.merge(A(), r), {
                    _prevObj: this
                })
        },
        back: function(t) {
            let r;
            if (t === !0)
                for (r = this._prevObj; r && r._prevObj; )
                    r = r._prevObj;
            else
                r = this._prevObj ? this._prevObj : this;
            return r
        }
    });
    function ia(t, r=document.body) {
        let l = document.createElement("script");
        if (l.type = "text/javascript",
        U(t))
            return A(l);
        let e = A(t)[0];
        return e.src ? l.src = e.src : l.textContent = e.innerText,
        e.type && (l.type = e.type),
        e.async && (l.async = e.async),
        r.appendChild(l),
        e.parentNode && e.parentNode.removeChild(e),
        l
    }
    A.extend({
        script: function(t, r) {
            if (!U(t))
                if (t instanceof A && (t = t[0]),
                t.tagName && t.tagName === "SCRIPT")
                    ia(t, r);
                else {
                    let l = A(t).find("script");
                    A.each(l, function() {
                        ia(this, r)
                    })
                }
        },
        loadScript: function(t, r=document.body, l) {
            let e = document.createElement("script");
            e.type = "text/javascript",
            e.src = t,
            e.onload = l,
            r.appendChild(e)
        }
    });
    A.fn.extend({
        script: function(t) {
            return this.each(function() {
                A.script(this, t)
            })
        }
    });
    A.fn.extend({
        _prop: function(t, r) {
            return arguments.length === 1 ? this.length === 0 ? void 0 : this[0][t] : (U(r) && (r = ""),
            this.each(function() {
                let l = this;
                l[t] = r,
                t === "innerHTML" && A.script(l, l)
            }))
        },
        prop: function(t, r) {
            return arguments.length === 1 ? this._prop(t) : this._prop(t, typeof r == "undefined" ? "" : r)
        },
        val: function(t) {
            return U(t) ? this.length === 0 ? void 0 : this[0].value : this.each(function() {
                let r = A(this);
                typeof this.value != "undefined" ? this.value = t : r.html(t)
            })
        },
        html: function(t) {
            let r = this
              , l = [];
            return arguments.length === 0 ? this._prop("innerHTML") : (t instanceof A ? t.each(function() {
                l.push(A(this).outerHTML())
            }) : l.push(t),
            r._prop("innerHTML", l.join(`
`)),
            this)
        },
        outerHTML: function() {
            return this._prop("outerHTML")
        },
        text: function(t) {
            return arguments.length === 0 ? this._prop("textContent") : this._prop("textContent", typeof t == "undefined" ? "" : t)
        },
        innerText: function(t) {
            return arguments.length === 0 ? this._prop("innerText") : this._prop("innerText", typeof t == "undefined" ? "" : t)
        },
        empty: function() {
            return this.each(function() {
                typeof this.innerHTML != "undefined" && (this.innerHTML = ""),
                typeof this.value != "undefined" && (this.value = "")
            })
        },
        clear: function() {
            return this.empty()
        }
    });
    A.each = function(t, r) {
        let l = 0;
        if (typeof t != "object" && (t = []),
        Ae(t))
            [].forEach.call(t, function(e, o) {
                r.apply(e, [o, e])
            });
        else
            for (let e in t)
                Gt(t, e) && r.apply(t[e], [e, t[e], l++]);
        return t
    }
    ;
    A.fn.extend({
        each: function(t) {
            return A.each(this, t)
        }
    });
    var Ie = function(t) {
        this.expando = "DATASET:UID:" + t.toUpperCase(),
        Ie.uid++
    };
    Ie.uid = -1;
    Ie.prototype = {
        cache: function(t) {
            let r = t[this.expando];
            return r || (r = {},
            da(t) && (t.nodeType ? t[this.expando] = r : Object.defineProperty(t, this.expando, {
                value: r,
                configurable: !0
            }))),
            r
        },
        set: function(t, r, l) {
            let e, o = this.cache(t);
            if (typeof r == "string")
                o[pt(r)] = l;
            else
                for (e in r)
                    Gt(r, e) && (o[pt(e)] = r[e]);
            return o
        },
        get: function(t, r) {
            let l = r === void 0 ? this.cache(t) : t[this.expando] && t[this.expando][pt(r)];
            if (r)
                return l !== void 0 ? l : t.getAttribute && t.getAttribute("data-" + os(r)) || void 0;
            l = V({}, t[this.expando]);
            for (let e of t.attributes)
                if (e.name.startsWith("data-")) {
                    let o = e.name.slice(5);
                    l[pt(o)] = e.value
                }
            return Wt(l) ? void 0 : l
        },
        access: function(t, r, l) {
            return r === void 0 || r && typeof r == "string" && l === void 0 ? this.get(t, r) : (this.set(t, r, l),
            l !== void 0 ? l : r)
        },
        remove: function(t, r) {
            let l = t[this.expando];
            if (l !== void 0) {
                if (r !== void 0) {
                    let e = Array.isArray(r) ? r : [r];
                    for (let o of e)
                        delete l[pt(o)],
                        t.removeAttribute && t.removeAttribute("data-" + o)
                }
                return (r === void 0 || Wt(l)) && (t.nodeType ? t[this.expando] = void 0 : delete t[this.expando]),
                !0
            }
        },
        hasData: function(t) {
            let r = t[this.expando];
            return r !== void 0 && !Wt(r)
        }
    };
    var Jt = new Ie("dom");
    A.extend({
        hasData: function(t) {
            return Jt.hasData(t)
        },
        data: function(t, r, l) {
            return Jt.access(t, r, l)
        },
        removeData: function(t, r) {
            return Jt.remove(t, r)
        },
        dataSet: function(t) {
            if (U(t))
                return Jt;
            if (["INTERNAL", "DOM"].indexOf(t.toUpperCase()) > -1)
                throw Error("You can not use reserved name for your dataset");
            return new Ie(t)
        }
    });
    A.fn.extend({
        data: function(t, r) {
            let l, e, o;
            if (this.length !== 0) {
                if (e = this[0],
                arguments.length === 0) {
                    if (e && (o = Jt.get(e),
                    e.nodeType === 1)) {
                        for (let a of e.attributes)
                            if (a.name.startsWith("data-")) {
                                let i = a.name.slice(5);
                                o[pt(i)] = a.value
                            }
                    }
                    return o
                }
                return arguments.length === 1 && (typeof t == "string" || Array.isArray(t)) ? (l = Jt.get(e, t),
                is(l)) : this.each(function() {
                    Jt.set(this, t, r)
                })
            }
        },
        removeData: function(t) {
            return typeof t == "undefined" ? this : this.each(function() {
                let r = Array.isArray(t) ? t : t.split(" ").map(l => l.trim()).filter(l => l !== "");
                for (let l of r)
                    Jt.remove(this, l)
            })
        },
        origin: function(t, r, l) {
            if (this.length === 0)
                return this;
            if (U(t) && U(r))
                return A.data(this[0]);
            if (U(r)) {
                let e = A.data(this[0], "origin-" + t);
                return U(e) ? l : e
            }
            return this.data("origin-" + t, r),
            this
        }
    });
    A.extend({
        device: /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(navigator.userAgent.toLowerCase()),
        localhost: aa(),
        isLocalhost: aa,
        touchable: rs(),
        isPrivateAddress: as,
        hashCode: function(t) {
            let r = 0, l, e;
            if (t.length === 0)
                return r;
            for (l = 0; l < t.length; l++)
                e = t.charCodeAt(l),
                r = (r << 5) - r + e,
                r |= 0;
            return r
        },
        uniqueId: function(t="salt") {
            let r;
            return typeof t == "function" ? r = t.name : typeof t == "string" && t ? r = t : typeof t == "string" && t.length === 0 ? r = "salt" : r = t.toString(),
            "dom-" + A.hashCode(r)
        },
        toArray: function(t) {
            let r, l = [];
            for (r = 0; r < t.length; r++)
                l.push(t[r]);
            return l
        },
        import: function(t) {
            let r = [];
            return this.each(t, function() {
                r.push(this)
            }),
            this.merge(A(), r)
        },
        merge: function(t, r) {
            let l = +r.length
              , e = 0
              , o = t.length;
            for (; e < l; e++)
                t[o++] = r[e];
            return t.length = o,
            t
        },
        type: function(t) {
            return Object.prototype.toString.call(t).replace(/^\[object (.+)]$/, "$1").toLowerCase()
        },
        isSelector: function(t) {
            if (typeof t != "string" || t.length === 0 || t === "#" || t === ".")
                return !1;
            try {
                return document.querySelector(t),
                !0
            } catch (r) {
                return !1
            }
        },
        remove: function(t) {
            return A(t).remove()
        },
        isPlainObject: Xt,
        isEmptyObject: Wt,
        isArrayLike: Ae,
        acceptData: da,
        not: U,
        parseUnit: pe,
        getUnit: ca,
        unit: pe,
        isVisible: ue,
        isHidden: es,
        matches: function(t, r) {
            return gt.call(t, r)
        },
        random: function(t, r) {
            return arguments.length === 1 && Ae(t) ? t[Math.floor(Math.random() * t.length)] : Math.floor(Math.random() * (r - t + 1) + t)
        },
        hasProp: Gt,
        dark: globalThis.matchMedia && globalThis.matchMedia("(prefers-color-scheme: dark)").matches,
        serializeToArray: function(t) {
            let r = A(t)[0];
            if (!r || r.nodeName !== "FORM") {
                console.warn("Element is not a HTMLFromElement");
                return
            }
            let l, e, o = [];
            for (l = r.elements.length - 1; l >= 0; l = l - 1)
                if (r.elements[l].name !== "")
                    switch (r.elements[l].nodeName) {
                    case "INPUT":
                        switch (r.elements[l].type) {
                        case "checkbox":
                        case "radio":
                            r.elements[l].checked && o.push(r.elements[l].name + "=" + encodeURIComponent(r.elements[l].value));
                            break;
                        case "file":
                            break;
                        default:
                            o.push(r.elements[l].name + "=" + encodeURIComponent(r.elements[l].value))
                        }
                        break;
                    case "TEXTAREA":
                        o.push(r.elements[l].name + "=" + encodeURIComponent(r.elements[l].value));
                        break;
                    case "SELECT":
                        switch (r.elements[l].type) {
                        case "select-one":
                            o.push(r.elements[l].name + "=" + encodeURIComponent(r.elements[l].value));
                            break;
                        case "select-multiple":
                            for (e = r.elements[l].options.length - 1; e >= 0; e = e - 1)
                                r.elements[l].options[e].selected && o.push(r.elements[l].name + "=" + encodeURIComponent(r.elements[l].options[e].value));
                            break
                        }
                        break;
                    case "BUTTON":
                        switch (r.elements[l].type) {
                        case "reset":
                        case "submit":
                        case "button":
                            o.push(r.elements[l].name + "=" + encodeURIComponent(r.elements[l].value));
                            break
                        }
                        break
                    }
            return o
        },
        serialize: function(t) {
            return A.serializeToArray(t).join("&")
        },
        viewport: function() {
            let t = window
              , r = document
              , l = r.documentElement
              , e = r.getElementsByTagName("body")[0]
              , o = t.innerWidth || l.clientWidth || e.clientWidth
              , a = t.innerHeight || l.clientHeight || e.clientHeight;
            return {
                width: o,
                height: a
            }
        }
    });
    A.fn.extend({
        items: function() {
            return A.toArray(this)
        }
    });
    var ns = Event.prototype.stopPropagation
      , ls = Event.prototype.preventDefault;
    Event.prototype.stopPropagation = function() {
        this.isPropagationStopped = !0,
        ns.apply(this, arguments)
    }
    ;
    Event.prototype.preventDefault = function() {
        this.isPreventedDefault = !0,
        ls.apply(this, arguments)
    }
    ;
    Event.prototype.stop = function(t) {
        return t ? this.stopImmediatePropagation() : this.stopPropagation()
    }
    ;
    A.extend({
        events: [],
        eventHooks: {},
        eventUID: -1,
        setEventHandler: function(t) {
            let r, l = -1, e, o;
            if (this.events.length > 0) {
                for (r = 0; r < this.events.length; r++)
                    if (this.events[r].handler === null) {
                        l = r;
                        break
                    }
            }
            return e = {
                element: t.el,
                event: t.event,
                handler: t.handler,
                selector: t.selector,
                ns: t.ns,
                id: t.id,
                options: t.options
            },
            l === -1 ? (this.events.push(e),
            o = this.events.length - 1) : (this.events[l] = e,
            o = l),
            o
        },
        getEventHandler: function(t) {
            if (this.events[t] !== void 0 && this.events[t] !== null)
                return this.events[t] = null,
                this.events[t].handler
        },
        off: function() {
            return A.each(this.events, function() {
                this.element.removeEventListener(this.event, this.handler, !0)
            }),
            this.events = [],
            this
        },
        getEvents: function() {
            return this.events
        },
        getEventHooks: function() {
            return this.eventHooks
        },
        addEventHook: function(t, r, l="before") {
            return A.each(Kt(t), (e, o) => {
                let a = pt(`${l}-${o}`);
                this.eventHooks[a] = r
            }
            ),
            this
        },
        removeEventHook: function(t, r="before") {
            return A.each(Kt(t), (l, e) => {
                delete this.eventHooks[pt(`${r}-${e}`)]
            }
            ),
            this
        },
        removeEventHooks: function(t) {
            let r = this;
            return U(t) ? this.eventHooks = {} : A.each(Kt(t), function() {
                delete r.eventHooks[pt("before-" + this)],
                delete r.eventHooks[pt("after-" + this)]
            }),
            this
        }
    });
    A.fn.extend({
        on: function(t, r, l, e) {
            if (this.length !== 0)
                return typeof r == "function" && (e = l || {},
                l = r,
                r = void 0),
                typeof e != "object" && (e = {}),
                this.each(function(o, a) {
                    A.each(Kt(t), (i, s) => {
                        let c, d = s.split("."), p = vo(d[0]), m = e.ns ? e.ns : d[1], g, f;
                        A.eventUID++,
                        c = u => {
                            let h = u.target
                              , b = A.eventHooks[pt("before-" + p)]
                              , w = A.eventHooks[pt("after-" + p)];
                            if (typeof b == "function" && b.call(h, u),
                            !r)
                                l.call(a, u);
                            else
                                for (; h && h !== a; ) {
                                    if (gt.call(h, r) && (l.call(h, u),
                                    u.isPropagationStopped)) {
                                        u.stopImmediatePropagation();
                                        break
                                    }
                                    h = h.parentNode
                                }
                            typeof w == "function" && w.call(h, u),
                            e.once && (g = +A(a).origin("event-" + u.type + (r ? ":" + r : "") + (m ? ":" + m : "")),
                            isNaN(g) || A.events.splice(g, 1))
                        }
                        ,
                        Object.defineProperty(c, "name", {
                            value: l.name && l.name !== "" ? l.name : "func_event_" + p + "_" + A.eventUID
                        }),
                        f = p + (r ? ":" + r : "") + (m ? ":" + m : ""),
                        a.addEventListener(p, c, Wt(e) ? !1 : e),
                        g = A.setEventHandler({
                            el: a,
                            event: p,
                            handler: c,
                            selector: r,
                            ns: m,
                            id: A.eventUID,
                            options: Wt(e) ? !1 : e
                        }),
                        A(a).origin("event-" + f, g)
                    }
                    )
                })
        },
        one: function(t, r, l, e={}) {
            return typeof r == "function" && (e = l || {},
            l = r,
            r = void 0),
            e.once = !0,
            this.on.apply(this, [t, r, l, e])
        },
        off: function(t, r, l) {
            return Xt(r) && (l = r,
            r = null),
            Xt(l) || (l = {}),
            U(t) || t.toLowerCase() === "all" ? this.each(function() {
                let e = this;
                A.each(A.events, function() {
                    let o = this;
                    o.element === e && (e.removeEventListener(o.event, o.handler, o.options),
                    o.handler = null,
                    A(e).origin("event-" + name + (o.selector ? ":" + o.selector : "") + (o.ns ? ":" + o.ns : ""), null))
                })
            }) : this.each(function() {
                let e = this;
                A.each(Kt(t), function() {
                    let o = this.split("."), a = vo(o[0]), i = l.ns ? l.ns : o[1], s, c;
                    s = "event-" + a + (r ? ":" + r : "") + (i ? ":" + i : ""),
                    c = A(e).origin(s),
                    c !== void 0 && A.events[c].handler && (e.removeEventListener(a, A.events[c].handler, A.events[c].options),
                    A.events[c].handler = null),
                    A(e).origin(s, null)
                })
            })
        },
        trigger: function(t, r) {
            return this.fire(t, r)
        },
        fire: function(t, r) {
            let l, e;
            if (this.length !== 0)
                return l = vo(t),
                ["focus", "blur"].indexOf(l) > -1 ? (this[0][l](),
                this) : (e = new CustomEvent(l,{
                    bubbles: !0,
                    cancelable: !0,
                    detail: r
                }),
                this.each(function() {
                    this.dispatchEvent(e)
                }))
        }
    });
    "blur focus resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu touchstart touchend touchmove touchcancel".split(" ").forEach(function(t) {
        A.fn[t] = function(r, l, e) {
            return arguments.length > 0 ? this.on(t, r, l, e) : this.fire(t)
        }
    });
    A.fn.extend({
        hover: function(t, r) {
            return this.mouseenter(t).mouseleave(r || t)
        }
    });
    A.ready = function(t, r) {
        document.addEventListener("DOMContentLoaded", t, r || !1)
    }
    ;
    A.load = function(t) {
        return A(window).on("load", t)
    }
    ;
    A.unload = function(t) {
        return A(window).on("unload", t)
    }
    ;
    A.fn.extend({
        unload: function(t) {
            return this.length === 0 || this[0].self !== window ? void 0 : A.unload(t)
        }
    });
    A.beforeunload = function(t) {
        return typeof t == "string" ? A(window).on("beforeunload", function(r) {
            return r.returnValue = t,
            t
        }) : A(window).on("beforeunload", t)
    }
    ;
    A.fn.extend({
        beforeunload: function(t) {
            return this.length === 0 || this[0].self !== window ? void 0 : A.beforeunload(t)
        }
    });
    A.fn.extend({
        ready: function(t) {
            if (this.length && this[0] === document && typeof t == "function")
                return A.ready(t)
        }
    });
    A.ajax = function(t) {
        return new Promise(function(r, l) {
            let e = new XMLHttpRequest, o = (t.method || "GET").toUpperCase(), a = [], i = U(t.async) ? !0 : t.async, s = t.url, c, d = function(g, f) {
                typeof g == "function" && g.apply(null, f)
            }, p = function(g) {
                return ["GET", "JSON"].indexOf(g) !== -1
            }, m = function(g) {
                let f = [];
                return A.each(g, function(u, h) {
                    let b = ts(h) ? h : JSON.stringify(h);
                    f.push(u + "=" + b)
                }),
                f.join("&")
            };
            if (t.data instanceof HTMLFormElement) {
                let g = t.data.getAttribute("action").trim()
                  , f = t.data.getAttribute("method").trim();
                U(s) && g && (s = g),
                f && (o = f.toUpperCase())
            }
            if (t.timeout && (e.timeout = t.timeout),
            t.withCredentials && (e.withCredentials = t.withCredentials),
            t.data instanceof HTMLFormElement)
                c = A.serialize(t.data);
            else if (t.data instanceof HTMLElement && t.data.getAttribute("type") && t.data.getAttribute("type").toLowerCase() === "file") {
                let g = t.data.getAttribute("name");
                c = new FormData;
                for (let f = 0; f < t.data.files.length; f++)
                    c.append(g, t.data.files[f])
            } else
                Xt(t.data) ? c = m(t.data) : t.data instanceof FormData || typeof t.data == "string" ? c = t.data : (c = new FormData,
                c.append("_data", JSON.stringify(t.data)));
            p(o) && (s += typeof c == "string" ? "?" + c : Wt(c) ? "" : "?" + JSON.stringify(c)),
            e.open(o, s, i, t.user, t.password),
            t.headers && A.each(t.headers, function(g, f) {
                e.setRequestHeader(g, f),
                a.push(g)
            }),
            p(o) || a.indexOf("Content-type") === -1 && t.contentType !== !1 && e.setRequestHeader("Content-type", "application/x-www-form-urlencoded"),
            e.send(c),
            e.addEventListener("load", function(g) {
                if (e.readyState === 4 && e.status < 300) {
                    let f = t.returnValue && t.returnValue === "xhr" ? e : e.response;
                    if (t.parseJson)
                        try {
                            f = JSON.parse(f)
                        } catch (u) {
                            f = {}
                        }
                    d(r, [f]),
                    d(t.onSuccess, [g, e])
                } else
                    d(l, [e]),
                    d(t.onFail, [g, e]);
                d(t.onLoad, [g, e])
            }),
            A.each(["readystatechange", "error", "timeout", "progress", "loadstart", "loadend", "abort"], function() {
                let g = pt("on-" + (this === "readystatechange" ? "state" : this));
                e.addEventListener(g, function(f) {
                    d(t[g], [f, e])
                })
            })
        }
        )
    }
    ;
    ["GET", "POST", "PUT", "PATCH", "DELETE", "JSON"].forEach(function(t) {
        A[t.toLowerCase()] = function(r, l, e) {
            let o = {
                method: t === "JSON" ? "GET" : t,
                url: r,
                data: l,
                parseJson: t === "JSON"
            };
            return A.ajax(A.extend({}, o, e))
        }
    });
    A.fn.extend({
        load: function(t, r, l) {
            let e = this;
            return this.length && this[0].self === window ? A.load(t) : A.get(t, r, l).then(function(o) {
                e.each(function() {
                    this.innerHTML = o
                })
            })
        }
    });
    A.fn.extend({
        style: function(t, r) {
            let l;
            function e(o, a, i) {
                return ["scrollLeft", "scrollTop"].includes(a) ? A(o)[a]() : getComputedStyle(o, i)[a]
            }
            if (!(typeof t == "string" && this.length === 0)) {
                if (this.length === 0)
                    return this;
                if (l = this[0],
                !t || t === "all")
                    return getComputedStyle(l, r);
                {
                    let o = {}
                      , a = t.split(", ").map(function(i) {
                        return ("" + pt(i)).trim()
                    });
                    return a.length === 1 ? e(l, a[0], r) : (A.each(a, function() {
                        let i = this;
                        o[this] = e(l, i, r)
                    }),
                    o)
                }
            }
        },
        removeStyleProperty: function(t) {
            if (U(t) || this.length === 0)
                return this;
            let r = t.split(", ").map(function(l) {
                return ("" + l).trim()
            });
            return this.each(function() {
                let l = this;
                A.each(r, function() {
                    l.style.removeProperty(this)
                })
            })
        },
        removeStyle: function(t) {
            if (!t)
                return this;
            let r = Kt(t, ", ");
            return this.each(function() {
                let l = this;
                A.each(r, function() {
                    l.style[this] = ""
                })
            })
        },
        css: function(t, r) {
            return t = t || "all",
            typeof t == "string" && U(r) ? this.style(t) : this.each(function(l, e) {
                typeof t == "object" ? A.each(t, function(o, a) {
                    ra(e, o, a)
                }) : typeof t == "string" && ra(e, t, r)
            })
        },
        cssVar: function(t, r) {
            if (!U(t))
                return U(r) ? getComputedStyle(this[0]).getPropertyValue("--" + t) : this.each(function() {
                    this.style.setProperty("--" + t, r)
                })
        }
    });
    A.fn.extend({
        addClass: function() {},
        removeClass: function() {},
        toggleClass: function() {},
        containsClass: function(t) {
            return this.hasClass(t)
        },
        hasClass: function(t) {
            if (U(t))
                return !1;
            let r = !1
              , l = t.split(" ").filter(e => ("" + e).trim() !== "");
            return this.each(function() {
                let e = this;
                A.each(l, function() {
                    !r && e.classList && e.classList.contains(this) && (r = !0)
                })
            }),
            r
        },
        clearClasses: function() {
            return this.each(function() {
                this.className = ""
            })
        },
        cls: function(t=!1) {
            return this.length === 0 ? void 0 : t ? this[0].className.split(" ") : this[0].className
        },
        removeClassBy: function(t) {
            return this.each(function() {
                let r = A(this)
                  , l = r.cls(!0);
                A.each(l, function() {
                    let e = this;
                    e.indexOf(t) > -1 && r.removeClass(e)
                })
            })
        },
        classNames: function() {
            let t = Array.prototype.slice.call(arguments, 0)
              , r = [];
            return A.each(t, function(l, e) {
                typeof e == "string" ? r.push(e) : Xt(e) ? A.each(e, function(o, a) {
                    a && r.push(o)
                }) : $l()
            }),
            this.each(function() {
                this.className += " " + r.join(" ")
            })
        }
    });
    ["add", "remove", "toggle"].forEach(function(t) {
        A.fn[t + "Class"] = function(r) {
            let l = r ? Array.isArray(r) ? r : r.split(" ").filter(function(e) {
                return !!e
            }) : [];
            return l.length ? this.each(function() {
                let e = this;
                typeof e.classList != "undefined" ? A.each(l, function(a, i) {
                    e.classList[t](i)
                }) : e.className += l.join(" ")
            }) : this
        }
    });
    A.parseHTML = function(t) {
        let r, l, e = [], o, a, i = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
        if (typeof t != "string" || t.trim() === "")
            return [];
        if (t = t.trim(),
        l = i.exec(t),
        l)
            e.push(document.createElement(l[1]));
        else {
            if (A.isSelector(t)) {
                let s = document.querySelectorAll(t);
                if (s.length)
                    for (let c of s)
                        e.push(c);
                return e.length === 0 && e.push(document.createTextNode(t)),
                e
            }
            o = document.implementation.createHTMLDocument(""),
            r = o.createElement("base"),
            r.href = document.location.href,
            o.head.appendChild(r),
            a = o.body,
            a.innerHTML = t;
            for (let s = 0; s < a.childNodes.length; s++)
                e.push(a.childNodes[s].cloneNode(!0))
        }
        return e
    }
    ;
    A.fn.extend({
        _size: function(t, r) {
            if (this.length !== 0) {
                if (U(r)) {
                    let l = this[0];
                    if (t === "height")
                        return l === window ? window.innerHeight : l === document ? l.body.clientHeight : parseInt(getComputedStyle(l).height);
                    if (t === "width")
                        return l === window ? window.innerWidth : l === document ? l.body.clientWidth : parseInt(getComputedStyle(l).width)
                }
                return this.each(function() {
                    let l = this;
                    l === window || l === document || (l.style[t] = isNaN(r) ? r : +r == 0 ? 0 : r + "px")
                })
            }
        },
        height: function(t) {
            return this._size("height", t)
        },
        width: function(t) {
            return this._size("width", t)
        },
        _sizeOut: function(t, r) {
            let l, e, o, a;
            if (this.length === 0)
                return;
            if (typeof r == "number")
                return this.each(function() {
                    let c = this;
                    if (c === window || c === document)
                        return;
                    let d, p = getComputedStyle(c), m = t === "width" ? parseInt(p.borderLeftWidth) + parseInt(p.borderRightWidth) : parseInt(p.borderTopWidth) + parseInt(p.borderBottomWidth), g = t === "width" ? parseInt(p.paddingLeft) + parseInt(p.paddingRight) : parseInt(p.paddingTop) + parseInt(p.paddingBottom);
                    d = A(this)[t](r)[t]() - m - g,
                    c.style[t] = d + "px"
                });
            let s = r === !0;
            return l = this[0],
            e = l[t === "width" ? "offsetWidth" : "offsetHeight"],
            o = getComputedStyle(l),
            a = e + parseInt(o[t === "width" ? "marginLeft" : "marginTop"]) + parseInt(o[t === "width" ? "marginRight" : "marginBottom"]),
            s ? a : e
        },
        outerWidth: function(t) {
            return this._sizeOut("width", t)
        },
        outerHeight: function(t) {
            return this._sizeOut("height", t)
        },
        padding: function(t) {
            if (this.length === 0)
                return;
            let r = getComputedStyle(this[0], t);
            return {
                top: parseInt(r.paddingTop),
                right: parseInt(r.paddingRight),
                bottom: parseInt(r.paddingBottom),
                left: parseInt(r.paddingLeft)
            }
        },
        margin: function(t) {
            if (this.length === 0)
                return;
            let r = getComputedStyle(this[0], t);
            return {
                top: parseInt(r.marginTop),
                right: parseInt(r.marginRight),
                bottom: parseInt(r.marginBottom),
                left: parseInt(r.marginLeft)
            }
        },
        border: function(t) {
            if (this.length === 0)
                return;
            let r = getComputedStyle(this[0], t);
            return {
                top: parseInt(r.borderTopWidth),
                right: parseInt(r.borderRightWidth),
                bottom: parseInt(r.borderBottomWidth),
                left: parseInt(r.borderLeftWidth)
            }
        }
    });
    A.fn.extend({
        offset: function(t) {
            if (t === void 0) {
                if (this.length === 0)
                    return;
                let r = this[0].getBoundingClientRect();
                return {
                    top: r.top + (window.scrollY || window.pageYOffset || document.documentElement.scrollTop || 0),
                    left: r.left + (window.scrollX || window.pageXOffset || document.documentElement.scrollLeft || 0)
                }
            }
            return this.each(function() {
                let {top: r, left: l} = t
                  , e = A(this)
                  , o = getComputedStyle(this).position
                  , a = this.getBoundingClientRect()
                  , i = {
                    top: a.top + (window.scrollY || window.pageYOffset || 0),
                    left: a.left + (window.scrollX || window.pageXOffset || 0)
                };
                o === "static" && e.css("position", "relative"),
                ["absolute", "fixed"].indexOf(o) === -1 && (r = r - i.top,
                l = l - i.left),
                r && e.css("top", r),
                l && e.css("left", l)
            })
        },
        position: function(t=!1) {
            let r = 0, l = 0, e, o;
            if (this.length !== 0)
                return e = this[0],
                o = getComputedStyle(e),
                t && (r = parseInt(o.marginLeft),
                l = parseInt(o.marginTop)),
                {
                    left: e.offsetLeft - r,
                    top: e.offsetTop - l
                }
        },
        left: function(t, r) {
            if (this.length !== 0)
                return U(t) ? this.position(r).left : typeof t == "boolean" ? (r = t,
                this.position(r).left) : this.each(function() {
                    A(this).css({
                        left: t
                    })
                })
        },
        top: function(t, r=!1) {
            if (this.length !== 0)
                return U(t) ? this.position(r).top : typeof t == "boolean" ? (r = t,
                this.position(r).top) : this.each(function() {
                    A(this).css({
                        top: t
                    })
                })
        },
        rect: function() {
            return this.length === 0 ? void 0 : this[0].getBoundingClientRect()
        },
        pos: function() {
            if (this.length === 0)
                return;
            let t = A(this[0]);
            return {
                top: parseInt(t.style("top")),
                left: parseInt(t.style("left"))
            }
        }
    });
    A.fn.extend({
        attr: function(t, r) {
            let l = {};
            if (!(this.length === 0 && arguments.length === 0))
                return this.length && arguments.length === 0 ? (A.each(this[0].attributes, function() {
                    l[this.name] = this.value
                }),
                l) : arguments.length === 1 && typeof t == "string" ? this.length && this[0].nodeType === 1 && this[0].hasAttribute(t) ? this[0].getAttribute(t) : void 0 : this.each(function() {
                    let e = this;
                    Xt(t) ? A.each(t, function(o, a) {
                        e.setAttribute(o, a)
                    }) : e.setAttribute(t, r)
                })
        },
        removeAttr: function(t) {
            let r;
            return t ? (r = typeof t == "string" ? t.split(",").map(function(l) {
                return l.trim()
            }) : t,
            this.each(function() {
                let l = this;
                A.each(r, function() {
                    l.hasAttribute(this) && l.removeAttribute(this)
                })
            })) : this.each(function(l, e) {
                let o = A(e).attr();
                A.each(o, function(a) {
                    e.removeAttribute(a)
                })
            })
        },
        toggleAttr: function(t, r) {
            return this.each(function() {
                let l = this;
                U(r) ? l.removeAttribute(t) : l.setAttribute(t, r)
            })
        },
        id: function(t) {
            return typeof t == "undefined" ? this.length === 1 ? A(this[0]).attr("id") : this.map(r => A(r).attr("id")) : this.each(function() {
                A(this).attr("id", t)
            })
        },
        title: function(t) {
            return typeof t == "undefined" ? this.length ? A(this[0]).attr("title") : void 0 : this.each(function() {
                A(this).attr("title", t)
            })
        },
        href: function(t) {
            return typeof t == "undefined" ? this.length && this[0].tagName === "A" ? this[0].href : void 0 : this.each(function() {
                this.tagName === "A" && (this.href = t)
            })
        },
        name: function(t) {
            return typeof t == "undefined" ? this.length && this[0].name ? this[0].name : void 0 : this.each(function() {
                this.name && (this.name = t)
            })
        },
        src: function(t) {
            return typeof t == "undefined" ? this.length && this[0].src ? this[0].src : void 0 : this.each(function() {
                this.src && (this.src = t)
            })
        }
    });
    A.extend({
        meta: function(t) {
            return U(t) ? A("meta") : A("meta[name='$name']".replace("$name", t))
        },
        metaBy: function(t) {
            return U(t) ? A("meta") : A("meta[$name]".replace("$name", t))
        },
        doctype: function() {
            return A("doctype")
        },
        html: function() {
            return A("html")
        },
        head: function() {
            return A("html").find("head")
        },
        body: function() {
            return A("body")
        },
        document: function() {
            return A(document)
        },
        window: function() {
            return A(window)
        },
        charset: function(t) {
            if (t) {
                let r = A("meta[charset]");
                r.length > 0 && r.attr("charset", t)
            }
            return document.characterSet
        },
        lang: function(t) {
            if (t) {
                let r = A("html");
                r.length > 0 && r.attr("lang", t)
            }
            return document.documentElement.lang
        },
        title: function(t) {
            if (typeof t == "undefined")
                return document.title;
            document.title = t
        }
    });
    A.extend({
        bind: (t, r) => t.bind(r)
    });
    (function(t) {
        t.forEach(function(r) {
            ["append", "prepend"].forEach(function(l) {
                Gt(r, l) || Object.defineProperty(r, l, {
                    configurable: !0,
                    enumerable: !0,
                    writable: !0,
                    value: function() {
                        let e = Array.prototype.slice.call(arguments)
                          , o = document.createDocumentFragment();
                        e.forEach(function(a) {
                            let i = a instanceof Node;
                            o.appendChild(i ? a : document.createTextNode(String(a)))
                        }),
                        l === "prepend" ? this.insertBefore(o, this.firstChild) : this.appendChild(o)
                    }
                })
            })
        })
    }
    )([Element.prototype, Document.prototype, DocumentFragment.prototype]);
    var St = function(t) {
        let r;
        return typeof t == "string" ? r = A.isSelector(t) ? A(t) : A.parseHTML(t) : t instanceof HTMLElement ? r = [t] : Ae(t) && (r = t),
        r
    };
    A.fn.extend({
        appendText: function(t) {
            return this.each(function(r, l) {
                l.innerHTML += t
            })
        },
        prependText: function(t) {
            return this.each(function(r, l) {
                l.innerHTML = t + l.innerHTML
            })
        },
        append: function(t) {
            let r = St(t);
            return this.each(function(l, e) {
                A.each(r, function() {
                    if (e === this)
                        return;
                    let o = l === 0 ? this : this.cloneNode(!0);
                    o.tagName && o.tagName === "SCRIPT" ? A.script(o, e) : e.append(o)
                })
            })
        },
        appendTo: function(t) {
            let r = St(t);
            return this.each(function(l, e) {
                A.each(r, function(o, a) {
                    e !== this && a.append(o === 0 ? e : e.cloneNode(!0))
                })
            })
        },
        prepend: function(t) {
            let r = St(t);
            return this.each(function(l, e) {
                A.each(r, function() {
                    if (e === this)
                        return;
                    let o = l === 0 ? this : this.cloneNode(!0);
                    A.script(o),
                    o.tagName && o.tagName !== "SCRIPT" && e.prepend(o)
                })
            })
        },
        prependTo: function(t) {
            let r = St(t);
            return this.each(function() {
                let l = this;
                A.each(r, function(e, o) {
                    l !== this && A(o).prepend(e === 0 ? l : l.cloneNode(!0))
                })
            })
        },
        insertBefore: function(t) {
            let r = St(t);
            return this.each(function() {
                let l = this;
                A.each(r, function(e) {
                    if (l === this)
                        return;
                    let o = this.parentNode;
                    o && o.insertBefore(e === 0 ? l : l.cloneNode(!0), this)
                })
            })
        },
        insertAfter: function(t) {
            let r = St(t);
            return this.each(function() {
                let l = this;
                A.each(r, function(e, o) {
                    if (l === this)
                        return;
                    let a = this.parentNode;
                    a && a.insertBefore(e === 0 ? l : l.cloneNode(!0), o.nextSibling)
                })
            })
        },
        after: function(t) {
            return this.each(function() {
                let r = this;
                typeof t == "string" ? r.insertAdjacentHTML("afterend", t) : A(t).insertAfter(r)
            })
        },
        before: function(t) {
            return this.each(function() {
                let r = this;
                typeof t == "string" ? r.insertAdjacentHTML("beforebegin", t) : A(t).insertBefore(r)
            })
        },
        clone: function(t=!1, r=!1) {
            let l = [];
            return this.each(function() {
                let e = this.cloneNode(t), o = A(e), a;
                r && A.hasData(this) && (a = A(this).data(),
                A.each(a, function(i, s) {
                    o.data(i, s)
                })),
                l.push(e)
            }),
            A.merge(A(), l)
        },
        import: function(t) {
            let r = [];
            return U(t) && (t = !1),
            this.each(function() {
                r.push(document.importNode(this, t))
            }),
            A.merge(A(), r)
        },
        adopt: function() {
            let t = [];
            return this.each(function() {
                t.push(document.adoptNode(this))
            }),
            A.merge(A(), t)
        },
        remove: function(t) {
            let r = 0, l, e, o = [];
            if (this.length !== 0) {
                for (e = t ? this.filter(function(a) {
                    return gt.call(a, t)
                }) : this.items(); (l = e[r]) != null; r++)
                    l.parentNode && (o.push(l.parentNode.removeChild(l)),
                    A.removeData(l));
                return A.merge(A(), o)
            }
        },
        wrap: function(t) {
            if (this.length === 0)
                return;
            let r = A(St(t));
            if (!r.length)
                return;
            let l = [];
            return this.each(function() {
                let e, o;
                for (o = r.clone(!0, !0),
                o.insertBefore(this),
                e = o; e.children().length; )
                    e = e.children().eq(0);
                e.append(this),
                l.push(o)
            }),
            A(l)
        },
        wrapAll: function(t) {
            let r, l, e;
            if (this.length !== 0 && (r = A(St(t)),
            !!r.length)) {
                for (l = r.clone(!0, !0),
                l.insertBefore(this[0]),
                e = l; e.children().length; )
                    e = e.children().eq(0);
                return this.each(function() {
                    e.append(this)
                }),
                l
            }
        },
        wrapInner: function(t) {
            if (this.length === 0)
                return;
            let r = A(St(t));
            if (!r.length)
                return;
            let l = [];
            return this.each(function() {
                let e = A(this)
                  , o = e.html()
                  , a = r.clone(!0, !0);
                e.html(a.html(o)),
                l.push(a)
            }),
            A(l)
        }
    });
    A.extend({
        animation: {
            duration: 1e3,
            ease: "linear",
            elements: {}
        }
    });
    typeof window.setupAnimation == "object" && A.each(window.setupAnimation, function(t, r) {
        typeof A.animation[t] != "undefined" && !U(r) && (A.animation[t] = r)
    });
    var ss = ["translateX", "translateY", "translateZ", "rotate", "rotateX", "rotateY", "rotateZ", "scale", "scaleX", "scaleY", "scaleZ", "skew", "skewX", "skewY"]
      , cs = ["opacity", "zIndex"]
      , ds = ["opacity", "volume"]
      , ps = ["scrollLeft", "scrollTop"]
      , ms = ["opacity", "volume"];
    function pa(t) {
        return t instanceof HTMLElement || t instanceof SVGElement
    }
    function gs(t, r) {
        let l = /^(\*=|\+=|-=)/.exec(t);
        if (!l)
            return t;
        let e = ca(t) || 0
          , o = parseFloat(r)
          , a = parseFloat(t.replace(l[0], ""));
        switch (l[0][0]) {
        case "+":
            return o + a + e;
        case "-":
            return o - a + e;
        case "*":
            return o * a + e;
        case "/":
            return o / a + e
        }
    }
    function fs(t, r, l) {
        return typeof t[r] != "undefined" ? ps.indexOf(r) > -1 ? r === "scrollLeft" ? t === window ? scrollX : t.scrollLeft : t === window ? scrollY : t.scrollTop : t[r] || 0 : t.style[r] || getComputedStyle(t, l)[r]
    }
    function us(t, r, l, e, o) {
        U(o) && (o = !1),
        r = pt(r),
        o && (l = parseInt(l)),
        pa(t) ? typeof t[r] != "undefined" ? t[r] = l : t.style[r] = r === "transform" || r.toLowerCase().indexOf("color") > -1 ? l : l + e : t[r] = l
    }
    function As(t, r, l) {
        A.each(r, function(e, o) {
            us(t, e, o[0] + o[2] * l, o[3], o[4])
        })
    }
    function ma(t) {
        if (!pa(t))
            return {};
        let r = t.style.transform || "", l = /(\w+)\(([^)]*)\)/g, e = {}, o;
        for (; o = l.exec(r); )
            e[o[1]] = o[2];
        return e
    }
    function Bo(t) {
        return /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t || "#000000").slice(1).map(function(l) {
            return parseInt(l, 16)
        })
    }
    function hs(t, r) {
        return getComputedStyle(t)[r].replace(/[^\d.,]/g, "").split(",").map(function(l) {
            return parseInt(l)
        })
    }
    function bs(t, r, l) {
        let e = []
          , o = ma(t);
        A.each(r, function(a, i) {
            let s = i[0]
              , c = i[1]
              , d = i[2]
              , p = i[3];
            a = "" + a,
            (a.indexOf("rotate") > -1 || a.indexOf("skew") > -1) && p === "" && (p = "deg"),
            a.indexOf("scale") > -1 && (p = ""),
            a.indexOf("translate") > -1 && p === "" && (p = "px"),
            p === "turn" ? e.push(a + "(" + c * l + p + ")") : e.push(a + "(" + (s + d * l) + p + ")")
        }),
        A.each(o, function(a, i) {
            r[a] === void 0 && e.push(a + "(" + i + ")")
        }),
        t.style.transform = e.join(" ")
    }
    function xs(t, r, l) {
        A.each(r, function(e, o) {
            let a, i = [0, 0, 0], s;
            for (a = 0; a < 3; a++)
                i[a] = Math.floor(o[0][a] + o[2][a] * l);
            s = "rgb(" + i.join(",") + ")",
            t.style[e] = s
        })
    }
    function na(t) {
        let r = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
        return t[0] === "#" && t.length === 4 ? "#" + t.replace(r, function(l, e, o, a) {
            return e + e + o + o + a + a
        }) : t[0] === "#" ? t : "#" + t
    }
    function la(t, r, l) {
        As(t, r.props, l),
        bs(t, r.transform, l),
        xs(t, r.color, l)
    }
    function ws(t, r, l) {
        let e = {
            props: {},
            transform: {},
            color: {}
        }, o, a, i, s, c, d, p = ma(t);
        return U(l) && (l = "normal"),
        A.each(r, function(m, g) {
            let f = ss.indexOf("" + m) > -1
              , u = cs.indexOf("" + m) > -1
              , h = ("" + m).toLowerCase().indexOf("color") > -1;
            if (Array.isArray(g) && g.length === 1 && (g = g[0]),
            Array.isArray(g) ? (a = h ? Bo(na(g[0])) : pe(g[0]),
            i = h ? Bo(na(g[1])) : pe(g[1])) : (f ? a = p[m] || m === "scale" ? 1 : 0 : h ? a = hs(t, m) : a = fs(t, m, void 0),
            a = h ? a : pe(a),
            i = h ? Bo(g) : pe(gs(g, Array.isArray(a) ? a[0] : a))),
            ms.indexOf("" + m) > -1 && a[0] === i[0] && (a[0] = i[0] > 0 ? 0 : 1),
            l === "reverse" && (d = a,
            a = i,
            i = d),
            c = t instanceof HTMLElement && i[1] === "" && !u && !f ? "px" : i[1],
            h)
                for (s = [0, 0, 0],
                o = 0; o < 3; o++)
                    s[o] = i[o] - a[o];
            else
                s = i[0] - a[0];
            f ? e.transform[m] = [a[0], i[0], s, c] : h ? e.color[m] = [a, i, s, c] : e.props[m] = [a[0], i[0], s, c, ds.indexOf("" + m) === -1]
        }),
        e
    }
    function sa(t, r, l) {
        return Math.min(Math.max(t, r), l)
    }
    var Dt = {
        linear: function() {
            return function(t) {
                return t
            }
        }
    };
    Dt.default = Dt.linear;
    var ko = {
        Sine: function() {
            return function(t) {
                return 1 - Math.cos(t * Math.PI / 2)
            }
        },
        Circ: function() {
            return function(t) {
                return 1 - Math.sqrt(1 - t * t)
            }
        },
        Back: function() {
            return function(t) {
                return t * t * (3 * t - 2)
            }
        },
        Bounce: function() {
            return function(t) {
                let r, l = 4;
                for (; t < ((r = Math.pow(2, --l)) - 1) / 11; )
                    ;
                return 1 / Math.pow(4, 3 - l) - 7.5625 * Math.pow((r * 3 - 2) / 22 - t, 2)
            }
        },
        Elastic: function(t, r) {
            U(t) && (t = 1),
            U(r) && (r = .5);
            let l = sa(t, 1, 10)
              , e = sa(r, .1, 2);
            return function(o) {
                return o === 0 || o === 1 ? o : -l * Math.pow(2, 10 * (o - 1)) * Math.sin((o - 1 - e / (Math.PI * 2) * Math.asin(1 / l)) * (Math.PI * 2) / e)
            }
        }
    };
    ["Quad", "Cubic", "Quart", "Quint", "Expo"].forEach(function(t, r) {
        ko[t] = function() {
            return function(l) {
                return Math.pow(l, r + 2)
            }
        }
    });
    Object.keys(ko).forEach(function(t) {
        let r = ko[t];
        Dt["easeIn" + t] = r,
        Dt["easeOut" + t] = function(l, e) {
            return function(o) {
                return 1 - r(l, e)(1 - o)
            }
        }
        ,
        Dt["easeInOut" + t] = function(l, e) {
            return function(o) {
                return o < .5 ? r(l, e)(o * 2) / 2 : 1 - r(l, e)(o * -2 + 2) / 2
            }
        }
    });
    var vs = {
        id: null,
        el: null,
        draw: {},
        dur: A.animation.duration,
        ease: A.animation.ease,
        loop: 0,
        pause: 0,
        dir: "normal",
        defer: 0,
        onStart: function() {},
        onStop: function() {},
        onStopAll: function() {},
        onPause: function() {},
        onPauseAll: function() {},
        onResume: function() {},
        onResumeAll: function() {},
        onFrame: function() {},
        onDone: function() {}
    };
    function Eo(t) {
        return new Promise(function(r) {
            let l = this, e = A.assign({}, vs, {
                dur: A.animation.duration,
                ease: A.animation.ease
            }, t), o = e.id, a = e.el, i = e.draw, s = e.dur, c = e.ease, d = e.loop, p = e.onStart, m = e.onFrame, g = e.onDone, f = e.pause, u = e.dir, h = e.defer, b = {}, w = "linear", Q = [], C = Dt.linear, B, x = u === "alternate" ? "normal" : u, v = !1, E = o || +(performance.now() * Math.pow(10, 14));
            if (U(a))
                throw new Error("Unknown element!");
            if (typeof a == "string" && (a = document.querySelector(a)),
            typeof i != "function" && typeof i != "object")
                throw new Error("Unknown draw object. Must be a function or object!");
            s === 0 && (s = 1),
            u === "alternate" && typeof d == "number" && (d *= 2),
            typeof c == "string" ? (B = /\(([^)]+)\)/.exec(c),
            w = c.split("(")[0],
            Q = B ? B[1].split(",").map(function($) {
                return parseFloat($)
            }) : [],
            C = Dt[w] || Dt.linear) : typeof c == "function" ? C = c : C = Dt.linear,
            A.animation.elements[E] = {
                element: a,
                id: null,
                stop: 0,
                pause: 0,
                loop: 0,
                t: -1,
                started: 0,
                paused: 0
            };
            let k = function() {
                typeof i == "object" && (b = ws(a, i, x)),
                typeof p == "function" && p.apply(a),
                A.animation.elements[E].loop += 1,
                A.animation.elements[E].started = performance.now(),
                A.animation.elements[E].duration = s,
                A.animation.elements[E].id = requestAnimationFrame(T)
            }
              , S = function() {
                cancelAnimationFrame(A.animation.elements[E].id),
                delete A.animation.elements[o],
                typeof g == "function" && g.apply(a),
                r(l)
            }
              , T = function($) {
                let nt, Z, {stop: ft, pause: xt, started: rt} = A.animation.elements[E];
                if (A.animation.elements[E].paused && (rt = $ - A.animation.elements[E].t * s,
                A.animation.elements[E].started = rt),
                Z = (($ - rt) / s).toFixed(4),
                Z > 1 && (Z = 1),
                Z < 0 && (Z = 0),
                nt = C.apply(null, Q)(Z),
                A.animation.elements[E].t = Z,
                A.animation.elements[E].p = nt,
                xt) {
                    A.animation.elements[E].id = requestAnimationFrame(T);
                    return
                }
                if (ft > 0) {
                    ft === 2 && (typeof i == "function" ? i.bind(a)(1, 1) : la(a, b, 1)),
                    S();
                    return
                }
                typeof i == "function" ? i.bind(a)(Z, nt) : la(a, b, nt),
                typeof m == "function" && m.apply(a, [Z, nt]),
                Z <= 1 && (A.animation.elements[E].id = requestAnimationFrame(T)),
                Z >= 1 && (d ? (u === "alternate" && (x = x === "normal" ? "reverse" : "normal"),
                typeof d == "boolean" ? setTimeout(function() {
                    k()
                }, f) : d > A.animation.elements[E].loop ? setTimeout(function() {
                    k()
                }, f) : S()) : u === "alternate" && !v ? (x = x === "normal" ? "reverse" : "normal",
                v = !0,
                k()) : S())
            };
            h > 0 ? setTimeout(function() {
                k()
            }, h) : k()
        }
        )
    }
    function me(t, r) {
        let l = A.animation.elements[t];
        typeof l != "undefined" && (U(r) && (r = !0),
        l.stop = r === !0 ? 2 : 1,
        typeof l.onStop == "function" && l.onStop.apply(l.element))
    }
    function Bs(t, r) {
        A.each(A.animation.elements, function(l, e) {
            r ? typeof r == "string" ? gt.call(e.element, r) && me(l, t) : r.length ? A.each(r, function() {
                e.element === this && me(l, t)
            }) : r instanceof Element && e.element === r && me(l, t) : me(l, t)
        })
    }
    function ge(t) {
        let r = A.animation.elements[t];
        typeof r != "undefined" && (r.pause = 1,
        r.paused = performance.now(),
        typeof r.onPause == "function" && r.onPause.apply(r.element))
    }
    function ks(t) {
        A.each(A.animation.elements, function(r, l) {
            t ? typeof t == "string" ? gt.call(l.element, t) && ge(r) : t.length ? A.each(t, function() {
                l.element === this && ge(r)
            }) : t instanceof Element && l.element === t && ge(r) : ge(r)
        })
    }
    function fe(t) {
        let r = A.animation.elements[t];
        typeof r != "undefined" && (r.pause = 0,
        r.paused = 0,
        typeof r.onResume == "function" && r.onResume.apply(r.element))
    }
    function Es(t) {
        A.each(A.animation.elements, function(r, l) {
            t ? typeof t == "string" ? gt.call(l.element, t) && fe(r) : t.length ? A.each(t, function() {
                l.element === this && fe(r)
            }) : t instanceof Element && l.element === t && fe(r) : fe(r)
        })
    }
    var ys = {
        loop: !1,
        onChainItem: null,
        onChainItemComplete: null,
        onChainComplete: null
    };
    function ga(t, r) {
        let l = A.extend({}, ys, r);
        if (typeof l.loop != "boolean" && l.loop--,
        !Array.isArray(t))
            return console.warn("Chain array is not defined!"),
            !1;
        let e = function(o, a) {
            return o.then(function() {
                return typeof l.onChainItem == "function" && l.onChainItem(a),
                Eo(a).then(function() {
                    typeof l.onChainItemComplete == "function" && l.onChainItemComplete(a)
                })
            })
        };
        t.reduce(e, Promise.resolve()).then(function() {
            typeof l.onChainComplete == "function" && l.onChainComplete(),
            l.loop && ga(t, l)
        })
    }
    A.easing = {};
    A.extend(A.easing, Dt);
    A.extend({
        animate: function(t) {
            let r, l, e, o, a;
            return arguments.length > 1 ? (r = A(arguments[0])[0],
            l = arguments[1],
            e = arguments[2] || A.animation.duration,
            o = arguments[3] || A.animation.ease,
            a = arguments[4],
            typeof e == "function" && (a = e,
            o = A.animation.ease,
            e = A.animation.duration),
            typeof o == "function" && (a = o,
            o = A.animation.ease),
            Eo({
                el: r,
                draw: l,
                dur: e,
                ease: o,
                onDone: a
            })) : Eo(t)
        },
        chain: ga,
        stop: me,
        stopAll: Bs,
        resume: fe,
        resumeAll: Es,
        pause: ge,
        pauseAll: ks
    });
    A.fn.extend({
        animate: function(t) {
            let r = this, l, e, o, a, i = t, s;
            return s = !Array.isArray(t) && (arguments.length > 1 || arguments.length === 1 && typeof arguments[0].draw == "undefined"),
            s ? (l = arguments[0],
            e = arguments[1] || A.animation.duration,
            o = arguments[2] || A.animation.ease,
            a = arguments[3],
            typeof e == "function" && (a = e,
            e = A.animation.duration,
            o = A.animation.ease),
            typeof o == "function" && (a = o,
            o = A.animation.ease),
            this.each(function() {
                return A.animate({
                    el: this,
                    draw: l,
                    dur: e,
                    ease: o,
                    onDone: a
                })
            })) : Array.isArray(t) ? (A.each(t, function() {
                let c = this;
                r.each(function() {
                    c.el = this,
                    A.animate(c)
                })
            }),
            this) : this.each(function() {
                i.el = this,
                A.animate(i)
            })
        },
        chain: function(t, r) {
            return this.each(function() {
                let l = this;
                A.each(t, function() {
                    this.el = l
                }),
                A.chain(t, r)
            })
        },
        stop: function(t) {
            return this.each(function() {
                let r = this;
                A.each(A.animation.elements, function(l, e) {
                    e.element === r && me(l, t)
                })
            })
        },
        pause: function() {
            return this.each(function() {
                let t = this;
                A.each(A.animation.elements, function(r, l) {
                    l.element === t && ge(r)
                })
            })
        },
        resume: function() {
            return this.each(function() {
                let t = this;
                A.each(A.animation.elements, function(r, l) {
                    l.element === t && fe(r)
                })
            })
        }
    });
    A.extend({
        hidden: function(t, r, l) {
            return t = A(t)[0],
            typeof r == "undefined" ? (t.hidden = !t.hidden,
            this) : (typeof r == "string" && (r = r.toLowerCase() === "true"),
            typeof r == "function" && (l = r,
            r = !t.hidden),
            t.hidden = r,
            typeof l == "function" && (A.bind(l, t),
            l.call(t, arguments)),
            this)
        },
        hide: function(t, r) {
            let l = A(t);
            t = l[0];
            let e = t.style.display
              , o = getComputedStyle(t, null).display;
            return l.origin("display", {
                inline: e,
                css: o
            }),
            t.style.display = "none",
            typeof r == "function" && (A.bind(r, t),
            r.call(t, arguments)),
            this
        },
        show: function(t, r) {
            let e = A(t).origin("display");
            if (t = A(t)[0],
            t.style.display = "",
            e) {
                let o = e.inline || ""
                  , a = e.css || "";
                o && o !== "none" ? t.style.display = o : a === "none" && (t.style.display = "block")
            } else
                t.style.display = "block";
            return parseInt(t.style.opacity) === 0 && (t.style.opacity = "1"),
            typeof r == "function" && (A.bind(r, t),
            r.call(t, arguments)),
            this
        },
        visible: function(t, r, l) {
            return r === void 0 && (r = !0),
            t.style.visibility = r ? "visible" : "hidden",
            typeof l == "function" && (A.bind(l, t),
            l.call(t, arguments)),
            this
        },
        toggle: function(t, r) {
            let l = getComputedStyle(t, null).display !== "none" ? "hide" : "show";
            return A[l](t, r)
        }
    });
    A.fn.extend({
        hide: function() {
            let t;
            return A.each(arguments, function() {
                typeof this == "function" && (t = this)
            }),
            this.each(function() {
                A.hide(this, t)
            })
        },
        show: function() {
            let t;
            return A.each(arguments, function() {
                typeof this == "function" && (t = this)
            }),
            this.each(function() {
                A.show(this, t)
            })
        },
        visible: function(t, r) {
            return this.each(function() {
                A.visible(this, t, r)
            })
        },
        toggle: function(t) {
            return this.each(function() {
                A.toggle(this, t)
            })
        },
        hidden: function(t, r) {
            return this.each(function() {
                A.hidden(this, t, r)
            })
        }
    });
    A.extend({
        fx: {
            off: !1
        }
    });
    A.fn.extend({
        fadeIn: function(t, r, l) {
            return this.each(function() {
                let e = this
                  , o = A(e)
                  , a = !(!ue(e) || ue(e) && +o.style("opacity") == 0);
                if (U(t) && U(r) && U(l) ? (l = null,
                t = A.animation.duration) : typeof t == "function" && (l = t,
                t = A.animation.duration),
                typeof r == "function" && (l = r,
                r = A.animation.ease),
                A.fx.off && (t = 0),
                a)
                    return typeof l == "function" && A.bind(l, this)(),
                    this;
                let i = o.origin("display", void 0, "block");
                return e.style.opacity = "0",
                e.style.display = i,
                A.animate({
                    el: e,
                    draw: {
                        opacity: 1
                    },
                    dur: t,
                    ease: r,
                    onDone: function() {
                        typeof l == "function" && A.bind(l, this)()
                    }
                })
            })
        },
        fadeOut: function(t, r, l) {
            return this.each(function() {
                let e = this
                  , o = A(e);
                return U(t) && U(r) && U(l) ? (l = null,
                t = A.animation.duration) : typeof t == "function" && (l = t,
                t = A.animation.duration),
                typeof r == "function" && (l = r,
                r = A.animation.ease),
                o.origin("display", o.style("display")),
                ue(e) ? A.animate({
                    el: e,
                    draw: {
                        opacity: 0
                    },
                    dur: t,
                    ease: r,
                    onDone: function() {
                        this.style.display = "none",
                        typeof l == "function" && A.bind(l, this)()
                    }
                }) : (typeof l == "function" && A.bind(l, this)(),
                this)
            })
        },
        slideUp: function(t, r, l) {
            return this.each(function() {
                let e = this, o = A(e), a;
                if (o.height() !== 0)
                    return U(t) && U(r) && U(l) ? (l = null,
                    t = A.animation.duration) : typeof t == "function" && (l = t,
                    t = A.animation.duration),
                    typeof r == "function" && (l = r,
                    r = A.animation.ease),
                    a = o.height(),
                    o.origin("height", a),
                    o.origin("display", A(e).style("display")),
                    o.css({
                        overflow: "hidden"
                    }),
                    A.animate({
                        el: e,
                        draw: {
                            height: 0
                        },
                        dur: t,
                        ease: r,
                        onDone: function() {
                            o.hide().removeStyleProperty("overflow, height"),
                            typeof l == "function" && A.bind(l, this)()
                        }
                    })
            })
        },
        slideDown: function(t, r, l) {
            return this.each(function() {
                let e = this, o = A(e), a, i;
                return U(t) && U(r) && U(l) ? (l = null,
                t = A.animation.duration) : typeof t == "function" && (l = t,
                t = A.animation.duration),
                typeof r == "function" && (l = r,
                r = A.animation.ease),
                o.show().visible(!1),
                a = +o.origin("height", void 0, o.height()),
                parseInt(a) === 0 && (a = e.scrollHeight),
                i = o.origin("display", o.style("display"), "block"),
                o.height(0).visible(!0),
                o.css({
                    overflow: "hidden",
                    display: i === "none" ? "block" : i
                }),
                A.animate({
                    el: e,
                    draw: {
                        height: a
                    },
                    dur: t,
                    ease: r,
                    onDone: function() {
                        A(e).removeStyleProperty("overflow, height, visibility"),
                        typeof l == "function" && A.bind(l, this)()
                    }
                })
            })
        },
        moveTo: function(t, r, l, e, o) {
            let a = {
                top: r,
                left: t
            };
            return typeof l == "function" && (o = l,
            l = A.animation.duration,
            e = A.animation.ease),
            typeof e == "function" && (o = e,
            e = A.animation.ease),
            this.each(function() {
                A.animate({
                    el: this,
                    draw: a,
                    dur: l,
                    ease: e,
                    onDone: o
                })
            })
        },
        centerTo: function(t, r, l, e, o) {
            return typeof l == "function" && (o = l,
            l = A.animation.duration,
            e = A.animation.ease),
            typeof e == "function" && (o = e,
            e = A.animation.ease),
            this.each(function() {
                let a = {
                    left: t - this.clientWidth / 2,
                    top: r - this.clientHeight / 2
                };
                A.animate({
                    el: this,
                    draw: a,
                    dur: l,
                    ease: e,
                    onDone: o
                })
            })
        },
        colorTo: function(t, r, l, e) {
            let o = {
                color: t
            };
            return typeof r == "function" && (e = r,
            r = A.animation.duration,
            l = A.animation.ease),
            typeof l == "function" && (e = l,
            l = A.animation.ease),
            this.each(function() {
                A.animate({
                    el: this,
                    draw: o,
                    dur: r,
                    ease: l,
                    onDone: e
                })
            })
        },
        backgroundTo: function(t, r, l, e) {
            let o = {
                backgroundColor: t
            };
            return typeof r == "function" && (e = r,
            r = A.animation.duration,
            l = A.animation.ease),
            typeof l == "function" && (e = l,
            l = A.animation.ease),
            this.each(function() {
                A.animate({
                    el: this,
                    draw: o,
                    dur: r,
                    ease: l,
                    onDone: e
                })
            })
        },
        zoomIn: function(t, r, l) {
            let e = {
                scale: [0, 1]
            };
            return typeof t == "function" && (l = t,
            t = A.animation.duration,
            r = A.animation.ease),
            typeof r == "function" && (l = r,
            r = A.animation.ease),
            this.each(function() {
                A.animate({
                    el: this,
                    draw: e,
                    dur: t,
                    ease: r,
                    onDone: l
                })
            })
        },
        zoomOut: function(t=1e3, r="linear", l= () => {}
        ) {
            return typeof t == "function" && (l = t,
            t = A.animation.duration,
            r = A.animation.ease),
            typeof r == "function" && (l = r,
            r = A.animation.ease),
            this.each(function() {
                A.animate({
                    el: this,
                    draw: {
                        scale: 0
                    },
                    dur: t,
                    ease: r,
                    onDone: l
                })
            })
        }
    });
    A.extend({
        scrollTop: function(t) {
            if (U(t))
                return window.scrollY;
            window.scrollTo(window.scrollX, t)
        },
        scrollLeft: function(t) {
            if (U(t))
                return window.scrollX;
            window.scrollTo(t, window.scrollY)
        },
        scrollTo: function(t, r) {
            window.scrollTo(t, r)
        },
        scrollToElement: function(t) {
            A(t).scrollTo()
        }
    });
    A.fn.extend({
        scrollTop: function(t) {
            return U(t) ? this.length === 0 ? void 0 : this[0] === window ? scrollY : this[0].scrollTop : this.each(function() {
                if (this === window) {
                    window.scrollTo(window.scrollX, t);
                    return
                }
                this.scrollTop = t
            })
        },
        scrollLeft: function(t) {
            return U(t) ? this.length === 0 ? void 0 : this[0] === window ? scrollX : this[0].scrollLeft : this.each(function() {
                if (this === window) {
                    window.scrollTo(t, window.scrollY);
                    return
                }
                this.scrollLeft = t
            })
        },
        scrollTo: function(t=!1) {
            if (this.length === 0)
                return this;
            let r = this[0].getBoundingClientRect()
              , l = r.left + (t ? 0 : window.scrollX)
              , e = r.top + (t ? 0 : window.scrollY);
            return window.scrollTo(l, e),
            this
        }
    });
    A.init = function(t, r) {
        let l, e = this;
        if (typeof t == "string" && (t = t.trim()),
        this.uid = A.uniqueId(),
        !t)
            return this;
        if (typeof t == "function")
            return A.ready(t);
        if (t instanceof Element)
            return this.push(t),
            this;
        if (t instanceof A)
            return A.each(t, function() {
                e.push(this)
            }),
            this;
        if (t === "window" || t === window)
            return this.push(window),
            this;
        if (t === "document" || t === document)
            return this.push(document),
            this;
        if (t === "body" || t === document.body)
            return this.push(document.body),
            this;
        if (t === "html" || t === document.documentElement)
            return this.push(document.documentElement),
            this;
        if (t === "doctype" || t === document.doctype)
            return this.push(document.doctype),
            this;
        if (t && t.nodeType)
            return this.push(t),
            this;
        if (Ae(t))
            return A.each(t, function() {
                A(this).each(function() {
                    e.push(this)
                })
            }),
            this;
        if (typeof t != "string" && t.self && t.self !== window)
            return this;
        if (t === "#" || t === ".")
            return this;
        if (t[0] === "@")
            A("[data-role]").each(function() {
                Kt(A(this).attr("data-role"), ",").indexOf(t.slice(1)) > -1 && e.push(this)
            });
        else {
            l = A.parseHTML(t);
            for (let o = 0; o < l.length; o++)
                l[o].nodeType === 1 && this.push(l[o])
        }
        return r !== void 0 && (r instanceof A ? this.each(function() {
            A(r).append(e)
        }) : r instanceof HTMLElement ? A(r).append(e) : Xt(r) && A.each(this, function() {
            for (let o in r)
                Gt(r, o) && this.setAttribute(o, r[o])
        })),
        this
    }
    ;
    A.init.prototype = A.fn;
    globalThis.$ = A;
    globalThis.Dom = A;
    var Qo = {};
    Zo(Qo, {
        EVENTS: () => fa,
        info: () => Ls,
        useClickOutside: () => Qs,
        useCompose: () => Cs,
        useCookie: () => Is,
        useCurry: () => Ds,
        useDebounce: () => Ms,
        useEvent: () => Fs,
        useId: () => Us,
        useInterval: () => Ns,
        useMediaQuery: () => Ss,
        useMemo: () => Ts,
        usePipe: () => js,
        useQueue: () => Rs,
        useState: () => Gs,
        useThrottle: () => Hs,
        useToggle: () => Ps
    });
    function Qs(t, r) {
        if (!t)
            return {
                attach: () => {}
                ,
                detach: () => {}
            };
        let l = a => {
            t.contains(a.target) || r()
        }
        ;
        return {
            attach: () => document.addEventListener("click", l),
            detach: () => document.removeEventListener("click", l)
        }
    }
    function Cs(...t) {
        if (!t.every(r => typeof r == "function"))
            throw new Error("useCompose: All arguments should be functions");
        switch (t.length) {
        case 0:
            return r => r;
        case 1:
            return t[0];
        case 2:
            {
                let[r,l] = t;
                return (...e) => r(l(...e))
            }
        default:
            return function(...l) {
                let e = t[t.length - 1](...l);
                for (let o = t.length - 2; o >= 0; o--)
                    e = t[o](e);
                return e
            }
        }
    }
    function Is(t) {
        function r() {
            let o = document.cookie.match(new RegExp(`(?:^|; )${t.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, "\\$1")}=([^;]*)`));
            return o ? decodeURIComponent(o[1]) : null
        }
        function l(o, a={}) {
            a = V({
                path: "/"
            }, a),
            document.cookie = `${t}=${encodeURIComponent(o)}; ${Object.keys(a).map(i => `${i}=${a[i]}`).join("; ")}`
        }
        function e() {
            l("", {
                "max-age": -1
            })
        }
        return {
            get: r,
            set: l,
            delete: e
        }
    }
    function Ds(t) {
        if (typeof t != "function")
            throw new Error("useCurry: \u043F\u0435\u0440\u0432\u044B\u0439 \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442 \u0434\u043E\u043B\u0436\u0435\u043D \u0431\u044B\u0442\u044C \u0444\u0443\u043D\u043A\u0446\u0438\u0435\u0439");
        return function r(...l) {
            return l.length >= t.length ? t.apply(this, l) : function(...e) {
                return r.apply(this, l.concat(e))
            }
        }
    }
    function Ms(t, r, l={}) {
        if (typeof t != "function")
            throw new Error("useDebounce: \u043F\u0435\u0440\u0432\u044B\u0439 \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442 \u0434\u043E\u043B\u0436\u0435\u043D \u0431\u044B\u0442\u044C \u0444\u0443\u043D\u043A\u0446\u0438\u0435\u0439");
        if (r < 0)
            throw new Error("useDebounce: \u0432\u0440\u0435\u043C\u044F \u043E\u0436\u0438\u0434\u0430\u043D\u0438\u044F \u0434\u043E\u043B\u0436\u043D\u043E \u0431\u044B\u0442\u044C \u043F\u043E\u043B\u043E\u0436\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u043C \u0447\u0438\u0441\u043B\u043E\u043C");
        let e = null, o;
        function a(...i) {
            let s = this
              , c = l.immediate && !e;
            return e !== null && clearTimeout(e),
            e = setTimeout( () => {
                e = null,
                l.immediate || (o = t.apply(s, i))
            }
            , r),
            c && (o = t.apply(s, i)),
            o
        }
        return a.cancel = function() {
            e !== null && (clearTimeout(e),
            e = null)
        }
        ,
        a
    }
    var fa = (t => (t.LOAD = "load",
    t.VIEWPORT = "viewport",
    t.ATTRIBUTE = "attribute",
    t.CHILDREN = "children",
    t.DATA = "data",
    t))(fa || {})
      , Fs = ({event: t, root: r, target: l, effect: e}) => {
        let o = typeof l == "string" ? document.querySelector(l) : l;
        if (typeof e != "function")
            throw Error("Side effect must be a function!");
        if (!o)
            throw Error("Please specify a target element!");
        switch (t) {
        case "load":
            {
                new MutationObserver( (i, s) => {
                    let c = document.querySelector(l);
                    c !== null && (e(c),
                    s.disconnect())
                }
                ).observe(document.body, {
                    childList: !0,
                    subtree: !0
                });
                break
            }
        case "viewport":
            {
                let i = {
                    root: r instanceof HTMLElement ? r : typeof r == "string" ? document.querySelector(r) : null,
                    rootMargin: "0px",
                    threshold: .5
                };
                new IntersectionObserver( (c, d) => {
                    for (let p of c)
                        p.isIntersecting && e(o)
                }
                ,i).observe(o);
                break
            }
        case "attribute":
            {
                new MutationObserver(i => {
                    for (let s of i)
                        s.target === o && s.type === "attributes" && e(o, s.attributeName, o.getAttribute(s.attributeName))
                }
                ).observe(o, {
                    attributes: !0
                });
                break
            }
        case "children":
            {
                new MutationObserver(i => {
                    for (let s of i)
                        s.target === o && s.type === "childList" && e(o, s.addedNodes, s.removedNodes)
                }
                ).observe(o, {
                    childList: !0,
                    subtree: !0
                });
                break
            }
        case "data":
            {
                new MutationObserver(i => {
                    for (let s of i)
                        s.target === o && s.type === "characterData" && e(o, o.textContent)
                }
                ).observe(o, {
                    characterData: !0
                });
                break
            }
        default:
            o instanceof HTMLElement && o.addEventListener(t, a => {
                e(o, a)
            }
            )
        }
    }
      , yo = new Map
      , zs = 0;
    function Ys(t) {
        return t.replace(/[^a-zA-Z0-9_-]/g, "_")
    }
    function Us(t, r={}) {
        let l = t != null ? t : Symbol("id-key")
          , {divider: e="-", prefix: o="id", forceNew: a=!1} = r;
        if (!a && yo.has(l))
            return yo.get(l);
        let i = typeof document != "undefined"
          , s = 1e3
          , c = 0
          , d = () => {
            let m;
            return t instanceof HTMLElement ? m = t.tagName.toLowerCase() : typeof t == "object" && t !== null ? m = "object" : t !== void 0 ? m = Ys(String(t)) : m = "generic",
            `${o}${e}${m}${e}${zs++}`
        }
          , p = d();
        if (i)
            for (; document.getElementById(p); ) {
                if (c++ > s)
                    throw new Error("useId: \u043D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u0441\u0433\u0435\u043D\u0435\u0440\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0443\u043D\u0438\u043A\u0430\u043B\u044C\u043D\u044B\u0439 ID \u043F\u043E\u0441\u043B\u0435 \u043C\u043D\u043E\u0433\u043E\u0447\u0438\u0441\u043B\u0435\u043D\u043D\u044B\u0445 \u043F\u043E\u043F\u044B\u0442\u043E\u043A");
                p = d()
            }
        return yo.set(l, p),
        p
    }
    function Ns(t, r) {
        let l = null;
        function e() {
            l || (l = window.setInterval( () => t(), r))
        }
        function o() {
            l && (window.clearInterval(l),
            l = null)
        }
        return {
            start: e,
            stop: o
        }
    }
    function Ss(t) {
        let r = window.matchMedia(t);
        function l() {
            return r.matches
        }
        let e = l();
        function o() {
            e = l()
        }
        return r.addEventListener("change", o),
        e
    }
    var Ts = (t, r={}) => {
        let l = new Map
          , {maxSize: e} = r
          , o = (...a) => {
            let i = JSON.stringify(a);
            if (l.has(i))
                return l.get(i);
            let s = t(...a);
            if (e && l.size >= e) {
                let c = l.keys().next().value;
                typeof c == "string" && l.delete(c)
            }
            return l.set(i, s),
            s
        }
        ;
        return o.clearCache = () => (l.clear(),
        !0),
        o
    }
    ;
    function js(...t) {
        if (!t.every(r => typeof r == "function"))
            throw new Error("usePipe: \u0432\u0441\u0435 \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442\u044B \u0434\u043E\u043B\u0436\u043D\u044B \u0431\u044B\u0442\u044C \u0444\u0443\u043D\u043A\u0446\u0438\u044F\u043C\u0438");
        switch (t.length) {
        case 0:
            return r => r;
        case 1:
            return t[0];
        case 2:
            {
                let[r,l] = t;
                return (...e) => l(r(...e))
            }
        default:
            return function(...l) {
                let e = t[0](...l);
                for (let o = 1; o < t.length; o++)
                    e = t[o](e);
                return e
            }
        }
    }
    function Rs() {
        let t = [];
        return {
            enqueue: r => (t.push(r),
            t.length),
            dequeue: () => t.shift(),
            peek: () => t[0] || null,
            size: () => t.length,
            isEmpty: () => t.length === 0,
            clear: () => {
                t.length = 0
            }
        }
    }
    var qt = []
      , _s = -1
      , Js = class {
        constructor(t) {
            this.index = t
        }
        valueOf() {
            return qt[this.index].value
        }
        toString() {
            let t = qt[this.index].value;
            return String(t)
        }
        [Symbol.toPrimitive](t) {
            let r = qt[this.index].value;
            return t === "number" && typeof r == "number" ? r : t === "string" ? String(r) : r
        }
    }
      , Gs = (t, r) => {
        let l = _s++;
        return qt[l] || (qt[l] = {
            value: t
        }),
        [new Js(l), a => {
            let i = qt[l].value
              , s = typeof a == "function" ? a(i) : a;
            qt[l].value = s,
            typeof r == "function" && r(s, i)
        }
        ]
    }
    ;
    function Hs(t, r, l={}) {
        if (typeof t != "function")
            throw new Error("useThrottle: \u043F\u0435\u0440\u0432\u044B\u0439 \u0430\u0440\u0433\u0443\u043C\u0435\u043D\u0442 \u0434\u043E\u043B\u0436\u0435\u043D \u0431\u044B\u0442\u044C \u0444\u0443\u043D\u043A\u0446\u0438\u0435\u0439");
        if (r < 0)
            throw new Error("useThrottle: \u0432\u0440\u0435\u043C\u044F \u043E\u0436\u0438\u0434\u0430\u043D\u0438\u044F \u0434\u043E\u043B\u0436\u043D\u043E \u0431\u044B\u0442\u044C \u043F\u043E\u043B\u043E\u0436\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u043C \u0447\u0438\u0441\u043B\u043E\u043C");
        let e = null, o = null, a = null, i, s = null, {leading: c=!0, trailing: d=!0} = l;
        function p() {
            i = t.apply(a, o),
            o = a = null,
            s = Date.now()
        }
        function m(...g) {
            let f = Date.now();
            !s && !c && (s = f);
            let u = r - (f - s);
            return o = g,
            a = this,
            u <= 0 || u > r ? (e && (clearTimeout(e),
            e = null),
            p()) : !e && d && (e = setTimeout( () => {
                e = null,
                d && o && p()
            }
            , u)),
            i
        }
        return m.cancel = function() {
            e && (clearTimeout(e),
            e = null),
            o = a = null,
            s = null
        }
        ,
        m
    }
    function Ps(t=!1) {
        let r = t;
        return {
            get: () => r,
            toggle: () => (r = !r,
            r),
            set: l => (r = l,
            r)
        }
    }
    var Vs = "0.13.0"
      , Os = "07.03.2025, 23:32:05"
      , Ls = () => {
        console.info(`%c Hooks %c v${Vs} %c ${Os} `, "color: #ffffff; font-weight: bold; background: #5c2c05", "color: white; background: darkgreen", "color: white; background: #0080fe;")
    }
    ;
    globalThis.Hooks = Qo;
    var Ws = Object.defineProperty
      , Ks = (t, r) => {
        for (var l in r)
            Ws(t, l, {
                get: r[l],
                enumerable: !0
            })
    }
      , Io = {};
    Ks(Io, {
        Primitives: () => Aa,
        add: () => Na,
        brighten: () => Ua,
        cmyk2rgb: () => Fo,
        cmyk2websafe: () => Ca,
        colorDefaultProps: () => Le,
        colorToString: () => va,
        colorType: () => Ft,
        colorTypes: () => et,
        create: () => qs,
        createColor: () => ba,
        createColorScheme: () => Sa,
        darken: () => Da,
        desaturate: () => za,
        equal: () => wa,
        expand: () => Zs,
        expandHexColor: () => Ye,
        grayscale: () => Ia,
        hex2hsv: () => tc,
        hex2rgb: () => Ke,
        hex2websafe: () => Ea,
        hsl2hsv: () => Ba,
        hsl2websafe: () => Qa,
        hsv2hex: () => $s,
        hsv2hsl: () => qe,
        hsv2rgb: () => Ht,
        hsv2websafe: () => ya,
        hueShift: () => Ma,
        isCMYK: () => ve,
        isColor: () => vt,
        isDark: () => Do,
        isHEX: () => Ne,
        isHSL: () => we,
        isHSLA: () => te,
        isHSV: () => oe,
        isLight: () => xa,
        isPrimitive: () => Ta,
        isRGB: () => Ue,
        isRGBA: () => Vt,
        lighten: () => Zt,
        mix: () => mt,
        multiply: () => zo,
        parse: () => We,
        parseColor: () => Qt,
        random: () => ec,
        randomColor: () => Yo,
        rgb2cmyk: () => Mo,
        rgb2hex: () => Xe,
        rgb2hsv: () => yt,
        rgb2websafe: () => re,
        rgba2websafe: () => ka,
        saturate: () => he,
        shade: () => Fa,
        spin: () => Ya,
        test: () => ha,
        toCMYK: () => De,
        toColor: () => Bt,
        toHEX: () => Mt,
        toHSL: () => Ot,
        toHSLA: () => be,
        toHSV: () => xe,
        toRGB: () => ot,
        toRGBA: () => Pt,
        websafe: () => Co
    });
    var it = class {
        constructor(t=0, r=0, l=0) {
            this.h = t,
            this.s = r,
            this.v = l
        }
        toString() {
            return "hsv(" + [Math.round(this.h), Math.round(this.s * 100) + "%", Math.round(this.v * 100) + "%"].join(",") + ")"
        }
    }
      , Me = class {
        constructor(t=0, r=0, l=0) {
            this.h = t,
            this.s = ("" + r).includes("%") ? parseInt(r) / 100 : r,
            this.l = ("" + l).includes("%") ? parseInt(l) / 100 : l
        }
        toString() {
            return "hsl(" + [Math.round(this.h), Math.round(this.s * 100) + "%", Math.round(this.l * 100) + "%"].join(",") + ")"
        }
    }
      , Fe = class {
        constructor(t=0, r=0, l=0, e=0) {
            this.h = t,
            this.s = ("" + r).includes("%") ? parseInt(r) / 100 : r,
            this.l = ("" + l).includes("%") ? parseInt(l) / 100 : l,
            this.a = e
        }
        toString() {
            return "hsla(" + [Math.round(this.h), Math.round(this.s * 100) + "%", Math.round(this.l * 100) + "%", parseFloat(this.a).toFixed(2)].join(",") + ")"
        }
    }
      , bt = class {
        constructor(t=0, r=0, l=0) {
            this.r = t,
            this.g = r,
            this.b = l
        }
        toString() {
            return `rgb(${this.r},${this.g},${this.b})`
        }
    }
      , ee = class {
        constructor(t=0, r=0, l=0, e=0) {
            this.r = t,
            this.g = r,
            this.b = l,
            this.a = e
        }
        toString() {
            return `rgba(${this.r},${this.g},${this.b},${this.a})`
        }
    }
      , ze = class {
        constructor(t=0, r=0, l=0, e=0) {
            this.c = t,
            this.m = r,
            this.y = l,
            this.k = e
        }
        toString() {
            return `cmyk(${this.c},${this.m},${this.y},${this.k})`
        }
    }
      , $t = {
        aliceBlue: "#f0f8ff",
        antiqueWhite: "#faebd7",
        aqua: "#00ffff",
        aquamarine: "#7fffd4",
        azure: "#f0ffff",
        beige: "#f5f5dc",
        bisque: "#ffe4c4",
        black: "#000000",
        blanchedAlmond: "#ffebcd",
        blue: "#0000ff",
        blueViolet: "#8a2be2",
        brown: "#a52a2a",
        burlyWood: "#deb887",
        cadetBlue: "#5f9ea0",
        chartreuse: "#7fff00",
        chocolate: "#d2691e",
        coral: "#ff7f50",
        cornflowerBlue: "#6495ed",
        cornsilk: "#fff8dc",
        crimson: "#dc143c",
        cyan: "#00ffff",
        darkBlue: "#00008b",
        darkCyan: "#008b8b",
        darkGoldenRod: "#b8860b",
        darkGray: "#a9a9a9",
        darkGreen: "#006400",
        darkKhaki: "#bdb76b",
        darkMagenta: "#8b008b",
        darkOliveGreen: "#556b2f",
        darkOrange: "#ff8c00",
        darkOrchid: "#9932cc",
        darkRed: "#8b0000",
        darkSalmon: "#e9967a",
        darkSeaGreen: "#8fbc8f",
        darkSlateBlue: "#483d8b",
        darkSlateGray: "#2f4f4f",
        darkTurquoise: "#00ced1",
        darkViolet: "#9400d3",
        deepPink: "#ff1493",
        deepSkyBlue: "#00bfff",
        dimGray: "#696969",
        dodgerBlue: "#1e90ff",
        fireBrick: "#b22222",
        floralWhite: "#fffaf0",
        forestGreen: "#228b22",
        fuchsia: "#ff00ff",
        gainsboro: "#DCDCDC",
        ghostWhite: "#F8F8FF",
        gold: "#ffd700",
        goldenRod: "#daa520",
        gray: "#808080",
        green: "#008000",
        greenYellow: "#adff2f",
        honeyDew: "#f0fff0",
        hotPink: "#ff69b4",
        indianRed: "#cd5c5c",
        indigo: "#4b0082",
        ivory: "#fffff0",
        khaki: "#f0e68c",
        lavender: "#e6e6fa",
        lavenderBlush: "#fff0f5",
        lawnGreen: "#7cfc00",
        lemonChiffon: "#fffacd",
        lightBlue: "#add8e6",
        lightCoral: "#f08080",
        lightCyan: "#e0ffff",
        lightGoldenRodYellow: "#fafad2",
        lightGray: "#d3d3d3",
        lightGreen: "#90ee90",
        lightPink: "#ffb6c1",
        lightSalmon: "#ffa07a",
        lightSeaGreen: "#20b2aa",
        lightSkyBlue: "#87cefa",
        lightSlateGray: "#778899",
        lightSteelBlue: "#b0c4de",
        lightYellow: "#ffffe0",
        lime: "#00ff00",
        limeGreen: "#32dc32",
        linen: "#faf0e6",
        magenta: "#ff00ff",
        maroon: "#800000",
        mediumAquaMarine: "#66cdaa",
        mediumBlue: "#0000cd",
        mediumOrchid: "#ba55d3",
        mediumPurple: "#9370db",
        mediumSeaGreen: "#3cb371",
        mediumSlateBlue: "#7b68ee",
        mediumSpringGreen: "#00fa9a",
        mediumTurquoise: "#48d1cc",
        mediumVioletRed: "#c71585",
        midnightBlue: "#191970",
        mintCream: "#f5fffa",
        mistyRose: "#ffe4e1",
        moccasin: "#ffe4b5",
        navajoWhite: "#ffdead",
        navy: "#000080",
        oldLace: "#fdd5e6",
        olive: "#808000",
        oliveDrab: "#6b8e23",
        orange: "#ffa500",
        orangeRed: "#ff4500",
        orchid: "#da70d6",
        paleGoldenRod: "#eee8aa",
        paleGreen: "#98fb98",
        paleTurquoise: "#afeeee",
        paleVioletRed: "#db7093",
        papayaWhip: "#ffefd5",
        peachPuff: "#ffdab9",
        peru: "#cd853f",
        pink: "#ffc0cb",
        plum: "#dda0dd",
        powderBlue: "#b0e0e6",
        purple: "#800080",
        rebeccaPurple: "#663399",
        red: "#ff0000",
        rosyBrown: "#bc8f8f",
        royalBlue: "#4169e1",
        saddleBrown: "#8b4513",
        salmon: "#fa8072",
        sandyBrown: "#f4a460",
        seaGreen: "#2e8b57",
        seaShell: "#fff5ee",
        sienna: "#a0522d",
        silver: "#c0c0c0",
        slyBlue: "#87ceeb",
        slateBlue: "#6a5acd",
        slateGray: "#708090",
        snow: "#fffafa",
        springGreen: "#00ff7f",
        steelBlue: "#4682b4",
        tan: "#d2b48c",
        teal: "#008080",
        thistle: "#d8bfd8",
        tomato: "#ff6347",
        turquoise: "#40e0d0",
        violet: "#ee82ee",
        wheat: "#f5deb3",
        white: "#ffffff",
        whiteSmoke: "#f5f5f5",
        yellow: "#ffff00",
        yellowGreen: "#9acd32"
    }
      , Oe = {
        lime: "#a4c400",
        green: "#60a917",
        emerald: "#008a00",
        blue: "#00AFF0",
        teal: "#00aba9",
        cyan: "#1ba1e2",
        cobalt: "#0050ef",
        indigo: "#6a00ff",
        violet: "#aa00ff",
        pink: "#dc4fad",
        magenta: "#d80073",
        crimson: "#a20025",
        red: "#CE352C",
        orange: "#fa6800",
        amber: "#f0a30a",
        yellow: "#fff000",
        brown: "#825a2c",
        olive: "#6d8764",
        steel: "#647687",
        mauve: "#76608a",
        taupe: "#87794e"
    }
      , ua = {
        color: function(t, r=$t, l=void 0) {
            return r[t] !== void 0 ? r[t] : l
        },
        palette: function(t=$t) {
            return Object.keys(t)
        },
        colors: function(t=$t) {
            return Object.values(t)
        }
    }
      , Aa = {
        HSV: it,
        HSL: Me,
        HSLA: Fe,
        RGB: bt,
        RGBA: ee,
        CMYK: ze
    }
      , et = {
        HEX: "hex",
        RGB: "rgb",
        RGBA: "rgba",
        HSV: "hsv",
        HSL: "hsl",
        HSLA: "hsla",
        CMYK: "cmyk",
        UNKNOWN: "unknown"
    }
      , Le = {
        angle: 30,
        algorithm: 1,
        step: .1,
        distance: 5,
        tint1: .8,
        tint2: .4,
        shade1: .6,
        shade2: .3,
        alpha: 1,
        baseLight: "#ffffff",
        baseDark: "self"
    };
    function Xs(t, r) {
        let l;
        switch (r) {
        case "hex":
            l = t.map(function(e) {
                return Mt(e)
            });
            break;
        case "rgb":
            l = t.map(function(e) {
                return ot(e)
            });
            break;
        case "rgba":
            l = t.map(function(e) {
                return Pt(e, opt.alpha)
            });
            break;
        case "hsl":
            l = t.map(function(e) {
                return Ot(e)
            });
            break;
        case "hsla":
            l = t.map(function(e) {
                return be(e, opt.alpha)
            });
            break;
        case "cmyk":
            l = t.map(function(e) {
                return De(e)
            });
            break;
        default:
            l = t
        }
        return l
    }
    function Tt(t, r, l) {
        return Math.max(r, Math.min(t, l))
    }
    function wt(t, r, l) {
        return t < r ? r : t > l ? l : t
    }
    function ht(t, r) {
        for (t += r; t >= 360; )
            t -= 360;
        for (; t < 0; )
            t += 360;
        return t
    }
    var ha = t => {
        let r = c => /^#([A-Fa-f0-9]{3}){1,2}$/.test(c)
          , l = c => /^rgb\(\s*\d+\s*,\s*\d+\s*,\s*\d+\s*\)$/.test(c)
          , e = c => /^rgba\(\s*\d+\s*,\s*\d+\s*,\s*\d+\s*,\s*(0(\.\d+)?|1(\.0+)?)\s*\)$/.test(c)
          , o = c => /^hsv\(\s*\d+\s*,\s*\d+\s*,\s*\d+\s*\)$/.test(c)
          , a = c => /^hsl\(\s*\d+\s*,\s*\d+\s*,\s*\d+\s*\)$/.test(c)
          , i = c => /^hsla\(\s*\d+\s*,\s*\d+\s*,\s*\d+\s*,\s*(0(\.\d+)?|1(\.0+)?)\s*\)$/.test(c)
          , s = c => /^cmyk\(\s*\d+\s*,\s*\d+\s*,\s*\d+\s*,\s*\d+\s*\)$/.test(c);
        return r(t) || l(t) || o(t) || i(t) || i(t) || e(t) || a(t) || s(t)
    }
      , ba = (t="hex", r="#000000") => {
        let l;
        return typeof r == "string" && (l = Qt(r)),
        vt(l) || (l = "#000000"),
        Bt(l, t.toLowerCase())
    }
      , qs = ba
      , Ye = function(t) {
        if (vt(t) && typeof t != "string")
            return t;
        if (typeof t != "string")
            throw new Error("Value is not a string!");
        if (t[0] === "#" && t.length === 4) {
            let r = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
            return "#" + t.replace(r, (l, e, o, a) => e + e + o + o + a + a)
        }
        return t[0] === "#" ? t : "#" + t
    }
      , Zs = Ye
      , Do = t => {
        if (t = Qt(t),
        !vt(t))
            return;
        let r = ot(t);
        return (r.r * 299 + r.g * 587 + r.b * 114) / 1e3 < 128
    }
      , xa = t => !Do(t)
      , oe = t => Qt(t)instanceof it
      , we = t => Qt(t)instanceof Me
      , te = t => Qt(t)instanceof Fe
      , Ue = t => Qt(t)instanceof bt
      , Vt = t => Qt(t)instanceof ee
      , ve = t => Qt(t)instanceof ze
      , Ne = t => /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(t)
      , vt = t => t ? typeof t == "string" ? ha(t) : Ne(t) || Ue(t) || Vt(t) || oe(t) || we(t) || te(t) || ve(t) : !1
      , Ft = t => Ne(t) ? et.HEX : Ue(t) ? et.RGB : Vt(t) ? et.RGBA : oe(t) ? et.HSV : we(t) ? et.HSL : te(t) ? et.HSLA : ve(t) ? et.CMYK : et.UNKNOWN
      , wa = (t, r) => !vt(t) || !vt(r) ? !1 : Mt(t) === Mt(r)
      , va = t => t.toString()
      , Ke = t => {
        let r = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(Ye(t))
          , l = [parseInt(r[1], 16), parseInt(r[2], 16), parseInt(r[3], 16)];
        return r ? new bt(...l) : null
    }
      , Xe = t => "#" + ((1 << 24) + (t.r << 16) + (t.g << 8) + t.b).toString(16).slice(1)
      , yt = t => {
        let r = new it, l, e, o, a = t.r / 255, i = t.g / 255, s = t.b / 255, c = Math.max(a, i, s), d = Math.min(a, i, s), p = c - d;
        return o = c,
        c === 0 ? e = 0 : e = 1 - d / c,
        c === d ? l = 0 : c === a && i >= s ? l = 60 * ((i - s) / p) : c === a && i < s ? l = 60 * ((i - s) / p) + 360 : c === i ? l = 60 * ((s - a) / p) + 120 : c === s ? l = 60 * ((a - i) / p) + 240 : l = 0,
        r.h = l,
        r.s = e,
        r.v = o,
        r
    }
      , Ht = t => {
        let r, l, e, o = t.h, a = t.s * 100, i = t.v * 100, s = Math.floor(o / 60), c = (100 - a) * i / 100, d = (i - c) * (o % 60 / 60), p = c + d, m = i - d;
        switch (s) {
        case 0:
            r = i,
            l = p,
            e = c;
            break;
        case 1:
            r = m,
            l = i,
            e = c;
            break;
        case 2:
            r = c,
            l = i,
            e = p;
            break;
        case 3:
            r = c,
            l = m,
            e = i;
            break;
        case 4:
            r = p,
            l = c,
            e = i;
            break;
        case 5:
            r = i,
            l = c,
            e = m;
            break
        }
        return new bt(Math.round(r * 255 / 100),Math.round(l * 255 / 100),Math.round(e * 255 / 100))
    }
      , $s = t => Xe(Ht(t))
      , tc = t => yt(Ke(t))
      , Mo = t => {
        let r = new ze
          , l = t.r / 255
          , e = t.g / 255
          , o = t.b / 255;
        return r.k = Math.min(1 - l, 1 - e, 1 - o),
        r.c = 1 - r.k === 0 ? 0 : (1 - l - r.k) / (1 - r.k),
        r.m = 1 - r.k === 0 ? 0 : (1 - e - r.k) / (1 - r.k),
        r.y = 1 - r.k === 0 ? 0 : (1 - o - r.k) / (1 - r.k),
        r.c = Math.round(r.c * 100),
        r.m = Math.round(r.m * 100),
        r.y = Math.round(r.y * 100),
        r.k = Math.round(r.k * 100),
        r
    }
      , Fo = t => {
        let r = Math.floor(255 * (1 - t.c / 100) * (1 - t.k / 100))
          , l = Math.ceil(255 * (1 - t.m / 100) * (1 - t.k / 100))
          , e = Math.ceil(255 * (1 - t.y / 100) * (1 - t.k / 100));
        return new bt(r,l,e)
    }
      , qe = t => {
        let r, l, e, o;
        return r = parseInt(t.h),
        e = (2 - t.s) * t.v,
        l = t.s * t.v,
        e === 0 ? l = 0 : (o = e <= 1 ? e : 2 - e,
        o === 0 ? l = 0 : l /= o),
        e /= 2,
        Number.isNaN(l) && (l = 0),
        Number.isNaN(e) && (e = 0),
        new Me(r,l,e)
    }
      , Ba = t => {
        let r, l, e, o;
        return r = t.h,
        o = t.l * 2,
        l = t.s * (o <= 1 ? o : 2 - o),
        e = (o + l) / 2,
        o + l === 0 ? l = 0 : l = 2 * l / (o + l),
        new it(r,l,e)
    }
      , re = t => new bt(Math.round(t.r / 51) * 51,Math.round(t.g / 51) * 51,Math.round(t.b / 51) * 51)
      , ka = t => {
        let r = re(t);
        return new ee(r.r,r.g,r.b,t.a)
    }
      , Ea = t => Xe(re(Ke(t)))
      , ya = t => yt(re(ot(t)))
      , Qa = t => qe(yt(re(ot(t))))
      , Ca = t => Mo(re(Fo(t)))
      , Co = t => Ne(t) ? Ea(t) : Ue(t) ? re(t) : Vt(t) ? ka(t) : oe(t) ? ya(t) : we(t) ? Qa(t) : ve(t) ? Ca(t) : t
      , Bt = (t, r="rgb", l=1) => {
        let e;
        switch (r.toLowerCase()) {
        case "hex":
            e = Mt(t);
            break;
        case "rgb":
            e = ot(t);
            break;
        case "rgba":
            e = Pt(t, l);
            break;
        case "hsl":
            e = Ot(t);
            break;
        case "hsla":
            e = be(t, l);
            break;
        case "hsv":
            e = xe(t);
            break;
        case "cmyk":
            e = De(t);
            break;
        default:
            e = t
        }
        return e
    }
      , Mt = t => typeof t == "string" && t[0] === "#" ? Ye(t) : Xe(ot(We(t)))
      , ot = t => {
        if (Ue(t))
            return t;
        if (Vt(t))
            return new bt(t.r,t.g,t.b);
        if (oe(t))
            return Ht(t);
        if (we(t) || te(t))
            return Ht(Ba(t));
        if (Ne(t))
            return Ke(t);
        if (ve(t))
            return Fo(t);
        throw new Error("Unknown color format!")
    }
      , Pt = (t, r) => {
        if (Vt(t))
            return typeof r < "u" && (t.a = r),
            t;
        let l = ot(t);
        return new ee(l.r,l.g,l.b,typeof t.a < "u" ? t.a : r)
    }
      , xe = t => oe(t) ? t : yt(ot(t))
      , Ot = t => we(t) ? t : qe(yt(ot(t)))
      , be = (t, r=1) => {
        if (te(t))
            return r && (t.a = r),
            t;
        let l = qe(yt(ot(t)));
        return l.a = typeof t.a < "u" ? t.a : r,
        new Fe(l.h,l.s,l.l,l.a)
    }
      , De = t => ve(t) ? t : Mo(ot(t))
      , Ia = t => {
        let r = ot(t)
          , l = Ft(t).toLowerCase()
          , e = Math.round(r.r * .2125 + r.g * .7154 + r.b * .0721)
          , o = new bt(e,e,e);
        return Bt(o, l)
    }
      , Da = (t, r=10) => Zt(t, -1 * Math.abs(r))
      , Zt = (t, r=10) => {
        let l, e, o = 1, a = r > 0, i = function(s, c) {
            let d, p, m, g = s.slice(1), f = parseInt(g, 16);
            return d = (f >> 16) + c,
            d > 255 ? d = 255 : d < 0 && (d = 0),
            m = (f >> 8 & 255) + c,
            m > 255 ? m = 255 : m < 0 && (m = 0),
            p = (f & 255) + c,
            p > 255 ? p = 255 : p < 0 && (p = 0),
            "#" + (p | m << 8 | d << 16).toString(16)
        };
        l = Ft(t).toLowerCase(),
        l === et.RGBA && (o = t.a);
        do
            e = i(Mt(t), r),
            a ? r-- : r++;
        while (e.length < 7);
        return Bt(e, l)
    }
      , Ma = (t, r, l=1) => {
        let e = xe(t)
          , o = Ft(t).toLowerCase()
          , a = e.h;
        for (a += r; a >= 360; )
            a -= 360;
        for (; a < 0; )
            a += 360;
        return e.h = a,
        Bt(e, o, l)
    }
      , mt = (t, r, l) => {
        l = l === 0 ? 0 : l || 50;
        let e = new bt(0,0,0)
          , o = ot(t)
          , a = ot(r)
          , i = l / 100;
        return e.r = Math.round((a.r - o.r) * i + o.r),
        e.g = Math.round((a.g - o.g) * i + o.g),
        e.b = Math.round((a.b - o.b) * i + o.b),
        Mt(e)
    }
      , zo = (t, r) => {
        let l = ot(t)
          , e = ot(r)
          , o = new bt;
        return l.b = Math.floor(l.b * e.b / 255),
        l.g = Math.floor(l.g * e.g / 255),
        l.r = Math.floor(l.r * e.r / 255),
        Mt(o)
    }
      , Fa = (t, r) => {
        if (!vt(t))
            throw new Error(t + " is not a valid color value!");
        r /= 100;
        let l = Ft(t).toLowerCase(), e = ot(t), o = r < 0 ? 0 : 255, a = r < 0 ? r * -1 : r, i, s, c, d;
        return i = Math.round((o - e.r) * a) + e.r,
        s = Math.round((o - e.g) * a) + e.g,
        c = Math.round((o - e.b) * a) + e.b,
        (l === et.RGBA || l === et.HSLA) && (d = t.a),
        Bt(new bt(i,s,c), l, d)
    }
      , he = (t, r) => {
        let l, e, o;
        if (!vt(t))
            throw new Error(t + " is not a valid color value!");
        return l = Ot(t),
        l.s += r / 100,
        l.s = Tt(0, 1, l.s),
        e = Ft(t).toLowerCase(),
        (e === et.RGBA || e === et.HSLA) && (o = t.a),
        Bt(l, e, o)
    }
      , za = (t, r) => {
        let l, e, o;
        if (!vt(t))
            throw new Error(t + " is not a valid color value!");
        return l = Ot(t),
        l.s -= r < 1 ? r : r / 100,
        l.s = Tt(l.s, 0, 1),
        e = Ft(t).toLowerCase(),
        (e === et.RGBA || e === et.HSLA) && (o = t.a),
        Bt(l, e, o)
    }
      , Ya = (t, r) => {
        let l, e, o, a;
        if (!vt(t))
            throw new Error(t + " is not a valid color value!");
        return l = Ot(t),
        a = l.h + r,
        a > 360 ? a = a % 360 : a < 0 && (a = 360 + a % 360),
        l.h = a,
        e = Ft(t).toLowerCase(),
        (e === et.RGBA || e === et.HSLA) && (o = t.a),
        e === "hsl" ? l : Bt(l, e, o)
    }
      , Ua = (t, r) => {
        let l, e, o;
        if (!vt(t))
            throw new Error(t + " is not a valid color value!");
        return l = ot(t),
        l.r = Math.max(0, Math.min(255, l.r - Math.round(255 * -(r / 100)))),
        l.g = Math.max(0, Math.min(255, l.g - Math.round(255 * -(r / 100)))),
        l.b = Math.max(0, Math.min(255, l.b - Math.round(255 * -(r / 100)))),
        e = Ft(t).toLowerCase(),
        (e === et.RGBA || e === et.HSLA) && (o = t.a),
        Bt(l, e, o)
    }
      , Na = (t, r, l) => {
        let e = We(t)
          , o = We(r)
          , a = Pt(e, void 0)
          , i = Pt(o, void 0)
          , s = new ee
          , c = ("" + l).toLowerCase() || "hex";
        return s.r = Math.round((a.r + i.r) / 2),
        s.g = Math.round((a.g + i.g) / 2),
        s.b = Math.round((a.b + i.b) / 2),
        s.a = Math.round((a.a + i.a) / 2),
        Bt(s, l, s.a)
    }
      , Sa = (t, r, l=et.HEX, e) => {
        let o = Object.assign({}, Le, e), a, i = [], s, c, d, p, m;
        if (s = xe(t),
        oe(s) === !1)
            return console.warn("The value is a not supported color format!"),
            !1;
        switch (d = s.h,
        p = s.s,
        m = s.v,
        r) {
        case "monochromatic":
        case "mono":
            {
                if (o.algorithm === 1)
                    c = Ht(s),
                    c.r = wt(Math.round(c.r + (255 - c.r) * o.tint1), 0, 255),
                    c.g = wt(Math.round(c.g + (255 - c.g) * o.tint1), 0, 255),
                    c.b = wt(Math.round(c.b + (255 - c.b) * o.tint1), 0, 255),
                    i.push(yt(c)),
                    c = Ht(s),
                    c.r = wt(Math.round(c.r + (255 - c.r) * o.tint2), 0, 255),
                    c.g = wt(Math.round(c.g + (255 - c.g) * o.tint2), 0, 255),
                    c.b = wt(Math.round(c.b + (255 - c.b) * o.tint2), 0, 255),
                    i.push(yt(c)),
                    i.push(s),
                    c = Ht(s),
                    c.r = wt(Math.round(c.r * o.shade1), 0, 255),
                    c.g = wt(Math.round(c.g * o.shade1), 0, 255),
                    c.b = wt(Math.round(c.b * o.shade1), 0, 255),
                    i.push(yt(c)),
                    c = Ht(s),
                    c.r = wt(Math.round(c.r * o.shade2), 0, 255),
                    c.g = wt(Math.round(c.g * o.shade2), 0, 255),
                    c.b = wt(Math.round(c.b * o.shade2), 0, 255),
                    i.push(yt(c));
                else if (o.algorithm === 2)
                    for (i.push(s),
                    a = 1; a <= o.distance; a++)
                        m = Tt(m - o.step, 0, 1),
                        p = Tt(p - o.step, 0, 1),
                        i.push({
                            h: d,
                            s: p,
                            v: m
                        });
                else if (o.algorithm === 3)
                    for (i.push(s),
                    a = 1; a <= o.distance; a++)
                        m = Tt(m - o.step, 0, 1),
                        i.push({
                            h: d,
                            s: p,
                            v: m
                        });
                else
                    m = Tt(s.v + o.step * 2, 0, 1),
                    i.push({
                        h: d,
                        s: p,
                        v: m
                    }),
                    m = Tt(s.v + o.step, 0, 1),
                    i.push({
                        h: d,
                        s: p,
                        v: m
                    }),
                    i.push(s),
                    p = s.s,
                    m = s.v,
                    m = Tt(s.v - o.step, 0, 1),
                    i.push({
                        h: d,
                        s: p,
                        v: m
                    }),
                    m = Tt(s.v - o.step * 2, 0, 1),
                    i.push({
                        h: d,
                        s: p,
                        v: m
                    });
                break
            }
        case "complementary":
        case "complement":
        case "comp":
            {
                i.push(s),
                d = ht(s.h, 180),
                i.push(new it(d,p,m));
                break
            }
        case "double-complementary":
        case "double-complement":
        case "double":
            {
                i.push(s),
                d = ht(d, 180),
                i.push(new it(d,p,m)),
                d = ht(d, o.angle),
                i.push(new it(d,p,m)),
                d = ht(d, 180),
                i.push(new it(d,p,m));
                break
            }
        case "analogous":
        case "analog":
            {
                d = ht(d, o.angle),
                i.push(new it(d,p,m)),
                i.push(s),
                d = ht(s.h, 0 - o.angle),
                i.push(new it(d,p,m));
                break
            }
        case "triadic":
        case "triad":
            {
                for (i.push(s),
                a = 1; a < 3; a++)
                    d = ht(d, 120),
                    i.push(new it(d,p,m));
                break
            }
        case "tetradic":
        case "tetra":
            {
                i.push(s),
                d = ht(s.h, 180),
                i.push(new it(d,p,m)),
                d = ht(s.h, -1 * o.angle),
                i.push(new it(d,p,m)),
                d = ht(d, 180),
                i.push(new it(d,p,m));
                break
            }
        case "square":
            {
                for (i.push(s),
                a = 1; a < 4; a++)
                    d = ht(d, 90),
                    i.push(new it(d,p,m));
                break
            }
        case "split-complementary":
        case "split-complement":
        case "split":
            {
                d = ht(d, 180 - o.angle),
                i.push(new it(d,p,m)),
                i.push(s),
                d = ht(s.h, 180 + o.angle),
                i.push(new it(d,p,m));
                break
            }
        case "material":
            {
                var g = o.baseLight
                  , f = o.baseDark === "self" || !o.baseDark ? zo(t, t) : o.baseDark;
                i.push({
                    50: mt(g, t, 10),
                    100: mt(g, t, 30),
                    200: mt(g, t, 50),
                    300: mt(g, t, 70),
                    400: mt(g, t, 85),
                    500: mt(g, t, 100),
                    600: mt(f, t, 92),
                    700: mt(f, t, 83),
                    800: mt(f, t, 74),
                    900: mt(f, t, 65),
                    A100: Zt(he(mt(f, t, 15), 80), 65),
                    A200: Zt(he(mt(f, t, 15), 80), 55),
                    A400: Zt(he(mt(g, t, 100), 55), 10),
                    A700: Zt(he(mt(f, t, 83), 65), 10)
                });
                break
            }
        default:
            console.error("Unknown schema name")
        }
        return r === "material" ? i[0] : Xs(i, l)
    }
      , Ta = t => t instanceof it || t instanceof Me || t instanceof Fe || t instanceof bt || t instanceof ee || t instanceof ze
      , Qt = function(t) {
        if (Ta(t))
            return t;
        let r = ("" + t).toLowerCase();
        typeof $t[r] < "u" && (r = $t[r]),
        typeof Oe[r] < "u" && (r = Oe[r]);
        let l = r.replace(/[^\d.,%]/g, "").split(",").map(e => isNaN(e) ? e : +e);
        return r[0] === "#" ? Ye(r) : r.includes("rgba") ? new ee(l[0],l[1],l[2],l[3]) : r.includes("rgb") ? new bt(l[0],l[1],l[2]) : r.includes("cmyk") ? new ze(l[0],l[1],l[2],l[3]) : r.includes("hsv") ? new it(l[0],l[1],l[2]) : r.includes("hsla") ? new Fe(l[0],l[1],l[2],l[3]) : r.includes("hsl") ? new Me(l[0],l[1],l[2]) : r
    }
      , We = Qt
      , Yo = (t="hex", r=1) => {
        let l = (s, c) => Math.floor(s + Math.random() * (c + 1 - s)), e, o, a, i;
        return o = l(0, 255),
        a = l(0, 255),
        i = l(0, 255),
        e = "#" + ((1 << 24) + (o << 16) + (a << 8) + i).toString(16).slice(1),
        t === "hex" ? e : Bt(e, t, r)
    }
      , ec = Yo
      , Uo = class {
        _setValue(t) {
            t || (t = "#000000"),
            typeof t == "string" && (t = Qt(t)),
            t && vt(t) ? this._value = t : this._value = void 0
        }
        _setOptions(t) {
            this._options = Object.assign({}, Le, t)
        }
        constructor(t="#000000", r=null) {
            this._setValue(t),
            this._setOptions(r)
        }
        get options() {
            return this._options
        }
        set options(t) {
            this._setOptions(t)
        }
        get value() {
            return this._value ? this._value : void 0
        }
        set value(t) {
            this._setValue(t)
        }
        toRGB() {
            if (this._value)
                return this._value = ot(this._value),
                this
        }
        get rgb() {
            return this._value ? ot(this._value) : void 0
        }
        toRGBA(t) {
            if (this._value)
                return Vt(this._value) ? t && (this._value = Pt(this._value, t)) : this._value = Pt(this._value, t || Le.alpha),
                this
        }
        get rgba() {
            return this._value ? Vt(this._value) ? this._value : Pt(this._value, this._options.alpha) : void 0
        }
        toHEX() {
            if (this._value)
                return this._value = Mt(this._value),
                this
        }
        get hex() {
            return this._value ? Mt(this._value) : void 0
        }
        toHSV() {
            if (this._value)
                return this._value = xe(this._value),
                this
        }
        get hsv() {
            return this._value ? xe(this._value) : void 0
        }
        toHSL() {
            if (this._value)
                return this._value = Ot(this._value),
                this
        }
        get hsl() {
            return this._value ? Ot(this._value) : void 0
        }
        toHSLA(t) {
            if (this._value)
                return te(this._value) ? t && (this._value = be(this._value, t)) : this._value = be(this._value, t),
                this
        }
        get hsla() {
            return this._value ? te(this._value) ? this._value : be(this._value, this._options.alpha) : void 0
        }
        toCMYK() {
            if (this._value)
                return this._value = De(this._value),
                this
        }
        get cmyk() {
            return this._value ? De(this._value) : void 0
        }
        toWebsafe() {
            if (this._value)
                return this._value = Co(this._value),
                this
        }
        get websafe() {
            return this._value ? Co(this._value) : void 0
        }
        toString() {
            return this._value ? va(this._value) : void 0
        }
        darken(t=10) {
            if (this._value)
                return this._value = Da(this._value, t),
                this
        }
        lighten(t=10) {
            if (this._value)
                return this._value = Zt(this._value, t),
                this
        }
        isDark() {
            return this._value ? Do(this._value) : void 0
        }
        isLight() {
            return this._value ? xa(this._value) : void 0
        }
        hueShift(t) {
            if (this._value)
                return this._value = Ma(this._value, t),
                this
        }
        grayscale() {
            if (!(!this._value || this.type === et.UNKNOWN))
                return this._value = Ia(this._value, ("" + this.type).toLowerCase()),
                this
        }
        get type() {
            return Ft(this._value)
        }
        getScheme(t, r, l) {
            return this._value ? Sa(this._value, t, r, l) : void 0
        }
        equal(t) {
            return wa(this._value, t)
        }
        random(t, r) {
            this._value = Yo(t, r)
        }
        channel(t, r) {
            let l = `${this.type}`.toUpperCase();
            if (["red", "green", "blue"].includes(t)) {
                this.toRGB();
                let e = {
                    red: "r",
                    green: "g",
                    blue: "b"
                };
                this._value[e[t]] = r,
                this[`to${l}`]()
            }
            if (t === "alpha" && this._value.a && (this._value.a = r),
            ["hue", "saturation", "value"].includes(t)) {
                this.toHSV();
                let e = {
                    hue: "h",
                    saturation: "s",
                    value: "v"
                };
                this._value[e[t]] = r,
                this[`to${l}`]()
            }
            if (["lightness"].includes(t) && (this.toHSL(),
            this._value.l = r,
            this[`to${l}`]()),
            ["cyan", "magenta", "yellow", "black"].includes(t)) {
                this.toCMYK();
                let e = {
                    cyan: "c",
                    magenta: "m",
                    yellow: "y",
                    black: "k"
                };
                this._value[e[t]] = r,
                this[`to${l}`]()
            }
            return this
        }
        add(t) {
            this._setValue(Na(this._value, t))
        }
        mix(t, r) {
            this._setValue(mt(this._value, t, r))
        }
        multiply(t) {
            this._setValue(zo(this._value, t))
        }
        shade(t) {
            this._setValue(Fa(this._value, t))
        }
        saturate(t) {
            this._setValue(he(this._value, t))
        }
        desaturate(t) {
            this._setValue(za(this._value, t))
        }
        spin(t) {
            this._setValue(Ya(this._value, t))
        }
        brighten(t) {
            this._setValue(Ua(this._value, t))
        }
    }
      , ja = V({}, Aa)
      , oc = "1.0.4"
      , rc = "11.08.2024, 23:47:03"
      , Ra = () => {
        console.info(`%c Farbe %c v${oc} %c ${rc} `, "color: #ffffff; font-weight: bold; background: #ff00ff", "color: white; background: darkgreen", "color: white; background: #0080fe;")
    }
    ;
    globalThis.Farbe = Uo;
    globalThis.farbe = t => new Uo(t);
    globalThis.Farbe.Routines = Io;
    globalThis.Farbe.Palette = ua;
    globalThis.Farbe.StandardColors = $t;
    globalThis.Farbe.MetroColors = Oe;
    globalThis.Farbe.Primitives = ja;
    globalThis.Farbe.info = Ra;
    var ac = Object.defineProperty
      , ic = (t, r) => {
        for (var l in r)
            ac(t, l, {
                get: r[l],
                enumerable: !0
            })
    }
    ;
    function _a(t) {
        return t.replace(/([A-Z])/g, function(r) {
            return "-" + r.toLowerCase()
        })
    }
    function nc(t=[]) {
        return Array.isArray(t) ? t.join(" ") : t.toString()
    }
    var lc = ["opacity", "zIndex", "order", "zoom"];
    function Ja(t={}) {
        return typeof t == "string" ? t : Object.keys(t).map(r => {
            let l = _a(r)
              , e = t[r];
            return !lc.includes(l) && !isNaN(e) && (e += "px"),
            `${l}: ${e}`
        }
        ).join(";")
    }
    var sc = ["accesskey", "autocapitalize", "autofocus", "contenteditable", "dir", "draggable", "enterkeyhint", "hidden", "inert", "inputmode", "is", "itemid", "itemprop", "itemref", "itemscope", "itemtype", "lang", "nonce", "popover", "spellcheck", "style", "tabindex", "title", "translate", "writingsuggestions"]
      , cc = t => {
        let r, l, e = [], o, a, i = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
        if (typeof t == "string") {
            if (t = t.trim(),
            o = document.implementation.createHTMLDocument(""),
            r = o.createElement("base"),
            r.href = document.location.href,
            o.head.appendChild(r),
            a = o.body,
            l = i.exec(t),
            l)
                return document.createElement(l[1]);
            a.innerHTML = t;
            for (let s = 0; s < a.childNodes.length; s++)
                e.push(a.childNodes[s]);
            return e[0]
        }
    }
      , dc = ["onauxclick", "onbeforeinput", "onbeforematch", "onbeforetoggle", "onblur", "oncancel", "oncanplay", "oncanplaythrough", "onchange", "onclick", "onclose", "oncontextlost", "oncontextmenu", "oncontextrestored", "oncopy", "oncuechange", "oncut", "ondblclick", "ondrag", "ondragend", "ondragenter", "ondragleave", "ondragover", "ondragstart", "ondrop", "ondurationchange", "onemptied", "onended", "onerror", "onfocus", "onformdata", "oninput", "oninvalid", "onkeydown", "onkeypress", "onkeyup", "onload", "onloadeddata", "onloadedmetadata", "onloadstart", "onmousedown", "onmouseenter", "onmouseleave", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "onpaste", "onpause", "onplay", "onplaying", "onprogress", "onratechange", "onreset", "onresize", "onscroll", "onscrollend", "onsecuritypolicyviolation", "onseeked", "onseeking", "onselect", "onslotchange", "onstalled", "onsubmit", "onsuspend", "ontimeupdate", "ontoggle", "onvolumechange", "onwaiting", "onwheel"]
      , Ze = class {
        constructor(t={}) {
            this.options = t,
            this.tag = "div"
        }
        selfAttributes() {
            return []
        }
        get attributes() {
            return this.getAttributes().join(" ")
        }
        getAttributes() {
            let t = []
              , r = ["hidden", "disabled", "required", "readonly", "selected", "open", "multiply", "default"]
              , l = ["className", "style", "data", "tag", "events"];
            for (let e in this.options)
                if (!l.includes(e)) {
                    if (r.includes(e) && this.options[e] === !0) {
                        t.push(e);
                        continue
                    }
                    (this.selfAttributes().includes(e) && !t.includes(e) || sc.includes(e)) && t.push(`${e}="${this.options[e]}"`)
                }
            return this.classes && t.push(`class="${this.classes}"`),
            this.styles && t.push(`style="${this.styles}"`),
            this.dataSet && t.push(this.dataSet),
            this.aria && t.push(this.aria),
            t
        }
        draw() {
            return this.template()
        }
        get dataSet() {
            let {data: t={}} = this.options
              , r = [];
            for (let l in t)
                r.push(`data-${_a(l)}="${t[l]}"`);
            return r.join(" ")
        }
        get aria() {
            let {aria: t={}} = this.options
              , r = [];
            for (let l in t)
                r.push(`aria-${l.toLowerCase()}="${t[l]}"`);
            return r.join(" ")
        }
        get events() {
            let {events: t={}, control: r=!0} = this.options
              , l = [];
            for (let e in t)
                r && !dc.includes(e) && console.info(`Event ${e} for element ${this.tag} not specified in HTML specification`),
                l.push(`${e.toLowerCase()}="${t[e]}"`);
            return l.join(" ")
        }
        get classes() {
            return nc(this.options.class)
        }
        get styles() {
            return Ja(this.options.style)
        }
        template() {
            return ""
        }
        toString() {
            return this.draw()
        }
        toElement() {
            return cc(this.draw())
        }
    }
      , So = t => {
        if (Array.isArray(t))
            return t.map(So).join(`
`);
        if (typeof t == "string" || typeof t == "number" || typeof t == "boolean")
            return t;
        if (t.draw)
            return t.draw();
        throw new Error("Unknown element! " + t)
    }
      , D = class extends Ze {
        constructor(...t) {
            let r = {}
              , l = [];
            for (let e of t)
                typeof e == "object" && !(e instanceof Ze) ? r = e : l.push(e);
            super(r),
            this.children = l
        }
        template(t) {
            let r = this.options.tag ? this.options.tag : this.tag;
            return `
            <${r} ${this.attributes} ${this.events}>${t}</${r}>
        `
        }
        draw() {
            return this.template(this.children.map(So).join(""))
        }
    }
      , dt = class extends Ze {
        constructor(t={}) {
            super(t),
            this.options = t
        }
        template() {
            return `
            <${this.options.tag ? this.options.tag : this.tag} ${this.attributes} ${this.events}/>
        `
        }
    }
      , Ga = (t=[], r=document.body, l={}) => {
        let e, o, {clear: a=!0, where: i="beforeend"} = l;
        o = typeof r == "string" ? document.querySelector(r) : r,
        o instanceof HTMLElement || (o = document.body),
        a && (o.innerHTML = ""),
        Array.isArray(t) || (t = [t]),
        e = t.map(So).join(""),
        o.insertAdjacentHTML(i, e)
    }
      , To = (t="", r) => {
        let l = document.createElement("style");
        return r !== void 0 && l.setAttribute("media", r),
        l.appendChild(document.createTextNode(t)),
        document.head.appendChild(l),
        l
    }
      , Ha = t => To(t).sheet
      , Pa = (t, r, l) => {
        t.insertRule(r + "{" + l + "}")
    }
      , pc = (t, r) => {
        if (typeof t == "string") {
            To(t, r);
            return
        }
        let l = Ha(r);
        for (let e in t)
            Pa(l, e, Ja(t[e]))
    }
      , Va = (t, r) => L(null, null, function*() {
        let l = yield fetch(t, r), e, o;
        if (!l.ok)
            throw new Error("HTTP error: " + l.status);
        e = yield l.text(),
        o = document.createElement("style"),
        o.appendChild(document.createTextNode(e)),
        document.body.appendChild(o)
    })
      , Oa = (t, r) => L(null, null, function*() {
        let l = yield fetch(t, r), e, o;
        if (!l.ok)
            throw new Error("HTTP error: " + l.status);
        e = yield l.text(),
        o = document.createElement("script"),
        o.appendChild(document.createTextNode(e)),
        document.body.appendChild(o)
    })
      , $e = {};
    ic($e, {
        Abbr: () => ii,
        Address: () => pi,
        Anchor: () => jo,
        Area: () => gi,
        Article: () => ni,
        Aside: () => si,
        AudioTag: () => fi,
        Base: () => Ka,
        Bdi: () => Ai,
        Bdo: () => hi,
        Blockquote: () => bi,
        Body: () => qa,
        Bold: () => ui,
        Br: () => ei,
        Button: () => xi,
        Canvas: () => wi,
        Caption: () => Bi,
        Cite: () => Qi,
        Code: () => Ci,
        Col: () => ki,
        Colgroup: () => Ei,
        Data: () => yn,
        Dd: () => Mi,
        Details: () => Fi,
        Dfn: () => Yi,
        Dialog: () => Cn,
        Div: () => Ui,
        Dl: () => Ii,
        Dt: () => Di,
        Em: () => Ni,
        Embed: () => Ti,
        Fieldset: () => Ri,
        FigCaption: () => Gi,
        Figure: () => Ji,
        Footer: () => di,
        Form: () => Hi,
        Frame: () => Vi,
        Frameset: () => Pi,
        Head: () => Wa,
        Header: () => ci,
        Heading: () => ri,
        Hr: () => oi,
        Html: () => La,
        IFrame: () => Li,
        Img: () => $a,
        Input: () => ti,
        Ins: () => Wi,
        Ital: () => _o,
        Kbd: () => Ki,
        Label: () => Xi,
        Legend: () => _i,
        Link: () => Xa,
        List: () => Jo,
        ListItem: () => qi,
        Main: () => bn,
        Map: () => mi,
        Mark: () => Zi,
        Meta: () => xn,
        Nav: () => li,
        NoEmbed: () => ji,
        NoFrames: () => Oi,
        NoScript: () => $i,
        Option: () => on,
        OptionGroup: () => en,
        Output: () => rn,
        Paragraph: () => an,
        Picture: () => Qn,
        Pre: () => nn,
        Quoted: () => Go,
        Rp: () => En,
        Rt: () => kn,
        Ruby: () => Bn,
        Script: () => ln,
        Section: () => ai,
        Select: () => tn,
        Slot: () => In,
        Small: () => sn,
        Source: () => cn,
        Span: () => Za,
        Strike: () => Ho,
        Strong: () => Si,
        Sub: () => dn,
        Summary: () => zi,
        Sup: () => pn,
        Table: () => vi,
        TableCell: () => Ro,
        TableRow: () => yi,
        TableSection: () => to,
        Template: () => vn,
        Textarea: () => mn,
        Time: () => gn,
        Title: () => wn,
        Track: () => fn,
        Var: () => un,
        VideoTag: () => An,
        Wbr: () => hn,
        a: () => Mc,
        abbr: () => Fc,
        address: () => Tc,
        anchor: () => Dc,
        area: () => Rc,
        article: () => zc,
        aside: () => Uc,
        audio: () => _c,
        b: () => Jc,
        base: () => fc,
        bdi: () => Gc,
        bdo: () => Hc,
        blockquote: () => Pc,
        body: () => Ac,
        br: () => wc,
        button: () => Vc,
        canvas: () => Oc,
        caption: () => Wc,
        cite: () => rd,
        code: () => ad,
        col: () => Kc,
        colgroup: () => Xc,
        data: () => cp,
        dd: () => ld,
        details: () => sd,
        dfn: () => dd,
        dialog: () => pp,
        div: () => pd,
        dl: () => id,
        dt: () => nd,
        em: () => md,
        embed: () => Ad,
        fieldset: () => bd,
        figcaption: () => vd,
        figure: () => wd,
        footer: () => Sc,
        form: () => Bd,
        frame: () => Ed,
        frameset: () => kd,
        h1: () => Bc,
        h2: () => kc,
        h3: () => Ec,
        h4: () => yc,
        h5: () => Qc,
        h6: () => Cc,
        head: () => gc,
        header: () => Nc,
        hr: () => vc,
        html: () => mc,
        i: () => fd,
        iframe: () => Qd,
        img: () => bc,
        input: () => xc,
        ins: () => Cd,
        ital: () => gd,
        kbd: () => Id,
        label: () => Dd,
        legend: () => xd,
        li: () => zd,
        link: () => uc,
        main: () => op,
        map: () => jc,
        mark: () => Yd,
        meta: () => rp,
        nav: () => Yc,
        noembed: () => hd,
        noframes: () => yd,
        noscript: () => Ud,
        ol: () => Fd,
        optgroup: () => Sd,
        option: () => Td,
        output: () => jd,
        p: () => Rd,
        picture: () => dp,
        pre: () => _d,
        q: () => Jd,
        quoted: () => Gd,
        rp: () => sp,
        rt: () => lp,
        ruby: () => np,
        s: () => Pd,
        script: () => Vd,
        section: () => Ic,
        select: () => Nd,
        slot: () => mp,
        small: () => Od,
        source: () => Ld,
        span: () => hc,
        strike: () => Hd,
        strong: () => ud,
        sub: () => Wd,
        summary: () => cd,
        sup: () => Kd,
        table: () => Lc,
        tbody: () => qc,
        td: () => od,
        template: () => ip,
        textarea: () => Xd,
        tfoot: () => $c,
        th: () => ed,
        thead: () => Zc,
        time: () => qd,
        title: () => ap,
        tr: () => td,
        track: () => Zd,
        ul: () => Md,
        variable: () => $d,
        video: () => tp,
        wbr: () => ep
    });
    var La = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "html")
        }
        selfAttributes() {
            return ["lang"]
        }
    }
      , mc = (...t) => new La(...t)
      , Wa = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "head")
        }
    }
      , gc = (...t) => new Wa(...t)
      , Ka = class extends dt {
        constructor() {
            super(...arguments);
            I(this, "tag", "base")
        }
        selfAttributes() {
            return ["href", "target"]
        }
    }
      , fc = t => new Ka(t)
      , Xa = class extends dt {
        constructor() {
            super(...arguments);
            I(this, "tag", "link")
        }
        selfAttributes() {
            return ["href", "crossorigin", "rel", "media", "integrity", "hreflang", "type", "referrerpolicy", "sizes", "imagesrcset", "imagesizes", "as", "blocking", "color", "disabled", "fetchpriority"]
        }
    }
      , uc = t => new Xa(t)
      , qa = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "body")
        }
    }
      , Ac = (...t) => new qa(...t)
      , Za = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "span")
        }
    }
      , hc = (...t) => new Za(...t)
      , $a = class extends dt {
        constructor() {
            super(...arguments);
            I(this, "tag", "img")
        }
        selfAttributes() {
            return ["align", "alt", "border", "height", "hspace", "ismap", "longdesc", "lowsrc", "src", "vspace", "width", "usemap"]
        }
    }
      , bc = (t="", r="", l={}) => new $a(st(V({}, l), {
        src: t,
        alt: r
    }))
      , ti = class extends dt {
        constructor() {
            super(...arguments);
            I(this, "tag", "input")
        }
        selfAttributes() {
            return ["accept", "align", "alt", "autocomplete", "autofocus", "border", "checked", "disabled", "form", "formaction", "formenctype", "formmethod", "formnovalidate", "formtarget", "list", "max", "maxlength", "min", "multiple", "name", "pattern", "placeholder", "size", "src", "step", "type", "value"]
        }
    }
      , xc = (t={}) => new ti(t)
      , ei = class extends dt {
        constructor() {
            super(...arguments);
            I(this, "tag", "br")
        }
        selfAttributes() {
            return ["clear"]
        }
    }
      , wc = t => new ei(t)
      , oi = class extends dt {
        constructor() {
            super(...arguments);
            I(this, "tag", "hr")
        }
    }
      , vc = t => new oi(t)
      , ri = class extends D {
        constructor(t="h1", ...r) {
            super(...r),
            this.tag = t
        }
    }
      , Be = (t="h1", ...r) => new ri(t,...r)
      , Bc = (...t) => Be("h1", ...t)
      , kc = (...t) => Be("h2", ...t)
      , Ec = (...t) => Be("h3", ...t)
      , yc = (...t) => Be("h4", ...t)
      , Qc = (...t) => Be("h5", ...t)
      , Cc = (...t) => Be("h6", ...t)
      , ai = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "section")
        }
    }
      , Ic = (...t) => new ai(...t)
      , jo = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "a")
        }
        selfAttributes() {
            return ["coords", "download", "hreflang", "name", "rel", "rev", "shape", "target", "type", "href"]
        }
    }
      , Dc = (...t) => new jo(...t)
      , Mc = (...t) => new jo(...t)
      , ii = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "abbr")
        }
    }
      , Fc = (...t) => new ii(...t)
      , ni = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "article")
        }
    }
      , zc = (...t) => new ni(...t)
      , li = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "nav")
        }
    }
      , Yc = (...t) => new li(...t)
      , si = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "aside")
        }
    }
      , Uc = (...t) => new si(...t)
      , ci = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "header")
        }
    }
      , Nc = (...t) => new ci(...t)
      , di = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "footer")
        }
    }
      , Sc = (...t) => new di(...t)
      , pi = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "address")
        }
    }
      , Tc = (...t) => new pi(...t)
      , mi = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "map")
        }
        selfAttributes() {
            return ["name"]
        }
    }
      , jc = (...t) => new mi(...t)
      , gi = class extends dt {
        constructor() {
            super(...arguments);
            I(this, "tag", "area")
        }
        selfAttributes() {
            return ["alt", "coords", "hreflang", "nohref", "shape", "target", "type", "href"]
        }
    }
      , Rc = (t={}) => new gi(t)
      , fi = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "audio")
        }
        selfAttributes() {
            return ["autoplay", "controls", "loop", "preload", "src"]
        }
    }
      , _c = (...t) => new fi(...t)
      , ui = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "b")
        }
    }
      , Jc = (...t) => new ui(...t)
      , Ai = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "bdi")
        }
    }
      , Gc = (...t) => new Ai(...t)
      , hi = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "bdo")
        }
    }
      , Hc = (...t) => new hi(...t)
      , bi = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "blockquote")
        }
        selfAttributes() {
            return ["cite"]
        }
    }
      , Pc = (...t) => new bi(...t)
      , xi = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "button")
        }
        selfAttributes() {
            return ["autofocus", "form", "formaction", "formenctype", "formmethod", "formnovalidate", "formtarget", "name", "type", "value"]
        }
    }
      , Vc = (...t) => new xi(...t)
      , wi = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "canvas")
        }
        selfAttributes() {
            return ["width", "height"]
        }
    }
      , Oc = (...t) => new wi(...t)
      , vi = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "table")
        }
        selfAttributes() {
            return ["align", "background", "bgcolor", "border", "bordercolor", "cellpadding", "cellspacing", "cols", "frame", "height", "rules", "summary", "width"]
        }
    }
      , Lc = (...t) => new vi(...t)
      , Bi = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "caption")
        }
        selfAttributes() {
            return ["align", "valign"]
        }
    }
      , Wc = (...t) => new Bi(...t)
      , ki = class extends dt {
        constructor() {
            super(...arguments);
            I(this, "tag", "col")
        }
        selfAttributes() {
            return ["align", "valign", "char", "charoff", "span", "width"]
        }
    }
      , Kc = t => new ki(t)
      , Ei = class extends dt {
        constructor() {
            super(...arguments);
            I(this, "tag", "colgroup")
        }
        selfAttributes() {
            return ["align", "valign", "char", "charoff", "span", "width"]
        }
    }
      , Xc = t => new Ei(t)
      , to = class extends D {
        constructor(t="tbody", ...r) {
            super(...r),
            this.tag = t
        }
        selfAttributes() {
            return ["align", "valign", "char", "charoff", "bgcolor"]
        }
    }
      , qc = (...t) => new to("tbody",...t)
      , Zc = (...t) => new to("thead",...t)
      , $c = (...t) => new to("tfoot",...t)
      , yi = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "tr")
        }
        selfAttributes() {
            return ["align", "bgcolor", "bordercolor", "char", "charoff", "valign"]
        }
    }
      , td = (...t) => new yi(...t)
      , Ro = class extends D {
        constructor(t="td", ...r) {
            super(...r),
            this.tag = t
        }
        selfAttributes() {
            return ["abbr", "align", "axis", "background", "bgcolor", "bordercolor", "char", "charoff", "colspan", "headers", "height", "nowrap", "rowspan", "scope", "valign", "width"]
        }
    }
      , ed = (...t) => new Ro("th",...t)
      , od = (...t) => new Ro("td",...t)
      , Qi = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "cite")
        }
    }
      , rd = (...t) => new Qi(...t)
      , Ci = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "code")
        }
    }
      , ad = (...t) => new Ci(...t)
      , Ii = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "dl")
        }
    }
      , Di = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "dt")
        }
    }
      , Mi = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "dd")
        }
    }
      , id = (...t) => new Ii(...t)
      , nd = (...t) => new Di(...t)
      , ld = (...t) => new Mi(...t)
      , Fi = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "details")
        }
    }
      , sd = (...t) => new Fi(...t)
      , zi = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "summary")
        }
    }
      , cd = (...t) => new zi(...t)
      , Yi = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "dfn")
        }
    }
      , dd = (...t) => new Yi(...t)
      , Ui = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "div")
        }
        selfAttributes() {
            return ["align", "title"]
        }
    }
      , pd = (...t) => new Ui(...t)
      , Ni = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "em")
        }
    }
      , md = (...t) => new Ni(...t)
      , _o = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "i")
        }
    }
      , gd = (...t) => new _o(...t)
      , fd = (...t) => new _o(...t)
      , Si = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "strong")
        }
    }
      , ud = (...t) => new Si(...t)
      , Ti = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "embed")
        }
        selfAttributes() {
            return ["align", "height", "hspace", "pluginspace", "src", "type", "vspace", "width"]
        }
    }
      , Ad = (...t) => new Ti(...t)
      , ji = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "noembed")
        }
    }
      , hd = (...t) => new ji(...t)
      , Ri = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "fieldset")
        }
        selfAttributes() {
            return ["form", "title"]
        }
    }
      , bd = (...t) => new Ri(...t)
      , _i = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "legend")
        }
        selfAttributes() {
            return ["align", "title"]
        }
    }
      , xd = (...t) => new _i(...t)
      , Ji = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "figure")
        }
    }
      , wd = (...t) => new Ji(...t)
      , Gi = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "figcaption")
        }
    }
      , vd = (...t) => new Gi(...t)
      , Hi = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "form")
        }
        selfAttributes() {
            return ["accept-charset", "action", "autocomplete", "enctype", "method", "name", "novalidate", "target"]
        }
    }
      , Bd = (...t) => new Hi(...t)
      , Pi = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "frameset")
        }
        selfAttributes() {
            return ["border", "bordercolor", "cols", "frameborder", "framespacing", "rows"]
        }
    }
      , kd = (...t) => new Pi(...t)
      , Vi = class extends dt {
        constructor() {
            super(...arguments);
            I(this, "tag", "frame")
        }
        selfAttributes() {
            return ["bordercolor", "frameborder", "noresize", "name", "src", "scrolling"]
        }
    }
      , Ed = (t={}) => new Vi(t)
      , Oi = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "noframes")
        }
    }
      , yd = (...t) => new Oi(...t)
      , Li = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "iframe")
        }
        selfAttributes() {
            return ["align", "allowtransparency", "frameborder", "height", "hspace", "marginheight", "marginwidth", "name", "sandbox", "scrolling", "seamless", "src", "srcdoc", "vspace", "width"]
        }
    }
      , Qd = (...t) => new Li(...t)
      , Wi = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "ins")
        }
        selfAttributes() {
            return ["cite", "datetime"]
        }
    }
      , Cd = (...t) => new Wi(...t)
      , Ki = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "kbd")
        }
    }
      , Id = (...t) => new Ki(...t)
      , Xi = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "label")
        }
        selfAttributes() {
            return ["for"]
        }
    }
      , Dd = (...t) => new Xi(...t)
      , Jo = class extends D {
        constructor(t="ul", ...r) {
            super(...r),
            this.tag = t
        }
        selfAttributes() {
            return this.tag === "ul" ? ["type"] : ["type", "reserved", "start"]
        }
    }
      , qi = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "li")
        }
        selfAttributes() {
            return ["type", "value"]
        }
    }
      , Md = (...t) => new Jo("ul",...t)
      , Fd = (...t) => new Jo("ol",...t)
      , zd = (...t) => new qi(...t)
      , Zi = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "mark")
        }
    }
      , Yd = (...t) => new Zi(...t)
      , $i = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "noscript")
        }
    }
      , Ud = (...t) => new $i(...t)
      , tn = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "select")
        }
        selfAttributes() {
            return ["autofocus", "form", "name", "size"]
        }
    }
      , Nd = (...t) => new tn(...t)
      , en = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "optgroup")
        }
        selfAttributes() {
            return ["label"]
        }
    }
      , Sd = (...t) => new en(...t)
      , on = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "option")
        }
        selfAttributes() {
            return ["label", "value"]
        }
    }
      , Td = (...t) => new on(...t)
      , rn = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "output")
        }
        selfAttributes() {
            return ["for", "form", "name"]
        }
    }
      , jd = (...t) => new rn(...t)
      , an = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "p")
        }
        selfAttributes() {
            return ["align"]
        }
    }
      , Rd = (...t) => new an(...t)
      , nn = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "pre")
        }
    }
      , _d = (...t) => new nn(...t)
      , Go = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "q")
        }
        selfAttributes() {
            return ["cite"]
        }
    }
      , Jd = (...t) => new Go(...t)
      , Gd = (...t) => new Go(...t)
      , Ho = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "strike")
        }
    }
      , Hd = (...t) => new Ho(...t)
      , Pd = (...t) => new Ho(...t)
      , ln = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "script")
        }
        selfAttributes() {
            return ["async", "defer", "language", "src", "type"]
        }
    }
      , Vd = (...t) => new ln(...t)
      , sn = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "small")
        }
    }
      , Od = (...t) => new sn(...t)
      , cn = class extends dt {
        constructor() {
            super(...arguments);
            I(this, "tag", "source")
        }
        selfAttributes() {
            return ["media", "src", "type"]
        }
    }
      , Ld = (t={}) => new cn(t)
      , dn = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "sub")
        }
    }
      , Wd = (...t) => new dn(...t)
      , pn = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "sup")
        }
    }
      , Kd = (...t) => new pn(...t)
      , mn = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "textarea")
        }
        selfAttributes() {
            return ["autofocus", "cols", "form", "maxlength", "name", "placeholder", "rows", "wrap"]
        }
    }
      , Xd = (...t) => new mn(...t)
      , gn = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "time")
        }
        selfAttributes() {
            return ["datetime", "pubdate"]
        }
    }
      , qd = (...t) => new gn(...t)
      , fn = class extends dt {
        constructor() {
            super(...arguments);
            I(this, "tag", "track")
        }
        selfAttributes() {
            return ["kind", "src", "srclang", "label"]
        }
    }
      , Zd = (t={}) => new fn(t)
      , un = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "var")
        }
    }
      , $d = (...t) => new un(...t)
      , An = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "video")
        }
        selfAttributes() {
            return ["autoplay", "controls", "height", "loop", "loop", "poster", "preload", "src", "width"]
        }
    }
      , tp = (...t) => new An(...t)
      , hn = class extends dt {
        constructor() {
            super(...arguments);
            I(this, "tag", "wbr")
        }
    }
      , ep = t => new hn(t)
      , bn = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "main")
        }
    }
      , op = (...t) => new bn(...t)
      , xn = class extends dt {
        constructor() {
            super(...arguments);
            I(this, "tag", "meta")
        }
        selfAttributes() {
            return ["content", "name", "http-equiv", "charset"]
        }
    }
      , rp = t => new xn(t)
      , wn = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "title")
        }
    }
      , ap = t => new wn(t)
      , vn = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "template")
        }
        selfAttributes() {
            return ["shadowrootmode", "shadowrootdelegatesfocus", "shadowrootclonable", "shadowrootserializable"]
        }
    }
      , ip = (...t) => new vn(...t)
      , Bn = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "ruby")
        }
    }
      , kn = class extends dt {
        constructor() {
            super(...arguments);
            I(this, "tag", "rt")
        }
    }
      , En = class extends dt {
        constructor() {
            super(...arguments);
            I(this, "tag", "rp")
        }
    }
      , np = (...t) => new Bn(...t)
      , lp = t => new kn(t)
      , sp = t => new En(t)
      , yn = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "data")
        }
    }
      , cp = (...t) => new yn(...t)
      , Qn = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "picture")
        }
    }
      , dp = (...t) => new Qn(...t)
      , Cn = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "dialog")
        }
        selfAttributes() {
            return ["open"]
        }
    }
      , pp = (...t) => new Cn(...t)
      , In = class extends D {
        constructor() {
            super(...arguments);
            I(this, "tag", "slot")
        }
        selfAttributes() {
            return ["name"]
        }
    }
      , mp = (...t) => new In(...t)
      , No = {}
      , gp = "0.15.1"
      , fp = "18.05.2025, 14:41:46"
      , Dn = () => {
        console.info(`%c Html.js %c v${gp} %c ${fp} `, "color: #ffffff; font-weight: bold; background: #708238", "color: white; background: darkgreen", "color: white; background: #0080fe;")
    }
      , up = (t=globalThis) => {
        for (let r in $e)
            globalThis[r] && (No[r] = globalThis[r]),
            t[r] = $e[r]
    }
      , Ap = (t=globalThis) => {
        for (let r in No)
            t[r] = No[r]
    }
      , Mn = st(V({
        BaseElement: Ze,
        Tag: D,
        SingleTag: dt
    }, $e), {
        extract: up,
        restore: Ap
    })
      , Fn = {
        addStyle: pc,
        addCssRule: Pa,
        createStyleSheet: Ha,
        createStyleElement: To
    };
    globalThis.HTML = st(V(V({
        cssLoader: Va,
        jsLoader: Oa,
        render: Ga
    }, Mn), Fn), {
        info: Dn
    });
    var Lo = {};
    Zo(Lo, {
        americanExpress: () => $m,
        array: () => mm,
        base64: () => lm,
        between: () => rm,
        bigint: () => Np,
        boolean: () => pm,
        bytes: () => ig,
        color: () => Rm,
        compose: () => yp,
        contains: () => ug,
        creditCard: () => Xm,
        date: () => Tp,
        digits: () => pg,
        diners: () => eg,
        discover: () => tg,
        domain: () => Cm,
        email: () => Kp,
        endsWith: () => Mp,
        equal: () => wg,
        finite: () => im,
        float: () => gg,
        func: () => Rp,
        great: () => Eg,
        greatOrEqual: () => Ig,
        hexColor: () => _m,
        hslColor: () => Gm,
        imei: () => um,
        info: () => Yg,
        integer: () => Jp,
        ip: () => Bm,
        ipv4: () => km,
        ipv6: () => Em,
        jcb: () => og,
        length: () => Am,
        less: () => Qg,
        lessOrEqual: () => Mg,
        mastercard: () => Zm,
        max: () => Lp,
        maxLength: () => bm,
        min: () => Vp,
        minLength: () => hm,
        notNull: () => lg,
        notNumber: () => cm,
        number: () => $p,
        object: () => em,
        parse: () => Vo,
        pattern: () => cg,
        pipe: () => kp,
        required: () => qp,
        rgbColor: () => Jm,
        safeInteger: () => Hp,
        safeParse: () => vp,
        similar: () => Bg,
        startsWith: () => Ip,
        string: () => Po,
        symbol: () => Yp,
        type: () => bg,
        unionPay: () => rg,
        unknown: () => Fp,
        url: () => Mm,
        visa: () => qm
    });
    var hp = Object.defineProperty
      , zn = Object.getOwnPropertySymbols
      , bp = Object.prototype.hasOwnProperty
      , xp = Object.prototype.propertyIsEnumerable
      , Yn = (t, r, l) => r in t ? hp(t, r, {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: l
    }) : t[r] = l
      , wp = (t, r) => {
        for (var l in r || (r = {}))
            bp.call(r, l) && Yn(t, l, r[l]);
        if (zn)
            for (var l of zn(r))
                xp.call(r, l) && Yn(t, l, r[l]);
        return t
    }
      , z = class extends Error {
        constructor(t="", r=null, l) {
            super(t),
            this.message = t,
            this.name = r,
            this.value = l
        }
    }
      , Vo = (t, r) => {
        let l;
        if (!t)
            throw new Error("Schema object required for parse data!");
        if (typeof t == "function") {
            if (l = t.apply(null, [r]),
            l instanceof z)
                throw l
        } else
            for (let e in t) {
                let o = r[e]
                  , a = t[e];
                if (!a)
                    throw new z(`Guard not defined for field ${e} in input data!`,"general",r);
                if (!r.hasOwnProperty(e))
                    throw new z(`Field ${e} doesn't exists in input data!`,"general",r);
                if (typeof a == "function") {
                    if (console.log(a.name),
                    l = a.apply(null, [o]),
                    l instanceof z)
                        throw l
                } else
                    Vo(a, o)
            }
        return r
    }
      , vp = (t, r) => {
        let l;
        if (!t)
            throw new Error("Schema object required for parse data!");
        if (typeof t == "function") {
            if (l = t.apply(null, [r]),
            l instanceof z)
                return {
                    ok: !1,
                    error: l
                }
        } else
            for (let e in t) {
                let o = r[e]
                  , a = t[e];
                if (a)
                    if (typeof a == "function") {
                        if (l = a.apply(null, [r]),
                        l instanceof z)
                            return {
                                ok: !1,
                                error: l
                            }
                    } else
                        Vo(a, o)
            }
        return {
            ok: !0,
            output: r
        }
    }
      , Bp = (...t) => r => t.reduce( (l, e) => e(l), r)
      , kp = Bp
      , Ep = (...t) => r => t.reduceRight( (l, e) => e(l), r)
      , yp = Ep
      , Qp = "VAL must be a string"
      , Po = (t=Qp) => function(r) {
        let l = t.replace(/VAL/g, r);
        return typeof r == "string" ? r : new z(l,"string",r)
    }
      , ae = t => typeof t != "undefined" && t !== null
      , Cp = "VAL must starts with START_VAL"
      , Ip = (t, r=Cp) => {
        if (!ae(t))
            throw new Error("START_VALUE not defined!");
        return function(l) {
            let e = r.replace(/VAL/g, l).replace(/START_VAL/g, t);
            return typeof l == "string" && l.startsWith(t) ? l : new z(e,"startsWith",l)
        }
    }
      , Dp = "VAL must end with END_VAL"
      , Mp = (t, r=Dp) => {
        if (!ae(t))
            throw new Error("END_VALUE not defined!");
        return function(l) {
            let e = r.replace(/VAL/g, l).replace(/END_VAL/g, t);
            return typeof l == "string" && l.endsWith(t) ? l : new z(e,"endsWith",l)
        }
    }
      , Fp = () => function(t) {
        return t
    }
      , zp = "A symbol is required"
      , Yp = (t=zp) => function(r) {
        return typeof r == "symbol" ? r : new z(t,"symbol",r)
    }
      , Up = "VAL must be a bigint"
      , Np = (t=Up) => function(r) {
        let l = t.replace(/VAL/g, r);
        return typeof r == "bigint" ? r : new z(l,"bigint",r)
    }
      , Sp = "VAL must be valid date object or date string"
      , Tp = (t=Sp) => function(r) {
        let l = t.replace(/VAL/g, r);
        return typeof r == "object" && r.getTime || typeof r == "string" && !isNaN(Date.parse(r)) ? r : new z(l,"date",r)
    }
      , jp = "The value must be a function"
      , Rp = (t=jp) => function(r) {
        return typeof r == "function" ? r : new z(t,"function",r)
    }
      , _p = "VAL must be an integer"
      , Jp = (t=_p) => function(r) {
        let l = t.replace(/VAL/g, r);
        return Number.isInteger(r) ? r : new z(l,"integer",r)
    }
      , Gp = "VAL must be an safe integer"
      , Hp = (t=Gp) => function(r) {
        let l = t.replace(/VAL/g, r);
        return Number.isSafeInteger(r) ? r : new z(l,"safeInteger",r)
    }
      , Pp = "VAL must be a great then MIN_VALUE"
      , Vp = (t, r=Pp) => {
        if (!ae(t))
            throw new Error("MIN_VALUE not defined!");
        return function(l) {
            let e = r.replace(/VAL/g, l).replace(/MIN_VALUE/g, t)
              , o = +l;
            return !isNaN(o) && o >= +t ? l : new z(e,"minValue",l)
        }
    }
      , Op = "VAL must be a less then MAX_VALUE"
      , Lp = (t, r=Op) => {
        if (!ae(t))
            throw new Error("MAX_VALUE not defined!");
        return function(l) {
            let e = r.replace(/VAL/g, l).replace(/MAX_VALUE/g, t)
              , o = +l;
            return !isNaN(o) && o <= +t ? l : new z(e,"maxValue",l)
        }
    }
      , Wp = "VAL must be a string in valid email format"
      , Kp = (t=Wp) => function(r) {
        let l = t.replace(/VAL/g, r);
        return typeof r == "string" && /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(r) ? r : new z(l,"email",r)
    }
      , Xp = "Any value required"
      , qp = (t=Xp) => function(r) {
        let l = t.replace(/VAL/g, r);
        return typeof r != "undefined" && r !== null && r !== "" ? r : new z(l,"required",r)
    }
      , Zp = "VAL must be a number"
      , $p = (t=Zp) => function(r) {
        let l = t.replace(/VAL/g, r);
        return typeof r == "number" && !isNaN(+r) ? r : new z(l,"number",r)
    }
      , tm = "VAL must be an object"
      , em = (t, r=tm) => {
        if (typeof t != "object")
            throw new z(r.replace(/VAL/g, t),"object",t);
        return wp({}, t)
    }
      , om = "VAL must be between MIN_VAL and MAX_VAL"
      , rm = (t, r, l=om) => {
        if (!ae(t))
            throw new Error("MIN_VALUE not defined!");
        if (!ae(r))
            throw new Error("MAX_VALUE not defined!");
        return function(e) {
            let o = l.replace(/VAL/g, e).replace(/MIN_VAL/g, t).replace(/MAX_VAL/g, r)
              , a = +e;
            return !isNaN(a) && e >= +t && e <= +r ? e : new z(o,"between",e)
        }
    }
      , am = "VAL must be a finite number"
      , im = (t=am) => function(r) {
        let l = t.replace(/VAL/g, r);
        return Number.isFinite(r) ? r : new z(l,"finite",r)
    }
      , nm = "VAL must be a string in valid base 64 format"
      , lm = (t=nm) => function(r) {
        let l = t.replace(/VAL/g, r);
        return typeof r == "string" && /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/.test(r) ? r : new z(l,"base64",r)
    }
      , sm = "VAL can`t be a number"
      , cm = (t=sm) => function(r) {
        let l = t.replace(/VAL/g, r);
        return isNaN(r) ? r : new z(l,"notNumber",r)
    }
      , dm = "VAL must be a boolean"
      , pm = (t=dm) => function(r) {
        let l = t.replace(/VAL/g, r);
        return typeof r == "boolean" ? r : new z(l,"boolean",r)
    }
      , Un = "VAL must be an array of TYPE"
      , mm = (t, r=Un) => (!t && !r && (t = Po(),
    r = Un),
    typeof t == "string" && (r = t,
    t = Po()),
    function(l) {
        let e = r.replace(/VAL/g, l).replace(/TYPE/g, t.name);
        if (!Array.isArray(l))
            return new z(e,"array",l);
        for (let o of l)
            if (t(o)instanceof z)
                return new z(e,"array",l);
        return l
    }
    )
      , gm = "VAL must be a valid EMEI"
      , fm = t => {
        let r = o => {
            let a = 0;
            for (; o > 0; )
                a = a + o % 10,
                o = parseInt("" + o / 10, 10);
            return a
        }
          , l = ("" + t).length;
        if (l !== 15)
            return !1;
        let e = 0;
        for (let o = l; o >= 1; o--) {
            let a = t % 10;
            o % 2 === 0 && (a = 2 * a),
            e += r(a),
            t = parseInt("" + t / 10, 10)
        }
        return e % 10 === 0
    }
      , um = (t=gm) => function(r) {
        let l = t.replace(/VAL/g, r);
        return fm(r) ? r : new z(l,"emei",r)
    }
      , Oo = "VAL must be a string or array with length N"
      , Am = (t, r=Oo) => function(l) {
        let e = r.replace(/VAL/g, l).replace(/N/g, t);
        return (typeof l == "string" || Array.isArray(l)) && l.length === +t ? l : new z(e,"length",l)
    }
      , hm = (t, r=Oo) => function(l) {
        let e = r.replace(/VAL/g, l).replace(/N/g, t);
        return (typeof l == "string" || Array.isArray(l)) && l.length >= +t ? l : new z(e,"minLength",l)
    }
      , bm = (t, r=Oo) => function(l) {
        let e = r.replace(/VAL/g, l).replace(/N/g, t);
        return (typeof l == "string" || Array.isArray(l)) && l.length <= +t ? l : new z(e,"maxLength",l)
    }
      , xm = "VAL must be a valid ip address ipv4 or ipv6"
      , wm = "VAL must be a valid ipv4 address"
      , vm = "VAL must be a valid ipv6 address"
      , Nn = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
      , Sn = /^[a-fA-F0-9]{1, 4}:[a-fA-F0-9]{1, 4}:[a-fA-F0-9]{1, 4}:[a-fA-F0-9]{1, 4}:[a-fA-F0-9]{1, 4}:[a-fA-F0-9]{1, 4}:[a-fA-F0-9]{1, 4}:[a-fA-F0-9]{1, 4}$/
      , Bm = (t=xm) => function(r) {
        let l = t.replace(/VAL/g, r);
        return typeof r == "string" && (Nn.test(r) || Sn.test(r)) ? r : new z(l,"ip",r)
    }
      , km = (t=wm) => function(r) {
        let l = t.replace(/VAL/g, r);
        return typeof r == "string" && Nn.test(r) ? r : new z(l,"ipv4",r)
    }
      , Em = (t=vm) => function(r) {
        let l = t.replace(/VAL/g, r);
        return typeof r == "string" && Sn.test(r) ? r : new z(l,"ipv6",r)
    }
      , ym = "VAL must be a valid domain name, xn--* for internationalized names"
      , Qm = /^((xn--)?[a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}$/
      , Cm = (t=ym) => function(r) {
        let l = t.replace(/VAL/g, r);
        return typeof r == "string" && Qm.test(r) ? r : new z(l,"domain",r)
    }
      , Im = "VAL must be a valid url"
      , Dm = /^(?:(?:(?:https?|ftp|wss?):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)+(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$/i
      , Mm = (t=Im) => function(r) {
        let l = t.replace(/VAL/g, r);
        return typeof r == "string" && Dm.test(r) ? r : new z(l,"url",r)
    }
      , Fm = "VAL must be a valid color in HEX, RGB(A), or HSL(A) format"
      , zm = "VAL must be a valid HEX color"
      , Ym = "VAL must be a valid RGB(a) color"
      , Um = "VAL must be a valid HSL(A) color"
      , Nm = /^#(?:[\da-f]{3}){1,2}$|^#(?:[\da-f]{4}){1,2}$|^(rgb|hsl)a?\((\s*-?\d+%?\s*,){2}(\s*-?\d+%?\s*)\)$|^(rgb|hsl)a?\((\s*-?\d+%?\s*,){3}\s*(0|(0?\.\d+)|1)\)$/gmi
      , Sm = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i
      , Tm = /^rgba?\((\s*-?\d+%?\s*,){2}(\s*-?\d+%?\s*)\)$|^rgba?\((\s*-?\d+%?\s*,){3}\s*(0|(0?\.\d+)|1)\)$/gmi
      , jm = /^hsla?\((\s*-?\d+%?\s*,){2}(\s*-?\d+%?\s*)\)$|^hsla?\((\s*-?\d+%?\s*,){3}\s*(0|(0?\.\d+)|1)\)$/gmi
      , Rm = (t=Fm) => function(r) {
        let l = t.replace(/VAL/g, r);
        return typeof r == "string" && Nm.test(r) ? r : new z(l,"color",r)
    }
      , _m = (t=zm) => function(r) {
        let l = t.replace(/VAL/g, r);
        return typeof r == "string" && Sm.test(r) ? r : new z(l,"hexColor",r)
    }
      , Jm = (t=Ym) => function(r) {
        let l = t.replace(/VAL/g, r);
        return typeof r == "string" && Tm.test(r) ? r : new z(l,"rgbColor",r)
    }
      , Gm = (t=Um) => function(r) {
        let l = t.replace(/VAL/g, r);
        return typeof r == "string" && jm.test(r) ? r : new z(l,"hslColor",r)
    }
      , Tn = /^4\d{12}(?:\d{3,6})?$/u
      , jn = /^5[1-5]\d{2}|(?:222\d|22[3-9]\d|2[3-6]\d{2}|27[01]\d|2720)\d{12}$/u
      , Rn = /^3[47]\d{13}$/u
      , _n = /^6(?:011|5\d{2})\d{12,15}$/u
      , Jn = /^3(?:0[0-5]|[68]\d)\d{11,13}$/u
      , Gn = /^(?:2131|1800|35\d{3})\d{11}$/u
      , Hn = /^(?:6[27]\d{14,17}|81\d{14,17})$/u
      , Pn = "VAL must be a valid CC number (visa, mastercard, american express, discover, diners club, jcb, or union pay)"
      , Hm = "VAL must be a valid Visa card number"
      , Pm = "VAL must be a valid Mastercard card number"
      , Vm = "VAL must be a valid American Express card number"
      , Om = "VAL must be a valid DISCOVER card number"
      , Lm = "VAL must be a valid DINERS CLUB card number"
      , Wm = "VAL must be a valid JCB card number"
      , Km = "VAL must be a valid Union Pay card number"
      , Xm = (t=Pn) => function(r) {
        let l = t.replace(/VAL/g, r);
        return typeof r == "string" && (Tn.test(r) || jn.test(r) || Rn.test(r) || _n.test(r) || Jn.test(r) || Gn.test(r) || Hn.test(r)) ? r : new z(l,"creditCard",r)
    }
      , ie = (t, r, l=Pn) => function(e) {
        let o = l.replace(/VAL/g, e);
        return typeof e == "string" && r.test(e) ? e : new z(o,t,e)
    }
      , qm = (t=Hm) => ie("visa", Tn, t)
      , Zm = (t=Pm) => ie("mastercard", jn, t)
      , $m = (t=Vm) => ie("american express", Rn, t)
      , tg = (t=Om) => ie("discover", _n, t)
      , eg = (t=Lm) => ie("diners club", Jn, t)
      , og = (t=Wm) => ie("jcb card", Gn, t)
      , rg = (t=Km) => ie("union pay", Hn, t)
      , ag = "The length of string must be VAL bytes"
      , ig = (t, r=ag) => function(l) {
        let e = r.replace(/VAL/g, l);
        return typeof l == "string" && new TextEncoder().encode(l).length === t ? l : new z(e,"bytes",l)
    }
      , ng = "VAL can`t be null or undefined."
      , lg = (t=ng) => function(r) {
        let l = t.replace(/VAL/g, r);
        return ae(r) ? r : new z(l,"notNull",r)
    }
      , sg = "The value must match the pattern"
      , cg = (t, r=sg) => function(l) {
        let e = r.replace(/VAL/g, l);
        return (typeof t == "string" ? new RegExp(t,"g") : t).test("" + l) ? l : new z(e,"pattern",l)
    }
      , dg = "VAL must contains only digits"
      , pg = (t=dg) => function(r) {
        let l = t.replace(/VAL/g, r);
        return /^\d+$/g.test("" + r) ? r : new z(l,"digits",r)
    }
      , mg = "VAL must be a float"
      , gg = (t=mg) => function(r) {
        let l = t.replace(/VAL/g, r);
        return !isNaN(r) && +n % 1 !== 0 || /^\d*\.\d+$/.test(r) ? r : new z(l,"float",r)
    }
      , fg = "VAL must must contains OBJ"
      , ug = (t, r=fg) => function(l) {
        let e = r.replace(/VAL/g, l).replace(/OBJ/g, t);
        return l.includes(t) ? l : new z(e,"contains",l)
    }
      , Ag = "A VAL must have type TYPE";
    function hg(t) {
        return Object.prototype.toString.call(t).replace(/^\[object (.+)]$/, "$1").toLowerCase()
    }
    var bg = (t="string", r=Ag) => function(l) {
        let e = r.replace(/VAL/g, l).replace(/TYPE/g, t);
        return t === hg(l) ? l : new z(e,"type",l)
    }
      , xg = "VAL must be an equal to VALUE"
      , wg = (t, r=xg) => function(l) {
        let e = r.replace(/VAL/g, l).replace(/VALUE/g, t);
        return l === t ? l : new z(e,"equal",l)
    }
      , vg = "VAL must be a similar to VALUE"
      , Bg = (t, r=vg) => function(l) {
        let e = r.replace(/VAL/g, l).replace(/VALUE/g, t);
        return l == t ? l : new z(e,"similar",l)
    }
      , kg = "VAL must be a great then VALUE"
      , Eg = (t, r=kg) => function(l) {
        let e = r.replace(/VAL/g, l).replace(/VALUE/g, t);
        return l > t ? l : new z(e,"great",l)
    }
      , yg = "VAL must be a less then VALUE"
      , Qg = (t, r=yg) => function(l) {
        let e = r.replace(/VAL/g, l).replace(/VALUE/g, t);
        return l < t ? l : new z(e,"less",l)
    }
      , Cg = "VAL must be a great or equal to VALUE"
      , Ig = (t, r=Cg) => function(l) {
        let e = r.replace(/VAL/g, l).replace(/VALUE/g, t);
        return l >= t ? l : new z(e,"greatOrEqual",l)
    }
      , Dg = "VAL must be a less or equal to VALUE"
      , Mg = (t, r=Dg) => function(l) {
        let e = r.replace(/VAL/g, l).replace(/VALUE/g, t);
        return l <= t ? l : new z(e,"lessOrEqual",l)
    }
      , Fg = "0.7.3"
      , zg = "18.05.2025, 14:43:24"
      , Yg = () => {
        console.info(`%c Guardian %c v${Fg} %c ${zg} `, "color: pink; font-weight: bold; background: #2b1700", "color: white; background: darkgreen", "color: white; background: #0080fe;")
    }
    ;
    globalThis.G = Lo;
    var X, M = (X = class {
        static log(r, l, e) {
            if (r > X.DEBUG_LEVEL)
                return;
            let o = {
                error: "color: #ff5555; font-weight: bold",
                warn: "color: #ffaa00; font-weight: bold",
                info: "color: #0080fe; font-weight: bold",
                debug: "color: #00aa00; font-weight: bold",
                trace: "color: #888888",
                data: "color: #555; font-style: italic"
            }, a, i;
            switch (r) {
            case X.DEBUG_LEVELS.ERROR:
                a = "error",
                i = console.error;
                break;
            case X.DEBUG_LEVELS.WARN:
                a = "warn",
                i = console.warn;
                break;
            case X.DEBUG_LEVELS.INFO:
                a = "info",
                i = console.info;
                break;
            case X.DEBUG_LEVELS.DEBUG:
                a = "debug",
                i = console.debug;
                break;
            case X.DEBUG_LEVELS.TRACE:
                a = "trace",
                i = console.log;
                break;
            default:
                return
            }
            console.group(`%c Model: ${l}`, o[a]),
            e !== void 0 && console.log("%c Data:", o.data, e),
            console.groupEnd()
        }
        static error(r, l) {
            X.log(X.DEBUG_LEVELS.ERROR, r, l)
        }
        static warn(r, l) {
            X.log(X.DEBUG_LEVELS.WARN, r, l)
        }
        static info(r, l) {
            X.log(X.DEBUG_LEVELS.INFO, r, l)
        }
        static debug(r, l) {
            X.log(X.DEBUG_LEVELS.DEBUG, r, l)
        }
        static trace(r, l) {
            X.log(X.DEBUG_LEVELS.TRACE, r, l)
        }
    }
    ,
    I(X, "DEBUG_LEVELS", {
        NONE: 0,
        ERROR: 1,
        WARN: 2,
        INFO: 3,
        DEBUG: 4,
        TRACE: 5
    }),
    I(X, "DEBUG_LEVEL", X.DEBUG_LEVELS.NONE),
    X), Ug = "0.4.1", Ng = "18.05.2025, 14:39:57", Vn = class {
        constructor(t={}) {
            var r;
            if (M.DEBUG_LEVEL = t.debug ? 4 : 0,
            M.debug("[Router] Init Router"),
            this.routes = {},
            this.fallbackRoute = t.fallback || "/",
            this.maxRedirects = t.maxRedirects || 5,
            this.redirectCount = 0,
            this.basePath = t.base || "",
            this.middleware = [],
            this.beforeEachHooks = [],
            this.afterEachHooks = [],
            this.cache = new Map,
            this.cacheLimit = (r = t.cacheLimit) != null ? r : 50,
            this.touchStartX = 0,
            this.enableSwipeNavigation = t.enableSwipeNavigation || !1,
            this.current = null,
            this.redirects = {},
            this.useHash = t.useHash || !1,
            this.events = {
                beforeNavigate: [],
                afterNavigate: [],
                routeNotFound: [],
                error: []
            },
            this.plugins = [],
            this.enableSwipeNavigation && this.initSwipeNavigation(),
            t.routes) {
                M.debug("[Router] Registering routes");
                for (let[l,e] of Object.entries(t.routes))
                    this.addRoute(l, e)
            }
            t.plugins && Array.isArray(t.plugins) && (M.debug("[Router] Registering plugins"),
            t.plugins.forEach(l => {
                Array.isArray(l) ? this.usePlugin(l[0], l[1] || {}) : this.usePlugin(l)
            }
            )),
            M.debug("[Router] Subscribing to unhandledrejection event"),
            window.addEventListener("unhandledrejection", this.handleError.bind(this)),
            M.debug("[Router] Router Initialized")
        }
        on(t, r) {
            return M.debug(`[Router] Subscribing to event ${t}`),
            this.events[t] && this.events[t].push(r),
            this
        }
        emit(t, ...r) {
            if (M.debug(`[Router] Emitting event ${t}`),
            this.events[t])
                for (let l of this.events[t]) {
                    let e = l(...r);
                    if (t === "beforeNavigate" && e === !1)
                        return !1
                }
            return !0
        }
        initSwipeNavigation() {
            M.debug("[Router] Initializing swipe navigation"),
            M.debug("[Router] Adding touchstart event listener"),
            document.addEventListener("touchstart", t => {
                this.touchStartX = t.touches[0].clientX
            }
            , {
                passive: !0
            }),
            M.debug("[Router] Adding touchend event listener"),
            document.addEventListener("touchend", t => {
                let r = t.changedTouches[0].clientX
                  , l = this.touchStartX - r;
                Math.abs(l) > 100 && (l > 0 ? (M.debug("[Router] Swiping right (forward)"),
                window.history.forward()) : (M.debug("[Router] Swiping left (backward)"),
                window.history.back()))
            }
            , {
                passive: !0
            })
        }
        handleError(t) {
            M.error("[Router] Error during navigation:", t),
            this.emit("error", t),
            this.routes["/error"] ? this.navigateTo("/error", !0) : this.navigateTo(this.fallbackRoute, !0)
        }
        sanitizePath(t) {
            M.debug("[Router] Sanitizing path:", t);
            try {
                if (!t)
                    return "/";
                let r = new URL(t,window.location.origin)
                  , l = decodeURIComponent(r.pathname);
                return l = l.replace(/[<>'"`;(){}]/g, "").replace(/[\u0000-\u001F\u007F-\u009F]/g, "").replace(/([^/])\/{2,}/g, "$1/").replace(/\/+/g, "/").replace(/(.+)\/$/, "$1").replace(/\.+/g, ".").split("/").filter(e => e !== ".." && e !== ".").join("/"),
                l.startsWith("/") || (l = "/" + l),
                this.isBlockedPath(l) ? "/" : (M.debug("[Router] Sanitized path:", l),
                l)
            } catch (r) {
                return M.error("[Router] Error sanitizing path:", r),
                "/"
            }
        }
        isBlockedPath(t) {
            return M.debug("[Router] Checking if path is blocked:", t),
            [/^\/(api|admin|wp-admin|wp-content|wp-includes)/i, /\.(php|asp|aspx|jsp|cgi|config|env|git|sql|htaccess)$/i, /\/(.+\/)*\.{2,}\//, /javascript:/i, /data:/i, /vbscript:/i, /file:/i].some(r => r.test(t))
        }
        test(t) {
            M.debug("[Router] Testing path:", t);
            let r = t
              , l = this.sanitizePath(t)
              , e = {
                original: r,
                sanitized: l,
                isBlocked: this.isBlockedPath(l),
                isModified: r !== l
            };
            return M.debug(`[Router] test result for path ${t}:`, e),
            e
        }
        beforeEach(t) {
            return M.debug("[Router] Adding beforeEach hook"),
            this.beforeEachHooks.push(t),
            this
        }
        afterEach(t) {
            return M.debug("[Router] Adding afterEach hook"),
            this.afterEachHooks.push(t),
            this
        }
        use(t) {
            return M.debug("[Router] Adding middleware"),
            this.middleware.push(t),
            this
        }
        addRedirect(t, r) {
            return M.debug("[Router] Adding redirect from", t, "to", r),
            this.redirects[t] ? !1 : (this.redirects[t] = r,
            this)
        }
        addRoute(t, r) {
            return M.debug("[Router] Adding route", t),
            this.routes[t] = r,
            this
        }
        addNestedRoute(t, r, l) {
            M.debug(`[Router] Adding nested route ${r} to ${t}`);
            let e = `${t}${r}`.replace(/\/\//g, "/");
            return this.addRoute(e, l),
            this
        }
        addLazyRoute(t, r) {
            return M.debug("[Router] Adding lazy-loaded route", t),
            this.addRoute(t, l => L(this, null, function*() {
                try {
                    let e = yield r();
                    return (e.default || e)(l)
                } catch (e) {
                    throw e
                }
            })),
            this
        }
        addLazyNestedRoute(t, r, l) {
            M.debug("[Router] Adding lazy-loaded nested route", r, "to", t);
            let e = `${t}${r}`.replace(/\/\//g, "/");
            return this.addLazyRoute(e, l),
            this
        }
        addFallbackRoute(t) {
            return M.debug("[Router] Adding fallback route", t),
            this.fallbackRoute = t,
            this
        }
        add404Route(t) {
            return M.debug("[Router] Adding 404 route", t),
            this.routes["/404"] = t,
            this
        }
        addErrorRoute(t) {
            return M.debug("[Router] Adding error route", t),
            this.routes["/error"] = t,
            this
        }
        addProtectedRoute(t, r, l, e="/login") {
            return M.debug("[Router] Adding protected route", t),
            this.addRoute(t, o => L(this, null, function*() {
                if (yield l(o))
                    return M.debug("[Router] Guard function passed, executing callback"),
                    r(o);
                M.debug("[Router] Guard function failed, redirecting to", e),
                yield this.navigateTo(e, !0)
            })),
            this
        }
        removeRoute(t) {
            return M.debug("[Router] Removing route", t),
            this.routes[t] && delete this.routes[t],
            this
        }
        updateRoute(t, r) {
            return M.debug("[Router] Updating route", t),
            this.routes[t] && (this.routes[t] = r),
            this
        }
        getRoutes() {
            return M.debug("[Router] Getting registered routes"),
            this.routes
        }
        navigate(t) {
            return L(this, null, function*() {
                if (M.debug("[Router] Navigating to", t),
                this.redirectCount > this.maxRedirects) {
                    M.error("[Router] Maximum redirect limit reached, redirecting to", this.fallbackRoute),
                    console.error("Maximum redirect limit reached"),
                    this.redirectCount = 0,
                    this.emit("error", new Error("Maximum redirect limit reached")),
                    yield this.navigateTo("/error", !0);
                    return
                }
                this.redirectCount++;
                let r = this.matchRoute(this.sanitizePath(t));
                if (r)
                    try {
                        if (M.debug("[Router] Route matched:", r),
                        this.emit("beforeNavigate", r) === !1) {
                            M.debug("[Router] Navigation cancelled by beforeNavigate hook");
                            return
                        }
                        if (this.redirects[r.path]) {
                            M.debug("[Router] Redirecting to", this.redirects[r.path]),
                            yield this.navigateTo(this.redirects[r.path], !0);
                            return
                        }
                        this.redirectCount++;
                        for (let l of this.middleware)
                            M.debug("[Router] Executing middleware"),
                            yield l(r);
                        for (let l of this.beforeEachHooks)
                            M.debug("[Router] Executing beforeEach hook"),
                            yield l(r);
                        M.debug("[Router] Executing route callback"),
                        yield r.callback(r.params);
                        for (let l of this.afterEachHooks)
                            M.debug("[Router] Executing afterEach hook"),
                            yield l(r);
                        this.current = r,
                        this.emit("afterNavigate", r),
                        M.debug("[Router] Navigation completed")
                    } catch (l) {
                        M.error("[Router] Error during navigation:", l),
                        console.error("Navigation error:", l),
                        this.emit("error", l),
                        this.routes["/error"] && this.routes["/error"](l)
                    }
                else
                    M.warn("[Router] Route not found:", t),
                    this.redirectCount = 0,
                    this.emit("routeNotFound", t),
                    this.routes["/404"] && this.routes["/404"]()
            })
        }
        navigateTo(t, r=!1) {
            return L(this, null, function*() {
                M.debug(`[Router] Navigating to ${t} ${r ? "with replace state" : ""}`),
                this.redirectCount = 0;
                let l = new URL(t,window.location.origin);
                r ? (M.debug("[Router] Replacing state with", l),
                window.history.replaceState({}, "", l)) : (M.debug("[Router] Pushing state with", l),
                window.history.pushState({}, "", l)),
                M.debug("[Router] Navigating to", l),
                yield this.navigate(l.pathname)
            })
        }
        matchRoute(t) {
            if (M.debug("[Router] Matching route for", t),
            this.cache.has(t))
                return this.cache.get(t);
            M.debug("[Router] Route not found in cache, performing match");
            let r = this._performMatch(t);
            if (this.cache.size >= this.cacheLimit) {
                M.debug("[Router] Cache limit reached, removing oldest entry");
                let l = this.cache.keys().next().value;
                this.cache.delete(l)
            }
            return M.debug("[Router] Caching result for", t),
            this.cache.set(t, r),
            r
        }
        _performMatch(t) {
            let[r,l] = t.split("?")
              , e = new URLSearchParams(l)
              , o = Object.fromEntries(e);
            for (let a in this.routes) {
                let i = []
                  , s = a.replace(/:([^\/]+)/g, (d, p) => (i.push(p),
                "([^/]+)"))
                  , c = t.match(new RegExp(`^${s}$`));
                if (c) {
                    let d = c.slice(1).reduce( (p, m, g) => (p[i[g]] = m,
                    p), {});
                    return {
                        path: t,
                        pattern: s,
                        callback: this.routes[a],
                        params: d,
                        query: o
                    }
                }
            }
            return null
        }
        clearCache() {
            M.debug("[Router] Clearing cache"),
            this.cache.clear()
        }
        resetRedirectCount() {
            M.debug("[Router] Resetting redirect count"),
            this.redirectCount = 0
        }
        getFullPath(t) {
            return M.debug("[Router] Getting full path for", t),
            this.useHash ? `#${t}` : t
        }
        getPathFromLocation() {
            return M.debug("[Router] Getting path from location"),
            this.useHash ? window.location.hash.slice(1) || "/" : window.location.pathname
        }
        listen() {
            return M.debug("[Router] Starting to listen for navigation events"),
            this._handleNavigation = () => {
                this.redirectCount = 0,
                this.navigate(this.getPathFromLocation()).then(t => {}
                )
            }
            ,
            this._handleLinkClick = t => {
                if (t.target.tagName === "A") {
                    let r = t.target.getAttribute("href");
                    if (r && (this.useHash && r.startsWith("#") || !this.useHash && t.target.href.startsWith(window.location.origin))) {
                        t.preventDefault();
                        let l = this.useHash ? r.slice(1) : t.target.pathname;
                        this.redirectCount = 0,
                        this.navigateTo(l).then(e => {}
                        )
                    }
                }
            }
            ,
            M.debug("[Router] Listening for navigation events"),
            window.addEventListener(this.useHash ? "hashchange" : "popstate", this._handleNavigation),
            M.debug("[Router] Listening for link clicks"),
            document.addEventListener("click", this._handleLinkClick),
            this._initPlugins(),
            this.redirectCount = 0,
            this.navigate(this.getPathFromLocation()).then(t => {}
            ),
            this
        }
        _initPlugins() {
            M.debug("[Router] Init plugins"),
            this.plugins.forEach( ({plugin: t, options: r}) => {
                typeof t.onInit == "function" && t.onInit(this, r)
            }
            )
        }
        usePlugin(t, r={}) {
            if (!t)
                return this;
            if (M.debug("[Router] Using plugin", t),
            typeof t == "object" && typeof t.install == "function")
                M.debug("[Router] Installing plugin", t),
                t.install(this, r);
            else if (typeof t == "function")
                M.debug("[Router] Executing plugin", t),
                t(this, r);
            else
                return M.warn("Invalid plugin format. Plugin must be an object with install method or a function."),
                this;
            return M.debug("[Router] Add plugin to store", t),
            this.plugins.push({
                plugin: t,
                options: r
            }),
            M.debug("[Router] Plugin initialized"),
            this
        }
        destroy() {
            M.debug("[Router] Destroying router"),
            this.plugins.forEach( ({plugin: t, options: r}) => {
                M.debug("[Router] Destroying plugin", t),
                typeof t.onDestroy == "function" && t.onDestroy(this, r)
            }
            ),
            M.debug("[Router] Removing event listeners"),
            window.removeEventListener(this.useHash ? "hashchange" : "popstate", this._handleNavigation),
            document.removeEventListener("click", this._handleLinkClick),
            window.removeEventListener("unhandledrejection", this.handleError),
            this._handleNavigation = null,
            this._handleLinkClick = null,
            this.routes = {},
            this.plugins = [],
            this.cache.clear(),
            M.debug("[Router] Router destroyed")
        }
    }
    ;
    Vn.info = () => {
        console.info(`%c Router %c v${Ug} %c ${Ng} `, "color: #ffffff; font-weight: bold; background: #ed1cab", "color: white; background: darkgreen", "color: white; background: #0080fe;")
    }
    ;
    var Sg = Vn
      , On = Sg;
    globalThis.Router = On;
    var Tg = class {
        constructor() {
            this.events = new Map
        }
        on(t, r) {
            return this.events.has(t) || this.events.set(t, new Set),
            this.events.get(t).add(r),
            () => this.off(t, r)
        }
        off(t, r) {
            this.events.has(t) && this.events.get(t).delete(r)
        }
        emit(t, r) {
            this.events.has(t) && this.events.get(t).forEach(l => {
                try {
                    l(r)
                } catch (e) {
                    console.error(`Error when performing an event handler ${t}:`, e)
                }
            }
            )
        }
    }
    , Wo = Tg, jg = `
    <style>
        #model-devtools-panel  { 
            position: fixed;
            bottom: 0;
            right: 0;
            width: 300px;
            height: 400px;
            background: #242424;
            color: #fff;
            border: 1px solid #333;
            z-index: 9999;
            font-family: monospace;
            
            *::-webkit-scrollbar {
              width: 10px;
            }
            
            * {
              scrollbar-width: thin;
            }
            
            .devtools-section {
                padding: 8px;
                margin: 4px;
                border: 1px solid #444;
                cursor: pointer;
                hover: background-color: #333;
                font-size: 12px;
            }
            
            h3 {
                margin: 0;
                font-size: 14px;
                border-bottom: 1px solid #333;
                padding-bottom: 4px;
            }
        }
        
        #model-dev-tools-toggle-button {
            position: fixed;
            bottom: 10px;
            right: 10px;
            z-index: 9998;
            height: 36px;
            width: 36px;
            background: #444;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }        

        #model-devtools-time-travel-dialog {
            position: fixed;
            bottom: 0;
            right: 304px;
            background: #2a2a2a;
            border: 1px solid #444;
            border-radius: 4px;
            height: 400px;
            width: 300px;
            z-index: 10000;
            color: #fff;
            font-family: monospace;
            
            *::-webkit-scrollbar {
              width: 10px;
            }
            
            * {
              scrollbar-width: thin;
            }
            
            .time-travel-items {
                padding: 4px; 
                height: calc(100% - 35px); 
                overflow: auto;
                position: relative;
            }
            
            .time-travel-item {
                padding: 8px;
                margin: 4px;
                border: 1px solid #444;
                cursor: pointer;
                hover: background-color: #333;
                font-size: 12px;
                
                button {
                    margin-top: 8px;
                    background: dodgerblue;
                }
            }
        }
        
        #model-devtools-panel, #model-devtools-time-travel-dialog {
            button {
                height: 20px;
                display: inline-flex;
                align-items: center;
                justify-content: center;
                font-size: 12px;
                border-radius: 4px;
                border: 1px solid #444;
                background: #333;
                color: #fff;
                cursor: pointer;
                
                @media (hover: hover) {
                    &:hover {
                        background: #444;
                    }
                }

                @media (hover: none) {
                    &:hover {
                        background: #444;
                    }
                }
            }        
        }
        
        .dev-tools-header {
            padding: 8px; 
            border-bottom: 1px solid #333; 
            display: flex; 
            justify-content: space-between;
        }
    </style>
`, Rg = jg, _g = class {
        constructor(t, r={}) {
            this.model = t,
            this.options = V({
                enabled: !0,
                timeTravel: !0,
                maxSnapshots: 50
            }, r),
            this.history = [],
            this.currentIndex = -1,
            this.initializeDevTools()
        }
        initializeDevTools() {
            window.__MODEL_DEVTOOLS__ = this,
            this.createDevToolsPanel(),
            this.setupModelListeners()
        }
        createDevToolsPanel() {
            let t = document.createElement("div");
            t.id = "model-devtools-panel",
            t.style.cssText = "display: none;";
            let r = document.createElement("div");
            r.innerHTML = `
            ${Rg}
            <div class="dev-tools-header">
                <span>\u{1F6E0} Model DevTools</span>
                <div>
                    <button id="devtools-time-travel" title="Time Travel">\u23F1</button>
                    <button id="devtools-close" title="Close">\xD7</button>
                </div>
            </div>
        `;
            let l = document.createElement("div");
            l.style.cssText = `
            padding: 8px;
            height: calc(100% - 35px);
            overflow: auto;
        `,
            l.id = "model-devtools-content",
            t.appendChild(r),
            t.appendChild(l),
            document.body.appendChild(t),
            this.createToggleButton(),
            document.getElementById("devtools-close").onclick = () => this.togglePanel(),
            document.getElementById("devtools-time-travel").onclick = () => this.showTimeTravelDialog()
        }
        showTimeTravelDialog() {
            let t = document.getElementById("model-devtools-time-travel-dialog");
            t || (t = document.createElement("div"),
            t.id = "model-devtools-time-travel-dialog");
            let r = [...this.history].reverse().map( (l, e) => `
            <div class="time-travel-item">
                <div>Time: ${new Date(l.timestamp).toLocaleTimeString()}</div>
                <div>Type: ${l.type}</div>
                <div>Property: ${l.property || l.event || l.path || ""}</div>
                <div>Value: ${l.type === "computed-update" ? l.newValue : typeof l.oldValue != "undefined" && typeof l.newValue != "undefined" ? `${JSON.stringify(l.oldValue)} -> ${JSON.stringify(l.newValue)}` : JSON.stringify(l.newValue || l.value || "")}</div>
                <button style="display: none" onclick="window.__MODEL_DEVTOOLS__.timeTravel(${this.history.length - 1 - e})">Apply this state</button>
            </div>
        `).join("");
            t.innerHTML = `
            <div class="dev-tools-header">
                <span>\u23F1 Time Travel</span>
                <div>
                    <button style="margin-left: auto;" onclick="window.__MODEL_DEVTOOLS__.clearTimeTravel()">CLear</button>
                    <button onclick="this.parentElement.parentElement.parentElement.remove()">\xD7</button>                
                </div>
            </div>
            <div class="time-travel-items">${r || "Nothing to show!"}</div>
        `,
            document.body.appendChild(t)
        }
        createToggleButton() {
            let t = document.createElement("button");
            t.id = "model-dev-tools-toggle-button",
            t.textContent = "\u{1F6E0}",
            t.title = "Model DevTools",
            t.onclick = () => this.togglePanel(),
            document.body.appendChild(t)
        }
        setupModelListeners() {
            this.model.store.on("change", t => {
                this.logChange({
                    type: "data-change",
                    path: t.path,
                    oldValue: t.oldValue,
                    newValue: t.newValue,
                    timestamp: Date.now()
                })
            }
            ),
            this.model.store.on("*", (t, r) => {
                t !== "change" && t !== "compute" && t !== "arrayChange" && this.logChange({
                    type: "store-event",
                    event: t,
                    data: r,
                    timestamp: Date.now()
                })
            }
            ),
            this.model.on("*", (t, r) => {
                t !== "change" && t !== "compute" && this.logChange({
                    type: "model-event",
                    event: t,
                    data: r,
                    timestamp: Date.now()
                })
            }
            ),
            this.model.store.on("compute", t => {
                this.logChange({
                    type: "computed-update",
                    property: t.key,
                    dependencies: Array.from(t.dependencies),
                    newValue: t.value,
                    timestamp: Date.now()
                })
            }
            ),
            this.model.store.on("arrayChange", t => {
                this.logChange({
                    type: "array-operation",
                    path: t.path,
                    method: t.method,
                    args: t.args,
                    oldValue: t.oldValue,
                    newValue: t.newValue,
                    timestamp: Date.now()
                })
            }
            )
        }
        logChange(t) {
            this.options.enabled && (this.options.timeTravel && this.saveSnapshot(t),
            this.updateDisplay())
        }
        saveSnapshot(t) {
            let r = st(V({}, t), {
                state: JSON.parse(JSON.stringify(this.model.data)),
                computed: this.getComputedValues()
            });
            this.history = this.history.slice(0, this.currentIndex + 1),
            this.history.push(r),
            this.currentIndex++,
            this.history.length > this.options.maxSnapshots && (this.history.shift(),
            this.currentIndex--)
        }
        updateDisplay() {
            let t = document.getElementById("model-devtools-content");
            if (!t)
                return;
            let r = i => {
                if (i === void 0)
                    return "undefined";
                if (i === null)
                    return "null";
                try {
                    return Array.isArray(i) ? `Array(${i.length}) ${JSON.stringify(i, null, 2)}` : JSON.stringify(i, null, 2)
                } catch (s) {
                    return String(i)
                }
            }
              , l = this.getRecentChanges()
              , e = "";
            for (let i of l) {
                let s;
                try {
                    let c = st(V({}, i), {
                        timestamp: new Date(i.timestamp).toLocaleTimeString()
                    });
                    s = JSON.stringify(c, null, 2)
                } catch (c) {
                    s = `Error formatting change: ${c.message}`
                }
                e += `
            <div style="border-bottom: 1px solid #444; padding-bottom: 8px; overflow-x: auto">
                <pre>${s}</pre>
            </div>
`
            }
            let o = this.getComputedValues();
            t.innerHTML = `
        <div class="devtools-section">
            <h3>Current State:</h3>
            <pre>${r(this.model.data)}</pre>
        </div>
        <div class="devtools-section">
            <h3>Computed Values:</h3>
            <pre>${r(o)}</pre>
        </div>
        <div class="devtools-section">
            <h3>DOM Dependencies:</h3>
            <pre>${this.formatDOMDependencies()}</pre>
        </div>
        <div class="devtools-section">
            <h3>Recent Changes:</h3>
            ${e}
        </div>
    `,
            document.getElementById("model-devtools-time-travel-dialog") && this.showTimeTravelDialog()
        }
        formatDOMDependencies() {
            try {
                let t = {};
                return this.model.dom.domDependencies.forEach( (r, l) => {
                    t[l] = Array.from(r).map(e => ({
                        type: e.type,
                        element: e.element.tagName
                    }))
                }
                ),
                JSON.stringify(t, null, 2)
            } catch (t) {
                return `Error formatting DOM dependencies: ${t.message}`
            }
        }
        getComputedValues() {
            if (!this.model.computed)
                return {};
            if (typeof this.model.computed.all == "function")
                return this.model.computed.all();
            if (this.model.computed.keys && Array.isArray(this.model.computed.keys)) {
                let r = {};
                for (let l of this.model.computed.keys)
                    r[l] = this.model.computed.getValue(l);
                return r
            }
            let t = {};
            for (let r in this.model.data)
                this.model.computed && typeof this.model.computed[r] != "undefined" && (t[r] = this.model.data[r]);
            return t
        }
        getRecentChanges() {
            return this.history.slice(-5).reverse()
        }
        togglePanel() {
            let t = document.getElementById("model-devtools-panel");
            t && (t.style.display = t.style.display === "none" ? "block" : "none"),
            t.style.display === "none" && document.getElementById("model-devtools-time-travel-dialog").remove()
        }
        inspect(t) {
            return this.model.store.get(t)
        }
        timeTravel(t) {
            this.options.timeTravel;
            return;
            try {
                let l = this.options.enabled;
                if (this.options.enabled = !1,
                this.model.store.setState(r.state),
                this.model.computed)
                    if (typeof this.model.computed.recomputeAll == "function")
                        this.model.computed.recomputeAll();
                    else
                        for (let e in r.computed)
                            typeof this.model.computed.evaluate == "function" ? this.model.computed.evaluate(e, !0) : typeof this.model.computed.recompute == "function" && this.model.computed.recompute(e);
                this.model.dom.updateAllDOM(),
                this.currentIndex = t,
                this.options.enabled = l
            } catch (l) {
                console.error("Error during time travel:", l)
            }
        }
        clearTimeTravel() {
            this.history = [],
            this.currentIndex = -1,
            this.showTimeTravelDialog()
        }
        startPerfMonitoring() {
            this.perfMetrics = {
                updates: 0,
                computations: 0,
                domUpdates: 0,
                startTime: Date.now()
            },
            this.model.store.on("change", () => {
                this.perfMetrics.updates++
            }
            ),
            this.model.store.on("compute", () => {
                this.perfMetrics.computations++
            }
            )
        }
        getPerfReport() {
            let t = (Date.now() - this.perfMetrics.startTime) / 1e3;
            return {
                totalUpdates: this.perfMetrics.updates,
                updatesPerSecond: this.perfMetrics.updates / t,
                computationsPerSecond: this.perfMetrics.computations / t,
                domUpdatesPerSecond: this.perfMetrics.domUpdates / t
            }
        }
    }
    , Jg = _g, Gg = class {
        constructor() {
            this.middlewares = []
        }
        use(t) {
            if (typeof t != "function") {
                console.error("MIDDLEWARE should be a function!");
                return
            }
            this.middlewares.push(t)
        }
        process(t) {
            return L(this, null, function*() {
                let r = -1
                  , l = () => L(this, null, function*() {
                    r++,
                    r < this.middlewares.length && (yield this.middlewares[r](t, l))
                });
                return yield l(),
                t
            })
        }
    }
    , Hg = Gg, q, y = (q = class {
        static log(r, l, e) {
            if (r > q.DEBUG_LEVEL)
                return;
            let o = {
                error: "color: #ff5555; font-weight: bold",
                warn: "color: #ffaa00; font-weight: bold",
                info: "color: #0080fe; font-weight: bold",
                debug: "color: #00aa00; font-weight: bold",
                trace: "color: #888888",
                data: "color: #555; font-style: italic"
            }, a, i;
            switch (r) {
            case q.DEBUG_LEVELS.ERROR:
                a = "error",
                i = console.error;
                break;
            case q.DEBUG_LEVELS.WARN:
                a = "warn",
                i = console.warn;
                break;
            case q.DEBUG_LEVELS.INFO:
                a = "info",
                i = console.info;
                break;
            case q.DEBUG_LEVELS.DEBUG:
                a = "debug",
                i = console.debug;
                break;
            case q.DEBUG_LEVELS.TRACE:
                a = "trace",
                i = console.log;
                break;
            default:
                return
            }
            console.group(`%c Model: ${l}`, o[a]),
            e !== void 0 && console.log("%c Data:", o.data, e),
            console.groupEnd()
        }
        static error(r, l) {
            q.log(q.DEBUG_LEVELS.ERROR, r, l)
        }
        static warn(r, l) {
            q.log(q.DEBUG_LEVELS.WARN, r, l)
        }
        static info(r, l) {
            q.log(q.DEBUG_LEVELS.INFO, r, l)
        }
        static debug(r, l) {
            q.log(q.DEBUG_LEVELS.DEBUG, r, l)
        }
        static trace(r, l) {
            q.log(q.DEBUG_LEVELS.TRACE, r, l)
        }
    }
    ,
    I(q, "DEBUG_LEVELS", {
        NONE: 0,
        ERROR: 1,
        WARN: 2,
        INFO: 3,
        DEBUG: 4,
        TRACE: 5
    }),
    I(q, "DEBUG_LEVEL", q.DEBUG_LEVELS.NONE),
    q), Pg = class extends Wo {
        constructor(t={}, r) {
            y.DEBUG_LEVEL = r.options.debug ? 4 : 0,
            y.debug("Init ReactiveStore"),
            super(),
            this.model = r,
            y.DEBUG_LEVEL = this.model.options.debug ? 4 : 0,
            y.debug("Init ReactiveStore"),
            this.state = this.createReactiveProxy(t),
            this.watchers = new Map,
            this.previousState = JSON.parse(JSON.stringify(t)),
            y.debug("Init MiddlewareManager"),
            this.middleware = new Hg,
            y.debug("MiddlewareManager initialized"),
            y.debug("ReactiveStore initialized")
        }
        use(t) {
            y.debug("Registering middleware:", t),
            this.middleware.use(t)
        }
        createReactiveProxy(t, r="") {
            return y.debug(`Creating reactive object with path ${r} for`, t),
            Array.isArray(t) ? this.createArrayProxy(t, r) : new Proxy(t,{
                get: (l, e) => {
                    if (typeof e == "symbol")
                        return l[e];
                    let o = l[e]
                      , a = r ? `${r}.${e}` : e;
                    return o && typeof o == "object" ? this.createReactiveProxy(o, a) : o
                }
                ,
                set: (l, e, o) => L(this, null, function*() {
                    var c, d;
                    if (typeof e == "symbol")
                        return l[e] = o,
                        !0;
                    let a = r ? `${r}.${e}` : e
                      , i = l[e];
                    if (i === o)
                        return !0;
                    if ((c = this.validators) != null && c.has(`${a}`) && !this.validators.get(`${a}`)(o))
                        return !1;
                    (d = this.formatters) != null && d.has(`${a}`) && (o = this.formatters.get(`${a}`)(o)),
                    o && typeof o == "object" && (o = this.createReactiveProxy(o, a));
                    let s = {
                        prop: e,
                        oldValue: i,
                        newValue: o,
                        preventDefault: !1
                    };
                    return yield this.middleware.process(s),
                    s.preventDefault || (l[e] = o,
                    this.emit("change", {
                        path: a,
                        oldValue: i,
                        newValue: o
                    }),
                    this.watchers.has(a) && this.watchers.get(a).forEach(p => {
                        p(o, i)
                    }
                    )),
                    !0
                }),
                deleteProperty: (l, e) => {
                    if (typeof e == "symbol")
                        return delete l[e];
                    let o = r ? `${r}.${e}` : e
                      , a = l[e]
                      , i = delete l[e];
                    return i && (this.emit("delete", {
                        path: o,
                        oldValue: a
                    }),
                    this.watchers.has(o) && this.watchers.get(o).forEach(s => {
                        s(void 0, a)
                    }
                    )),
                    i
                }
            })
        }
        createArrayProxy(t, r) {
            return y.debug(`Creating reactive array with path ${r} for`, t),
            new Proxy(t,{
                get: (l, e) => {
                    if (typeof e == "symbol")
                        return l[e];
                    let o = l[e];
                    return typeof o == "function" && ["push", "pop", "shift", "unshift", "splice", "sort", "reverse"].includes(e) ? (...a) => {
                        let i = [...l]
                          , s = l[e].apply(l, a)
                          , c = {
                            prop: r,
                            oldValue: i,
                            newValue: l,
                            method: e,
                            args: a,
                            preventDefault: !1
                        };
                        return this.middleware.process(c).then( () => {
                            c.preventDefault || (this.emit("arrayChange", {
                                path: r,
                                method: e,
                                args: a,
                                oldValue: i,
                                newValue: l
                            }),
                            this.emit("change", {
                                path: r,
                                oldValue: i,
                                newValue: l,
                                method: e,
                                args: a
                            }),
                            this.watchers.has(r) && this.watchers.get(r).forEach(d => {
                                d(l, i)
                            }
                            ))
                        }
                        ),
                        s
                    }
                    : typeof e != "symbol" && !isNaN(Number(e)) && o && typeof o == "object" ? this.createReactiveProxy(o, `${r}[${e}]`) : o
                }
                ,
                set: (l, e, o) => L(this, null, function*() {
                    var c, d;
                    if (typeof e == "symbol")
                        return l[e] = o,
                        !0;
                    let a = r ? `${r}.${e}` : e
                      , i = l[e];
                    if (i === o)
                        return !0;
                    if ((c = this.validators) != null && c.has(a) && !this.validators.get(a)(o))
                        return !1;
                    (d = this.formatters) != null && d.has(a) && (o = this.formatters.get(a)(o)),
                    l[e] = o,
                    o && typeof o == "object" && (o = this.createReactiveProxy(o, `${r}[${e}]`));
                    let s = {
                        prop: e,
                        oldValue: i,
                        newValue: o,
                        preventDefault: !1
                    };
                    return yield this.middleware.process(s),
                    s.preventDefault || (l[e] = o,
                    this.middleware.process(s).then( () => {
                        s.preventDefault || (this.emit("arrayChange", {
                            path: a,
                            method: null,
                            args: null,
                            oldValue: i,
                            newValue: o
                        }),
                        this.emit("change", {
                            path: a,
                            oldValue: i,
                            newValue: o,
                            arrayIndex: Number(e)
                        }),
                        this.watchers.has(a) && this.watchers.get(a).forEach(p => {
                            p(o, i)
                        }
                        ))
                    }
                    )),
                    !0
                })
            })
        }
        applyArrayMethod(t, r, ...l) {
            y.debug(`Applying array method ${r} to path ${t} with args`, l);
            let e = this.get(t);
            if (!Array.isArray(e))
                return console.error(`\u041F\u0443\u0442\u044C ${t} \u043D\u0435 \u044F\u0432\u043B\u044F\u0435\u0442\u0441\u044F \u043C\u0430\u0441\u0441\u0438\u0432\u043E\u043C!`),
                !1;
            let o = [...e]
              , a = e[r].apply(e, l);
            return this.emit("arrayChange", {
                path: t,
                method: r,
                args: l,
                oldValue: o,
                newValue: [...e]
            }),
            this.emit("change", {
                path: t,
                oldValue: o,
                newValue: [...e]
            }),
            this.watchers.has(t) && this.watchers.get(t).forEach(i => {
                i([...e], o)
            }
            ),
            a
        }
        applyArrayChanges(t, r) {
            y.debug(`Applying custom array changes to path ${t} with callback`, r);
            let l = this.get(t);
            if (!Array.isArray(l))
                return console.error(`The path ${t} is not an array!`),
                !1;
            let e = [...l]
              , o = r(l);
            return this.emit("arrayChange", {
                path: t,
                method: "custom",
                args: null,
                oldValue: e,
                newValue: [...l]
            }),
            this.emit("change", {
                path: t,
                oldValue: e,
                newValue: [...l]
            }),
            this.watchers.has(t) && this.watchers.get(t).forEach(a => {
                a([...l], e)
            }
            ),
            o
        }
        detectArrayChanges(t, r=[]) {
            y.debug("Detecting changes between arrays");
            let l = {
                added: [],
                removed: [],
                moved: []
            };
            for (let e = 0; e < t.length; e++) {
                let o = t[e]
                  , a = r.findIndex(i => JSON.stringify(i) === JSON.stringify(o));
                a === -1 ? l.added.push({
                    index: e,
                    item: o
                }) : a !== e && l.moved.push({
                    oldIndex: a,
                    newIndex: e,
                    item: o
                })
            }
            for (let e = 0; e < r.length; e++) {
                let o = r[e];
                t.findIndex(i => JSON.stringify(i) === JSON.stringify(o)) === -1 && l.removed.push({
                    index: e,
                    item: o
                })
            }
            return y.debug("Detected changes:", l),
            l
        }
        watch(t, r) {
            return y.debug(`Watching path ${t} with callback`, r),
            this.watchers.has(t) || this.watchers.set(t, new Set),
            this.watchers.get(t).add(r),
            () => {
                this.watchers.has(t) && this.watchers.get(t).delete(r)
            }
        }
        get(t) {
            if (y.debug(`Getting value at path ${t}`),
            !t)
                return this.state;
            let r = t.split(".")
              , l = this.state;
            for (let e of r) {
                if (l == null)
                    return;
                l = l[e]
            }
            return l
        }
        set(t, r) {
            y.debug(`Setting value at path ${t} to`, r);
            let l = t.split(".")
              , e = this.state;
            for (let o = 0; o < l.length - 1; o++)
                e[l[o]] === void 0 && (e[l[o]] = {}),
                e = e[l[o]];
            return e[l[l.length - 1]] = r,
            r
        }
        batch(t) {
            y.debug("Batch updating state with", t),
            this.previousState = JSON.parse(JSON.stringify(this.state)),
            typeof t == "function" ? t(this.state) : typeof t == "object" && Object.entries(t).forEach( ([r,l]) => {
                this.set(r, l)
            }
            ),
            this.emit("batchComplete", {
                previousState: this.previousState,
                currentState: this.state
            })
        }
        getState() {
            return y.debug("Getting entire state"),
            this.state
        }
        getPreviousState() {
            return y.debug("Getting previous state"),
            this.previousState
        }
        toJSON() {
            return y.debug("Converting state to JSON"),
            JSON.stringify(this.state)
        }
        fromJSON(t) {
            y.debug("Restoring state from JSON", t);
            let r = JSON.parse(t);
            this.previousState = JSON.parse(JSON.stringify(this.state)),
            Object.keys(this.state).forEach(l => {
                delete this.state[l]
            }
            ),
            Object.entries(r).forEach( ([l,e]) => {
                this.state[l] = e
            }
            ),
            this.emit("restore", {
                previousState: this.previousState,
                currentState: this.state
            })
        }
        addValidator(t, r) {
            y.debug(`Adding validator for path ${t}`),
            this.validators || (this.validators = new Map),
            this.validators.set(t, r)
        }
        addFormatter(t, r) {
            y.debug(`Adding formatter for path ${t}`),
            this.formatters || (this.formatters = new Map),
            this.formatters.set(t, r)
        }
        isValidPath(t) {
            y.debug(`Validating path ${t}`);
            try {
                return this.get(t) !== void 0
            } catch (r) {
                return y.error(`Error validating path ${t}:`, r),
                !1
            }
        }
        destroy() {
            this.state = null,
            this.watchers.clear(),
            this.previousState = null,
            y.debug("ReactiveStore destroyed")
        }
    }
    , Vg = class {
        constructor(t, r) {
            y.DEBUG_LEVEL = r.options.debug ? 4 : 0,
            y.debug("Init LoopManager"),
            this.domManager = t,
            this.model = r,
            this.loops = new Map,
            this.loopsIn = [],
            y.debug("LoopManager initialized")
        }
        parseLoops(t) {
            y.debug("Parsing loops with data-for...");
            let r = t.querySelectorAll("[data-for]");
            y.debug("Found elements with data-for:", r.length),
            r.forEach(e => {
                let o = e.getAttribute("data-for").trim()
                  , a = o.match(/^\s*(\w+)(?:\s*,\s*(\w+))?\s+in\s+(\w+(?:\.\w+)*)\s*$/);
                if (!a) {
                    console.error("Invalid expression format data-for:", o);
                    return
                }
                let[i,s,c,d] = a
                  , p = this.model.store.get(d);
                if (!Array.isArray(p)) {
                    console.error(`The value in the ${d} path is not an array:`, p);
                    return
                }
                let m = e.cloneNode(!0);
                this.loops.set(e, {
                    template: m,
                    itemName: s,
                    indexName: c,
                    arrayPath: d,
                    parentNode: e.parentNode
                }),
                this.domManager.registerDomDependency(d, e, {
                    type: "loop",
                    arrayPath: d
                }),
                this.updateLoop(e)
            }
            ),
            y.debug("Parsing loops with data-in...");
            let l = t.querySelectorAll("[data-in]");
            y.debug("Found elements with data-in:", l.length),
            l.forEach(e => {
                let o = e.getAttribute("data-in")
                  , a = o.match(/^\s*(\w+)\s+in\s+(\S+)\s*$/);
                if (!a) {
                    console.error(`Invalid data-in syntax: ${o}`);
                    return
                }
                let[i,s,c] = a
                  , d = e.innerHTML
                  , p = e.parentNode
                  , m = document.createComment(`data-in: ${o}`);
                e.style.display = "none",
                p.insertBefore(m, e),
                this.loopsIn.push({
                    type: "in",
                    originalElement: e,
                    template: d,
                    placeholder: m,
                    objectPath: c,
                    keyVar: s,
                    elements: []
                });
                let g = this.model.store.get(c);
                g && typeof g == "object" && !Array.isArray(g) && this.updateInLoop(this.loopsIn[this.loopsIn.length - 1], g)
            }
            )
        }
        updateInLoop(t, r) {
            t.elements.forEach(l => l.remove()),
            t.elements = [],
            !(!r || typeof r != "object" || Array.isArray(r)) && Object.keys(r).forEach(l => {
                y.debug(`Updating loop for key: ${l}`);
                let e = t.originalElement.cloneNode(!0);
                e.removeAttribute("data-in"),
                e.style.display = "";
                let o = {
                    [t.keyVar]: l
                };
                e.innerHTML = this.processTemplate(t.template, r, l, o),
                t.placeholder.parentNode.insertBefore(e, t.placeholder.nextSibling),
                t.elements.push(e),
                this.domManager.bindDOM(e)
            }
            )
        }
        processTemplate(t, r, l, e) {
            return y.debug("Processing template:", t),
            y.debug("	 With data:", r),
            y.debug(`	 For key: ${l}`),
            y.debug("	 With context:", e),
            t.replace(/\{\{\s*([^}]+)\s*\}\}/g, (o, a) => {
                a = a.trim();
                let i = Object.keys(e)[0];
                if (a === i)
                    return l;
                y.debug(`Template: Processing path: ${a}`);
                let s = new RegExp(`(\\w+)\\[${i}\\]`)
                  , c = a.match(s);
                if (c) {
                    let p = c[1]
                      , m = r;
                    if (m && typeof m == "object")
                        return m[l] !== void 0 ? m[l] : ""
                }
                let d = this.model.store.get(a);
                return d !== void 0 ? d : ""
            }
            )
        }
        updateLoops(t, r) {
            y.debug("Updating data-for loops for ${path}", this.loops),
            this.loops.forEach( (l, e) => {
                l.arrayPath === t && this.updateLoop(e)
            }
            ),
            y.debug(`Updating data-in loops for ${t}`, this.loopsIn),
            this.loopsIn.forEach(l => {
                if (l.type === "in" && (l.objectPath === t || t.startsWith(l.objectPath + "."))) {
                    let e = this.model.store.get(l.objectPath);
                    e && typeof e == "object" && this.updateInLoop(l, e)
                }
            }
            )
        }
        updateLoop(t) {
            y.debug("Updating loop for element:", t);
            let r = this.loops.get(t) || this.loopsIn.find(d => d.originalElement === t)[0];
            if (!r) {
                console.error("\u0418\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F \u043E \u0446\u0438\u043A\u043B\u0435 \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u0430 \u0434\u043B\u044F \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430");
                return
            }
            let {template: l, itemName: e, indexName: o, arrayPath: a, parentNode: i} = r
              , s = this.model.store.get(a);
            if (!Array.isArray(s)) {
                console.error("\u0417\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u043D\u0435 \u044F\u0432\u043B\u044F\u0435\u0442\u0441\u044F \u043C\u0430\u0441\u0441\u0438\u0432\u043E\u043C:", s);
                return
            }
            i.querySelectorAll(`[data-generated-for="${a}"]`).forEach(d => d.remove()),
            s.forEach( (d, p) => {
                let m = l.cloneNode(!0);
                m.style.display = "",
                m.removeAttribute("data-for"),
                m.setAttribute("data-generated-for", a),
                m.setAttribute("data-item-index", "" + p),
                y.debug(`Creating new loop element for ${a} at index ${p}`),
                this.domManager.processTemplateNode(m, {
                    [e]: d,
                    [o || "index"]: p
                }),
                y.debug("Insert new node", m),
                i.insertBefore(m, t)
            }
            ),
            t.style.display = "none"
        }
        updateLoopPart(t, r, l, e) {
            let o = this.loops.get(t);
            if (!o)
                return;
            let {template: a, itemName: i, indexName: s, parentNode: c} = o
              , d = this.model.store.get(r);
            if (!Array.isArray(d))
                return;
            let p = Array.from(c.querySelectorAll(`[data-generated-for="${r}"]`));
            if (e === void 0 || p.length !== d.length)
                return this.updateLoop(t);
            let m = p[e];
            if (m) {
                let g = a.cloneNode(!0);
                for (this.domManager.processTemplateNode(g, {
                    [i]: d[e],
                    [s || "index"]: e
                }); m.firstChild; )
                    m.removeChild(m.firstChild);
                for (; g.firstChild; )
                    m.appendChild(g.firstChild);
                Array.from(g.attributes).forEach(f => {
                    m.setAttribute(f.name, f.value)
                }
                )
            }
        }
        getLoops() {
            return {
                for: this.loops,
                in: this.loopsIn
            }
        }
        destroy() {
            this.loops.clear(),
            this.loopsIn = [],
            y.debug("LoopManager destroyed")
        }
    }
    , Te = class {
        static evaluateExpression(t, r) {
            try {
                if (t.startsWith("{{") && t.endsWith("}}")) {
                    let l = t.substring(2, t.length - 2).trim();
                    return this.getValueFromContext(r, l)
                }
                return this.parseExpression(t, r)
            } catch (l) {
                return console.error("\u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u0440\u0438 \u0432\u044B\u0447\u0438\u0441\u043B\u0435\u043D\u0438\u0438 \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u044F:", l),
                !1
            }
        }
        static getValueFromContext(t, r) {
            return r ? r.split(".").reduce( (l, e) => {
                let o = e.match(/^([^\[]+)(?:\[(\d+)\])?$/);
                if (o) {
                    let[a,i,s] = o
                      , c = l == null ? void 0 : l[i];
                    return s !== void 0 && Array.isArray(c) ? c[parseInt(s, 10)] : c
                }
                return l == null ? void 0 : l[e]
            }
            , t) : t
        }
        static parseExpression(t, r) {
            t = t.trim();
            let l = t.match(/(.+?)\s*\?\s*(.+?)\s*:\s*(.+)/);
            if (l) {
                let[o,a,i,s] = l;
                return this.parseExpression(a, r) ? this.parseExpression(i, r) : this.parseExpression(s, r)
            }
            if (t.includes("&&"))
                return t.split("&&").every(a => this.parseExpression(a.trim(), r));
            if (t.includes("||"))
                return t.split("||").some(a => this.parseExpression(a.trim(), r));
            let e = t.match(/(.+?)\s*(===|==|!==|!=|>=|<=|>|<)\s*(.+)/);
            if (e) {
                let[o,a,i,s] = e
                  , c = this.parseExpression(a.trim(), r)
                  , d = this.parseExpression(s.trim(), r);
                switch (i) {
                case "==":
                    return c == d;
                case "===":
                    return c === d;
                case "!=":
                    return c != d;
                case "!==":
                    return c !== d;
                case ">":
                    return c > d;
                case "<":
                    return c < d;
                case ">=":
                    return c >= d;
                case "<=":
                    return c <= d
                }
            }
            if (t.startsWith("'") && t.endsWith("'") || t.startsWith('"') && t.endsWith('"'))
                return t.substring(1, t.length - 1);
            if (/^-?\d+(\.\d+)?$/.test(t))
                return parseFloat(t);
            if (t === "true")
                return !0;
            if (t === "false")
                return !1;
            if (t === "null")
                return null;
            if (t !== "undefined")
                return this.getValueFromContext(r, t)
        }
        static extractVariables(t) {
            let r = []
              , e = t.replace(/'[^']*'/g, "''").replace(/"[^"]*"/g, '""').match(/[a-zA-Z_][a-zA-Z0-9_]*(\.([a-zA-Z_][a-zA-Z0-9_]*))*(\[\d+\])*/g);
            return e && e.forEach(o => {
                let a = o.split(".")[0].split("[")[0].trim();
                ["true", "false", "null", "undefined"].includes(a) || r.includes(a) || r.push(a)
            }
            ),
            r
        }
    }
    , Og = class {
        constructor(t, r) {
            y.DEBUG_LEVEL = r.options.debug ? 4 : 0,
            y.debug("ConditionalManager: Init ConditionalManager"),
            this.dom = t,
            this.model = r,
            this.dependencies = new Map,
            this.conditionalGroups = [],
            this.subscribe(),
            y.debug("ConditionalManager: ConditionalManager initialized")
        }
        subscribe() {
            y.debug("ConditionalManager: Subscribe to store changes"),
            this.model.store.on("change", t => {
                this.getGroupsByPath(t.path).forEach(l => {
                    this.updateConditionalGroup(l)
                }
                )
            }
            )
        }
        getGroupsByPath(t) {
            if (!t)
                return [];
            let r = new Set;
            return this.conditionalGroups.forEach(l => {
                l.some(o => o.expression ? o.expression.includes(t) || t.startsWith(this.extractBasePath(o.expression)) : !1) && r.add(l)
            }
            ),
            Array.from(r)
        }
        extractBasePath(t) {
            let r = t.match(/[a-zA-Z_][a-zA-Z0-9_]*/g);
            return r ? r[0] : ""
        }
        parseConditionals(t) {
            y.debug("ConditionalManager: Parse conditionals (data-if, data-else-if, data-else)...");
            let r = t.querySelectorAll("[data-if],[data-else-if],[data-else]")
              , l = []
              , e = [];
            r.forEach(o => {
                o.hasAttribute("data-if") ? (y.debug("ConditionalManager: Found data-if in element:", o),
                l.length && e.push(l),
                l = [{
                    element: o,
                    type: "if",
                    expression: o.getAttribute("data-if")
                }]) : o.hasAttribute("data-else-if") ? (y.debug("ConditionalManager: Found data-else-if in element:", o),
                l.length && this.isAdjacentNode(l[l.length - 1].element, o) ? l.push({
                    element: o,
                    type: "else-if",
                    expression: o.getAttribute("data-else-if")
                }) : (l.length && e.push(l),
                l = [{
                    element: o,
                    type: "if",
                    expression: o.getAttribute("data-else-if")
                }])) : o.hasAttribute("data-else") && (y.debug("ConditionalManager: Found data-else in element:", o),
                l.length && this.isAdjacentNode(l[l.length - 1].element, o) ? (l.push({
                    element: o,
                    type: "else",
                    expression: null
                }),
                e.push(l),
                l = []) : y.warn("data-else without previous data-if or data-else-if", o))
            }
            ),
            l.length && e.push(l),
            this.conditionalGroups = e,
            e.forEach(o => this.updateConditionalGroup(o)),
            this.setupDependencies(r)
        }
        isAdjacentNode(t, r) {
            let l = t.nextSibling;
            for (; l; ) {
                if (l === r)
                    return !0;
                if (l.nodeType === 1 && !this.isWhitespaceNode(l))
                    return !1;
                l = l.nextSibling
            }
            return !1
        }
        isWhitespaceNode(t) {
            return t.nodeType === 3 && t.textContent.trim() === ""
        }
        updateConditionalGroup(t) {
            let r = this.model && this.model.store ? V({}, this.model.store.getState()) : this.model && this.model.data ? this.model.data : {}
              , l = !1;
            for (let e of t)
                e.type === "if" || e.type === "else-if" ? !l && Te.evaluateExpression(e.expression, r) ? (e.element.style.display = "",
                l = !0) : e.element.style.display = "none" : e.type === "else" && (e.element.style.display = l ? "none" : "")
        }
        updateConditional(t, r) {
            let l = this.findGroupForElement(t);
            if (l)
                this.updateConditionalGroup(l);
            else {
                let e = this.model && this.model.store ? V({}, this.model.store.getState()) : this.model && this.model.data ? this.model.data : {}
                  , o = Te.evaluateExpression(r, e);
                t.style.display = o ? "" : "none"
            }
        }
        findGroupForElement(t) {
            for (let r of this.conditionalGroups || [])
                if (r.some(l => l.element === t))
                    return r;
            return null
        }
        setupDependencies(t) {
            this.dependencies = new Map,
            t.forEach(r => {
                let l;
                if (r.hasAttribute("data-if"))
                    l = r.getAttribute("data-if");
                else if (r.hasAttribute("data-else-if"))
                    l = r.getAttribute("data-else-if");
                else
                    return;
                Te.extractVariables(l).forEach(o => {
                    this.dependencies.has(o) || this.dependencies.set(o, []),
                    this.dependencies.get(o).push({
                        element: r,
                        expression: l,
                        type: r.hasAttribute("data-if") ? "if" : "else-if"
                    })
                }
                )
            }
            )
        }
        getDependenciesByPath(t) {
            let r = [];
            return this.dependencies.forEach( (l, e) => {
                (e === t || t.startsWith(e + ".")) && r.push(...l)
            }
            ),
            r
        }
        destroy() {
            this.dependencies.clear(),
            this.conditionalGroups = [],
            y.debug("ConditionalManager: Destroyed")
        }
    }
    , Lg = class {
        constructor(t, r) {
            this.domManager = t,
            this.model = r,
            y.DEBUG_LEVEL = this.model.options.debug ? 4 : 0,
            y.debug("AttributeManager: Init AttributeManager")
        }
        parseAttributesBind(t) {
            y.debug("AttributeManager: Parsing attributes bind with data-bind...");
            let r = t.querySelectorAll("[data-bind]");
            y.debug("AttributeManager: Found elements with data-bind:", r.length),
            r.forEach(l => {
                y.debug("AttributeManager: Parsing element with data-bind:", l);
                let e = l.getAttribute("data-bind");
                try {
                    let o = JSON.parse(e.replace(/'/g, '"'));
                    for (let[a,i] of Object.entries(o)) {
                        let s = Te.extractVariables(i);
                        y.debug(`AttributeManager: Found variables for ${a}:`, s),
                        s.forEach(c => {
                            this.domManager.registerDomDependency(c, l, {
                                type: "attribute",
                                attribute: a,
                                expression: i
                            })
                        }
                        ),
                        this.updateAttributes(l, a, i)
                    }
                } catch (o) {
                    console.error("An error of analysis of attachments:", o)
                }
            }
            )
        }
        updateAttributes(t, r, l) {
            let e = V({}, this.model.store.getState()), o;
            if (l.startsWith("{{") && l.endsWith("}}")) {
                let i = l.substring(2, l.length - 2).trim();
                o = this.model.store.get(i)
            } else
                o = Te.evaluateExpression(l, e);
            let a = t.getAttribute(r);
            String(o) !== a && (o === !1 || o === null || o === void 0 ? t.removeAttribute(r) : o === !0 ? t.setAttribute(r, "") : t.setAttribute(r, String(o)),
            y.debug(`AttributeManager: Updated attribute ${r} with value:`, o))
        }
        parseAttributes(t) {
            y.debug("AttributeManager: Parsing attributes with colon...");
            let r = t.querySelectorAll("*");
            for (let l of r) {
                let e = l.attributes;
                for (let o = 0; o < e.length; o++) {
                    let a = e[o];
                    if (a.name.startsWith(":")) {
                        y.debug("AttributeManager: Found attribute:", a);
                        let i = a.name.substring(1)
                          , s = a.value;
                        this.updateElementAttribute(l, i, s),
                        this.domManager.registerDomDependency(s, l, {
                            type: "attribute",
                            attribute: i,
                            expression: s
                        }),
                        l.removeAttribute(a.name)
                    }
                }
            }
        }
        updateElementAttribute(t, r, l) {
            let e = "" + this.model.store.get(l);
            e === void 0 || e === "undefined" || (y.debug(`AttributeManager: Updating attribute ${r} with ${e}`),
            r === "class" ? t.className = e : r === "disabled" || r === "checked" || r === "selected" || r === "readonly" ? e ? t.setAttribute(r, "") : t.removeAttribute(r) : t.setAttribute(r, e))
        }
        update(t, r, l) {
            y.debug("AttributeManager: Updating element:", t),
            y.debug(`	 Attribute: ${r} for:`, l),
            this.updateAttributes(t, r, l),
            this.updateElementAttribute(t, r, l)
        }
    }
    , Wg = class {
        constructor(t, r) {
            y.DEBUG_LEVEL = r.options.debug ? 4 : 0,
            y.debug("EventManager: Init EventManager"),
            this.domManager = t,
            this.model = r,
            this.eventHandlers = new Map,
            y.debug("EventManager: EventManager initialized")
        }
        parseEvents(t) {
            y.debug("EventManager: Parsing events with @...");
            let r = t.querySelectorAll("*");
            [t, ...Array.from(r)].forEach(e => {
                Array.from(e.attributes || []).forEach(a => {
                    if (a.name.startsWith("@")) {
                        y.debug(`EventManager: Found attribute with "@" ${a.name} in`, e);
                        let i = a.name.substring(1)
                          , s = a.value.trim();
                        this.bindEventHandler(e, i, s),
                        e.removeAttribute(a.name)
                    }
                }
                )
            }
            )
        }
        bindEventHandler(t, r, l) {
            y.debug(`EventManager: Binding event handler with expression ${l} for ${r} on`, t);
            let e = a => {
                try {
                    let i = {
                        $model: this.model,
                        $event: a,
                        $data: this.model.data,
                        $dom: this.domManager
                    }
                      , s = l.match(/(\w+)\((.*)\)/);
                    if (s) {
                        let c = s[1]
                          , d = s[2]
                          , p = (g, f) => g.split(".").reduce( (u, h) => u && u[h] !== void 0 ? u[h] : void 0, f)
                          , m = p(c, this.model);
                        if (m || (m = p(c, window)),
                        typeof m == "function") {
                            let g = [];
                            d.trim() && (g = d.split(",").map(f => (f = f.trim(),
                            f.startsWith('"') && f.endsWith('"') || f.startsWith("'") && f.endsWith("'") ? f.slice(1, -1) : isNaN(f) ? f === "$event" ? (y.debug("EventManager: Requested Event", a),
                            a) : f === "$model" ? (y.debug("EventManager: Requested Model", this.model),
                            this.model) : f === "$data" ? (y.debug("EventManager: Requested Model Context", this.model.data),
                            this.model.data) : f === "$dom" ? (y.debug("EventManager: Requested DOMManager", this.domManager),
                            this.domManager) : this.model.store.get(f) : Number(f)))),
                            m.apply(i, g)
                        } else
                            console.warn(`EventManager: The method '${c}' not found in a model or global space!`)
                    } else
                        this.model.options.useSimpleExpressions ? new Function(`return ${l}`).apply(this.model.data) : console.warn(`EventManager: Unknown format of the event handler: '${l}'`)
                } catch (i) {
                    console.error(`EventManager: Error when performing an event processor '${r}': ${i.message}`)
                }
            }
            ;
            this.eventHandlers.has(t) || this.eventHandlers.set(t, new Map);
            let o = this.eventHandlers.get(t);
            o.has(r) && t.removeEventListener(r, o.get(r)),
            o.set(r, e),
            t.addEventListener(r, e)
        }
        removeEventHandler(t, r) {
            if (y.debug(`EventManager: Removing event handler for ${r} on`, t),
            this.eventHandlers.has(t)) {
                let l = this.eventHandlers.get(t);
                if (l.has(r)) {
                    let e = l.get(r);
                    t.removeEventListener(r, e),
                    l.delete(r),
                    l.size === 0 && this.eventHandlers.delete(t)
                }
            }
        }
        updateEvents(t) {
            y.debug("EventManager: Updating events for", t),
            Array.from(t.attributes || []).forEach(r => {
                if (r.name.startsWith("@")) {
                    let l = r.name.substring(1)
                      , e = r.value.trim();
                    this.bindEventHandler(t, l, e),
                    t.removeAttribute(r.name)
                }
            }
            )
        }
        destroy() {
            y.debug("EventManager: Destroying EventManager"),
            this.eventHandlers.forEach( (t, r) => {
                t.forEach( (l, e) => {
                    y.debug(`EventManager: Removing event handler for ${e} on`, r),
                    r.removeEventListener(e, l)
                }
                )
            }
            ),
            this.eventHandlers.clear(),
            y.debug("EventManager: Destroyed")
        }
    }
    , Kg = class {
        constructor(t) {
            y.DEBUG_LEVEL = t.options.debug ? 4 : 0,
            y.debug("DOMManager: Init DOMManager"),
            this.model = t,
            this.elements = [],
            this.inputs = [],
            this.domDependencies = new Map,
            this.virtualDom = new Map,
            this.loopManager = new Vg(this,t),
            this.conditionalManager = new Og(this,t),
            this.attributeManager = new Lg(this,t),
            this.eventManager = new Wg(this,t),
            y.debug("DOMManager: DOMManager initialized")
        }
        registerDomDependency(t, r, l) {
            this.domDependencies.has(t) || this.domDependencies.set(t, new Set),
            this.domDependencies.get(t).add(V({
                element: r
            }, l))
        }
        processTemplateNode(t, r) {
            if (y.debug("DOMManager: processTemplateNode", {
                node: t,
                context: r
            }),
            t.nodeType === Node.TEXT_NODE) {
                let l = t.textContent
                  , e = t.textContent.replace(/\{\{\s*([^}]+)\s*\}\}/g, (o, a) => {
                    a = a.trim();
                    let s = r ? ( (c, d) => d.split(".").reduce( (p, m) => p ? p[m] : void 0, c))(r, a) : void 0;
                    return s === void 0 && (s = this.model.store.get(a)),
                    s !== void 0 ? s : ""
                }
                );
                l !== e && (y.debug(`DOMManager: updated node text from ${l} to ${e}`),
                t.textContent = e)
            } else
                t.nodeType === Node.ELEMENT_NODE && Array.from(t.childNodes).forEach(l => {
                    this.processTemplateNode(l, r)
                }
                )
        }
        parse(t) {
            y.debug("DOMManager: parse from", t);
            let r = document.createTreeWalker(t, NodeFilter.SHOW_TEXT, null), l, e = /\{\{\s*([^}]+)\s*\}\}/g;
            for (; l = r.nextNode(); ) {
                let a, i = l.textContent, s = i;
                for (e.lastIndex = 0; (a = e.exec(i)) !== null; ) {
                    y.debug(`DOMManager: parse match found for ${i}`, a);
                    let c = a[1].trim();
                    this.registerDomDependency(c, l, {
                        type: "template",
                        template: s
                    }),
                    this.elements.push({
                        node: l,
                        propName: c,
                        template: s
                    })
                }
                y.debug("DOMManager: update virtual DOM set", {
                    node: l,
                    text: l.textContent
                }),
                this.virtualDom.set(l, l.textContent)
            }
            y.debug("DOMManager: Find inputs with data-model directive...");
            let o = t.querySelectorAll("[data-model]");
            y.debug("DOMManager: Found inputs with data-model:", o.length),
            o.forEach(a => {
                let i = a.getAttribute("data-model");
                y.debug("DOMManager: Register handler for:", {
                    input: a,
                    property: i
                });
                let s = c => {
                    let d = a.type === "checkbox" || a.type === "radio" ? c.target.checked : c.target.value;
                    this.model.store.set(i, d)
                }
                ;
                a.__modelInputHandler = s,
                a.addEventListener("input", s),
                this.inputs.push({
                    element: a,
                    property: i
                })
            }
            )
        }
        setInputValue(t, r) {
            t.type === "checkbox" || t.type === "radio" ? t.checked = !!r : t.value = r
        }
        updateInputs(t, r) {
            y.debug("DOMManager: updateInputs", {
                propName: t,
                value: r
            }),
            this.inputs.forEach(l => {
                l.property === t && (y.debug("DOMManager: update input", {
                    item: l,
                    value: r
                }),
                this.setInputValue(l.element, r))
            }
            )
        }
        updateAllDOM() {
            y.debug("DOMManager: updateAllDOM"),
            this.elements.forEach(t => {
                let r = t.template;
                r = r.replace(/\{\{\s*([^}]+)\s*\}\}/g, (l, e) => (e = e.trim(),
                this.model.store.get(e))),
                t.node.textContent = r,
                y.debug("DOMManager: updated node", {
                    element: t,
                    newContent: r
                })
            }
            ),
            y.debug("DOMManager: update inputs"),
            this.inputs.forEach(t => {
                y.debug("DOMManager: update input", {
                    item: t
                });
                let r = this.model.store.get(t.property);
                this.setInputValue(t.element, r),
                y.debug("DOMManager: updated input", {
                    item: t,
                    value: r
                })
            }
            )
        }
        updateDOM(t, r) {
            if (y.debug(`DOMManager: update DOM for ${t} with ${r}`),
            !t) {
                console.warn("Path is undefined in updateDOM");
                return
            }
            let l = r && typeof r == "object" && "method"in r;
            l && (t = r.path || t);
            let e = new Set;
            this.domDependencies.has(t) && this.domDependencies.get(t).forEach(c => e.add(c));
            let o = t.split(".")
              , a = "";
            for (let c = 0; c < o.length; c++)
                a = a ? `${a}.${o[c]}` : o[c],
                this.domDependencies.has(a) && this.domDependencies.get(a).forEach(d => e.add(d));
            if (this.conditionalManager.getDependenciesByPath(t).forEach(c => {
                c.type === "if" && this.conditionalManager.updateConditional(c.element, c.expression)
            }
            ),
            this.domDependencies.forEach( (c, d) => {
                (d.startsWith(`${t}.`) || d.startsWith(`${t}[`)) && c.forEach(p => e.add(p))
            }
            ),
            (Array.isArray(r) || l || typeof r == "object") && this.loopManager.updateLoops(t, r),
            e.size === 0)
                return;
            let s = {
                template: [],
                conditional: [],
                loop: [],
                attribute: []
            };
            e.forEach(c => {
                c && c.type && s[c.type].push(c)
            }
            ),
            s.template.forEach(c => this.updateTemplateNode(c.element, c.template)),
            s.conditional.forEach(c => this.conditionalManager.updateConditional(c.element, c.expression)),
            s.attribute.forEach(c => this.attributeManager.update(c.element, c.attribute, c.expression)),
            s.loop.forEach(c => this.loopManager.updateLoopPart(c.element, c.arrayPath, r, c.index))
        }
        updateTemplateNode(t, r) {
            let l = r.replace(/\{\{\s*([^}]+)\s*\}\}/g, (e, o) => (o = o.trim(),
            this.model.store.get(o)));
            this.virtualDom.get(t) !== l && (t.textContent = l,
            this.virtualDom.set(t, l))
        }
        isPathDependency(t, r) {
            return r === t || r.startsWith(`${t}.`) || r.startsWith(`${t}[`)
        }
        getDependentPaths(t) {
            let r = [];
            return this.domDependencies.forEach( (l, e) => {
                this.isPathDependency(t, e) && r.push(e)
            }
            ),
            r
        }
        bindDOM(t) {
            y.debug("DOMManager: bind DOM from", t),
            this.loopManager.parseLoops(t),
            this.conditionalManager.parseConditionals(t),
            this.attributeManager.parseAttributesBind(t),
            this.attributeManager.parseAttributes(t),
            this.eventManager.parseEvents(t),
            this.parse(t),
            this.updateAllDOM(),
            y.debug("DOMManager: binding completed")
        }
        destroy() {
            this.inputs.forEach( ({element: t}) => {
                t.__modelInputHandler && (t.removeEventListener("input", t.__modelInputHandler),
                delete t.__modelInputHandler)
            }
            ),
            this.elements = [],
            this.inputs = [],
            this.domDependencies.clear(),
            this.virtualDom.clear(),
            this.loopManager.destroy(),
            this.conditionalManager.destroy(),
            this.eventManager.destroy(),
            y.debug("DOMManager: destroyed")
        }
    }
    , Xg = class {
        constructor(t, r={}) {
            y.DEBUG_LEVEL = t.options.debug ? 4 : 0,
            y.debug("Model: Init ComputedProps:", r),
            this.model = t,
            this.computed = r,
            this.store = t.store,
            this.asyncCache = new Map,
            this.init().then( () => {
                Object.getOwnPropertyNames(this.computed).forEach(l => {
                    if (typeof this.computed[l].getter == "function")
                        try {
                            let e = this.computed[l].getter.call(this.store.getState());
                            y.debug(`Initializing computed property ${l}:`, e)
                        } catch (e) {
                            console.error(`Error initializing computed property ${l}:`, e)
                        }
                }
                ),
                y.debug("Model: ComputedProps initialized")
            }
            )
        }
        init() {
            return L(this, null, function*() {
                let t = [];
                for (let r in this.computed) {
                    let l = this.evaluate(r);
                    t.push(l),
                    Object.defineProperty(this.model.data, r, {
                        get: () => {
                            let e = this.computed[r];
                            return e.isAsync ? this.asyncCache.get(r) : e.value
                        }
                        ,
                        enumerable: !0,
                        configurable: !0
                    })
                }
                yield Promise.all(t);
                for (let r in this.computed) {
                    let l = this.computed[r].isAsync ? this.asyncCache.get(r) : this.computed[r].value;
                    this.model.dom.updateDOM(r, l),
                    this.model.dom.updateInputs(r, l)
                }
                return !0
            })
        }
        evaluate(t, r=!1) {
            return L(this, null, function*() {
                let l = this.computed[t]
                  , e = new Set
                  , o = new Proxy(this.store.getState(),{
                    get: (i, s) => {
                        e.add(s);
                        let c = i[s];
                        return c && typeof c == "object" ? new Proxy(c,{
                            get: (d, p) => (e.add(`${s}.${p}`),
                            d[p])
                        }) : c
                    }
                })
                  , a = l.getter.constructor.name === "AsyncFunction";
                l.isAsync = a;
                try {
                    let i = yield l.getter.call(o);
                    return l.dependencies = [...e],
                    a ? this.asyncCache.set(t, i) : l.value = i,
                    this.store.emit("compute", {
                        key: t,
                        value: i,
                        dependencies: e,
                        isAsync: a
                    }),
                    i
                } catch (i) {
                    throw console.error(`Error evaluating computed property "${t}":`, i),
                    i
                }
            })
        }
        update(t) {
            return L(this, null, function*() {
                let r = [];
                for (let l in this.computed) {
                    let e = L(this, null, function*() {
                        let o = yield this.evaluate(l);
                        this.model.dom.updateDOM(l, o),
                        this.model.dom.updateInputs(l, o)
                    });
                    r.push(e)
                }
                yield Promise.all(r)
            })
        }
        all() {
            return Object.fromEntries(Object.entries(this.computed).map( ([t,r]) => [t, r.value]))
        }
    }
    , qg = class Se extends Wo {
        constructor(r, l={}) {
            y.DEBUG_LEVEL = r.model.options.debug ? 4 : 0,
            y.debug("Init StateManager:", l),
            super(),
            this.store = r,
            this.options = Object.assign({
                id: "model"
            }, l),
            y.debug("StateManager initialized")
        }
        static isStorageAvailable() {
            try {
                let r = "__test__";
                return localStorage.setItem(r, r),
                localStorage.removeItem(r),
                !0
            } catch (r) {
                return !1
            }
        }
        saveState() {
            if (!Se.isStorageAvailable())
                return console.warn("localStorage is not available"),
                null;
            let l = {
                data: JSON.parse(JSON.stringify(this.store.getState())),
                timestamp: Date.now()
            };
            try {
                return localStorage.setItem(this.options.id, JSON.stringify(l)),
                this.emit("saveState", l),
                l
            } catch (e) {
                return console.error("Error saving state:", e),
                this.emit("saveStateError", e),
                null
            }
        }
        restoreState() {
            if (!Se.isStorageAvailable())
                return console.warn("localStorage is not available"),
                null;
            try {
                let r = localStorage.getItem(this.options.id);
                if (r) {
                    let l = JSON.parse(r);
                    return Object.assign(this.store.state, l.data),
                    this.emit("restoreState", l),
                    l
                }
            } catch (r) {
                this.emit("restoreStateError", r)
            }
        }
        createSnapshot() {
            if (!Se.isStorageAvailable())
                return console.warn("localStorage is not available"),
                null;
            let l = {
                data: JSON.parse(JSON.stringify(this.store.getState())),
                timestamp: Date.now()
            };
            return this.emit("createSnapshot", l),
            l
        }
        restoreSnapshot(r) {
            return Se.isStorageAvailable() ? r ? (Object.assign(this.store.state, r.data),
            this.emit("restoreSnapshot", r),
            r) : null : (console.warn("localStorage is not available"),
            null)
        }
        enableAutoSave(r=5e3) {
            this.autoSaveInterval = setInterval( () => {
                this.saveState()
            }
            , r)
        }
        disableAutoSave() {
            clearInterval(this.autoSaveInterval)
        }
    }
    , Zg = {
        id: "model",
        useSimpleExpressions: !0,
        debug: !1,
        plugins: [],
        validators: [],
        formatters: []
    }, $g = class extends Wo {
        constructor(t={}, r={}) {
            super(),
            this.options = V(V({}, Zg), r),
            y.DEBUG_LEVEL = this.options.debug ? 4 : 0,
            y.debug("Creating a model with data:", t),
            y.debug("Configuration options:", r),
            this.computed = {};
            for (let l in t)
                typeof t[l] == "function" && (y.debug(`Registration calculated property "${l}"`),
                this.computed[l] = {
                    getter: t[l],
                    value: null,
                    dependencies: []
                },
                delete t[l]);
            if (this.store = new Pg(t,this),
            this.data = this.store.state,
            this.dom = new Kg(this),
            this.computedProps = new Xg(this,this.computed),
            this.stateManager = new qg(this.store),
            this.plugins = new Map,
            this.options.plugins)
                for (let l of this.options.plugins) {
                    let {name: e, plugin: o, options: a} = l;
                    e && o && typeof o == "function" && this.registerPlugin(e, o, a)
                }
            if (this.options.validators)
                for (let l of this.options.validators) {
                    let {path: e, validator: o} = l;
                    e && o && typeof o == "function" && this.addValidator(e, o)
                }
            if (this.options.formatters)
                for (let l of this.options.formatters) {
                    let {path: e, formatter: o} = l;
                    e && o && typeof o == "function" && this.addValidator(e, o)
                }
            this.subscribe(),
            y.debug("The model was created successfully!")
        }
        subscribe() {
            y.debug("Subscribing to store changes"),
            this.store.on("change", t => {
                this.dom.updateDOM(t.path, t.newValue),
                this.dom.updateInputs(t.path, t.newValue),
                this.computedProps.update(t.path).then( () => {}
                ),
                this.emit("change", t)
            }
            ),
            this.store.on("compute", t => this.emit("compute", t)),
            this.store.on("arrayChange", t => this.emit("arrayChange", t)),
            this.store.on("batchComplete", t => this.emit("batchComplete", t)),
            y.debug("Subscribing to state manager events"),
            this.stateManager.on("saveState", t => this.emit("saveState", t)),
            this.stateManager.on("saveStateError", t => this.emit("saveStateError", t)),
            this.stateManager.on("restoreState", t => this.emit("restoreState", t)),
            this.stateManager.on("restoreStateError", t => this.emit("restoreStateError", t)),
            this.stateManager.on("createSnapshot", t => this.emit("createSnapshot", t)),
            this.stateManager.on("restoreSnapshot", t => this.emit("restoreSnapshot", t))
        }
        addValidator(t, r) {
            this.store.addValidator(t, r)
        }
        addFormatter(t, r) {
            this.store.addFormatter(t, r)
        }
        use(t) {
            this.store.use(t)
        }
        watch(t, r) {
            this.store.watch(t, r)
        }
        batch(t) {
            return this.store.batch(t)
        }
        diffArrays(t, r) {
            return this.store.detectArrayChanges(t, r)
        }
        diff() {}
        validate() {
            let t = []
              , r = [];
            for (let l in this.computed) {
                let e = new Set
                  , o = this._checkCyclicDependencies(l, e);
                o && t.push({
                    type: "CYCLIC_DEPENDENCY",
                    property: l,
                    message: `Cyclic dependence is found: ${o.join(" -> ")}`
                })
            }
            return this.dom.domDependencies.forEach( (l, e) => {
                this.store.isValidPath(e) || r.push({
                    type: "INVALID_PATH",
                    path: e,
                    message: `Property ${e} used in the template, but does not exist in the model`
                })
            }
            ),
            {
                errors: t,
                warnings: r
            }
        }
        _checkCyclicDependencies(t, r, l=[]) {
            if (r.has(t))
                return [...l, t];
            r.add(t),
            l.push(t);
            let e = this.computed[t];
            if (!e || !e.dependencies)
                return null;
            for (let o of e.dependencies)
                if (o in this.computed) {
                    let a = this._checkCyclicDependencies(o, new Set(r), [...l]);
                    if (a)
                        return a
                }
            return null
        }
        validatePath(t) {
            return this.store.isValidPath(t)
        }
        init(t) {
            y.debug("Initializing DOM bindings");
            let r = typeof t == "string" ? document.querySelector(t) : t;
            return r || (r = document.body),
            y.debug(`Model initialized in ${t != null ? t : "body"}`),
            y.debug("Binding DOM"),
            this.dom.bindDOM(r),
            this.emit("init"),
            y.debug("Initialization complete!"),
            this
        }
        runDevTools(t={}) {
            return new Jg(this,t)
        }
        save() {
            return this.stateManager.saveState()
        }
        restore() {
            return this.stateManager.restoreState()
        }
        snapshot(t) {
            return t ? this.stateManager.restoreSnapshot(t) : this.stateManager.createSnapshot()
        }
        autoSave(t) {
            t ? this.stateManager.enableAutoSave(t) : this.stateManager.disableAutoSave()
        }
        registerPlugin(t, r, l={}) {
            if (this.plugins.has(t))
                throw new Error(`Plugin ${t} already registered`);
            this.plugins.set(t, new r(this,l))
        }
        usePlugin(t, r={}) {
            let l = this.plugins.get(t);
            return l ? (l.run(),
            this) : (console.error(`Plugin ${t} not found`),
            this)
        }
        removePlugin(t) {
            this.plugins.has(t) && this.plugins.delete(t)
        }
        destroy() {
            this.dom.destroy(),
            this.store.destroy(),
            this.emit("destroy")
        }
    }
    , Ln = $g;
    var tf = "0.18.1"
      , ef = "18.05.2025, 14:40:40";
    Ln.info = () => {
        console.info(`%c Model %c v${tf} %c ${ef} `, "color: white; font-weight: bold; background: #0080fe", "color: white; background: darkgreen", "color: white; background: #0080fe;")
    }
    ;
    var Wn = Ln;
    globalThis.Model = Wn;
    (t => {
        "use strict";
        globalThis.__version__ = "5.1.10",
        globalThis.__build_time__ = "02.07.2025, 11:12:46";
        let r = t.meta("metro:init").attr("content")
          , l = t.meta("metro:cloak").attr("content")
          , e = t.meta("metro:cloak_duration").attr("content")
          , o = t.meta("metro:blur").attr("content")
          , a = t.meta("metro:smooth").attr("content")
          , i = t.meta("metro:theme").attr("content")
          , s = t.meta("metro:info").attr("content")
          , c = t.meta("metro:jquery").attr("content")
          , d = t.meta("metro:debug").attr("content");
        globalThis.METRO_INIT = r ? JSON.parse(r) : !0,
        i !== void 0 && t("html").addClass(i === "auto" ? t.dark ? "dark-side" : "" : i === "dark" ? "dark-side" : "light-side"),
        globalThis.METRO_BLUR_IMAGE = o ? JSON.parse(o) : !1,
        globalThis.jquery_present = typeof globalThis.jQuery != "undefined",
        globalThis.METRO_JQUERY = c ? JSON.parse(c) : !0,
        globalThis.useJQuery = globalThis.jquery_present && globalThis.METRO_JQUERY,
        globalThis.METRO_SHOW_INFO = s ? JSON.parse(s) : !1,
        globalThis.METRO_DEBUG = d ? JSON.parse(d) : !1,
        globalThis.METRO_CLOAK_REMOVE = l ? `${l}`.toLowerCase() : "fade",
        globalThis.METRO_CLOAK_DURATION = e ? Number.parseInt(e) : 300,
        globalThis.METRO_SMOOTH_SCROLL = a ? JSON.parse(a) : !0,
        globalThis.METRO_DATE_FORMAT = "DD.MM.YYYY",
        globalThis.METRO_TIME_FORMAT = "HH:mm:ss",
        globalThis.METRO_DATETIME_FORMAT = "DD.MM.YYYY HH:mm:ss",
        globalThis.METRO_TIMEOUT = 3e3,
        globalThis.METRO_MEDIA = []
    }
    )(Dom);
    var eo = "ontouchstart"in window
      , Kn = {
        controlsPosition: {
            INSIDE: "inside",
            OUTSIDE: "outside"
        },
        groupMode: {
            ONE: "one",
            MULTI: "multi"
        },
        aspectRatio: {
            HD: "hd",
            SD: "sd",
            CINEMA: "cinema"
        },
        fullScreenMode: {
            WINDOW: "window",
            DESKTOP: "desktop"
        },
        position: {
            TOP: "top",
            BOTTOM: "bottom",
            LEFT: "left",
            RIGHT: "right",
            TOP_RIGHT: "top-right",
            TOP_LEFT: "top-left",
            BOTTOM_LEFT: "bottom-left",
            BOTTOM_RIGHT: "bottom-right",
            LEFT_BOTTOM: "left-bottom",
            LEFT_TOP: "left-top",
            RIGHT_TOP: "right-top",
            RIGHT_BOTTOM: "right-bottom"
        },
        popoverEvents: {
            CLICK: "click",
            HOVER: "hover",
            FOCUS: "focus"
        },
        stepperView: {
            SQUARE: "square",
            CYCLE: "cycle",
            DIAMOND: "diamond"
        },
        listView: {
            LIST: "list",
            CONTENT: "content",
            ICONS: "icons",
            ICONS_MEDIUM: "icons-medium",
            ICONS_LARGE: "icons-large",
            TILES: "tiles",
            TABLE: "table"
        },
        events: {
            click: "click",
            start: eo ? "touchstart" : "mousedown",
            stop: eo ? "touchend" : "mouseup",
            move: eo ? "touchmove" : "mousemove",
            enter: eo ? "touchstart" : "mouseenter",
            startAll: "mousedown touchstart",
            stopAll: "mouseup touchend",
            moveAll: "mousemove touchmove",
            leave: "mouseleave",
            focus: "focus",
            blur: "blur",
            resize: "resize",
            keyup: "keyup",
            keydown: "keydown",
            keypress: "keypress",
            dblclick: "dblclick",
            input: "input",
            change: "change",
            cut: "cut",
            paste: "paste",
            scroll: "scroll",
            mousewheel: "mousewheel",
            inputchange: "change input propertychange cut paste copy drop",
            dragstart: "dragstart",
            dragend: "dragend",
            dragenter: "dragenter",
            dragover: "dragover",
            dragleave: "dragleave",
            drop: "drop",
            drag: "drag"
        },
        keyCode: {
            BACKSPACE: 8,
            TAB: 9,
            ENTER: 13,
            SHIFT: 16,
            CTRL: 17,
            ALT: 18,
            BREAK: 19,
            CAPS: 20,
            ESCAPE: 27,
            SPACE: 32,
            PAGEUP: 33,
            PAGEDOWN: 34,
            END: 35,
            HOME: 36,
            LEFT_ARROW: 37,
            UP_ARROW: 38,
            RIGHT_ARROW: 39,
            DOWN_ARROW: 40,
            COMMA: 188
        },
        media_queries: {
            FS: "(min-width: 0px)",
            XS: "(min-width: 360px)",
            SM: "(min-width: 576px)",
            LD: "(min-width: 640px)",
            MD: "(min-width: 768px)",
            LG: "(min-width: 992px)",
            XL: "(min-width: 1200px)",
            XXL: "(min-width: 1452px)",
            XXXL: "(min-width: 2000px)"
        },
        media_sizes: {
            FS: 0,
            XS: 360,
            SM: 576,
            LD: 640,
            MD: 768,
            LG: 992,
            XL: 1200,
            XXL: 1452,
            XXXL: 2e3
        },
        media_mode: {
            FS: "fs",
            XS: "xs",
            SM: "sm",
            LD: "ld",
            MD: "md",
            LG: "lg",
            XL: "xl",
            XXL: "xxl",
            XXXL: "xxxl"
        },
        media_modes: ["fs", "xs", "sm", "ld", "md", "lg", "xl", "xxl", "xxxl"],
        actions: {
            NONE: 0,
            REMOVE: 1,
            HIDE: 2,
            MINIMIZE: 3,
            MAXIMIZE: 4,
            CLOSE: 5,
            RESTORE: 6,
            SHOW: 7
        },
        theme: {
            LIGHT: "light",
            DARK: "dark"
        }
    };
    (t => {
        "use strict";
        if (typeof Dom == "undefined")
            throw new Error("Metro UI requires Dom library!");
        if (!("MutationObserver"in window))
            throw new Error("Metro UI requires MutationObserver!");
        let r = "ontouchstart"in window || navigator.MaxTouchPoints > 0 || navigator.msMaxTouchPoints > 0
          , l = o => typeof o != "string" ? void 0 : o.replace(/-/g, "").toLowerCase()
          , e = {
            version: "5.1.10",
            build_time: "02.07.2025, 11:12:46",
            buildNumber: 0,
            isTouchable: r,
            fullScreenEnabled: document.fullscreenEnabled,
            sheet: null,
            hotkeys: {},
            locales: {},
            utils: {},
            colors: {},
            dialog: null,
            pagination: null,
            md5: null,
            storage: null,
            export: null,
            animations: null,
            cookie: null,
            template: null,
            defaults: {},
            info: () => {
                globalThis.METRO_SHOW_INFO && e.welcome()
            }
            ,
            welcome: () => {
                console.info(`%c METRO UI %c v${e.version} %c ${e.build_time} `, "color: pink; font-weight: bold; background: #800000", "color: white; background: darkgreen", "color: white; background: #0080fe;"),
                globalThis.$ && t.info && t.info(),
                globalThis.Hooks && Hooks.info && Hooks.info(),
                globalThis.HTML && HTML.info && HTML.info(),
                globalThis.Farbe && Farbe.info && Farbe.info(),
                globalThis.Datetime && Datetime.info && Datetime.info(),
                globalThis.Str && Str.info && Str.info(),
                globalThis.G && G.info && G.info(),
                globalThis.Router && Router.info && Router.info(),
                globalThis.Model && Model.info && Model.info()
            }
            ,
            aboutDlg: () => {
                alert(`Metro UI - v${e.version}`)
            }
            ,
            observe: () => {
                let o = {
                    childList: !0,
                    attributes: !0,
                    subtree: !0
                }
                  , a = s => {
                    s.map(c => {
                        if (c.type === "attributes" && c.attributeName !== "data-role")
                            if (c.attributeName === "data-hotkey")
                                e.initHotkeys([c.target], !0);
                            else {
                                let d = t(c.target)
                                  , p = d.data("metroComponent")
                                  , m = c.attributeName
                                  , g = d.attr(m)
                                  , f = c.oldValue;
                                p !== void 0 && (d.fire("attr-change", {
                                    attr: m,
                                    newValue: g,
                                    oldValue: f,
                                    __this: d[0]
                                }),
                                t.each(p, function() {
                                    let u = e.getPlugin(d, this);
                                    u && typeof u.changeAttribute == "function" && u.changeAttribute(m, g, f)
                                }))
                            }
                        else if (c.type === "childList" && c.addedNodes.length > 0) {
                            let d = [], p = [], m, g, f = c.addedNodes;
                            if (f.length) {
                                for (let u of t(f).find("[data-hotkey]"))
                                    p.push(t(u));
                                for (let u = 0; u < f.length; u++)
                                    g = f[u],
                                    m = t(g),
                                    m.attr("data-role") !== void 0 && d.push(g),
                                    t.each(m.find("[data-role]"), function() {
                                        d.indexOf(this) === -1 && d.push(this)
                                    });
                                d.length && e.initWidgets(d, "observe"),
                                p.length && e.initHotkeys(p)
                            }
                        }
                    }
                    )
                }
                ;
                new MutationObserver(a).observe(t("html")[0], o)
            }
            ,
            init: () => {
                let o = t("[data-role]")
                  , a = t("[data-hotkey]")
                  , i = t("html");
                if (e.i18n.load(i.attr("lang")),
                e.info(),
                r === !0 && i.addClass("touchable-device"),
                e.sheet = e.utils.newCssSheet(),
                e.utils.addCssRule(e.sheet, "*, *::before, *::after", "box-sizing: border-box;"),
                globalThis.METRO_MEDIA = [],
                t.each(e.media_queries, (s, c) => {
                    e.utils.media(c) && globalThis.METRO_MEDIA.push(e.media_mode[s])
                }
                ),
                e.observe(),
                e.initHotkeys(a),
                e.initWidgets(o, "init"),
                globalThis.METRO_CLOAK_REMOVE !== "fade" ? (t(".m4-cloak").removeClass("m4-cloak"),
                t(".cloak").removeClass("cloak"),
                t(globalThis).fire("metro-initiated")) : t(".m4-cloak, .cloak").animate({
                    draw: {
                        opacity: [0, 1]
                    },
                    dur: 300,
                    onDone: () => {
                        t(".m4-cloak").removeClass("m4-cloak"),
                        t(".cloak").removeClass("cloak"),
                        t(globalThis).fire("metro-initiated")
                    }
                }),
                t(document).on("click", "[data-copy-to-clipboard]", function() {
                    let s = t(this).attr("data-copy-to-clipboard");
                    e.utils.copy2clipboard(s),
                    e.toast && e.toast.create(`Data ${s} copied to clipboard!`)
                }),
                METRO_SMOOTH_SCROLL) {
                    let s = document.querySelectorAll('a.smooth-scroll[href^="#"]');
                    for (let c of s)
                        c.addEventListener("click", d => {
                            d.preventDefault();
                            let p = c.getAttribute("href");
                            document.querySelector(p).scrollIntoView({
                                behavior: "smooth",
                                block: "start"
                            })
                        }
                        )
                }
            }
            ,
            initHotkeys: (o, a) => {
                t.each(o, function() {
                    let i = t(this)
                      , s = i.attr("data-hotkey") ? i.attr("data-hotkey").toLowerCase() : !1
                      , c = i.attr("data-hotkey-func") ? i.attr("data-hotkey-func") : !1;
                    s !== !1 && (i.data("hotKeyBonded") === !0 && a !== !0 || (e.hotkeys[s] = [this, c],
                    i.data("hotKeyBonded", !0),
                    i.fire("hot-key-bonded", {
                        __this: i[0],
                        hotkey: s,
                        fn: c
                    })))
                })
            }
            ,
            initWidgets: o => {
                t.each(o, function() {
                    let a = t(this);
                    if (!this.hasAttribute("data-role"))
                        return;
                    a.attr("data-role").split(/\s*,\s*/).map(s => {
                        let c = e.utils.$()
                          , d = l(s);
                        if (c.fn[d] !== void 0 && a.attr(`data-role-${d}`) === void 0)
                            try {
                                c.fn[d].call(a),
                                a.attr(`data-role-${d}`, !0);
                                let p = a.data("metroComponent");
                                p === void 0 ? p = [d] : p.push(d),
                                a.data("metroComponent", p),
                                a.fire("create", {
                                    __this: a[0],
                                    name: d
                                }),
                                t(document).fire("component-create", {
                                    element: a[0],
                                    name: d
                                })
                            } catch (p) {
                                throw console.error(`Error creating component ${s} for `, a[0]),
                                p
                            }
                    }
                    )
                }),
                e.i18n.updateUI()
            }
            ,
            plugin: (o, a) => {
                let i = l(o)
                  , s = c => {
                    c.fn[i] = function(d) {
                        return this.each(function() {
                            c.data(this, i, Object.create(a).init(d, this))
                        })
                    }
                }
                ;
                s(Dom),
                globalThis.useJQuery && s(globalThis.jQuery)
            }
            ,
            pluginExists: o => typeof (globalThis.useJQuery ? globalThis.jQuery : Dom).fn[l(o)] == "function",
            destroyPlugin: (o, a) => {
                let i = t(o)
                  , s = l(a)
                  , c = e.getPlugin(i, s);
                if (typeof c == "undefined") {
                    console.warn(`Component ${a} can not be destroyed: the element is not a Metro UI component.`);
                    return
                }
                if (typeof c.destroy != "function") {
                    console.warn(`Component ${a} can not be destroyed: method destroy not found.`);
                    return
                }
                c.destroy();
                let d = i.data("metroComponent");
                e.utils.arrayDelete(d, s),
                i.data("metroComponent", d),
                t.removeData(i[0], s),
                i.removeAttr(`data-role-${s}`)
            }
            ,
            destroyPluginAll: o => {
                let a = t(o)
                  , i = a.data("metroComponent");
                i !== void 0 && i.length > 0 && t.each(i, function() {
                    e.destroyPlugin(a[0], this)
                })
            }
            ,
            noop: () => {}
            ,
            noop_true: () => !0,
            noop_false: () => !1,
            noop_arg: o => o,
            requestFullScreen: o => {
                o.mozRequestFullScreen ? o.mozRequestFullScreen() : o.webkitRequestFullScreen ? o.webkitRequestFullScreen() : o.msRequestFullscreen ? o.msRequestFullscreen() : o.requestFullscreen().catch(a => {
                    console.warn(`Error attempting to enable full-screen mode: ${a.message} ${a.name}`)
                }
                )
            }
            ,
            exitFullScreen: () => {
                document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitCancelFullScreen ? document.webkitCancelFullScreen() : document.msExitFullscreen ? document.msExitFullscreen() : document.exitFullscreen().catch(o => {
                    console.warn(`Error attempting to disable full-screen mode: ${o.message} ${o.name}`)
                }
                )
            }
            ,
            inFullScreen: () => (document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement) !== void 0,
            $: () => globalThis.useJQuery ? globalThis.jQuery : Dom,
            get$el: o => e.$()(t(o)[0]),
            get$elements: o => e.$()(t(o)),
            getPlugin: (o, a) => {
                let i = l(a)
                  , s = e.get$el(o);
                return s.length ? s.data(i) : void 0
            }
            ,
            getPlugins: o => {
                let a = e.get$el(o)
                  , i = a.data("metroComponent");
                return i === void 0 ? [] : i.map(s => {
                    let c = l(s);
                    return a.data(c)
                }
                )
            }
            ,
            makePlugin: (o, a, i) => {
                let s = l(a)
                  , c = e.get$elements(o);
                return c.length && typeof c[s] == "function" ? c[s](i) : void 0
            }
            ,
            Component: (o, a) => {
                let i = l(o)
                  , s = e.utils
                  , c = t.extend({
                    name: i
                }, {
                    _super: function(d, p, m, g) {
                        this.elem = d,
                        this.element = t(d),
                        this.options = t.extend({}, m, p),
                        this.component = this.elem,
                        this.locale = "en",
                        this.strings = {},
                        this._setOptionsFromDOM(),
                        this._runtime(),
                        this._setLocale(),
                        g && typeof g == "object" && t.each(g, (f, u) => {
                            this[f] = u
                        }
                        ),
                        this._createExec()
                    },
                    _setOptionsFromDOM: function() {
                        let d = this.element
                          , p = this.options;
                        t.each(d.data(), (m, g) => {
                            if (m in p)
                                try {
                                    p[m] = JSON.parse(g)
                                } catch (f) {
                                    p[m] = g
                                }
                        }
                        )
                    },
                    _runtime: function() {
                        let d = this.element, p, m = (d.attr("data-role") || "").toArray(",").map(g => l(g)).filter(g => g.trim() !== "");
                        d.attr(`data-role-${this.name}`) || (d.attr(`data-role-${this.name}`, !0),
                        m.indexOf(this.name) === -1 && (m.push(this.name),
                        d.attr("data-role", m.join(","))),
                        p = d.data("metroComponent"),
                        p === void 0 ? p = [this.name] : p.push(this.name),
                        d.data("metroComponent", p))
                    },
                    _createExec: function() {
                        let d = this.options[`${this.name}Deferred`];
                        d ? setTimeout( () => {
                            this._create()
                        }
                        , d) : this._create()
                    },
                    _fireEvent: function(d, p, m, g, f=null) {
                        let u = this.element
                          , h = this.options
                          , b = str(d).camelCase().capitalize(!1).value
                          , w = t.extend({}, p, {
                            __this: u[0]
                        });
                        return m && (console.warn(m),
                        console.warn(`Event: on${b}`),
                        console.warn("Data: ", p),
                        console.warn("Element: ", u[0])),
                        g !== !0 && u.fire(b.toLowerCase(), p),
                        s.exec(h[`on${b}`], Object.values(w), f || u[0])
                    },
                    _fireEvents: function(d, p, m, g, f) {
                        let u = this;
                        if (arguments.length === 0)
                            return;
                        if (arguments.length === 1)
                            return t.each(d, function() {
                                u._fireEvent(this.name, this.data, this.log, this.noFire, f)
                            }),
                            s.objectLength(d);
                        if (!Array.isArray(d) && typeof d != "string")
                            return;
                        let h = Array.isArray(d) ? d : d.toArray(",");
                        t.each(h, function() {
                            u._fireEvent(this, p, m, g, f)
                        })
                    },
                    _setLocale: function() {
                        let d = this.element.closest("[lang]");
                        d.length > 0 ? this.locale = d.attr("lang") : this.locale = t("html").attr("lang") || "en",
                        this.strings = t.extend({}, e.locales.en, e.locales[this.locale])
                    },
                    _addLabel: (d, p, {id: m, dir: g="ltr", className: f}={}) => {
                        if (!d)
                            return;
                        let u = t("<label>").addClass("label-for-input").addClass(f).html(d).insertBefore(t(p));
                        m && u.attr("for", m),
                        g === "rtl" && u.addClass("rtl")
                    }
                    ,
                    getComponent: function() {
                        return this.component
                    },
                    getComponentName: function() {
                        return this.name
                    }
                }, a);
                return e.plugin(i, c),
                c
            }
            ,
            fetch: {
                status: o => o.ok ? Promise.resolve(o) : Promise.reject(new Error(o.statusText)),
                json: o => o.json(),
                text: o => o.text(),
                form: o => o.formData(),
                blob: o => o.blob(),
                buffer: o => o.arrayBuffer()
            },
            i18n: {
                language: "en",
                load(o="en") {
                    e.i18n.language = e.locales[o] ? o : "en",
                    e.locale = e.locales[e.i18n.language]
                },
                add(o, a) {
                    e.locales[o] = a
                },
                get(o, a) {
                    return e.locales[a] && e.locales[a][o] ? e.locales[a][o] : ""
                },
                updateUI(o, a) {
                    let i = a || t.html().attr("lang") || "en"
                      , s = o || document;
                    if (e.locales[i]) {
                        e.i18n.load(i),
                        t.html().attr("lang", i);
                        for (let c of s.querySelectorAll("[data-i18n]")) {
                            let d = c.getAttribute("data-i18n");
                            c.innerHTML = e.i18n.get(d, i)
                        }
                    }
                },
                extend(o) {
                    t.each(o, (a, i) => {
                        e.locales[a] = Object.assign({}, e.locales[a], i)
                    }
                    )
                }
            }
        };
        return Object.assign(e, Kn),
        t(globalThis).on(e.events.resize, () => {
            globalThis.METRO_MEDIA = [],
            t.each(e.media_queries, (o, a) => {
                e.utils.media(a) && globalThis.METRO_MEDIA.push(e.media_mode[o])
            }
            )
        }
        ),
        globalThis.Metro = e,
        globalThis.METRO_INIT === !0 && t( () => {
            e.init()
        }
        ),
        e
    }
    )(Dom);
    Metro.i18n.add("en", {
        weekStart: 0,
        january: "January",
        february: "February",
        march: "March",
        april: "April",
        may: "May",
        june: "June",
        july: "July",
        august: "August",
        september: "September",
        october: "October",
        november: "November",
        december: "December",
        january_short: "Jan",
        february_short: "Feb",
        march_short: "Mar",
        april_short: "Apr",
        may_short: "May",
        june_short: "Jun",
        july_short: "Jul",
        august_short: "Aug",
        september_short: "Sep",
        october_short: "Oct",
        november_short: "Nov",
        december_short: "Dec",
        sunday: "Sunday",
        monday: "Monday",
        tuesday: "Tuesday",
        wednesday: "Wednesday",
        thursday: "Thursday",
        friday: "Friday",
        saturday: "Saturday",
        sunday_short: "Sun",
        monday_short: "Mon",
        tuesday_short: "Tue",
        wednesday_short: "Wed",
        thursday_short: "Thu",
        friday_short: "Fri",
        saturday_short: "Sat",
        sunday_short_2: "Su",
        monday_short_2: "Mo",
        tuesday_short_2: "Tu",
        wednesday_short_2: "We",
        thursday_short_2: "Th",
        friday_short_2: "Fr",
        saturday_short_2: "Sa",
        label_ok: "OK",
        label_cancel: "Cancel",
        label_done: "Done",
        label_today: "Today",
        label_now: "Now",
        label_clear: "Clear",
        label_help: "Help",
        label_yes: "Yes",
        label_no: "No",
        label_random: "Random",
        label_save: "Save",
        label_reset: "Reset",
        label_submit: "Submit",
        label_add_user_color: "Add to swatches",
        label_send: "Send",
        label_accept: "Accept",
        label_cookies_title: "This site uses cookies",
        label_cookies_text: "This website uses cookies to ensure you get the best experience on our website.",
        label_choose_file: "Choose file(s)",
        label_drop_file: "Click or drop file(s) here",
        label_files_selected: "{n} file(s) selected",
        label_days: "days",
        label_hours: "hours",
        label_minutes: "min",
        label_seconds: "sec",
        label_month: "mon",
        label_months: "mon's",
        label_day: "day",
        label_year: "year",
        label_years: "years",
        label_rows_count: "Show:",
        label_search: "Search:",
        label_table_info: "Showing $1 to $2 of $3 entries",
        label_prev: "Prev",
        label_next: "Next",
        label_all: "All",
        label_inspector: "Inspector",
        label_goto_page: "Goto",
        label_enter_page: "Enter page...",
        label_empty: "Nothing to show",
        label_user_colors: "User Colors",
        label_tiles: "Tiles",
        label_list: "List",
        label_load_more: "Load more",
        label_buy: "Buy",
        label_buy_now: "Buy now",
        label_buy_today: "Buy today",
        label_download: "Download",
        label_search_results: "Search results",
        label_add: "Add",
        label_edit: "Edit",
        label_delete: "Delete",
        label_new: "New",
        label_sell: "Sell",
        label_details: "Details",
        label_sorting: "Sorting",
        label_finish: "Finish",
        label_play: "Play",
        label_pause: "Pause",
        label_stop: "Stop",
        label_mute: "Mute",
        label_loop: "Loop",
        label_on: "on",
        label_off: "off",
        label_rename_tab: "Rename tab",
        label_close_tab: "Close tab",
        label_close_other_tabs: "Close other tabs",
        label_close_tabs_left: "Close tabs left",
        label_close_tabs_right: "Close tabs right",
        label_close_all_tabs: "Close all tabs",
        label_close_inactive_tabs: "Close inactive tabs",
        label_clear_input: "Clear input",
        label_reveal_password: "Reveal password",
        label_hide_password: "Hide password",
        label_generate_random: "Generate random value",
        label_search_input: "Search for the entered value",
        label_note: "Note",
        label_tip: "Tip",
        label_info: "Info",
        label_warning: "Warning",
        label_question: "Question",
        label_error: "Error",
        label_success: "Success",
        label_caution: "Caution",
        label_alert: "Alert",
        label_bug: "Bug",
        label_fuck: "Fuck",
        label_important: "Important",
        label_shit: "Shit",
        label_air: "Air",
        label_select_all: "Select all",
        label_select_more: "Select...",
        label_select: "Select",
        label_filter: "Filter",
        label_collapse: "Collapse",
        label_attach: "Attach"
    });
    Metro.i18n.add("uk", {
        weekStart: 1,
        january: "\u0421\u0456\u0447\u0435\u043D\u044C",
        february: "\u041B\u044E\u0442\u0438\u0439",
        march: "\u0411\u0435\u0440\u0435\u0437\u0435\u043D\u044C",
        april: "\u041A\u0432\u0456\u0442\u0435\u043D\u044C",
        may: "\u0422\u0440\u0430\u0432\u0435\u043D\u044C",
        june: "\u0427\u0435\u0440\u0432\u0435\u043D\u044C",
        july: "\u041B\u0438\u043F\u0435\u043D\u044C",
        august: "\u0421\u0435\u0440\u043F\u0435\u043D\u044C",
        september: "\u0412\u0435\u0440\u0435\u0441\u0435\u043D\u044C",
        october: "\u0416\u043E\u0432\u0442\u0435\u043D\u044C",
        november: "\u041B\u0438\u0441\u0442\u043E\u043F\u0430\u0434",
        december: "\u0413\u0440\u0443\u0434\u0435\u043D\u044C",
        january_short: "\u0421\u0456\u0447",
        february_short: "\u041B\u044E\u0442",
        march_short: "\u0411\u0435\u0440",
        april_short: "\u041A\u0432\u0456",
        may_short: "\u0422\u0440\u0430",
        june_short: "\u0427\u0435\u0440",
        july_short: "\u041B\u0438\u043F",
        august_short: "\u0421\u0435\u0440",
        september_short: "\u0412\u0435\u0440",
        october_short: "\u0416\u043E\u0432",
        november_short: "\u041B\u0438\u0441",
        december_short: "\u0413\u0440\u0443",
        sunday: "\u041D\u0435\u0434\u0456\u043B\u044F",
        monday: "\u041F\u043E\u043D\u0435\u0434\u0456\u043B\u043E\u043A",
        tuesday: "\u0412\u0456\u0432\u0442\u043E\u0440\u043E\u043A",
        wednesday: "\u0421\u0435\u0440\u0435\u0434\u0430",
        thursday: "\u0427\u0435\u0442\u0432\u0435\u0440",
        friday: "\u041F'\u044F\u0442\u043D\u0438\u0446\u044F",
        saturday: "\u0421\u0443\u0431\u043E\u0442\u0430",
        sunday_short: "\u041D\u0435\u0434",
        monday_short: "\u041F\u043E\u043D",
        tuesday_short: "\u0412\u0456\u0432",
        wednesday_short: "\u0421\u0435\u0440",
        thursday_short: "\u0427\u0435\u0442",
        friday_short: "\u041F\u0442\u043D",
        saturday_short: "\u0421\u0443\u0431",
        sunday_short_2: "\u041D\u0434",
        monday_short_2: "\u041F\u043D",
        tuesday_short_2: "\u0412\u0442",
        wednesday_short_2: "\u0421\u0440",
        thursday_short_2: "\u0427\u0442",
        friday_short_2: "\u041F\u0442",
        saturday_short_2: "\u0421\u0431",
        label_ok: "OK",
        label_cancel: "\u0412\u0456\u0434\u043C\u0456\u043D\u0430",
        label_done: "\u0412\u0438\u043A\u043E\u043D\u0430\u043D\u043E",
        label_today: "\u0421\u044C\u043E\u0433\u043E\u0434\u043D\u0456",
        label_now: "\u0417\u0430\u0440\u0430\u0437",
        label_clear: "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u0438",
        label_help: "\u0414\u043E\u043F\u043E\u043C\u043E\u0433\u0430",
        label_yes: "\u0422\u0430\u043A",
        label_no: "\u041D\u0456",
        label_random: "\u0412\u0438\u043F\u0430\u0434\u043A\u043E\u0432\u043E",
        label_save: "\u0417\u0431\u0435\u0440\u0456\u0433\u0442\u0438",
        label_reset: "\u0421\u043A\u0438\u043D\u0443\u0442\u0438",
        label_submit: "\u0412\u0456\u0434\u043F\u0440\u0430\u0432\u0438\u0442\u0438",
        label_add_user_color: "\u0414\u043E\u0434\u0430\u0442\u0438 \u0434\u043E \u0437\u0440\u0430\u0437\u043A\u0456\u0432",
        label_send: "\u0412\u0456\u0434\u043F\u0440\u0430\u0432\u0438\u0442\u0438",
        label_accept: "\u041F\u0440\u0438\u0439\u043D\u044F\u0442\u0438",
        label_cookies_title: "\u0426\u0435\u0439 \u0441\u0430\u0439\u0442 \u0432\u0438\u043A\u043E\u0440\u0438\u0441\u0442\u043E\u0432\u0443\u0454 \u0444\u0430\u0439\u043B\u0438 cookie",
        label_cookies_text: "\u0426\u0435\u0439 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442 \u0432\u0438\u043A\u043E\u0440\u0438\u0441\u0442\u043E\u0432\u0443\u0454 \u0444\u0430\u0439\u043B\u0438 cookie, \u0449\u043E\u0431 \u0437\u0430\u0431\u0435\u0437\u043F\u0435\u0447\u0438\u0442\u0438 \u0432\u0430\u043C \u043D\u0430\u0439\u043A\u0440\u0430\u0449\u0438\u0439 \u0434\u043E\u0441\u0432\u0456\u0434 \u0432\u0438\u043A\u043E\u0440\u0438\u0441\u0442\u0430\u043D\u043D\u044F \u043D\u0430\u0448\u043E\u0433\u043E \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u0443.",
        label_choose_file: "\u0412\u0438\u0431\u0435\u0440\u0456\u0442\u044C \u0444\u0430\u0439\u043B(\u0438)",
        label_drop_file: "\u041D\u0430\u0442\u0438\u0441\u043D\u0456\u0442\u044C \u0430\u0431\u043E \u043F\u0435\u0440\u0435\u0442\u044F\u0433\u043D\u0456\u0442\u044C \u0444\u0430\u0439\u043B(\u0438) \u0441\u044E\u0434\u0438",
        label_files_selected: "\u0412\u0438\u0431\u0440\u0430\u043D\u043E {n} \u0444\u0430\u0439\u043B(\u0456\u0432)",
        label_days: "\u0434\u043D\u0456",
        label_hours: "\u0433\u043E\u0434",
        label_minutes: "\u0445\u0432\u0438\u043B",
        label_seconds: "\u0441\u0435\u043A",
        label_month: "\u043C\u0456\u0441",
        label_months: "\u043C\u0456\u0441\u044F\u0446\u0456",
        label_day: "\u0434\u0435\u043D\u044C",
        label_year: "\u0440\u0456\u043A",
        label_years: "\u0440\u043E\u043A\u0456\u0432",
        label_rows_count: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u0438:",
        label_search: "\u041F\u043E\u0448\u0443\u043A:",
        label_table_info: "\u0412\u0456\u0434\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u043E \u0437 $1 \u043F\u043E $2 \u0456\u0437 $3 \u0437\u0430\u043F\u0438\u0441\u0456\u0432",
        label_prev: "\u041F\u043E\u043F\u0435\u0440\u0435\u0434\u043D\u0456\u0439",
        label_next: "\u041D\u0430\u0441\u0442\u0443\u043F\u043D\u0438\u0439",
        label_all: "\u0423\u0441\u0456",
        label_inspector: "\u0406\u043D\u0441\u043F\u0435\u043A\u0442\u043E\u0440",
        label_goto_page: "\u041F\u0435\u0440\u0435\u0439\u0442\u0438",
        label_enter_page: "\u0412\u0432\u0435\u0434\u0456\u0442\u044C \u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0443...",
        label_empty: "\u041D\u0456\u0447\u043E\u0433\u043E \u043F\u043E\u043A\u0430\u0437\u0430\u0442\u0438",
        label_user_colors: "\u041A\u043E\u043B\u044C\u043E\u0440\u0438 \u043A\u043E\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0430",
        label_tiles: "\u041F\u043B\u0438\u0442\u043A\u0430",
        label_list: "\u0421\u043F\u0438\u0441\u043E\u043A",
        label_load_more: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u0438 \u0449\u0435",
        label_buy: "\u041A\u0443\u043F\u0438\u0442\u0438",
        label_buy_now: "\u041A\u0443\u043F\u0438\u0442\u0438 \u0437\u0430\u0440\u0430\u0437",
        label_buy_today: "\u041A\u0443\u043F\u0438\u0442\u0438 \u0441\u044C\u043E\u0433\u043E\u0434\u043D\u0456",
        label_download: "\u0417\u0430\u0432\u0430\u043D\u0442\u0430\u0436\u0438\u0442\u0438",
        label_search_results: "\u0420\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0438 \u043F\u043E\u0448\u0443\u043A\u0443",
        label_add: "\u0414\u043E\u0434\u0430\u0442\u0438",
        label_edit: "\u0420\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u0442\u0438",
        label_delete: "\u0412\u0438\u0434\u0430\u043B\u0438\u0442\u0438",
        label_new: "\u041D\u043E\u0432\u0435",
        label_sell: "\u041F\u0440\u043E\u0434\u0430\u0442\u0438",
        label_details: "\u041F\u043E\u0434\u0440\u043E\u0431\u0438\u0446\u0456",
        label_sorting: "\u0421\u043E\u0440\u0442\u0443\u0432\u0430\u043D\u043D\u044F",
        label_finish: "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u0438",
        label_play: "\u0412\u0456\u0434\u0442\u0432\u043E\u0440\u0438\u0442\u0438",
        label_pause: "\u041F\u0430\u0443\u0437\u0430",
        label_stop: "\u0417\u0443\u043F\u0438\u043D\u0438\u0442\u0438",
        label_mute: "\u0411\u0435\u0437 \u0437\u0432\u0443\u043A\u0443",
        label_loop: "\u041F\u043E\u0432\u0442\u043E\u0440\u044E\u0432\u0430\u0442\u0438",
        label_on: "\u0443\u0432\u043C",
        label_off: "\u0432\u0438\u043C",
        label_rename_tab: "\u041F\u0435\u0440\u0435\u0439\u043C\u0435\u043D\u0443\u0432\u0430\u0442\u0438 \u0432\u043A\u043B\u0430\u0434\u043A\u0443",
        label_close_tab: "\u0417\u0430\u043A\u0440\u0438\u0442\u0438 \u0432\u043A\u043B\u0430\u0434\u043A\u0443",
        label_close_other_tabs: "\u0417\u0430\u043A\u0440\u0438\u0442\u0438 \u0456\u043D\u0448\u0456 \u0432\u043A\u043B\u0430\u0434\u043A\u0438",
        label_close_tabs_left: "\u0417\u0430\u043A\u0440\u0438\u0442\u0438 \u0432\u043A\u043B\u0430\u0434\u043A\u0438 \u043B\u0456\u0432\u043E\u0440\u0443\u0447",
        label_close_tabs_right: "\u0417\u0430\u043A\u0440\u0438\u0442\u0438 \u0432\u043A\u043B\u0430\u0434\u043A\u0438 \u043F\u0440\u0430\u0432\u043E\u0440\u0443\u0447",
        label_close_all_tabs: "\u0417\u0430\u043A\u0440\u0438\u0439\u0442\u0435 \u0432\u0441\u0456 \u0432\u043A\u043B\u0430\u0434\u043A\u0438",
        label_close_inactive_tabs: "\u0417\u0430\u043A\u0440\u0438\u0442\u0438 \u043D\u0435\u0430\u043A\u0442\u0438\u0432\u043D\u0456 \u0432\u043A\u043B\u0430\u0434\u043A\u0438",
        label_clear_input: "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u0438 \u0432\u0432\u0435\u0434\u0435\u043D\u043D\u044F",
        label_reveal_password: "\u0412\u0456\u0434\u043A\u0440\u0438\u0442\u0438 \u043F\u0430\u0440\u043E\u043B\u044C",
        label_hide_password: "\u041F\u0440\u0438\u0445\u043E\u0432\u0430\u0442\u0438 \u043F\u0430\u0440\u043E\u043B\u044C",
        label_generate_random: "\u0413\u0435\u043D\u0435\u0440\u0443\u0432\u0430\u0442\u0438 \u0432\u0438\u043F\u0430\u0434\u043A\u043E\u0432e \u0437\u043D\u0430\u0447\u0435\u043D\u043D\u044F",
        label_search_input: "\u0428\u0443\u043A\u0430\u0442\u0438 \u0432\u0432\u0435\u0434\u0435\u043D\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u043D\u044F",
        label_note: "\u041F\u0440\u0438\u043C\u0456\u0442\u043A\u0430",
        label_tip: "\u041F\u0456\u0434\u043A\u0430\u0437\u043A\u0430",
        label_info: "\u0406\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0456\u044F",
        label_warning: "\u0423\u0432\u0430\u0433\u0430",
        label_question: "\u041F\u0438\u0442\u0430\u043D\u043D\u044F",
        label_error: "\u041F\u043E\u043C\u0438\u043B\u043A\u0430",
        label_success: "\u0423\u0441\u043F\u0456\u0445",
        label_caution: "\u041E\u0431\u0435\u0440\u0435\u0436\u043D\u043E",
        label_alert: "\u041F\u043E\u043F\u0435\u0440\u0435\u0434\u0436\u0435\u043D\u043D\u044F",
        label_bug: "\u041F\u043E\u043C\u0438\u043B\u043A\u0430",
        label_fuck: "\u0411\u043B\u044F",
        label_important: "\u0412\u0430\u0436\u043B\u0438\u0432\u043E",
        label_shit: "\u041E\u0442 \u043B\u0430\u0439\u043D\u043E",
        label_air: "\u041F\u0443\u0444\u0444\u0444...",
        label_select_all: "\u0412\u0438\u0431\u0440\u0430\u0442\u0438 \u0443\u0441\u0456",
        label_select_more: "\u0412\u0438\u0431\u0435\u0440\u0456\u0442\u044C...",
        label_select: "\u0412\u0438\u0431\u0440\u0430\u0442\u0438",
        label_filter: "\u0424\u0456\u043B\u044C\u0442\u0440",
        label_collapse: "\u0417\u0433\u043E\u0440\u043D\u0443\u0442\u0438",
        label_attach: "\u041F\u0440\u0438\u043A\u0440\u0456\u043F\u0438\u0442\u0438"
    });
    Metro.i18n.add("pt", {
        weekStart: 0,
        january: "Janeiro",
        february: "Fevereiro",
        march: "Mar\xE7o",
        april: "Abril",
        may: "Maio",
        june: "Junho",
        july: "Julho",
        august: "Agosto",
        september: "Setembro",
        october: "Outubro",
        november: "Novembro",
        december: "Dezembro",
        january_short: "Jan",
        february_short: "Fev",
        march_short: "Mar",
        april_short: "Abr",
        may_short: "Mai",
        june_short: "Jun",
        july_short: "Jul",
        august_short: "Ago",
        september_short: "Set",
        october_short: "Out",
        november_short: "Nov",
        december_short: "Dez",
        sunday: "Domingo",
        monday: "Segunda-feira",
        tuesday: "Ter\xE7a-feira",
        wednesday: "Quarta-feira",
        thursday: "Quinta-feira",
        friday: "Sexta-feira",
        saturday: "S\xE1bado",
        sunday_short: "Dom",
        monday_short: "Seg",
        tuesday_short: "Ter",
        wednesday_short: "Qua",
        thursday_short: "Qui",
        friday_short: "Sex",
        saturday_short: "S\xE1b",
        sunday_short_2: "D",
        monday_short_2: "S",
        tuesday_short_2: "T",
        wednesday_short_2: "Q",
        thursday_short_2: "Q",
        friday_short_2: "S",
        saturday_short_2: "S",
        label_ok: "OK",
        label_cancel: "Cancelar",
        label_done: "Conclu\xEDdo",
        label_today: "Hoje",
        label_now: "Agora",
        label_clear: "Limpar",
        label_help: "Ajuda",
        label_yes: "Sim",
        label_no: "N\xE3o",
        label_random: "Aleat\xF3rio",
        label_save: "Salvar",
        label_reset: "Redefinir",
        label_submit: "Enviar",
        label_add_user_color: "Adicionar aos tons",
        label_send: "Enviar",
        label_accept: "Aceitar",
        label_cookies_title: "Este site usa cookies",
        label_cookies_text: "Este site utiliza cookies para garantir a melhor experi\xEAncia em nosso site.",
        label_choose_file: "Escolher arquivo(s)",
        label_drop_file: "Clique ou solte o(s) arquivo(s) aqui",
        label_files_selected: "{n} arquivo(s) selecionado(s)",
        label_days: "dias",
        label_hours: "horas",
        label_minutes: "min",
        label_seconds: "seg",
        label_month: "m\xEAs",
        label_months: "meses",
        label_day: "dia",
        label_year: "ano",
        label_years: "anos",
        label_rows_count: "Mostrar:",
        label_search: "Pesquisar:",
        label_table_info: "Mostrando $1 a $2 de $3 entradas",
        label_prev: "Anterior",
        label_next: "Pr\xF3ximo",
        label_all: "Todos",
        label_inspector: "Inspetor",
        label_goto_page: "Ir para",
        label_enter_page: "Digite a p\xE1gina...",
        label_empty: "Nada para mostrar",
        label_user_colors: "Cores do usu\xE1rio",
        label_tiles: "Blocos",
        label_list: "Lista",
        label_load_more: "Carregar mais",
        label_buy: "Comprar",
        label_buy_now: "Comprar agora",
        label_buy_today: "Comprar hoje",
        label_download: "Baixar",
        label_search_results: "Resultados da pesquisa",
        label_add: "Adicionar",
        label_edit: "Editar",
        label_delete: "Excluir",
        label_new: "Novo",
        label_sell: "Vender",
        label_details: "Detalhes",
        label_sorting: "Ordena\xE7\xE3o",
        label_finish: "Finalizar",
        label_play: "Reproduzir",
        label_pause: "Pausar",
        label_stop: "Parar",
        label_mute: "Silenciar",
        label_loop: "Repetir",
        label_on: "lig",
        label_off: "des",
        label_rename_tab: "Renomear aba",
        label_close_tab: "Fechar aba",
        label_close_other_tabs: "Fechar outras abas",
        label_close_tabs_left: "Fechar abas \xE0 esquerda",
        label_close_tabs_right: "Fechar abas \xE0 direita",
        label_close_all_tabs: "Fechar todas as abas",
        label_close_inactive_tabs: "Fechar abas inativas",
        label_clear_input: "Limpar entrada",
        label_reveal_password: "Mostrar senha",
        label_hide_password: "Ocultar senha",
        label_generate_random: "Gerar valor aleat\xF3rio",
        label_search_input: "Pesquisar o valor inserido",
        label_note: "Nota",
        label_tip: "Dica",
        label_info: "Informa\xE7\xE3o",
        label_warning: "Aviso",
        label_question: "Pergunta",
        label_error: "Erro",
        label_success: "Sucesso",
        label_caution: "Cuidado",
        label_alert: "Alerta",
        label_bug: "Erro",
        label_fuck: "Droga",
        label_important: "Importante",
        label_shit: "Merda",
        label_air: "Ar",
        label_select_all: "Selecionar tudo",
        label_select_more: "Selecionar...",
        label_select: "Selecionar",
        label_filter: "Filtrar",
        label_collapse: "Recolher",
        label_attach: "Anexar"
    });
    Metro.i18n.add("pt-BR", {
        weekStart: 0,
        january: "Janeiro",
        february: "Fevereiro",
        march: "Mar\xE7o",
        april: "Abril",
        may: "Maio",
        june: "Junho",
        july: "Julho",
        august: "Agosto",
        september: "Setembro",
        october: "Outubro",
        november: "Novembro",
        december: "Dezembro",
        january_short: "Jan",
        february_short: "Fev",
        march_short: "Mar",
        april_short: "Abr",
        may_short: "Mai",
        june_short: "Jun",
        july_short: "Jul",
        august_short: "Ago",
        september_short: "Set",
        october_short: "Out",
        november_short: "Nov",
        december_short: "Dez",
        sunday: "Domingo",
        monday: "Segunda-feira",
        tuesday: "Ter\xE7a-feira",
        wednesday: "Quarta-feira",
        thursday: "Quinta-feira",
        friday: "Sexta-feira",
        saturday: "S\xE1bado",
        sunday_short: "Dom",
        monday_short: "Seg",
        tuesday_short: "Ter",
        wednesday_short: "Qua",
        thursday_short: "Qui",
        friday_short: "Sex",
        saturday_short: "S\xE1b",
        sunday_short_2: "Do",
        monday_short_2: "Se",
        tuesday_short_2: "Te",
        wednesday_short_2: "Qu",
        thursday_short_2: "Qi",
        friday_short_2: "Sx",
        saturday_short_2: "Sa",
        label_ok: "OK",
        label_cancel: "Cancelar",
        label_done: "Conclu\xEDdo",
        label_today: "Hoje",
        label_now: "Agora",
        label_clear: "Limpar",
        label_help: "Ajuda",
        label_yes: "Sim",
        label_no: "N\xE3o",
        label_random: "Aleat\xF3rio",
        label_save: "Salvar",
        label_reset: "Redefinir",
        label_submit: "Enviar",
        label_add_user_color: "Adicionar \xE0s amostras",
        label_send: "Enviar",
        label_accept: "Aceitar",
        label_cookies_title: "Este site usa cookies",
        label_cookies_text: "Este site usa cookies para garantir que voc\xEA tenha a melhor experi\xEAncia em nosso site.",
        label_choose_file: "Escolher arquivo(s)",
        label_drop_file: "Clique ou arraste arquivo(s) aqui",
        label_files_selected: "{n} arquivo(s) selecionado(s)",
        label_days: "dias",
        label_hours: "horas",
        label_minutes: "min",
        label_seconds: "seg",
        label_month: "m\xEAs",
        label_months: "meses",
        label_day: "dia",
        label_year: "ano",
        label_years: "anos",
        label_rows_count: "Mostrar:",
        label_search: "Pesquisar:",
        label_table_info: "Mostrando $1 a $2 de $3 registros",
        label_prev: "Anterior",
        label_next: "Pr\xF3ximo",
        label_all: "Todos",
        label_inspector: "Inspetor",
        label_goto_page: "Ir para",
        label_enter_page: "Digite a p\xE1gina...",
        label_empty: "Nada para mostrar",
        label_user_colors: "Cores do Usu\xE1rio",
        label_tiles: "Blocos",
        label_list: "Lista",
        label_load_more: "Carregar mais",
        label_buy: "Comprar",
        label_buy_now: "Compre agora",
        label_buy_today: "Compre hoje",
        label_download: "Baixar",
        label_search_results: "Resultados da pesquisa",
        label_add: "Adicionar",
        label_edit: "Editar",
        label_delete: "Excluir",
        label_new: "Novo",
        label_sell: "Vender",
        label_details: "Detalhes",
        label_sorting: "Ordena\xE7\xE3o",
        label_finish: "Finalizar",
        label_play: "Reproduzir",
        label_pause: "Pausar",
        label_stop: "Parar",
        label_mute: "Silenciar",
        label_loop: "Repetir",
        label_on: "ligado",
        label_off: "desligado",
        label_rename_tab: "Renomear aba",
        label_close_tab: "Fechar aba",
        label_close_other_tabs: "Fechar outras abas",
        label_close_tabs_left: "Fechar abas \xE0 esquerda",
        label_close_tabs_right: "Fechar abas \xE0 direita",
        label_close_all_tabs: "Fechar todas as abas",
        label_close_inactive_tabs: "Fechar abas inativas",
        label_clear_input: "Limpar entrada",
        label_reveal_password: "Revelar senha",
        label_hide_password: "Ocultar senha",
        label_generate_random: "Gerar valor aleat\xF3rio",
        label_search_input: "Pesquisar pelo valor digitado",
        label_note: "Nota",
        label_tip: "Dica",
        label_info: "Informa\xE7\xE3o",
        label_warning: "Aviso",
        label_question: "Pergunta",
        label_error: "Erro",
        label_success: "Sucesso",
        label_caution: "Cuidado",
        label_alert: "Alerta",
        label_bug: "Bug",
        label_fuck: "Droga",
        label_important: "Importante",
        label_shit: "Merda",
        label_air: "Ar",
        label_select_all: "Selecionar tudo",
        label_select_more: "Selecionar...",
        label_select: "Selecionar",
        label_filter: "Filtrar",
        label_collapse: "Recolher",
        label_attach: "Anexar"
    });
    Metro.i18n.add("es", {
        weekStart: 0,
        january: "Enero",
        february: "Febrero",
        march: "Marzo",
        april: "Abril",
        may: "Mayo",
        june: "Junio",
        july: "Julio",
        august: "Agosto",
        september: "Septiembre",
        october: "Octubre",
        november: "Noviembre",
        december: "Diciembre",
        january_short: "Ene",
        february_short: "Feb",
        march_short: "Mar",
        april_short: "Abr",
        may_short: "May",
        june_short: "Jun",
        july_short: "Jul",
        august_short: "Ago",
        september_short: "Sep",
        october_short: "Oct",
        november_short: "Nov",
        december_short: "Dic",
        sunday: "Domingo",
        monday: "Lunes",
        tuesday: "Martes",
        wednesday: "Mi\xE9rcoles",
        thursday: "Jueves",
        friday: "Viernes",
        saturday: "S\xE1bado",
        sunday_short: "Dom",
        monday_short: "Lun",
        tuesday_short: "Mar",
        wednesday_short: "Mi\xE9",
        thursday_short: "Jue",
        friday_short: "Vie",
        saturday_short: "S\xE1b",
        sunday_short_2: "D",
        monday_short_2: "L",
        tuesday_short_2: "M",
        wednesday_short_2: "X",
        thursday_short_2: "J",
        friday_short_2: "V",
        saturday_short_2: "S",
        label_ok: "OK",
        label_cancel: "Cancelar",
        label_done: "Hecho",
        label_today: "Hoy",
        label_now: "Ahora",
        label_clear: "Limpiar",
        label_help: "Ayuda",
        label_yes: "S\xED",
        label_no: "No",
        label_random: "Aleatorio",
        label_save: "Guardar",
        label_reset: "Restablecer",
        label_submit: "Enviar",
        label_add_user_color: "A\xF1adir a colores",
        label_send: "Enviar",
        label_accept: "Aceptar",
        label_cookies_title: "Este sitio utiliza cookies",
        label_cookies_text: "Este sitio web utiliza cookies para garantizar que obtenga la mejor experiencia en nuestro sitio web.",
        label_choose_file: "Seleccionar archivo(s)",
        label_drop_file: "Haga clic o suelte archivo(s) aqu\xED",
        label_files_selected: "{n} archivo(s) seleccionado(s)",
        label_days: "d\xEDas",
        label_hours: "horas",
        label_minutes: "min",
        label_seconds: "seg",
        label_month: "mes",
        label_months: "meses",
        label_day: "d\xEDa",
        label_year: "a\xF1o",
        label_years: "a\xF1os",
        label_rows_count: "Mostrar:",
        label_search: "Buscar:",
        label_table_info: "Mostrando $1 a $2 de $3 entradas",
        label_prev: "Anterior",
        label_next: "Siguiente",
        label_all: "Todo",
        label_inspector: "Inspector",
        label_goto_page: "Ir a",
        label_enter_page: "Introducir p\xE1gina...",
        label_empty: "Nada que mostrar",
        label_user_colors: "Colores de usuario",
        label_tiles: "Cuadr\xEDculas",
        label_list: "Lista",
        label_load_more: "Cargar m\xE1s",
        label_buy: "Comprar",
        label_buy_now: "Comprar ahora",
        label_buy_today: "Comprar hoy",
        label_download: "Descargar",
        label_search_results: "Resultados de b\xFAsqueda",
        label_add: "A\xF1adir",
        label_edit: "Editar",
        label_delete: "Eliminar",
        label_new: "Nuevo",
        label_sell: "Vender",
        label_details: "Detalles",
        label_sorting: "Ordenar",
        label_finish: "Finalizar",
        label_play: "Reproducir",
        label_pause: "Pausa",
        label_stop: "Detener",
        label_mute: "Silenciar",
        label_loop: "Repetir",
        label_on: "enc",
        label_off: "apa",
        label_rename_tab: "Renombrar pesta\xF1a",
        label_close_tab: "Cerrar pesta\xF1a",
        label_close_other_tabs: "Cerrar otras pesta\xF1as",
        label_close_tabs_left: "Cerrar pesta\xF1as a la izquierda",
        label_close_tabs_right: "Cerrar pesta\xF1as a la derecha",
        label_close_all_tabs: "Cerrar todas las pesta\xF1as",
        label_close_inactive_tabs: "Cerrar pesta\xF1as inactivas",
        label_clear_input: "Limpiar entrada",
        label_reveal_password: "Mostrar contrase\xF1a",
        label_hide_password: "Ocultar contrase\xF1a",
        label_generate_random: "Generar valor aleatorio",
        label_search_input: "Buscar el valor ingresado",
        label_note: "Nota",
        label_tip: "Consejo",
        label_info: "Informaci\xF3n",
        label_warning: "Advertencia",
        label_question: "Pregunta",
        label_error: "Error",
        label_success: "\xC9xito",
        label_caution: "Precauci\xF3n",
        label_alert: "Alerta",
        label_bug: "Error",
        label_fuck: "Maldici\xF3n",
        label_important: "Importante",
        label_shit: "Mierda",
        label_air: "Aire",
        label_select_all: "Seleccionar todo",
        label_select_more: "Seleccionar...",
        label_select: "Seleccionar",
        label_filter: "Filtrar",
        label_collapse: "Colapsar",
        label_attach: "Adjuntar"
    });
    Metro.i18n.add("de", {
        weekStart: 1,
        january: "Januar",
        february: "Februar",
        march: "M\xE4rz",
        april: "April",
        may: "Mai",
        june: "Juni",
        july: "Juli",
        august: "August",
        september: "September",
        october: "Oktober",
        november: "November",
        december: "Dezember",
        january_short: "Jan",
        february_short: "Feb",
        march_short: "M\xE4r",
        april_short: "Apr",
        may_short: "Mai",
        june_short: "Jun",
        july_short: "Jul",
        august_short: "Aug",
        september_short: "Sep",
        october_short: "Okt",
        november_short: "Nov",
        december_short: "Dez",
        sunday: "Sonntag",
        monday: "Montag",
        tuesday: "Dienstag",
        wednesday: "Mittwoch",
        thursday: "Donnerstag",
        friday: "Freitag",
        saturday: "Samstag",
        sunday_short: "So",
        monday_short: "Mo",
        tuesday_short: "Di",
        wednesday_short: "Mi",
        thursday_short: "Do",
        friday_short: "Fr",
        saturday_short: "Sa",
        sunday_short_2: "S",
        monday_short_2: "M",
        tuesday_short_2: "D",
        wednesday_short_2: "M",
        thursday_short_2: "D",
        friday_short_2: "F",
        saturday_short_2: "S",
        label_ok: "OK",
        label_cancel: "Abbrechen",
        label_done: "Fertig",
        label_today: "Heute",
        label_now: "Jetzt",
        label_clear: "L\xF6schen",
        label_help: "Hilfe",
        label_yes: "Ja",
        label_no: "Nein",
        label_random: "Zuf\xE4llig",
        label_save: "Speichern",
        label_reset: "Zur\xFCcksetzen",
        label_submit: "Absenden",
        label_add_user_color: "Zu den Farben hinzuf\xFCgen",
        label_send: "Senden",
        label_accept: "Akzeptieren",
        label_cookies_title: "Diese Seite verwendet Cookies",
        label_cookies_text: "Diese Website verwendet Cookies, um sicherzustellen, dass Sie die beste Erfahrung auf unserer Website machen.",
        label_choose_file: "Datei(en) ausw\xE4hlen",
        label_drop_file: "Klicken oder Datei(en) hier ablegen",
        label_files_selected: "{n} Datei(en) ausgew\xE4hlt",
        label_days: "Tage",
        label_hours: "Stunden",
        label_minutes: "Min",
        label_seconds: "Sek",
        label_month: "Monat",
        label_months: "Monate",
        label_day: "Tag",
        label_year: "Jahr",
        label_years: "Jahre",
        label_rows_count: "Anzeigen:",
        label_search: "Suchen:",
        label_table_info: "Zeige $1 bis $2 von $3 Eintr\xE4gen",
        label_prev: "Zur\xFCck",
        label_next: "Weiter",
        label_all: "Alle",
        label_inspector: "Inspektor",
        label_goto_page: "Gehe zu",
        label_enter_page: "Seite eingeben...",
        label_empty: "Nichts zu zeigen",
        label_user_colors: "Benutzerfarben",
        label_tiles: "Kacheln",
        label_list: "Liste",
        label_load_more: "Mehr laden",
        label_buy: "Kaufen",
        label_buy_now: "Jetzt kaufen",
        label_buy_today: "Heute kaufen",
        label_download: "Herunterladen",
        label_search_results: "Suchergebnisse",
        label_add: "Hinzuf\xFCgen",
        label_edit: "Bearbeiten",
        label_delete: "L\xF6schen",
        label_new: "Neu",
        label_sell: "Verkaufen",
        label_details: "Details",
        label_sorting: "Sortierung",
        label_finish: "Beenden",
        label_play: "Abspielen",
        label_pause: "Pause",
        label_stop: "Stopp",
        label_mute: "Stummschalten",
        label_loop: "Wiederholen",
        label_on: "an",
        label_off: "aus",
        label_rename_tab: "Tab umbenennen",
        label_close_tab: "Tab schlie\xDFen",
        label_close_other_tabs: "Andere Tabs schlie\xDFen",
        label_close_tabs_left: "Tabs links schlie\xDFen",
        label_close_tabs_right: "Tabs rechts schlie\xDFen",
        label_close_all_tabs: "Alle Tabs schlie\xDFen",
        label_close_inactive_tabs: "Inaktive Tabs schlie\xDFen",
        label_clear_input: "Eingabe l\xF6schen",
        label_reveal_password: "Passwort anzeigen",
        label_hide_password: "Passwort verbergen",
        label_generate_random: "Zuf\xE4lligen Wert generieren",
        label_search_input: "Nach eingegebenem Wert suchen",
        label_note: "Notiz",
        label_tip: "Tipp",
        label_info: "Info",
        label_warning: "Warnung",
        label_question: "Frage",
        label_error: "Fehler",
        label_success: "Erfolg",
        label_caution: "Vorsicht",
        label_alert: "Alarm",
        label_bug: "Fehler",
        label_fuck: "Mist",
        label_important: "Wichtig",
        label_shit: "Schei\xDFe",
        label_air: "Luft",
        label_select_all: "Alles ausw\xE4hlen",
        label_select_more: "Mehr ausw\xE4hlen...",
        label_select: "Ausw\xE4hlen",
        label_filter: "Filter",
        label_collapse: "Einklappen",
        label_attach: "Befestigen"
    });
    Metro.i18n.add("fr", {
        weekStart: 1,
        january: "Janvier",
        february: "F\xE9vrier",
        march: "Mars",
        april: "Avril",
        may: "Mai",
        june: "Juin",
        july: "Juillet",
        august: "Ao\xFBt",
        september: "Septembre",
        october: "Octobre",
        november: "Novembre",
        december: "D\xE9cembre",
        january_short: "Jan",
        february_short: "F\xE9v",
        march_short: "Mar",
        april_short: "Avr",
        may_short: "Mai",
        june_short: "Juin",
        july_short: "Juil",
        august_short: "Ao\xFB",
        september_short: "Sep",
        october_short: "Oct",
        november_short: "Nov",
        december_short: "D\xE9c",
        sunday: "Dimanche",
        monday: "Lundi",
        tuesday: "Mardi",
        wednesday: "Mercredi",
        thursday: "Jeudi",
        friday: "Vendredi",
        saturday: "Samedi",
        sunday_short: "Dim",
        monday_short: "Lun",
        tuesday_short: "Mar",
        wednesday_short: "Mer",
        thursday_short: "Jeu",
        friday_short: "Ven",
        saturday_short: "Sam",
        sunday_short_2: "D",
        monday_short_2: "L",
        tuesday_short_2: "M",
        wednesday_short_2: "M",
        thursday_short_2: "J",
        friday_short_2: "V",
        saturday_short_2: "S",
        label_ok: "OK",
        label_cancel: "Annuler",
        label_done: "Termin\xE9",
        label_today: "Aujourd'hui",
        label_now: "Maintenant",
        label_clear: "Effacer",
        label_help: "Aide",
        label_yes: "Oui",
        label_no: "Non",
        label_random: "Al\xE9atoire",
        label_save: "Enregistrer",
        label_reset: "R\xE9initialiser",
        label_submit: "Soumettre",
        label_add_user_color: "Ajouter aux couleurs",
        label_send: "Envoyer",
        label_accept: "Accepter",
        label_cookies_title: "Ce site utilise des cookies",
        label_cookies_text: "Ce site utilise des cookies pour vous garantir la meilleure exp\xE9rience sur notre site.",
        label_choose_file: "Choisir le(s) fichier(s)",
        label_drop_file: "Cliquez ou d\xE9posez le(s) fichier(s) ici",
        label_files_selected: "{n} fichier(s) s\xE9lectionn\xE9(s)",
        label_days: "jours",
        label_hours: "heures",
        label_minutes: "min",
        label_seconds: "sec",
        label_month: "mois",
        label_months: "mois",
        label_day: "jour",
        label_year: "ann\xE9e",
        label_years: "ann\xE9es",
        label_rows_count: "Afficher :",
        label_search: "Rechercher :",
        label_table_info: "Affichage de $1 \xE0 $2 sur $3 entr\xE9es",
        label_prev: "Pr\xE9c",
        label_next: "Suiv",
        label_all: "Tout",
        label_inspector: "Inspecteur",
        label_goto_page: "Aller \xE0",
        label_enter_page: "Entrer la page...",
        label_empty: "Rien \xE0 afficher",
        label_user_colors: "Couleurs utilisateur",
        label_tiles: "Tuiles",
        label_list: "Liste",
        label_load_more: "Charger plus",
        label_buy: "Acheter",
        label_buy_now: "Acheter maintenant",
        label_buy_today: "Acheter aujourd'hui",
        label_download: "T\xE9l\xE9charger",
        label_search_results: "R\xE9sultats de recherche",
        label_add: "Ajouter",
        label_edit: "Modifier",
        label_delete: "Supprimer",
        label_new: "Nouveau",
        label_sell: "Vendre",
        label_details: "D\xE9tails",
        label_sorting: "Tri",
        label_finish: "Terminer",
        label_play: "Lire",
        label_pause: "Pause",
        label_stop: "Arr\xEAter",
        label_mute: "Muet",
        label_loop: "Boucle",
        label_on: "act",
        label_off: "d\xE9s",
        label_rename_tab: "Renommer l'onglet",
        label_close_tab: "Fermer l'onglet",
        label_close_other_tabs: "Fermer les autres onglets",
        label_close_tabs_left: "Fermer les onglets \xE0 gauche",
        label_close_tabs_right: "Fermer les onglets \xE0 droite",
        label_close_all_tabs: "Fermer tous les onglets",
        label_close_inactive_tabs: "Fermer les onglets inactifs",
        label_clear_input: "Effacer l'entr\xE9e",
        label_reveal_password: "Afficher le mot de passe",
        label_hide_password: "Masquer le mot de passe",
        label_generate_random: "G\xE9n\xE9rer une valeur al\xE9atoire",
        label_search_input: "Rechercher la valeur saisie",
        label_note: "Note",
        label_tip: "Astuce",
        label_info: "Info",
        label_warning: "Avertissement",
        label_question: "Question",
        label_error: "Erreur",
        label_success: "Succ\xE8s",
        label_caution: "Prudence",
        label_alert: "Alerte",
        label_bug: "Bug",
        label_fuck: "Merde",
        label_important: "Important",
        label_shit: "Fichu",
        label_air: "Air",
        label_select_all: "Tout s\xE9lectionner",
        label_select_more: "S\xE9lectionner...",
        label_select: "S\xE9lectionner",
        label_filter: "Filtrer",
        label_collapse: "R\xE9duire",
        label_attach: "Attacher"
    });
    Metro.i18n.add("it", {
        weekStart: 1,
        january: "Gennaio",
        february: "Febbraio",
        march: "Marzo",
        april: "Aprile",
        may: "Maggio",
        june: "Giugno",
        july: "Luglio",
        august: "Agosto",
        september: "Settembre",
        october: "Ottobre",
        november: "Novembre",
        december: "Dicembre",
        january_short: "Gen",
        february_short: "Feb",
        march_short: "Mar",
        april_short: "Apr",
        may_short: "Mag",
        june_short: "Giu",
        july_short: "Lug",
        august_short: "Ago",
        september_short: "Set",
        october_short: "Ott",
        november_short: "Nov",
        december_short: "Dic",
        sunday: "Domenica",
        monday: "Luned\xEC",
        tuesday: "Marted\xEC",
        wednesday: "Mercoled\xEC",
        thursday: "Gioved\xEC",
        friday: "Venerd\xEC",
        saturday: "Sabato",
        sunday_short: "Dom",
        monday_short: "Lun",
        tuesday_short: "Mar",
        wednesday_short: "Mer",
        thursday_short: "Gio",
        friday_short: "Ven",
        saturday_short: "Sab",
        sunday_short_2: "D",
        monday_short_2: "L",
        tuesday_short_2: "M",
        wednesday_short_2: "M",
        thursday_short_2: "G",
        friday_short_2: "V",
        saturday_short_2: "S",
        label_ok: "OK",
        label_cancel: "Annulla",
        label_done: "Fatto",
        label_today: "Oggi",
        label_now: "Adesso",
        label_clear: "Cancella",
        label_help: "Aiuto",
        label_yes: "S\xEC",
        label_no: "No",
        label_random: "Casuale",
        label_save: "Salva",
        label_reset: "Reimposta",
        label_submit: "Invia",
        label_add_user_color: "Aggiungi ai colori",
        label_send: "Invia",
        label_accept: "Accetta",
        label_cookies_title: "Questo sito utilizza i cookie",
        label_cookies_text: "Questo sito utilizza i cookie per garantire la migliore esperienza sul nostro sito.",
        label_choose_file: "Scegli file",
        label_drop_file: "Clicca o trascina qui il file",
        label_files_selected: "{n} file selezionati",
        label_days: "giorni",
        label_hours: "ore",
        label_minutes: "min",
        label_seconds: "sec",
        label_month: "mese",
        label_months: "mesi",
        label_day: "giorno",
        label_year: "anno",
        label_years: "anni",
        label_rows_count: "Mostra:",
        label_search: "Cerca:",
        label_table_info: "Mostra da $1 a $2 di $3 elementi",
        label_prev: "Prec",
        label_next: "Succ",
        label_all: "Tutti",
        label_inspector: "Ispettore",
        label_goto_page: "Vai a",
        label_enter_page: "Inserisci pagina...",
        label_empty: "Niente da mostrare",
        label_user_colors: "Colori utente",
        label_tiles: "Piastrelle",
        label_list: "Lista",
        label_load_more: "Carica altro",
        label_buy: "Compra",
        label_buy_now: "Compra ora",
        label_buy_today: "Compra oggi",
        label_download: "Scarica",
        label_search_results: "Risultati di ricerca",
        label_add: "Aggiungi",
        label_edit: "Modifica",
        label_delete: "Elimina",
        label_new: "Nuovo",
        label_sell: "Vendi",
        label_details: "Dettagli",
        label_sorting: "Ordinamento",
        label_finish: "Termina",
        label_play: "Riproduci",
        label_pause: "Pausa",
        label_stop: "Arresta",
        label_mute: "Silenzia",
        label_loop: "Ripeti",
        label_on: "acc",
        label_off: "spe",
        label_rename_tab: "Rinomina scheda",
        label_close_tab: "Chiudi scheda",
        label_close_other_tabs: "Chiudi altre schede",
        label_close_tabs_left: "Chiudi schede a sinistra",
        label_close_tabs_right: "Chiudi schede a destra",
        label_close_all_tabs: "Chiudi tutte le schede",
        label_close_inactive_tabs: "Chiudi schede inattive",
        label_clear_input: "Cancella input",
        label_reveal_password: "Mostra password",
        label_hide_password: "Nascondi password",
        label_generate_random: "Genera valore casuale",
        label_search_input: "Cerca il valore inserito",
        label_note: "Nota",
        label_tip: "Suggerimento",
        label_info: "Info",
        label_warning: "Avviso",
        label_question: "Domanda",
        label_error: "Errore",
        label_success: "Successo",
        label_caution: "Attenzione",
        label_alert: "Allarme",
        label_bug: "Bug",
        label_fuck: "Cavolo",
        label_important: "Importante",
        label_shit: "Accidenti",
        label_air: "Aria",
        label_select_all: "Seleziona tutto",
        label_select_more: "Seleziona...",
        label_select: "Seleziona",
        label_filter: "Filtro",
        label_collapse: "Riduci",
        label_attach: "Allegare"
    });
    Metro.i18n.add("zh-CN", {
        weekStart: 0,
        january: "\u4E00\u6708",
        february: "\u4E8C\u6708",
        march: "\u4E09\u6708",
        april: "\u56DB\u6708",
        may: "\u4E94\u6708",
        june: "\u516D\u6708",
        july: "\u4E03\u6708",
        august: "\u516B\u6708",
        september: "\u4E5D\u6708",
        october: "\u5341\u6708",
        november: "\u5341\u4E00\u6708",
        december: "\u5341\u4E8C\u6708",
        january_short: "1\u6708",
        february_short: "2\u6708",
        march_short: "3\u6708",
        april_short: "4\u6708",
        may_short: "5\u6708",
        june_short: "6\u6708",
        july_short: "7\u6708",
        august_short: "8\u6708",
        september_short: "9\u6708",
        october_short: "10\u6708",
        november_short: "11\u6708",
        december_short: "12\u6708",
        sunday: "\u661F\u671F\u65E5",
        monday: "\u661F\u671F\u4E00",
        tuesday: "\u661F\u671F\u4E8C",
        wednesday: "\u661F\u671F\u4E09",
        thursday: "\u661F\u671F\u56DB",
        friday: "\u661F\u671F\u4E94",
        saturday: "\u661F\u671F\u516D",
        sunday_short: "\u5468\u65E5",
        monday_short: "\u5468\u4E00",
        tuesday_short: "\u5468\u4E8C",
        wednesday_short: "\u5468\u4E09",
        thursday_short: "\u5468\u56DB",
        friday_short: "\u5468\u4E94",
        saturday_short: "\u5468\u516D",
        sunday_short_2: "\u65E5",
        monday_short_2: "\u4E00",
        tuesday_short_2: "\u4E8C",
        wednesday_short_2: "\u4E09",
        thursday_short_2: "\u56DB",
        friday_short_2: "\u4E94",
        saturday_short_2: "\u516D",
        label_ok: "\u786E\u5B9A",
        label_cancel: "\u53D6\u6D88",
        label_done: "\u5B8C\u6210",
        label_today: "\u4ECA\u5929",
        label_now: "\u73B0\u5728",
        label_clear: "\u6E05\u9664",
        label_help: "\u5E2E\u52A9",
        label_yes: "\u662F",
        label_no: "\u5426",
        label_random: "\u968F\u673A",
        label_save: "\u4FDD\u5B58",
        label_reset: "\u91CD\u7F6E",
        label_submit: "\u63D0\u4EA4",
        label_add_user_color: "\u6DFB\u52A0\u5230\u8272\u677F",
        label_send: "\u53D1\u9001",
        label_accept: "\u63A5\u53D7",
        label_cookies_title: "\u672C\u7AD9\u4F7F\u7528cookies",
        label_cookies_text: "\u672C\u7F51\u7AD9\u4F7F\u7528cookies\u4EE5\u786E\u4FDD\u60A8\u5728\u6211\u4EEC\u7684\u7F51\u7AD9\u4E0A\u83B7\u5F97\u6700\u4F73\u4F53\u9A8C\u3002",
        label_choose_file: "\u9009\u62E9\u6587\u4EF6",
        label_drop_file: "\u70B9\u51FB\u6216\u62D6\u653E\u6587\u4EF6\u5230\u8FD9\u91CC",
        label_files_selected: "\u5DF2\u9009\u62E9 {n} \u4E2A\u6587\u4EF6",
        label_days: "\u5929",
        label_hours: "\u5C0F\u65F6",
        label_minutes: "\u5206\u949F",
        label_seconds: "\u79D2",
        label_month: "\u6708",
        label_months: "\u6708",
        label_day: "\u65E5",
        label_year: "\u5E74",
        label_years: "\u5E74",
        label_rows_count: "\u663E\u793A\uFF1A",
        label_search: "\u641C\u7D22\uFF1A",
        label_table_info: "\u663E\u793A\u7B2C $1 \u5230 $2 \u9879\uFF0C\u5171 $3 \u9879",
        label_prev: "\u4E0A\u4E00\u9875",
        label_next: "\u4E0B\u4E00\u9875",
        label_all: "\u5168\u90E8",
        label_inspector: "\u68C0\u67E5\u5668",
        label_goto_page: "\u524D\u5F80",
        label_enter_page: "\u8F93\u5165\u9875\u7801...",
        label_empty: "\u6CA1\u6709\u5185\u5BB9\u53EF\u663E\u793A",
        label_user_colors: "\u7528\u6237\u989C\u8272",
        label_tiles: "\u78C1\u8D34",
        label_list: "\u5217\u8868",
        label_load_more: "\u52A0\u8F7D\u66F4\u591A",
        label_buy: "\u8D2D\u4E70",
        label_buy_now: "\u7ACB\u5373\u8D2D\u4E70",
        label_buy_today: "\u4ECA\u65E5\u8D2D\u4E70",
        label_download: "\u4E0B\u8F7D",
        label_search_results: "\u641C\u7D22\u7ED3\u679C",
        label_add: "\u6DFB\u52A0",
        label_edit: "\u7F16\u8F91",
        label_delete: "\u5220\u9664",
        label_new: "\u65B0\u5EFA",
        label_sell: "\u51FA\u552E",
        label_details: "\u8BE6\u60C5",
        label_sorting: "\u6392\u5E8F",
        label_finish: "\u5B8C\u6210",
        label_play: "\u64AD\u653E",
        label_pause: "\u6682\u505C",
        label_stop: "\u505C\u6B62",
        label_mute: "\u9759\u97F3",
        label_loop: "\u5FAA\u73AF",
        label_on: "\u5F00",
        label_off: "\u5173",
        label_rename_tab: "\u91CD\u547D\u540D\u6807\u7B7E",
        label_close_tab: "\u5173\u95ED\u6807\u7B7E",
        label_close_other_tabs: "\u5173\u95ED\u5176\u4ED6\u6807\u7B7E",
        label_close_tabs_left: "\u5173\u95ED\u5DE6\u4FA7\u6807\u7B7E",
        label_close_tabs_right: "\u5173\u95ED\u53F3\u4FA7\u6807\u7B7E",
        label_close_all_tabs: "\u5173\u95ED\u6240\u6709\u6807\u7B7E",
        label_close_inactive_tabs: "\u5173\u95ED\u975E\u6D3B\u52A8\u6807\u7B7E",
        label_clear_input: "\u6E05\u9664\u8F93\u5165",
        label_reveal_password: "\u663E\u793A\u5BC6\u7801",
        label_hide_password: "\u9690\u85CF\u5BC6\u7801",
        label_generate_random: "\u751F\u6210\u968F\u673A\u503C",
        label_search_input: "\u641C\u7D22\u8F93\u5165\u7684\u503C",
        label_note: "\u5907\u6CE8",
        label_tip: "\u63D0\u793A",
        label_info: "\u4FE1\u606F",
        label_warning: "\u8B66\u544A",
        label_question: "\u95EE\u9898",
        label_error: "\u9519\u8BEF",
        label_success: "\u6210\u529F",
        label_caution: "\u6CE8\u610F",
        label_alert: "\u8B66\u62A5",
        label_bug: "\u9519\u8BEF",
        label_fuck: "\u7CDF\u7CD5",
        label_important: "\u91CD\u8981",
        label_shit: "\u7CDF\u7CD5",
        label_air: "\u7A7A\u6C14",
        label_select_all: "\u5168\u9009",
        label_select_more: "\u9009\u62E9...",
        label_select: "\u9009\u62E9",
        label_filter: "\u7B5B\u9009",
        label_collapse: "\u6298\u53E0",
        label_attach: "\u9644\u52A0"
    });
    Metro.i18n.add("zh-TW", {
        weekStart: 0,
        january: "\u4E00\u6708",
        february: "\u4E8C\u6708",
        march: "\u4E09\u6708",
        april: "\u56DB\u6708",
        may: "\u4E94\u6708",
        june: "\u516D\u6708",
        july: "\u4E03\u6708",
        august: "\u516B\u6708",
        september: "\u4E5D\u6708",
        october: "\u5341\u6708",
        november: "\u5341\u4E00\u6708",
        december: "\u5341\u4E8C\u6708",
        january_short: "1\u6708",
        february_short: "2\u6708",
        march_short: "3\u6708",
        april_short: "4\u6708",
        may_short: "5\u6708",
        june_short: "6\u6708",
        july_short: "7\u6708",
        august_short: "8\u6708",
        september_short: "9\u6708",
        october_short: "10\u6708",
        november_short: "11\u6708",
        december_short: "12\u6708",
        sunday: "\u661F\u671F\u65E5",
        monday: "\u661F\u671F\u4E00",
        tuesday: "\u661F\u671F\u4E8C",
        wednesday: "\u661F\u671F\u4E09",
        thursday: "\u661F\u671F\u56DB",
        friday: "\u661F\u671F\u4E94",
        saturday: "\u661F\u671F\u516D",
        sunday_short: "\u9031\u65E5",
        monday_short: "\u9031\u4E00",
        tuesday_short: "\u9031\u4E8C",
        wednesday_short: "\u9031\u4E09",
        thursday_short: "\u9031\u56DB",
        friday_short: "\u9031\u4E94",
        saturday_short: "\u9031\u516D",
        sunday_short_2: "\u65E5",
        monday_short_2: "\u4E00",
        tuesday_short_2: "\u4E8C",
        wednesday_short_2: "\u4E09",
        thursday_short_2: "\u56DB",
        friday_short_2: "\u4E94",
        saturday_short_2: "\u516D",
        label_ok: "\u78BA\u5B9A",
        label_cancel: "\u53D6\u6D88",
        label_done: "\u5B8C\u6210",
        label_today: "\u4ECA\u5929",
        label_now: "\u73FE\u5728",
        label_clear: "\u6E05\u9664",
        label_help: "\u8AAA\u660E",
        label_yes: "\u662F",
        label_no: "\u5426",
        label_random: "\u96A8\u6A5F",
        label_save: "\u5132\u5B58",
        label_reset: "\u91CD\u8A2D",
        label_submit: "\u63D0\u4EA4",
        label_add_user_color: "\u52A0\u5165\u8272\u7968",
        label_send: "\u50B3\u9001",
        label_accept: "\u63A5\u53D7",
        label_cookies_title: "\u6B64\u7DB2\u7AD9\u4F7F\u7528Cookie",
        label_cookies_text: "\u672C\u7DB2\u7AD9\u4F7F\u7528Cookie\uFF0C\u4EE5\u78BA\u4FDD\u60A8\u5728\u6211\u5011\u7DB2\u7AD9\u4E0A\u7372\u5F97\u6700\u4F73\u9AD4\u9A57\u3002",
        label_choose_file: "\u9078\u64C7\u6A94\u6848",
        label_drop_file: "\u9EDE\u64CA\u6216\u62D6\u653E\u6A94\u6848\u81F3\u6B64",
        label_files_selected: "\u5DF2\u9078\u64C7 {n} \u500B\u6A94\u6848",
        label_days: "\u5929",
        label_hours: "\u5C0F\u6642",
        label_minutes: "\u5206\u9418",
        label_seconds: "\u79D2",
        label_month: "\u6708",
        label_months: "\u6708",
        label_day: "\u65E5",
        label_year: "\u5E74",
        label_years: "\u5E74",
        label_rows_count: "\u986F\u793A\uFF1A",
        label_search: "\u641C\u5C0B\uFF1A",
        label_table_info: "\u986F\u793A\u7B2C $1 \u5230 $2 \u9805\uFF0C\u5171 $3 \u9805",
        label_prev: "\u4E0A\u4E00\u9801",
        label_next: "\u4E0B\u4E00\u9801",
        label_all: "\u5168\u90E8",
        label_inspector: "\u6AA2\u67E5\u5668",
        label_goto_page: "\u524D\u5F80",
        label_enter_page: "\u8F38\u5165\u9801\u78BC...",
        label_empty: "\u6C92\u6709\u8CC7\u6599\u53EF\u986F\u793A",
        label_user_colors: "\u4F7F\u7528\u8005\u984F\u8272",
        label_tiles: "\u78DA\u584A",
        label_list: "\u6E05\u55AE",
        label_load_more: "\u8F09\u5165\u66F4\u591A",
        label_buy: "\u8CFC\u8CB7",
        label_buy_now: "\u7ACB\u5373\u8CFC\u8CB7",
        label_buy_today: "\u4ECA\u65E5\u8CFC\u8CB7",
        label_download: "\u4E0B\u8F09",
        label_search_results: "\u641C\u5C0B\u7D50\u679C",
        label_add: "\u65B0\u589E",
        label_edit: "\u7DE8\u8F2F",
        label_delete: "\u522A\u9664",
        label_new: "\u65B0\u5EFA",
        label_sell: "\u51FA\u552E",
        label_details: "\u8A73\u7D30\u8CC7\u6599",
        label_sorting: "\u6392\u5E8F",
        label_finish: "\u5B8C\u6210",
        label_play: "\u64AD\u653E",
        label_pause: "\u66AB\u505C",
        label_stop: "\u505C\u6B62",
        label_mute: "\u975C\u97F3",
        label_loop: "\u5FAA\u74B0",
        label_on: "\u958B\u555F",
        label_off: "\u95DC\u9589",
        label_rename_tab: "\u91CD\u65B0\u547D\u540D\u5206\u9801",
        label_close_tab: "\u95DC\u9589\u5206\u9801",
        label_close_other_tabs: "\u95DC\u9589\u5176\u4ED6\u5206\u9801",
        label_close_tabs_left: "\u95DC\u9589\u5DE6\u5074\u5206\u9801",
        label_close_tabs_right: "\u95DC\u9589\u53F3\u5074\u5206\u9801",
        label_close_all_tabs: "\u95DC\u9589\u6240\u6709\u5206\u9801",
        label_close_inactive_tabs: "\u95DC\u9589\u975E\u6D3B\u52D5\u5206\u9801",
        label_clear_input: "\u6E05\u9664\u8F38\u5165",
        label_reveal_password: "\u986F\u793A\u5BC6\u78BC",
        label_hide_password: "\u96B1\u85CF\u5BC6\u78BC",
        label_generate_random: "\u7522\u751F\u96A8\u6A5F\u503C",
        label_search_input: "\u641C\u5C0B\u8F38\u5165\u7684\u503C",
        label_note: "\u5099\u8A3B",
        label_tip: "\u63D0\u793A",
        label_info: "\u8CC7\u8A0A",
        label_warning: "\u8B66\u544A",
        label_question: "\u554F\u984C",
        label_error: "\u932F\u8AA4",
        label_success: "\u6210\u529F",
        label_caution: "\u6CE8\u610F",
        label_alert: "\u8B66\u793A",
        label_bug: "\u932F\u8AA4",
        label_fuck: "\u8A72\u6B7B",
        label_important: "\u91CD\u8981",
        label_shit: "\u7CDF\u7CD5",
        label_air: "\u7A7A\u6C23",
        label_select_all: "\u5168\u9078",
        label_select_more: "\u9078\u64C7...",
        label_select: "\u9078\u64C7",
        label_filter: "\u7BE9\u9078",
        label_collapse: "\u6536\u5408",
        label_attach: "\u9644\u52A0"
    });
    Metro.i18n.add("hi", {
        weekStart: 0,
        january: "\u091C\u0928\u0935\u0930\u0940",
        february: "\u092B\u0930\u0935\u0930\u0940",
        march: "\u092E\u093E\u0930\u094D\u091A",
        april: "\u0905\u092A\u094D\u0930\u0948\u0932",
        may: "\u092E\u0908",
        june: "\u091C\u0942\u0928",
        july: "\u091C\u0941\u0932\u093E\u0908",
        august: "\u0905\u0917\u0938\u094D\u0924",
        september: "\u0938\u093F\u0924\u0902\u092C\u0930",
        october: "\u0905\u0915\u094D\u091F\u0942\u092C\u0930",
        november: "\u0928\u0935\u0902\u092C\u0930",
        december: "\u0926\u093F\u0938\u0902\u092C\u0930",
        january_short: "\u091C\u0928",
        february_short: "\u092B\u0930",
        march_short: "\u092E\u093E\u0930\u094D\u091A",
        april_short: "\u0905\u092A\u094D\u0930\u0948",
        may_short: "\u092E\u0908",
        june_short: "\u091C\u0942\u0928",
        july_short: "\u091C\u0941\u0932",
        august_short: "\u0905\u0917",
        september_short: "\u0938\u093F\u0924",
        october_short: "\u0905\u0915\u094D\u091F\u0942",
        november_short: "\u0928\u0935",
        december_short: "\u0926\u093F\u0938",
        sunday: "\u0930\u0935\u093F\u0935\u093E\u0930",
        monday: "\u0938\u094B\u092E\u0935\u093E\u0930",
        tuesday: "\u092E\u0902\u0917\u0932\u0935\u093E\u0930",
        wednesday: "\u092C\u0941\u0927\u0935\u093E\u0930",
        thursday: "\u0917\u0941\u0930\u0941\u0935\u093E\u0930",
        friday: "\u0936\u0941\u0915\u094D\u0930\u0935\u093E\u0930",
        saturday: "\u0936\u0928\u093F\u0935\u093E\u0930",
        sunday_short: "\u0930\u0935\u093F",
        monday_short: "\u0938\u094B\u092E",
        tuesday_short: "\u092E\u0902\u0917\u0932",
        wednesday_short: "\u092C\u0941\u0927",
        thursday_short: "\u0917\u0941\u0930\u0941",
        friday_short: "\u0936\u0941\u0915\u094D\u0930",
        saturday_short: "\u0936\u0928\u093F",
        sunday_short_2: "\u0930",
        monday_short_2: "\u0938\u094B",
        tuesday_short_2: "\u092E\u0902",
        wednesday_short_2: "\u092C\u0941",
        thursday_short_2: "\u0917\u0941",
        friday_short_2: "\u0936\u0941",
        saturday_short_2: "\u0936",
        label_ok: "\u0920\u0940\u0915 \u0939\u0948",
        label_cancel: "\u0930\u0926\u094D\u0926 \u0915\u0930\u0947\u0902",
        label_done: "\u0938\u092E\u093E\u092A\u094D\u0924",
        label_today: "\u0906\u091C",
        label_now: "\u0905\u092D\u0940",
        label_clear: "\u0938\u093E\u092B \u0915\u0930\u0947\u0902",
        label_help: "\u092E\u0926\u0926",
        label_yes: "\u0939\u093E\u0901",
        label_no: "\u0928\u0939\u0940\u0902",
        label_random: "\u092F\u093E\u0926\u0943\u091A\u094D\u091B\u093F\u0915",
        label_save: "\u0938\u0939\u0947\u091C\u0947\u0902",
        label_reset: "\u0930\u0940\u0938\u0947\u091F \u0915\u0930\u0947\u0902",
        label_submit: "\u091C\u092E\u093E \u0915\u0930\u0947\u0902",
        label_add_user_color: "\u0930\u0902\u0917\u094B\u0902 \u092E\u0947\u0902 \u091C\u094B\u0921\u093C\u0947\u0902",
        label_send: "\u092D\u0947\u091C\u0947\u0902",
        label_accept: "\u0938\u094D\u0935\u0940\u0915\u093E\u0930 \u0915\u0930\u0947\u0902",
        label_cookies_title: "\u092F\u0939 \u0938\u093E\u0907\u091F \u0915\u0941\u0915\u0940\u091C\u093C \u0915\u093E \u0909\u092A\u092F\u094B\u0917 \u0915\u0930\u0924\u0940 \u0939\u0948",
        label_cookies_text: "\u092F\u0939 \u0935\u0947\u092C\u0938\u093E\u0907\u091F \u092F\u0939 \u0938\u0941\u0928\u093F\u0936\u094D\u091A\u093F\u0924 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093F\u090F \u0915\u0941\u0915\u0940\u091C\u093C \u0915\u093E \u0909\u092A\u092F\u094B\u0917 \u0915\u0930\u0924\u0940 \u0939\u0948 \u0915\u093F \u0906\u092A\u0915\u094B \u0939\u092E\u093E\u0930\u0940 \u0935\u0947\u092C\u0938\u093E\u0907\u091F \u092A\u0930 \u0938\u092C\u0938\u0947 \u0905\u091A\u094D\u091B\u093E \u0905\u0928\u0941\u092D\u0935 \u092E\u093F\u0932\u0947\u0964",
        label_choose_file: "\u092B\u093C\u093E\u0907\u0932\u0947\u0902 \u091A\u0941\u0928\u0947\u0902",
        label_drop_file: "\u092F\u0939\u093E\u0902 \u0915\u094D\u0932\u093F\u0915 \u0915\u0930\u0947\u0902 \u092F\u093E \u092B\u093C\u093E\u0907\u0932\u0947\u0902 \u091B\u094B\u0921\u093C\u0947\u0902",
        label_files_selected: "{n} \u092B\u093C\u093E\u0907\u0932\u0947\u0902 \u091A\u0941\u0928\u0940 \u0917\u0908\u0902",
        label_days: "\u0926\u093F\u0928",
        label_hours: "\u0918\u0902\u091F\u0947",
        label_minutes: "\u092E\u093F\u0928\u091F",
        label_seconds: "\u0938\u0947\u0915\u0902\u0921",
        label_month: "\u092E\u0939\u0940\u0928\u093E",
        label_months: "\u092E\u0939\u0940\u0928\u0947",
        label_day: "\u0926\u093F\u0928",
        label_year: "\u0938\u093E\u0932",
        label_years: "\u0938\u093E\u0932",
        label_rows_count: "\u0926\u093F\u0916\u093E\u090F\u0902:",
        label_search: "\u0916\u094B\u091C\u0947\u0902:",
        label_table_info: "$1 \u0938\u0947 $2 \u0924\u0915 $3 \u092A\u094D\u0930\u0935\u093F\u0937\u094D\u091F\u093F\u092F\u093E\u0902 \u0926\u093F\u0916\u093E \u0930\u0939\u093E \u0939\u0948",
        label_prev: "\u092A\u093F\u091B\u0932\u093E",
        label_next: "\u0905\u0917\u0932\u093E",
        label_all: "\u0938\u092D\u0940",
        label_inspector: "\u0928\u093F\u0930\u0940\u0915\u094D\u0937\u0915",
        label_goto_page: "\u092A\u0943\u0937\u094D\u0920 \u092A\u0930 \u091C\u093E\u090F\u0902",
        label_enter_page: "\u092A\u0943\u0937\u094D\u0920 \u0926\u0930\u094D\u091C \u0915\u0930\u0947\u0902...",
        label_empty: "\u0926\u093F\u0916\u093E\u0928\u0947 \u0915\u0947 \u0932\u093F\u090F \u0915\u0941\u091B \u0928\u0939\u0940\u0902",
        label_user_colors: "\u0909\u092A\u092F\u094B\u0917\u0915\u0930\u094D\u0924\u093E \u0930\u0902\u0917",
        label_tiles: "\u091F\u093E\u0907\u0932\u094D\u0938",
        label_list: "\u0938\u0942\u091A\u0940",
        label_load_more: "\u0914\u0930 \u0932\u094B\u0921 \u0915\u0930\u0947\u0902",
        label_buy: "\u0916\u0930\u0940\u0926\u0947\u0902",
        label_buy_now: "\u0905\u092D\u0940 \u0916\u0930\u0940\u0926\u0947\u0902",
        label_buy_today: "\u0906\u091C \u0916\u0930\u0940\u0926\u0947\u0902",
        label_download: "\u0921\u093E\u0909\u0928\u0932\u094B\u0921 \u0915\u0930\u0947\u0902",
        label_search_results: "\u0916\u094B\u091C \u092A\u0930\u093F\u0923\u093E\u092E",
        label_add: "\u091C\u094B\u0921\u093C\u0947\u0902",
        label_edit: "\u0938\u0902\u092A\u093E\u0926\u093F\u0924 \u0915\u0930\u0947\u0902",
        label_delete: "\u0939\u091F\u093E\u090F\u0902",
        label_new: "\u0928\u092F\u093E",
        label_sell: "\u092C\u0947\u091A\u0947\u0902",
        label_details: "\u0935\u093F\u0935\u0930\u0923",
        label_sorting: "\u091B\u0902\u091F\u093E\u0908",
        label_finish: "\u0938\u092E\u093E\u092A\u094D\u0924 \u0915\u0930\u0947\u0902",
        label_play: "\u091A\u0932\u093E\u090F\u0902",
        label_pause: "\u0930\u094B\u0915\u0947\u0902",
        label_stop: "\u092C\u0902\u0926 \u0915\u0930\u0947\u0902",
        label_mute: "\u092E\u094D\u092F\u0942\u091F \u0915\u0930\u0947\u0902",
        label_loop: "\u0926\u094B\u0939\u0930\u093E\u090F\u0902",
        label_on: "\u091A\u093E\u0932\u0942",
        label_off: "\u092C\u0902\u0926",
        label_rename_tab: "\u091F\u0948\u092C \u0915\u093E \u0928\u093E\u092E \u092C\u0926\u0932\u0947\u0902",
        label_close_tab: "\u091F\u0948\u092C \u092C\u0902\u0926 \u0915\u0930\u0947\u0902",
        label_close_other_tabs: "\u0905\u0928\u094D\u092F \u091F\u0948\u092C \u092C\u0902\u0926 \u0915\u0930\u0947\u0902",
        label_close_tabs_left: "\u092C\u093E\u090F\u0902 \u091F\u0948\u092C \u092C\u0902\u0926 \u0915\u0930\u0947\u0902",
        label_close_tabs_right: "\u0926\u093E\u090F\u0902 \u091F\u0948\u092C \u092C\u0902\u0926 \u0915\u0930\u0947\u0902",
        label_close_all_tabs: "\u0938\u092D\u0940 \u091F\u0948\u092C \u092C\u0902\u0926 \u0915\u0930\u0947\u0902",
        label_close_inactive_tabs: "\u0928\u093F\u0937\u094D\u0915\u094D\u0930\u093F\u092F \u091F\u0948\u092C \u092C\u0902\u0926 \u0915\u0930\u0947\u0902",
        label_clear_input: "\u0907\u0928\u092A\u0941\u091F \u0938\u093E\u092B \u0915\u0930\u0947\u0902",
        label_reveal_password: "\u092A\u093E\u0938\u0935\u0930\u094D\u0921 \u0926\u093F\u0916\u093E\u090F\u0902",
        label_hide_password: "\u092A\u093E\u0938\u0935\u0930\u094D\u0921 \u091B\u093F\u092A\u093E\u090F\u0902",
        label_generate_random: "\u092F\u093E\u0926\u0943\u091A\u094D\u091B\u093F\u0915 \u092E\u093E\u0928 \u0909\u0924\u094D\u092A\u0928\u094D\u0928 \u0915\u0930\u0947\u0902",
        label_search_input: "\u0926\u0930\u094D\u091C \u0915\u093F\u090F \u0917\u090F \u092E\u093E\u0928 \u0915\u094B \u0916\u094B\u091C\u0947\u0902",
        label_note: "\u0928\u094B\u091F",
        label_tip: "\u0938\u0941\u091D\u093E\u0935",
        label_info: "\u091C\u093E\u0928\u0915\u093E\u0930\u0940",
        label_warning: "\u091A\u0947\u0924\u093E\u0935\u0928\u0940",
        label_question: "\u092A\u094D\u0930\u0936\u094D\u0928",
        label_error: "\u0924\u094D\u0930\u0941\u091F\u093F",
        label_success: "\u0938\u092B\u0932\u0924\u093E",
        label_caution: "\u0938\u093E\u0935\u0927\u093E\u0928\u0940",
        label_alert: "\u091A\u0947\u0924\u093E\u0935\u0928\u0940",
        label_bug: "\u092C\u0917",
        label_fuck: "\u0927\u0924\u094D\u0924",
        label_important: "\u092E\u0939\u0924\u094D\u0935\u092A\u0942\u0930\u094D\u0923",
        label_shit: "\u092C\u0915\u0935\u093E\u0938",
        label_air: "\u0939\u0935\u093E",
        label_select_all: "\u0938\u092D\u0940 \u0915\u093E \u091A\u092F\u0928 \u0915\u0930\u0947\u0902",
        label_select_more: "\u091A\u0941\u0928\u0947\u0902...",
        label_select: "\u091A\u0941\u0928\u0947\u0902",
        label_filter: "\u092B\u093C\u093F\u0932\u094D\u091F\u0930",
        label_collapse: "\u0938\u0902\u0915\u0941\u091A\u093F\u0924 \u0915\u0930\u0947\u0902",
        label_attach: "\u0938\u0902\u0932\u0917\u094D\u0928 \u0915\u0930\u0928\u093E"
    });
    Metro.i18n.add("pl", {
        weekStart: 1,
        january: "Stycze\u0144",
        february: "Luty",
        march: "Marzec",
        april: "Kwiecie\u0144",
        may: "Maj",
        june: "Czerwiec",
        july: "Lipiec",
        august: "Sierpie\u0144",
        september: "Wrzesie\u0144",
        october: "Pa\u017Adziernik",
        november: "Listopad",
        december: "Grudzie\u0144",
        january_short: "Sty",
        february_short: "Lut",
        march_short: "Mar",
        april_short: "Kwi",
        may_short: "Maj",
        june_short: "Cze",
        july_short: "Lip",
        august_short: "Sie",
        september_short: "Wrz",
        october_short: "Pa\u017A",
        november_short: "Lis",
        december_short: "Gru",
        sunday: "Niedziela",
        monday: "Poniedzia\u0142ek",
        tuesday: "Wtorek",
        wednesday: "\u015Aroda",
        thursday: "Czwartek",
        friday: "Pi\u0105tek",
        saturday: "Sobota",
        sunday_short: "Nd",
        monday_short: "Pn",
        tuesday_short: "Wt",
        wednesday_short: "\u015Ar",
        thursday_short: "Czw",
        friday_short: "Pt",
        saturday_short: "Sob",
        sunday_short_2: "N",
        monday_short_2: "P",
        tuesday_short_2: "W",
        wednesday_short_2: "\u015A",
        thursday_short_2: "C",
        friday_short_2: "P",
        saturday_short_2: "S",
        label_ok: "OK",
        label_cancel: "Anuluj",
        label_done: "Gotowe",
        label_today: "Dzisiaj",
        label_now: "Teraz",
        label_clear: "Wyczy\u015B\u0107",
        label_help: "Pomoc",
        label_yes: "Tak",
        label_no: "Nie",
        label_random: "Losowy",
        label_save: "Zapisz",
        label_reset: "Resetuj",
        label_submit: "Wy\u015Blij",
        label_add_user_color: "Dodaj do kolor\xF3w",
        label_send: "Wy\u015Blij",
        label_accept: "Akceptuj",
        label_cookies_title: "Ta strona u\u017Cywa plik\xF3w cookie",
        label_cookies_text: "Ta strona u\u017Cywa plik\xF3w cookie, aby zapewni\u0107 najlepsze do\u015Bwiadczenie na naszej stronie.",
        label_choose_file: "Wybierz plik(i)",
        label_drop_file: "Kliknij lub upu\u015B\u0107 plik(i) tutaj",
        label_files_selected: "Wybrano {n} plik(\xF3w)",
        label_days: "dni",
        label_hours: "godziny",
        label_minutes: "minuty",
        label_seconds: "sekundy",
        label_month: "miesi\u0105c",
        label_months: "miesi\u0105ce",
        label_day: "dzie\u0144",
        label_year: "rok",
        label_years: "lata",
        label_rows_count: "Poka\u017C:",
        label_search: "Szukaj:",
        label_table_info: "Wy\u015Bwietlanie od $1 do $2 z $3 wpis\xF3w",
        label_prev: "Poprzedni",
        label_next: "Nast\u0119pny",
        label_all: "Wszystko",
        label_inspector: "Inspektor",
        label_goto_page: "Id\u017A do",
        label_enter_page: "Wpisz stron\u0119...",
        label_empty: "Brak danych do wy\u015Bwietlenia",
        label_user_colors: "Kolory u\u017Cytkownika",
        label_tiles: "Kafelki",
        label_list: "Lista",
        label_load_more: "Za\u0142aduj wi\u0119cej",
        label_buy: "Kup",
        label_buy_now: "Kup teraz",
        label_buy_today: "Kup dzisiaj",
        label_download: "Pobierz",
        label_search_results: "Wyniki wyszukiwania",
        label_add: "Dodaj",
        label_edit: "Edytuj",
        label_delete: "Usu\u0144",
        label_new: "Nowy",
        label_sell: "Sprzedaj",
        label_details: "Szczeg\xF3\u0142y",
        label_sorting: "Sortowanie",
        label_finish: "Zako\u0144cz",
        label_play: "Odtw\xF3rz",
        label_pause: "Pauza",
        label_stop: "Zatrzymaj",
        label_mute: "Wycisz",
        label_loop: "Zap\u0119tl",
        label_on: "w\u0142\u0105",
        label_off: "wy\u0142",
        label_rename_tab: "Zmie\u0144 nazw\u0119 karty",
        label_close_tab: "Zamknij kart\u0119",
        label_close_other_tabs: "Zamknij inne karty",
        label_close_tabs_left: "Zamknij karty po lewej",
        label_close_tabs_right: "Zamknij karty po prawej",
        label_close_all_tabs: "Zamknij wszystkie karty",
        label_close_inactive_tabs: "Zamknij nieaktywne karty",
        label_clear_input: "Wyczy\u015B\u0107 pole",
        label_reveal_password: "Poka\u017C has\u0142o",
        label_hide_password: "Ukryj has\u0142o",
        label_generate_random: "Wygeneruj losow\u0105 warto\u015B\u0107",
        label_search_input: "Szukaj wprowadzonej warto\u015Bci",
        label_note: "Notatka",
        label_tip: "Wskaz\xF3wka",
        label_info: "Informacja",
        label_warning: "Ostrze\u017Cenie",
        label_question: "Pytanie",
        label_error: "B\u0142\u0105d",
        label_success: "Sukces",
        label_caution: "Uwaga",
        label_alert: "Alarm",
        label_bug: "B\u0142\u0105d",
        label_fuck: "Cholera",
        label_important: "Wa\u017Cne",
        label_shit: "Kurka",
        label_air: "Powietrze",
        label_select_all: "Zaznacz wszystko",
        label_select_more: "Wybierz...",
        label_select: "Wybierz",
        label_filter: "Filtruj",
        label_collapse: "Zwi\u0144",
        label_attach: "Przytwierdza\u0107"
    });
    ( () => {
        "use strict";
        typeof Array.prototype.shuffle != "function" && (Array.prototype.shuffle = function() {
            let t = this.length, r, l;
            for (; t !== 0; )
                l = Math.floor(Math.random() * t),
                t -= 1,
                r = this[t],
                this[t] = this[l],
                this[l] = r;
            return this
        }
        ),
        typeof Array.prototype.clone != "function" && (Array.prototype.clone = function() {
            return this.slice(0)
        }
        ),
        typeof Array.prototype.unique != "function" && (Array.prototype.unique = function() {
            let t = this.concat();
            for (let r = 0; r < t.length; ++r)
                for (let l = r + 1; l < t.length; ++l)
                    t[r] === t[l] && t.splice(l--, 1);
            return t
        }
        ),
        typeof Array.prototype.pack != "function" && (Array.prototype.pack = function() {
            return this.filter(t => t != null && `${t}`.trim() !== "")
        }
        )
    }
    )();
    ( () => {
        "use strict";
        Number.prototype.format = function(t, r, l, e) {
            let o = `\\d(?=(\\d{${r || 3}})+${t > 0 ? "\\D" : "$"})`
              , a = this.toFixed(Math.max(0, ~~t));
            return (e ? a.replace(".", e) : a).replace(new RegExp(o,"g"), `$&${l || ","}`)
        }
    }
    )();
    ( () => {
        "use strict";
        String.prototype.toArray = function(t=",", r="string", l="", e="en", o=!1) {
            let a = `${this}`.split(t).map(i => {
                let s;
                switch (r) {
                case "int":
                case "integer":
                    s = Number.isNaN(i) ? i.trim() : Number.parseInt(i);
                    break;
                case "number":
                case "float":
                    s = Number.isNaN(i) ? i : Number.parseFloat(i);
                    break;
                case "date":
                    s = l ? Datetime.from(i, l, e) : datetime(i);
                    break;
                case "boolean":
                    {
                        switch (i) {
                        case !0:
                        case "true":
                        case 1:
                        case "1":
                        case "on":
                        case "yes":
                        case "+":
                            s = !0;
                            break;
                        default:
                            s = !1
                        }
                        break
                    }
                default:
                    s = i.trim()
                }
                return s
            }
            );
            return o ? a.pack() : a
        }
    }
    )();
    ( (t, r) => {
        "use strict";
        t.utils = {
            elementId: l => `${l}-${new Date().getTime()}${r.random(1, 1e3)}`,
            secondsToTime: l => {
                let e = Math.floor(l % 31536e3 / 86400)
                  , o = Math.floor(l % 31536e3 % 86400 / 3600)
                  , a = Math.floor(l % 31536e3 % 86400 % 3600 / 60)
                  , i = Math.round(l % 31536e3 % 86400 % 3600 % 60);
                return {
                    d: e,
                    h: o,
                    m: a,
                    s: i
                }
            }
            ,
            secondsToFormattedString: l => {
                let e = Number.parseInt(l, 10)
                  , o = Math.floor(e / 3600)
                  , a = Math.floor((e - o * 3600) / 60)
                  , i = e - o * 3600 - a * 60;
                return [Str.lpad(o, "0", 2), Str.lpad(a, "0", 2), Str.lpad(i, "0", 2)].join(":")
            }
            ,
            func: l => new Function("a",l),
            exec: function(l, e, o) {
                let a;
                if (l == null)
                    return !1;
                let i = this.isFunc(l);
                i === !1 && (i = this.func(l));
                try {
                    a = i.apply(o, e)
                } catch (s) {
                    if (a = null,
                    globalThis.METRO_THROWS === !0)
                        throw s
                }
                return a
            },
            embedUrl: l => {
                let e = l;
                return e.indexOf("youtu.be") !== -1 && (e = `https://www.youtube.com/embed/${l.split("/").pop()}`),
                `<div class='embed-container'><iframe src='${e}'></iframe></div>`
            }
            ,
            isVisible: function(l) {
                let e = r(l)[0];
                return this.getStyleOne(e, "display") !== "none" && this.getStyleOne(e, "visibility") !== "hidden" && e.offsetParent !== null
            },
            isUrl: l => /^(\.\/|\.\.\/|ftp|http|https):\/\/(\w+:?\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@\-\/]))?/.test(l),
            isTag: l => /^<\/?[\w\s="\/.':;#-\/?]+>/gi.test(l),
            isEmbedObject: l => {
                let e = ["iframe", "object", "embed", "video"]
                  , o = !1;
                return r.each(e, function() {
                    (typeof l == "string" && l.toLowerCase() === this || l.nodeType !== void 0 && l.tagName.toLowerCase() === this) && (o = !0)
                }),
                o
            }
            ,
            isVideoUrl: l => /youtu\.be|youtube|twitch|vimeo/gi.test(l),
            isDate: function(l, e, o="en-US") {
                let a;
                if (this.isDateObject(l))
                    return !0;
                try {
                    return a = e ? Datetime.from(l, e, o) : datetime(l),
                    Datetime.isDatetime(a)
                } catch (i) {
                    return !1
                }
            },
            isDateObject: l => typeof l == "object" && l.getMonth !== void 0,
            isInt: l => !Number.isNaN(l) && +l % 1 === 0,
            isFloat: l => !Number.isNaN(l) && +l % 1 !== 0 || /^\d*\.\d+$/.test(l),
            isFunc: function(l) {
                return this.isType(l, "function")
            },
            isObject: function(l) {
                return this.isType(l, "object")
            },
            isObject2: l => typeof l == "object" && !Array.isArray(l),
            isType: function(l, e="undefined") {
                if (!this.isValue(l))
                    return !1;
                if (typeof l === e || `${e}`.toLowerCase() === "tag" && this.isTag(l) || `${e}`.toLowerCase() === "url" && this.isUrl(l) || `${e}`.toLowerCase() === "array" && Array.isArray(l))
                    return l;
                if (e !== "string" && this.isTag(l) || this.isUrl(l))
                    return !1;
                if (typeof window[l] === e)
                    return window[l];
                if (typeof l == "string" && l.indexOf(".") === -1 || typeof l == "string" && /[/\s([]+/gm.test(l) || typeof l == "number" && e.toLowerCase() !== "number")
                    return !1;
                let o = l.split("."), a, i = window;
                for (a = 0; a < o.length; a++)
                    i = i[o[a]];
                return typeof i === e ? i : !1
            },
            $: () => globalThis.useJQuery ? globalThis.jQuery : Dom,
            isMetroObject: (l, e) => {
                let o = r(l)
                  , a = t.getPlugin(l, e);
                return o.length === 0 ? (console.warn(`${e} ${l} not found!`),
                !1) : a === void 0 ? (console.warn(`Element not contain role ${e}! Please add attribute data-role="${e}" to element ${l}`),
                !1) : !0
            }
            ,
            isJQuery: l => typeof globalThis.jQuery != "undefined" && l instanceof globalThis.jQuery,
            isDom: l => typeof Dom != "undefined" && l instanceof Dom,
            isQ: function(l) {
                return this.isJQuery(l) || this.isDom(l)
            },
            isOutsider: function(l) {
                let e = r(l)
                  , o = e.clone();
                o.removeAttr("data-role").css({
                    visibility: "hidden",
                    position: "absolute",
                    display: "block"
                }),
                e.parent().append(o);
                let a = this.inViewport(o[0]);
                return o.remove(),
                !a
            },
            inViewport: function(l) {
                let e = this.rect(l);
                return e.top >= 0 && e.left >= 0 && e.bottom <= (globalThis.innerHeight || document.documentElement.clientHeight) && e.right <= (globalThis.innerWidth || document.documentElement.clientWidth)
            },
            viewportOutByWidth: function(l) {
                let e = this.rect(l)
                  , o = globalThis.innerWidth || document.documentElement.clientWidth;
                return e.right > o
            },
            viewportOutByHeight: function(l) {
                let e = this.rect(l)
                  , o = globalThis.innerHeight || document.documentElement.clientHeight;
                return e.bottom > o
            },
            viewportOut: function(l) {
                return this.viewportOutByWidth(l) || this.viewportOutByHeight(l)
            },
            rect: l => l.getBoundingClientRect(),
            getCursorPosition: function(l, e) {
                let o = this.rect(l);
                return {
                    x: this.pageXY(e).x - o.left - globalThis.scrollX,
                    y: this.pageXY(e).y - o.top - globalThis.scrollY
                }
            },
            getCursorPositionX: function(l, e) {
                return this.getCursorPosition(l, e).x
            },
            getCursorPositionY: function(l, e) {
                return this.getCursorPosition(l, e).y
            },
            objectLength: l => Object.keys(l).length,
            percent: (l, e, o) => {
                if (l === 0)
                    return 0;
                let a = e * 100 / l;
                return o === !0 ? Math.round(a) : Math.round(a * 100) / 100
            }
            ,
            objectShift: l => {
                let e = 0;
                return r.each(l, o => {
                    (e === 0 || e > o) && (e = o)
                }
                ),
                delete l[e],
                l
            }
            ,
            objectDelete: (l, e) => {
                e in l && delete l[e]
            }
            ,
            arrayDeleteByMultipleKeys: (l, e) => {
                for (let o of e)
                    delete l[o];
                return l.filter(o => o !== void 0)
            }
            ,
            arrayDelete: (l, e) => {
                let o = l.indexOf(e);
                o > -1 && l.splice(o, 1)
            }
            ,
            arrayDeleteByKey: (l, e) => {
                l.splice(e, 1)
            }
            ,
            nvl: (l, e) => l == null ? e : l,
            objectClone: l => {
                let e = {};
                for (let o in l)
                    r.hasProp(l, o) && (e[o] = l[o]);
                return e
            }
            ,
            github: function(l, e) {
                return L(this, null, function*() {
                    let o = yield fetch(`https://api.github.com/repos/${l}`);
                    if (!o.ok)
                        return;
                    let a = yield o.json();
                    this.exec(e, [a])
                })
            },
            pageHeight: () => {
                let l = document.body
                  , e = document.documentElement;
                return Math.max(l.scrollHeight, l.offsetHeight, e.clientHeight, e.scrollHeight, e.offsetHeight)
            }
            ,
            cleanPreCode: l => {
                let e = Array.prototype.slice.call(document.querySelectorAll(l), 0);
                for (let o of e) {
                    let a = o.textContent.replace(/^[\r\n]+/, "").replace(/\s+$/g, "");
                    if (/^\S/gm.test(a)) {
                        o.textContent = a;
                        continue
                    }
                    let i, s = "", c = /^[\t ]+/gm, d, p = 1e3;
                    for (; i = c.exec(a); )
                        d = i[0].length,
                        d < p && (p = d,
                        s = i[0]);
                    p !== 1e3 && (o.textContent = a.replace(new RegExp(`^${s}`,"gm"), "").trim())
                }
            }
            ,
            coords: l => {
                let o = r(l)[0].getBoundingClientRect();
                return {
                    top: o.top + globalThis.pageYOffset,
                    left: o.left + globalThis.pageXOffset
                }
            }
            ,
            positionXY: function(l, e, o) {
                switch (e) {
                case "client":
                    return this.clientXY(l, o);
                case "screen":
                    return this.screenXY(l, o);
                case "page":
                    return this.pageXY(l, o);
                default:
                    return {
                        x: 0,
                        y: 0
                    }
                }
            },
            clientXY: (l, e="touches") => ({
                x: l[e] ? l[e][0].clientX : l.clientX,
                y: l[e] ? l[e][0].clientY : l.clientY
            }),
            screenXY: (l, e="touches") => ({
                x: l[e] ? l[e][0].screenX : l.screenX,
                y: l[e] ? l[e][0].screenY : l.screenY
            }),
            pageXY: (l, e="touches") => ({
                x: l[e] ? l[e][0].pageX : l.pageX,
                y: l[e] ? l[e][0].pageY : l.pageY
            }),
            isRightMouse: l => "which"in l ? l.which === 3 : "button"in l ? l.button === 2 : void 0,
            hiddenElementSize: (l, e=!1) => {
                let o = r(l).clone(!0);
                o.removeAttr("data-role").css({
                    visibility: "hidden",
                    position: "absolute",
                    display: "block"
                }),
                r("body").append(o);
                let a = o.outerWidth(e)
                  , i = o.outerHeight(e);
                return o.remove(),
                {
                    width: a,
                    height: i
                }
            }
            ,
            getStyle: l => {
                let e = r(l)[0];
                return globalThis.getComputedStyle(e)
            }
            ,
            getStyleOne: function(l, e) {
                return this.getStyle(l).getPropertyValue(e)
            },
            getInlineStyles: l => {
                let e, o, a = {}, i = r(l)[0];
                for (e = 0,
                o = i.style.length; e < o; e++) {
                    let s = i.style[e];
                    a[s] = i.style[s]
                }
                return a
            }
            ,
            encodeURI: l => encodeURI(l).replace(/%5B/g, "[").replace(/%5D/g, "]"),
            updateURIParameter: (l, e, o) => {
                let a = new RegExp(`([?&])${e}=.*?(&|$)`,"i")
                  , i = l.indexOf("?") !== -1 ? "&" : "?";
                return l.match(a) ? l.replace(a, `$1${e}=${o}$2`) : `${l + i + e}=${o}`
            }
            ,
            getURIParameter: (l=globalThis.location.href, e="") => {
                let o = e.replace(/[\[\]]/g, "\\$&")
                  , i = new RegExp(`[?&]${o}(=([^&#]*)|&|#|$)`).exec(l);
                return i ? i[2] ? decodeURIComponent(i[2].replace(/\+/g, " ")) : "" : null
            }
            ,
            getLocales: () => Object.keys(t.locales),
            addLocale: l => {
                t.locales = r.extend({}, t.locales, l)
            }
            ,
            aspectRatioH: (l, e) => {
                if (e === "16/9")
                    return l * 9 / 16;
                if (e === "21/9")
                    return l * 9 / 21;
                if (e === "4/3")
                    return l * 3 / 4
            }
            ,
            aspectRatioW: (l, e) => {
                if (e === "16/9")
                    return l * 16 / 9;
                if (e === "21/9")
                    return l * 21 / 9;
                if (e === "4/3")
                    return l * 4 / 3
            }
            ,
            valueInObject: (l, e) => Object.values(l).indexOf(e) > -1,
            keyInObject: (l, e) => Object.keys(l).indexOf(e) > -1,
            inObject: (l, e, o) => l[e] !== void 0 && l[e] === o,
            newCssSheet: l => {
                let e = document.createElement("style");
                return l !== void 0 && e.setAttribute("media", l),
                e.appendChild(document.createTextNode("")),
                document.head.appendChild(e),
                e.sheet
            }
            ,
            addCssRule: (l, e, o, a) => {
                l.insertRule(`${e}{${o}}`, a)
            }
            ,
            media: l => globalThis.matchMedia(l).matches,
            mediaModes: () => globalThis.METRO_MEDIA,
            mediaExist: l => globalThis.METRO_MEDIA.indexOf(l) > -1,
            inMedia: l => globalThis.METRO_MEDIA.indexOf(l) > -1 && globalThis.METRO_MEDIA.indexOf(l) === globalThis.METRO_MEDIA.length - 1,
            isValue: l => l != null && l !== "",
            isNull: l => l == null,
            isNegative: l => Number.parseFloat(l) < 0,
            isPositive: l => Number.parseFloat(l) > 0,
            isZero: l => Number.parseFloat(l.toFixed(2)) === 0,
            between: (l, e, o, a) => a === !0 ? l >= e && l <= o : l > e && l < o,
            parseMoney: l => Number(Number.parseFloat(l.replace(/[^0-9-.]/g, ""))),
            parseCard: l => l.replace(/[^0-9]/g, ""),
            parsePhone: l => (void 0).parseCard(l),
            parseNumber: (l, e, o) => l.replace(new RegExp(`\\${e}`,"g"), "").replace(new RegExp(`\\${o}`,"g"), "."),
            nearest: (l, e, o) => {
                let a = l / e;
                return a = Math[o === !0 ? "floor" : "ceil"](a) * e,
                a
            }
            ,
            bool: l => {
                let e;
                switch (l) {
                case !0:
                case "true":
                case 1:
                case "1":
                case "on":
                case "yes":
                case "+":
                    e = !0;
                    break;
                default:
                    e = !1
                }
                return e
            }
            ,
            decCount: l => l % 1 === 0 ? 0 : l.toString().split(".")[1].length,
            classNames: (...l) => {
                let e = [];
                for (let o of l)
                    if (o)
                        if (typeof o == "string")
                            e.push(o);
                        else if (t.utils.isObject(o))
                            for (let a in o)
                                o[a] && e.push(a);
                        else
                            t.utils.nothing();
                return e.join(" ")
            }
            ,
            join: (...l) => {
                let e = l.pop()
                  , o = [];
                for (let a of l)
                    a && o.push(t.utils.isObject(a) ? Object.values(a)[0] : a);
                return o.join(e)
            }
            ,
            copy2clipboard: (l, e) => {
                navigator.clipboard.writeText(l).then( () => {
                    t.utils.exec(e, [l])
                }
                )
            }
            ,
            getCssVar: l => {
                let e = document.documentElement;
                return getComputedStyle(e).getPropertyValue(l)
            }
            ,
            scrollTo: (l, e) => {
                (typeof l == "string" ? r(l)[0] : l).scrollIntoView(st(V({}, e), {
                    behavior: "smooth",
                    block: "start"
                }))
            }
        }
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            duration: 300,
            ease: "linear"
        };
        t.Effects = {
            switchIn: e => {
                r(e).hide().css({
                    left: 0,
                    top: 0
                }).show()
            }
            ,
            switchOut: e => {
                r(e).hide()
            }
            ,
            switch: function(e, o) {
                this.switchOut(e),
                this.switchIn(o)
            },
            slideUpIn: (e, o) => {
                let a = r(e)
                  , i = a.parent().outerHeight(!0)
                  , s = r.extend({}, l, o);
                a.css({
                    top: i,
                    left: 0,
                    zIndex: 2
                }).animate({
                    draw: {
                        top: 0,
                        opacity: 1
                    },
                    dur: s.duration,
                    ease: s.ease
                })
            }
            ,
            slideUpOut: (e, o) => {
                let a = r(e)
                  , i = a.parent().outerHeight(!0)
                  , s = r.extend({}, l, o);
                a.css({
                    zIndex: 1
                }).animate({
                    draw: {
                        top: -i,
                        opacity: 0
                    },
                    dur: s.duration,
                    ease: s.ease
                })
            }
            ,
            slideUp: function(e, o, a) {
                this.slideUpOut(e, a),
                this.slideUpIn(o, a)
            },
            slideDownIn: (e, o) => {
                let a = r(e)
                  , i = a.parent().outerHeight(!0)
                  , s = r.extend({}, l, o);
                a.css({
                    left: 0,
                    top: -i,
                    zIndex: 2
                }).animate({
                    draw: {
                        top: 0,
                        opacity: 1
                    },
                    dur: s.duration,
                    ease: s.ease
                })
            }
            ,
            slideDownOut: (e, o) => {
                let a = r(e)
                  , i = a.parent().outerHeight(!0)
                  , s = r.extend({}, l, o);
                a.css({
                    zIndex: 1
                }).animate({
                    draw: {
                        top: i,
                        opacity: 0
                    },
                    dur: s.duration,
                    ease: s.ease
                })
            }
            ,
            slideDown: function(e, o, a) {
                this.slideDownOut(e, a),
                this.slideDownIn(o, a)
            },
            slideLeftIn: (e, o) => {
                let a = r(e)
                  , i = a.parent().outerWidth(!0)
                  , s = r.extend({}, l, o);
                a.css({
                    left: i,
                    zIndex: 2
                }).animate({
                    draw: {
                        left: 0,
                        opacity: 1
                    },
                    dur: s.duration,
                    ease: s.ease
                })
            }
            ,
            slideLeftOut: (e, o) => {
                let a = r(e)
                  , i = a.parent().outerWidth(!0)
                  , s = r.extend({}, l, o);
                a.css({
                    zIndex: 1
                }).animate({
                    draw: {
                        left: -i,
                        opacity: 0
                    },
                    dur: s.duration,
                    ease: s.ease
                })
            }
            ,
            slideLeft: function(e, o, a) {
                this.slideLeftOut(e, a),
                this.slideLeftIn(o, a)
            },
            slideRightIn: (e, o) => {
                let a = r(e)
                  , i = a.parent().outerWidth(!0)
                  , s = r.extend({}, l, o);
                a.css({
                    left: -i,
                    zIndex: 2
                }).animate({
                    draw: {
                        left: 0,
                        opacity: 1
                    },
                    dur: s.duration,
                    ease: s.ease
                })
            }
            ,
            slideRightOut: (e, o) => {
                let a = r(e)
                  , i = a.parent().outerWidth(!0)
                  , s = r.extend({}, l, o);
                a.css({
                    zIndex: 1
                }).animate({
                    draw: {
                        left: i,
                        opacity: 0
                    },
                    dur: s.duration,
                    ease: s.ease
                })
            }
            ,
            slideRight: function(e, o, a) {
                this.slideRightOut(e, a),
                this.slideRightIn(o, a)
            },
            fadeIn: (e, o) => {
                let a = r.extend({}, l, o);
                r(e).css({
                    top: 0,
                    left: 0,
                    opacity: 0
                }).animate({
                    draw: {
                        opacity: 1
                    },
                    dur: a.duration,
                    ease: a.ease
                })
            }
            ,
            fadeOut: (e, o) => {
                let a = r.extend({}, l, o);
                r(e).animate({
                    draw: {
                        opacity: 0
                    },
                    dur: a.duration,
                    ease: a.ease
                })
            }
            ,
            fade: function(e, o, a) {
                this.fadeOut(e, a),
                this.fadeIn(o, a)
            },
            zoomIn: (e, o) => {
                let a = r.extend({}, l, o);
                r(e).css({
                    top: 0,
                    left: 0,
                    opacity: 0,
                    transform: "scale(3)",
                    zIndex: 2
                }).animate({
                    draw: {
                        scale: 1,
                        opacity: 1
                    },
                    dur: a.duration,
                    ease: a.ease
                })
            }
            ,
            zoomOut: (e, o) => {
                let a = r.extend({}, l, o);
                r(e).css({
                    zIndex: 1
                }).animate({
                    draw: {
                        scale: 3,
                        opacity: 0
                    },
                    dur: a.duration,
                    ease: a.ease
                })
            }
            ,
            zoom: function(e, o, a) {
                this.zoomOut(e, a),
                this.zoomIn(o, a)
            },
            swirlIn: (e, o) => {
                let a = r.extend({}, l, o);
                r(e).css({
                    top: 0,
                    left: 0,
                    opacity: 0,
                    transform: "scale(3) rotate(180deg)",
                    zIndex: 2
                }).animate({
                    draw: {
                        scale: 1,
                        rotate: 0,
                        opacity: 1
                    },
                    dur: a.duration,
                    ease: a.ease
                })
            }
            ,
            swirlOut: (e, o) => {
                let a = r.extend({}, l, o);
                r(e).css({
                    zIndex: 1
                }).animate({
                    draw: {
                        scale: 3,
                        rotate: "180deg",
                        opacity: 0
                    },
                    dur: a.duration,
                    ease: a.ease
                })
            }
            ,
            swirl: function(e, o, a) {
                this.swirlOut(e, a),
                this.swirlIn(o, a)
            }
        }
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            accordionDeferred: 0,
            showMarker: !0,
            material: !1,
            duration: 100,
            oneFrame: !0,
            showActive: !0,
            clsFrame: "",
            clsHeading: "",
            clsContent: "",
            clsAccordion: "",
            clsActiveFrame: "",
            clsActiveFrameHeading: "",
            clsActiveFrameContent: "",
            onFrameOpen: t.noop,
            onFrameBeforeOpen: t.noop_true,
            onFrameClose: t.noop,
            onFrameBeforeClose: t.noop_true,
            onAccordionCreate: t.noop
        };
        t.accordionSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroAccordionSetup != "undefined" && t.accordionSetup(globalThis.metroAccordionSetup),
        t.Component("accordion", {
            init: function(e, o) {
                return this._super(o, e, l),
                this
            },
            _create: function() {
                let e = this.element;
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("accordionCreate", {
                    element: e
                })
            },
            _createStructure: function() {
                let e = this, o = this.element, a = this.options, i = o.children(".frame"), s = o.children(".frame.active"), c;
                o.id() || o.id(Hooks.useId("accordion")),
                o.addClass("accordion").addClass(a.clsAccordion),
                i.addClass(a.clsFrame).each(function() {
                    let d = r(this)
                      , p = d.children(".heading")
                      , m = d.children(".content")
                      , g = Hooks.useId("accordion-heading")
                      , f = Hooks.useId("accordion-content");
                    p.attr({
                        id: g,
                        role: "button",
                        "aria-expanded": d.hasClass("active") ? "true" : "false",
                        "aria-controls": f,
                        tabindex: "0"
                    }),
                    m.attr({
                        id: f,
                        role: "region",
                        "aria-labelledby": g
                    }),
                    p.addClass(a.clsHeading),
                    m.addClass(a.clsContent)
                }),
                a.showMarker === !0 && o.addClass("marker-on"),
                a.material === !0 && o.addClass("material"),
                s.length === 0 ? c = i[0] : c = s[0],
                this._hideAll(),
                a.showActive === !0 && (a.oneFrame === !0 ? this._openFrame(c) : r.each(s, function() {
                    e._openFrame(this)
                }))
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options
                  , i = o.children(".frame.active");
                o.on("keydown", ".heading", function(s) {
                    let c = r(this)
                      , d = c.parent();
                    if (c.closest(".accordion")[0] !== o[0])
                        return !1;
                    if ((s.keyCode === 13 || s.keyCode === 32) && (s.preventDefault(),
                    d.hasClass("active") ? i.length === 1 && a.oneFrame || e._closeFrame(d) : e._openFrame(d)),
                    s.keyCode === 38 || s.keyCode === 40) {
                        s.preventDefault();
                        let p = o.children(".frame"), m = p.index(d), g;
                        s.keyCode === 38 ? g = (m - 1 + p.length) % p.length : g = (m + 1) % p.length,
                        p.eq(g).children(".heading").focus()
                    }
                }),
                o.on(t.events.click, ".heading", function() {
                    let s = r(this)
                      , c = s.parent();
                    if (s.closest(".accordion")[0] !== o[0])
                        return !1;
                    c.hasClass("active") ? i.length === 1 && a.oneFrame || e._closeFrame(c) : e._openFrame(c)
                })
            },
            _openFrame: function(e) {
                let o = this.element
                  , a = this.options
                  , i = r(e);
                if (t.utils.exec(a.onFrameBeforeOpen, [i[0]], o[0]) === !1)
                    return !1;
                a.oneFrame === !0 && this._closeAll(i[0]),
                i.addClass("active").addClass(a.clsActiveFrame),
                i.children(".heading").addClass(a.clsActiveFrameHeading),
                i.children(".content").addClass(a.clsActiveFrameContent).slideDown(a.duration),
                this._fireEvent("frameOpen", {
                    frame: i[0]
                })
            },
            _closeFrame: function(e) {
                let o = this.element
                  , a = this.options
                  , i = r(e);
                i.hasClass("active") && t.utils.exec(a.onFrameBeforeClose, [i[0]], o[0]) !== !1 && (i.removeClass("active").removeClass(a.clsActiveFrame),
                i.children(".heading").removeClass(a.clsActiveFrameHeading),
                i.children(".content").removeClass(a.clsActiveFrameContent).slideUp(a.duration),
                this._fireEvent("frameClose", {
                    frame: i[0]
                }))
            },
            _closeAll: function(e) {
                let o = this
                  , i = this.element.children(".frame");
                r.each(i, function() {
                    e !== this && o._closeFrame(this)
                })
            },
            _hideAll: function() {
                let o = this.element.children(".frame");
                r.each(o, function() {
                    r(this).children(".content").hide()
                })
            },
            _openAll: function() {
                let e = this
                  , a = this.element.children(".frame");
                r.each(a, function() {
                    e._openFrame(this)
                })
            },
            open: function(e) {
                let o = this.element.children(".frame").eq(e);
                this._openFrame(o)
            },
            close: function(e) {
                let o = this.element.children(".frame").eq(e);
                this._closeFrame(o)
            },
            toggle: function(e) {
                let o = this.element.children(".frame").eq(e);
                o.hasClass("active") ? this._closeFrame(o) : this._openFrame(o)
            },
            getActive: function() {
                let o = this.element.children(".frame")
                  , a = [];
                return o.each(function(i) {
                    r(this).hasClass("active") && a.push(i)
                }),
                a
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                let e = this.element;
                return e.off(t.events.click, ".heading"),
                e
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            onClick: t.noop,
            onActionClick: t.noop,
            onActionButtonCreate: t.noop
        };
        t.actionButtonSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroActionButtonSetup != "undefined" && t.actionButtonSetup(globalThis.metroActionButtonSetup),
        t.Component("action-button", {
            init: function(e, o) {
                return this._super(o, e, l, {}),
                this
            },
            _create: function() {
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("action-button-create")
            },
            _createStructure: function() {
                let e = this.element
                  , o = e.find(".actions li, .actions button");
                e.addClass("action-button"),
                e.cssVar("num-actions", o.length),
                o.length > 8 && e.cssVar("action-shift", `${60 + (o.length - 8) * 6}px`),
                o.each(function(a) {
                    r(this).cssVar("action-index", a).addClass("sub-action")
                }),
                e.children("button").addClass("main-action")
            },
            _createEvents: function() {
                let e = this
                  , o = this.element;
                o.on(t.events.click, ".actions li, .actions button", function(a) {
                    e._fireEvent("action-click", {
                        action: this
                    })
                }),
                o.on(t.events.click, ".main-action", function(a) {
                    a.preventDefault(),
                    a.stopPropagation(),
                    r(this).toggleClass("active")
                })
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                this.element.remove()
            }
        }),
        r(document).on("click", e => {
            r("[data-role-actionbutton]").each( (o, a) => {
                r(a).children("button").removeClass("active")
            }
            )
        }
        )
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            dialogDeferred: 0,
            closeButton: !1,
            leaveOverlayOnClose: !1,
            toTop: !1,
            toBottom: !1,
            title: "",
            content: "",
            customButtons: null,
            actionsAlign: "right",
            defaultActions: !0,
            defaultActionButtons: "ok,cancel,help",
            overlay: !0,
            overlayColor: "#000000",
            overlayAlpha: .5,
            overlayClickClose: !1,
            width: "auto",
            height: "auto",
            closeAction: !0,
            clsDialog: "",
            clsTitle: "",
            clsContent: "",
            clsAction: "",
            clsDefaultAction: "",
            clsOverlay: "",
            autoHide: 0,
            removeOnClose: !1,
            show: !1,
            _runtime: !1,
            onOk: t.noop,
            onCancel: t.noop,
            onHelp: t.noop,
            onShow: t.noop,
            onHide: t.noop,
            onOpen: t.noop,
            onClose: t.noop,
            onDialogCreate: t.noop
        };
        t.dialogSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroDialogSetup != "undefined" && t.dialogSetup(globalThis.metroDialogSetup),
        t.Component("dialog", {
            _counter: 0,
            init: function(e, o) {
                return this._super(o, e, l, {
                    interval: null,
                    overlay: null,
                    id: null
                }),
                this
            },
            _create: function() {
                this._build()
            },
            _build: function() {
                let e = this.element, o = this.elem, a = this.options, i = this.strings, s = r("body"), c;
                if (this.id = Hooks.useId(this.elem),
                e.addClass("dialog"),
                a.title !== "" && this.setTitle(a.title),
                a.content !== "" && this.setContent(a.content),
                a.defaultActions === !0 || a.customButtons) {
                    let p = e.find(".dialog-actions"), m;
                    if (p.length === 0 && (p = r("<div>").addClass("dialog-actions").addClass(`text-${a.actionsAlign}`).appendTo(e)),
                    a.defaultActions === !0 && e.find(".dialog-actions > *").length === 0)
                        for (let f of a.defaultActionButtons.toArray(","))
                            m = r("<button>").addClass(f !== "help" ? "js-dialog-close" : "").addClass(a.clsDefaultAction).html(i[`label_${f}`]),
                            m.appendTo(p),
                            f === "ok" && m.on(t.events.click, () => {
                                t.utils.exec(a.onOk, [e])
                            }
                            ),
                            f === "help" && m.on(t.events.click, () => {
                                t.utils.exec(a.onHelp, [e])
                            }
                            ),
                            f === "cancel" && m.on(t.events.click, () => {
                                t.utils.exec(a.onCancel, [e])
                            }
                            );
                    let g = t.utils.isObject(a.customButtons);
                    Array.isArray(g) && r.each(g, function() {
                        m = r("<button>").addClass("button").addClass(this.cls).html(this.text),
                        this.onclick && m.on(t.events.click, () => {
                            t.utils.exec(this.onclick, [e])
                        }
                        ),
                        m.appendTo(p)
                    })
                }
                a.overlay === !0 && (c = this._overlay(),
                this.overlay = c),
                a.closeAction === !0 && e.on(t.events.click, ".js-dialog-close", () => {
                    this.close()
                }
                );
                let d = e.find("closer");
                d.length === 0 && (d = r("<span>").addClass("closer js-dialog-close"),
                d.appendTo(e)),
                a.closeButton !== !0 && d.hide(),
                e.css({
                    height: a.height,
                    visibility: "hidden",
                    top: "100%"
                }),
                a.width !== "auto" && e.css({
                    width: a.width
                }),
                e.addClass(a.clsDialog),
                e.find(".dialog-title").addClass(a.clsTitle),
                e.find(".dialog-content").addClass(a.clsContent),
                e.find(".dialog-actions").addClass(a.clsAction),
                e.appendTo(s),
                a.show && this.open(),
                r(globalThis).on(t.events.resize, () => {
                    this.setPosition()
                }
                , {
                    ns: this.id
                }),
                this._fireEvent("dialog-create", {
                    element: e
                })
            },
            _overlay: function() {
                let e = this.options
                  , o = r("<div>");
                return o.addClass("overlay").addClass(e.clsOverlay),
                e.overlayColor === "transparent" ? o.addClass("transparent") : o.css({
                    background: Farbe.Routines.toRGBA(Farbe.Routines.parse(e.overlayColor), e.overlayAlpha)
                }),
                o
            },
            hide: function(e) {
                let o = this.element
                  , a = this.options
                  , i = 0;
                a.onHide !== t.noop && (i = 500,
                this._fireEvent("hide")),
                setTimeout( () => {
                    t.utils.exec(e, null, o[0]),
                    o.css({
                        visibility: "hidden",
                        top: "100%"
                    })
                }
                , i)
            },
            show: function(e) {
                let o = this.element;
                this.setPosition(),
                o.css({
                    visibility: "visible"
                }),
                this._fireEvent("show"),
                t.utils.exec(e, null, o[0])
            },
            setPosition: function() {
                let e = this.element, o = this.options, a, i;
                o.toTop !== !0 && o.toBottom !== !0 ? (a = (r(globalThis).height() - e.outerHeight()) / 2,
                a < 0 && (a = 0),
                i = "auto") : (o.toTop === !0 && (a = 0,
                i = "auto"),
                o.toTop !== !0 && o.toBottom === !0 && (i = 0,
                a = "auto")),
                e.css({
                    top: a,
                    bottom: i,
                    left: (r(globalThis).width() - e.outerWidth()) / 2
                })
            },
            setContent: function(e) {
                let o = this.element
                  , a = o.find(".dialog-content");
                a.length === 0 && (a = r("<div>").addClass("dialog-content"),
                a.appendTo(o)),
                t.utils.isQ(e) ? e.appendTo(a) : t.utils.isFunc(e) ? a.html(t.utils.exec(e)) : a.html(e)
            },
            setTitle: function(e) {
                let o = this.element
                  , a = o.find(".dialog-title");
                a.length === 0 && (a = r("<div>").addClass("dialog-title"),
                a.appendTo(o)),
                a.html(e)
            },
            close: function() {
                let e = this.element
                  , o = this.options;
                t.utils.bool(o.leaveOverlayOnClose) || r("body").find(".overlay").remove(),
                this.hide( () => {
                    e.data("open", !1),
                    this._fireEvent("close"),
                    o.removeOnClose === !0 && e.remove()
                }
                )
            },
            open: function() {
                let e = this.element
                  , o = this.options;
                o.overlay === !0 && r(".overlay").length === 0 && (this.overlay.appendTo(r("body")),
                o.overlayClickClose === !0 && this.overlay.on(t.events.click, () => {
                    this.close()
                }
                )),
                this.show( () => {
                    this._fireEvent("open"),
                    e.data("open", !0),
                    Number.parseInt(o.autoHide) > 0 && setTimeout( () => {
                        this.close()
                    }
                    , Number.parseInt(o.autoHide))
                }
                )
            },
            toggle: function() {
                this.element.data("open") ? this.close() : this.open()
            },
            isOpen: function() {
                return this.element.data("open") === !0
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                let e = this.element;
                e.off(t.events.click, ".js-dialog-close"),
                e.find(".button").off(t.events.click),
                r(globalThis).off(t.events.resize, {
                    ns: this.id
                }),
                e.remove()
            }
        }),
        t.dialog = {
            isDialog: e => t.utils.isMetroObject(e, "dialog"),
            open: function(e, o, a) {
                if (!this.isDialog(e))
                    return !1;
                let i = t.getPlugin(e, "dialog");
                a && i.setTitle(a),
                o && i.setContent(o),
                i.open()
            },
            close: function(e) {
                if (!this.isDialog(e))
                    return !1;
                t.getPlugin(r(e)[0], "dialog").close()
            },
            toggle: function(e) {
                if (!this.isDialog(e))
                    return !1;
                t.getPlugin(r(e)[0], "dialog").toggle()
            },
            isOpen: function(e) {
                if (!this.isDialog(e))
                    return !1;
                t.getPlugin(r(e)[0], "dialog").isOpen()
            },
            remove: function(e) {
                if (!this.isDialog(e))
                    return !1;
                let o = t.getPlugin(r(e)[0], "dialog");
                o.options.removeOnClose = !0,
                o.close()
            },
            create: e => {
                let o = r("<div>").appendTo(r("body"))
                  , a = r.extend({}, {
                    show: !0,
                    closeAction: !0,
                    removeOnClose: !0
                }, e || {});
                return a._runtime = !0,
                t.makePlugin(o, "dialog", a)
            }
        }
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            activityDeferred: 0,
            type: "ring",
            style: "",
            size: 64,
            radius: 20,
            onActivityCreate: t.noop
        };
        t.activitySetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroActivitySetup != "undefined" && t.activitySetup(globalThis.metroActivitySetup),
        t.Component("activity", {
            init: function(e, o) {
                return this._super(o, e, l),
                this
            },
            _create: function() {
                let e = this.element, o = this.options, a, i;
                e.html("").addClass(o.style === "dark" ? "dark-side" : o.style === "color" ? "color-style" : "").addClass(`activity-${o.type}`);
                function s() {
                    for (a = 0; a < 5; a++)
                        r("<div/>").addClass("circle").appendTo(e)
                }
                function c() {
                    for (a = 0; a < 4; a++)
                        r("<div/>").addClass("square").appendTo(e)
                }
                function d() {
                    r("<div/>").addClass("cycle").appendTo(e)
                }
                function p() {
                    for (a = 0; a < 5; a++)
                        i = r("<div/>").addClass("wrap").appendTo(e),
                        r("<div/>").addClass("circle").appendTo(i)
                }
                function m() {
                    r(`
                    <svg class="circular">
                        <circle class="path" 
                                cx="${o.size / 2}" 
                                cy="${o.size / 2}" 
                                r="${o.radius}" 
                                fill="none" 
                                stroke-width="2" 
                                stroke-miterlimit="10"
                        />
                    </svg>
                `).appendTo(e)
                }
                function g() {
                    for (a = 0; a < 3; a++)
                        r("<span/>").addClass("electron").appendTo(e)
                }
                function f() {
                    for (a = 0; a < 6; a++)
                        r("<span/>").addClass("bar").appendTo(e)
                }
                switch (o.type) {
                case "metro":
                    s();
                    break;
                case "square":
                    c();
                    break;
                case "cycle":
                    d();
                    break;
                case "simple":
                    m();
                    break;
                case "atom":
                    g();
                    break;
                case "bars":
                    f();
                    break;
                default:
                    p()
                }
                this._fireEvent("activity-create", {
                    element: e
                })
            },
            changeAttribute: e => {}
            ,
            destroy: function() {
                this.element.remove()
            }
        }),
        t.activity = {
            open: (e={}) => {
                let o = e
                  , a = `<div data-role="activity" data-type="${o.type ? o.type : "cycle"}" data-style="${o.style ? o.style : "color"}"></div>`
                  , i = o.text ? `<div class="text-center">${o.text}</div>` : "";
                return t.dialog.create({
                    content: a + i,
                    defaultActions: !1,
                    clsContent: "d-flex flex-column flex-center bg-transparent no-shadow w-auto",
                    clsDialog: "no-border no-shadow bg-transparent global-dialog",
                    autoHide: o.autoHide ? o.autoHide : 0,
                    overlayClickClose: o.overlayClickClose === !0,
                    overlayColor: o.overlayColor ? o.overlayColor : "#000000",
                    overlayAlpha: o.overlayAlpha ? o.overlayAlpha : .5,
                    clsOverlay: "global-overlay"
                })
            }
            ,
            close: e => {
                t.dialog.close(e)
            }
        }
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            adblockDeferred: 0,
            checkInterval: 1e3,
            fireOnce: !0,
            checkStop: 10,
            localhost: !1,
            onAlert: t.noop,
            onFishingStart: t.noop,
            onFishingDone: t.noop
        };
        t.adblockSetup = o => {
            l = r.extend({}, l, o)
        }
        ,
        typeof globalThis.metroAdblockSetup != "undefined" && t.adblockSetup(globalThis.metroAdblockSetup);
        let e = {
            bite: () => {
                r("<div>").addClass("adblock-bite adsense google-adsense dblclick advert topad top_ads topAds textads sponsoredtextlink_container show_ads right-banner rekl mpu module-ad mid_ad mediaget horizontal_ad headerAd contentAd brand-link bottombanner bottom_ad_block block_ad bannertop banner-right banner-body b-banner b-article-aside__banner b-advert adwrapper adverts advertisment advertisement:not(body) advertise advert_list adtable adsense adpic adlist adleft adinfo adi adholder adframe addiv ad_text ad_space ad_right ad_links ad_body ad_block ad_Right adTitle adText".split(" ").shuffle().join(" ")).css({
                    position: "fixed",
                    height: 1,
                    width: 1,
                    overflow: "hidden",
                    visibility: "visible",
                    top: 0,
                    left: 0
                }).append(r("<a href='https://dblclick.net'>").html("dblclick.net")).appendTo("body"),
                e.options.adblockDeferred ? setTimeout( () => {
                    e.fishing()
                }
                , e.options.adblockDeferred) : e.fishing()
            }
            ,
            fishing: () => {
                let o = e.options
                  , a = typeof o.fireOnce == "number" ? o.fireOnce : 0
                  , i = o.checkStop
                  , s = !1
                  , c = () => {
                    let d = r(".adsense.google-adsense.dblclick.advert.adblock-bite")
                      , p = d.find("a")
                      , m = () => {
                        clearInterval(s),
                        t.utils.exec(o.onFishingDone),
                        r(globalThis).fire("fishing-done"),
                        d.remove()
                    }
                    ;
                    if (!o.localhost && r.localhost) {
                        m();
                        return
                    }
                    !d.length || !p.length || d.css("display").indexOf("none") > -1 || p.css("display").indexOf("none") > -1 ? (t.utils.exec(e.options.onAlert),
                    r(globalThis).fire("adblock-alert"),
                    e.options.fireOnce === !0 ? m() : (a--,
                    a === 0 && m())) : i !== !1 && (i--,
                    i === 0 && m())
                }
                ;
                t.utils.exec(o.onFishingStart),
                r(globalThis).fire("fishing-start"),
                s = setInterval( () => {
                    c()
                }
                , e.options.checkInterval),
                c()
            }
        };
        t.Adblock = e,
        r( () => {
            e.options = r.extend({}, l),
            r(globalThis).on("metro-initiated", () => {
                e.bite()
            }
            )
        }
        )
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            icon: null,
            showNumbers: !1,
            showMoon: !0,
            showDay: !0,
            showDigitalClock: !0,
            timeFormat: 24,
            onAnalogClockCreate: t.noop
        };
        t.analogClockSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroAnalogClockSetup != "undefined" && t.analogClockSetup(globalThis.metroAnalogClockSetup),
        t.Component("analog-clock", {
            init: function(e, o) {
                return this._super(o, e, l, {}),
                this
            },
            _create: function() {
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("analog-clock-create")
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options
                  , a = datetime();
                e.addClass("analog-clock"),
                o.showNumbers && e.addClass("show-numbers");
                for (let i = 1; i <= 12; i++)
                    e.append(`<label class="dash" style="--i: ${i}"><span>${o.showNumbers ? i : "|"}</span></label>`);
                for (let i = 1; i <= 90; i++)
                    i % 5 !== 0 && e.append(`<label class="secondary-dash" style="--i2: ${i}"><span>|</span></label>`);
                e.append(`
                <div class="hands">
                    <div class="hour"></div>                
                    <div class="minute"></div>                
                    <div class="second"></div>                
                </div>
                  
            `),
                e.append(`
                <div class="day-month">
                    <div class="day-month-inner">
                        <div class="day">${a.format("DD", this.locale)}</div>
                        <div class="month">${a.format("MMM", this.locale)}</div>                    
                    </div>
                    <div class="week-day">${a.format("dddd", this.locale)}</div>
                </div>
            `),
                o.showDay === !1 && e.find(".day-month").hide(),
                e.append(`
                <div class="digital-clock">
                    <div class="dc-hour">${a.format(o.timeFormat === 24 ? "HH" : "hh", this.locale)}</div>
                    <div class="dc-minute">${a.format("mm", this.locale)}</div>
                    <div class="dc-second">${a.format("ss", this.locale)}</div>
                </div>
            `),
                o.showDigitalClock === !1 && e.find(".digital-clock").hide(),
                o.icon && e.append(`<div class="icon">${o.icon}</div>`),
                o.showMoon === !0 && e.append('<div class="moon"></div>'),
                this._updateTime(),
                setInterval( () => {
                    e.toggleClass("tick")
                }
                , 500)
            },
            _createEvents: () => {}
            ,
            _updateTime: function() {
                let e = this.element
                  , o = this.options
                  , a = e.find(".second")
                  , i = e.find(".minute")
                  , s = e.find(".hour")
                  , c = e.find(".dc-second")
                  , d = e.find(".dc-minute")
                  , p = e.find(".dc-hour")
                  , m = e.find(".day")
                  , g = e.find(".month")
                  , f = e.find(".moon")
                  , u = () => {
                    let h = datetime()
                      , b = h.second() / 60 * 360
                      , w = h.minute() / 60 * 360
                      , Q = h.hour12() / 12 * 360
                      , C = h.format("DD", this.locale)
                      , B = h.format("MMM", this.locale)
                      , x = h.moon();
                    a[0].style.transform = `rotate(${b}deg)`,
                    i[0].style.transform = `rotate(${w}deg)`,
                    s[0].style.transform = `rotate(${Q}deg)`,
                    m.html(C),
                    g.html(B),
                    f.removeClass("").addClass(`${x.name}`),
                    p[0].innerHTML = h.format(o.timeFormat === 24 ? "HH" : "hh", this.locale),
                    d[0].innerHTML = h.format("mm", this.locale),
                    c[0].innerHTML = h.format("ss", this.locale)
                }
                ;
                u(),
                setInterval(u, 1e3)
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            appbarDeferred: 0,
            expand: !1,
            expandPoint: null,
            duration: 100,
            checkHamburgerColor: !1,
            onMenuOpen: t.noop,
            onMenuClose: t.noop,
            onBeforeMenuOpen: t.noop,
            onBeforeMenuClose: t.noop,
            onMenuCollapse: t.noop,
            onMenuExpand: t.noop,
            onAppBarCreate: t.noop
        };
        t.appBarSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroAppBarSetup != "undefined" && t.appBarSetup(globalThis.metroAppBarSetup),
        t.Component("app-bar", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    id: null
                }),
                this
            },
            _create: function() {
                let e = this.element;
                this.id = e.attr("id") || Hooks.useId(this.elem),
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("app-bar-create", {
                    element: e
                })
            },
            _createStructure: function() {
                let e = this.element, o = this.options, a, i, s = t.utils.getStyleOne(e, "background-color");
                if (e.addClass("app-bar").attr("role", "navigation"),
                a = e.find(".hamburger"),
                a.length === 0) {
                    a = r("<button>").attr("type", "button").addClass("hamburger menu-down").attr("aria-label", "Toggle menu").attr("aria-expanded", "false").attr("aria-controls", `app-bar-menu-${this.id}`);
                    for (let c = 0; c < 3; c++)
                        r("<span>").addClass("line").appendTo(a)
                }
                e.prepend(a),
                i = e.find(".app-bar-menu"),
                i.length > 0 && (i.attr("id", `app-bar-menu-${this.id}`),
                i.attr("role", "menubar")),
                i.length === 0 ? a.css("display", "none") : (i.find("li").attr("role", "menuitem"),
                i.find("li a").attr("tabindex", "0"),
                i.find("li:has(ul)").attr("aria-haspopup", "true"),
                i.find("li ul").attr("role", "menu").attr("aria-hidden", "true")),
                a.css("display") === "block" ? (i.hide().addClass("collapsed"),
                a.removeClass("hidden")) : a.addClass("hidden"),
                (o.expand === !0 || t.utils.isValue(o.expandPoint) && t.utils.mediaExist(o.expandPoint)) && (e.addClass("app-bar-expand"),
                a.addClass("hidden")),
                o.checkHamburgerColor
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options
                  , i = o.find(".app-bar-menu")
                  , s = o.find(".hamburger");
                o.on(t.events.click, ".hamburger", () => {
                    if (i.length === 0)
                        return;
                    i.hasClass("collapsed") ? e.open() : e.close()
                }
                ),
                s.on("keydown", c => {
                    (c.keyCode === 13 || c.keyCode === 32) && (c.preventDefault(),
                    s.trigger("click"))
                }
                ),
                i.find("li a").on("keydown", function(c) {
                    (c.keyCode === 13 || c.keyCode === 32) && (c.preventDefault(),
                    r(this).trigger("click")),
                    c.keyCode === 27 && (c.preventDefault(),
                    e.close(),
                    s.focus())
                }),
                r(globalThis).on(t.events.resize, () => {
                    if (a.expand !== !0 && (t.utils.isValue(a.expandPoint) && t.utils.mediaExist(a.expandPoint) ? (o.addClass("app-bar-expand"),
                    e._fireEvent("menu-expand")) : (o.removeClass("app-bar-expand"),
                    e._fireEvent("menu-collapse"))),
                    i.length === 0) {
                        s.addClass("hidden");
                        return
                    }
                    i.removeClass("opened").removeClass("collapsed"),
                    s.css("display") !== "block" ? (s.addClass("hidden"),
                    i.show()) : (s.removeClass("hidden"),
                    s.hasClass("active") ? i.removeClass("collapsed").addClass("opened") : i.addClass("collapsed").removeClass("opened"))
                }
                , {
                    ns: this.id
                })
            },
            close: function() {
                let e = this.element
                  , o = this.options
                  , a = e.find(".app-bar-menu")
                  , i = e.find(".hamburger");
                this._fireEvent("before-menu-close", {
                    menu: a[0]
                }),
                i.attr("aria-expanded", "false"),
                a.find("ul").attr("aria-hidden", "true"),
                a.slideUp(o.duration, () => {
                    a.addClass("collapsed").removeClass("opened"),
                    i.removeClass("active"),
                    this._fireEvent("menu-close", {
                        menu: a[0]
                    })
                }
                )
            },
            open: function() {
                let e = this.element
                  , o = this.options
                  , a = e.find(".app-bar-menu")
                  , i = e.find(".hamburger");
                this._fireEvent("before-menu-open", {
                    menu: a[0]
                }),
                i.attr("aria-expanded", "true"),
                a.find("ul").attr("aria-hidden", "false"),
                a.slideDown(o.duration, () => {
                    a.removeClass("collapsed").addClass("opened"),
                    i.addClass("active"),
                    this._fireEvent("menu-open", {
                        menu: a[0]
                    })
                }
                )
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                let e = this.element;
                e.off(t.events.click, ".hamburger"),
                r(globalThis).off(t.events.resize, {
                    ns: this.id
                }),
                e.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            audioVolume: .5,
            audioSrc: "",
            onStart: t.noop,
            onEnd: t.noop,
            onProgress: t.noop,
            onAudioButtonCreate: t.noop
        };
        t.audioButtonSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroAudioButtonSetup != "undefined" && t.audioButtonSetup(globalThis.metroAudioButtonSetup),
        t.Component("audio-button", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    audio: null,
                    canPlay: null,
                    id: null,
                    playing: !1,
                    duration: 0
                }),
                this
            },
            _create: function() {
                let e = this.element;
                this.id = Hooks.useId(this.elem),
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("audioButtonCreate", {
                    element: e
                })
            },
            _createStructure: function() {
                let e = this.options;
                this.audio = new Audio(e.audioSrc),
                this.audio.volume = e.audioVolume
            },
            _createEvents: function() {
                let e = this.element
                  , o = this.options
                  , a = this.audio;
                a.addEventListener("loadedmetadata", () => {
                    this.duration = a.duration.toFixed(0)
                }
                ),
                a.addEventListener("loadeddata", () => {
                    this.canPlay = !0
                }
                ),
                a.addEventListener("ended", () => {
                    this.playing = !1,
                    this._fireEvent("end", {
                        src: o.audioSrc,
                        audio: a
                    })
                }
                ),
                a.addEventListener("timeupdate", () => {
                    let i = a.currentTime
                      , s = Math.round(a.currentTime * 100 / this.duration);
                    this._fireEvent("progress", {
                        duration: this.duration,
                        position: i,
                        percent: s
                    })
                }
                ),
                e.on(t.events.click, () => {
                    this.play()
                }
                , {
                    ns: this.id
                })
            },
            play: function(e) {
                let o = this.element
                  , a = this.options
                  , i = this.audio;
                if (this.playing) {
                    this.stop();
                    return
                }
                o.addClass("playing"),
                a.audioSrc !== "" && this.audio.duration && this.canPlay && (this.playing = !0,
                this._fireEvent("start", {
                    src: a.audioSrc,
                    audio: i
                }),
                i.pause(),
                i.currentTime = 0,
                i.play(),
                t.utils.exec(e, [i], o[0]))
            },
            stop: function(e) {
                let o = this.element
                  , a = this.options
                  , i = this.audio;
                this.playing = !1,
                o.removeClass("playing"),
                i.pause(),
                i.currentTime = 0,
                this._fireEvent("end", {
                    src: a.audioSrc,
                    audio: i
                }),
                t.utils.exec(e, [i], o[0])
            },
            changeAttribute: function(e) {
                let o = this.element
                  , a = this.options
                  , i = this.audio
                  , s = () => {
                    let d = o.attr("data-audio-src");
                    d && d.trim() !== "" && (a.audioSrc = d,
                    i.src = d)
                }
                  , c = () => {
                    let d = Number.parseFloat(o.attr("data-audio-volume"));
                    Number.isNaN(d) || (a.audioVolume = d,
                    i.volume = d)
                }
                ;
                e === "data-audio-src" && s(),
                e === "data-audio-volume" && c()
            },
            destroy: function() {
                let e = this.element;
                e.off(t.events.click, {
                    ns: this.id
                }),
                e.remove()
            }
        }),
        t.playSound = e => {
            let o = typeof e == "string" ? e : e.audioSrc
              , a = e != null && e.audioVolume ? e.audioVolume : .5;
            if (!o)
                return;
            let i = new Audio(o);
            i.volume = Number.parseFloat(a),
            i.addEventListener("loadeddata", function() {
                e != null && e.onAudioStart && t.utils.exec(e.onAudioStart, [o], this),
                this.play()
            }),
            i.addEventListener("ended", function() {
                e != null && e.onAudioEnd && t.utils.exec(e.onAudioEnd, [null], this)
            })
        }
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            sliderDeferred: 0,
            roundValue: !0,
            min: 0,
            max: 100,
            accuracy: 0,
            showMinMax: !1,
            minMaxPosition: t.position.TOP,
            value: 0,
            buffer: 0,
            hint: !1,
            hintAlways: !1,
            hintPosition: t.position.TOP,
            hintMask: "$1",
            vertical: !1,
            target: null,
            returnType: "value",
            size: 0,
            label: null,
            hideButton: !1,
            clsSlider: "",
            clsBackside: "",
            clsComplete: "",
            clsBuffer: "",
            clsMarker: "",
            clsHint: "",
            clsMinMax: "",
            clsMin: "",
            clsMax: "",
            onStart: t.noop,
            onStop: t.noop,
            onMove: t.noop,
            onSliderClick: t.noop,
            onChange: t.noop,
            onChangeValue: t.noop,
            onChangeBuffer: t.noop,
            onFocus: t.noop,
            onBlur: t.noop,
            onSliderCreate: t.noop
        };
        t.sliderSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroSliderSetup != "undefined" && t.sliderSetup(globalThis.metroSliderSetup),
        t.Component("slider", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    slider: null,
                    value: 0,
                    percent: 0,
                    pixel: 0,
                    buffer: 0,
                    keyInterval: !1,
                    id: null
                }),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options;
                this.id = e.attr("id") || Hooks.useId(this.elem),
                this._createSlider(),
                this._createEvents(),
                this.buff(o.buffer),
                this.val(o.value),
                this._fireEvent("slider-create", {
                    element: e
                })
            },
            _createSlider: function() {
                let e = this.element, o = this.options, a = r("<div>").addClass("backside").addClass(o.clsBackside), i = r("<div>").addClass("complete").addClass(o.clsComplete), s = r("<div>").addClass("buffer").addClass(o.clsBuffer), c = r("<button>").attr("type", "button").addClass("marker").addClass(o.clsMarker), d = r("<div>").addClass("hint").addClass(`${o.hintPosition}-side`).addClass(o.clsHint), p, m = e.wrap("<div>").addClass("slider").addClass(e[0].className).addClass(o.clsSlider);
                if (o.size > 0 && (o.vertical === !0 ? m.outerHeight(o.size) : m.outerWidth(o.size)),
                o.vertical === !0 && m.addClass("vertical-slider"),
                o.hintAlways === !0 && d.css({
                    display: "block"
                }).addClass("permanent-hint"),
                o.label) {
                    let g = r("<label>").addClass("label-for-input").addClass(o.clsLabel).html(o.label).insertBefore(m);
                    if (e.id())
                        g.attr("for", e.id());
                    else {
                        let f = Hooks.useId(e[0]);
                        g.attr("for", f),
                        e.attr("id", f)
                    }
                }
                if (a.appendTo(m),
                i.appendTo(m),
                s.appendTo(m),
                c.appendTo(m),
                d.appendTo(c),
                o.hideButton === !0 && m.addClass("hidden-button"),
                o.showMinMax === !0) {
                    let g = r("<div>").addClass("slider-min-max").addClass(o.clsMinMax);
                    r("<span>").addClass("slider-text-min").addClass(o.clsMin).html(o.min).appendTo(g),
                    r("<span>").addClass("slider-text-max").addClass(o.clsMax).html(o.max).appendTo(g),
                    o.minMaxPosition === t.position.TOP ? g.insertBefore(m) : g.insertAfter(m)
                }
                e[0].className = "",
                e.is(":disabled") ? this.disable() : this.enable(),
                this.slider = m
            },
            _createEvents: function() {
                let e = this.slider
                  , o = this.options
                  , a = e.find(".marker")
                  , i = e.find(".hint");
                a.on(t.events.startAll, () => {
                    o.hint === !0 && o.hintAlways !== !0 && i.fadeIn(300),
                    r(document).on(t.events.moveAll, s => {
                        s.cancelable && s.preventDefault(),
                        this._move(s),
                        this._fireEvent("move", {
                            val: this.value,
                            percent: this.percent
                        })
                    }
                    , {
                        ns: this.id,
                        passive: !1
                    }),
                    r(document).on(t.events.stopAll, () => {
                        r(document).off(t.events.moveAll, {
                            ns: this.id
                        }),
                        r(document).off(t.events.stopAll, {
                            ns: this.id
                        }),
                        o.hintAlways !== !0 && i.fadeOut(300),
                        this._fireEvent("stop", {
                            val: this.value,
                            percent: this.percent
                        })
                    }
                    , {
                        ns: this.id
                    }),
                    this._fireEvent("start", {
                        val: this.value,
                        percent: this.percent
                    })
                }
                ),
                a.on(t.events.focus, () => {
                    this._fireEvent("focus", {
                        val: this.value,
                        percent: this.percent
                    })
                }
                ),
                a.on(t.events.blur, () => {
                    this._fireEvent("blur", {
                        val: this.value,
                        percent: this.percent
                    })
                }
                ),
                a.on(t.events.keydown, s => {
                    let c = s.keyCode ? s.keyCode : s.which;
                    if ([37, 38, 39, 40].indexOf(c) === -1)
                        return;
                    let d = o.accuracy === 0 ? 1 : o.accuracy;
                    this.keyInterval || (this.keyInterval = setInterval( () => {
                        let p = this.value;
                        (s.keyCode === 37 || s.keyCode === 40) && (p - d < o.min ? p = o.min : p -= d),
                        (s.keyCode === 38 || s.keyCode === 39) && (p + d > o.max ? p = o.max : p += d),
                        this.value = this._correct(p),
                        this.percent = this._convert(this.value, "val2prc"),
                        this.pixel = this._convert(this.percent, "prc2pix"),
                        this._redraw()
                    }
                    , 100),
                    s.preventDefault())
                }
                ),
                a.on(t.events.keyup, () => {
                    clearInterval(this.keyInterval),
                    this.keyInterval = !1
                }
                ),
                e.on(t.events.click, s => {
                    this._move(s),
                    this._fireEvent("slider-click", {
                        val: this.value,
                        percent: this.percent
                    }),
                    this._fireEvent("stop", {
                        val: this.value,
                        percent: this.percent
                    })
                }
                ),
                r(globalThis).on(t.events.resize, () => {
                    this.val(this.value),
                    this.buff(this.buffer)
                }
                , {
                    ns: this.id
                })
            },
            _convert: function(e, o) {
                let a = this.slider
                  , i = this.options
                  , s = (i.vertical === !0 ? a.outerHeight() : a.outerWidth()) - a.find(".marker").outerWidth();
                switch (o) {
                case "pix2prc":
                    return e * 100 / s;
                case "pix2val":
                    return this._convert(e, "pix2prc") * ((i.max - i.min) / 100) + i.min;
                case "val2prc":
                    return (e - i.min) / ((i.max - i.min) / 100);
                case "prc2pix":
                    return e / (100 / s);
                case "val2pix":
                    return this._convert(this._convert(e, "val2prc"), "prc2pix")
                }
                return 0
            },
            _correct: function(e) {
                let o = e
                  , a = this.options.accuracy
                  , i = this.options.min
                  , s = this.options.max;
                return a === 0 || Number.isNaN(a) ? o : (o = Math.round(e / a) * a,
                o < i && (o = i),
                o > s && (o = s),
                o.toFixed(t.utils.decCount(a)))
            },
            _move: function(e) {
                let o = this.slider
                  , a = this.options
                  , i = o.offset()
                  , s = o.find(".marker").outerWidth()
                  , c = a.vertical === !0 ? o.outerHeight() : o.outerWidth()
                  , d = 0
                  , p = c - s
                  , m = a.vertical === !0 ? t.utils.pageXY(e).y - i.top : t.utils.pageXY(e).x - i.left
                  , g = a.vertical === !0 ? c - m - s / 2 : m - s / 2;
                g < d || g > p || (this.value = this._correct(this._convert(g, "pix2val")),
                this.percent = this._convert(this.value, "val2prc"),
                this.pixel = this._convert(this.percent, "prc2pix"),
                this._redraw())
            },
            _hint: function() {
                let e = this.options
                  , a = this.slider.find(".hint")
                  , i = +this.value || 0
                  , s = +this.percent || 0;
                e.roundValue && (i = (t.utils.isValue(i) ? +i : 0).toFixed(t.utils.decCount(e.accuracy)),
                s = (t.utils.isValue(s) ? +s : 0).toFixed(t.utils.decCount(e.accuracy))),
                a.text(e.hintMask.replace("$1", i).replace("$2", s))
            },
            _value: function() {
                let e = this.element
                  , o = this.options
                  , a = o.returnType === "value" ? this.value : this.percent
                  , i = this.percent
                  , s = this.buffer;
                if (o.roundValue && (a = (t.utils.isValue(a) ? +a : 0).toFixed(t.utils.decCount(o.accuracy)),
                i = (t.utils.isValue(i) ? +i : 0).toFixed(t.utils.decCount(o.accuracy)),
                s = (t.utils.isValue(s) ? +s : 0).toFixed(t.utils.decCount(o.accuracy))),
                e[0].tagName === "INPUT" && e.val(a),
                o.target !== null) {
                    let c = r(o.target);
                    c.length !== 0 && r.each(c, function() {
                        let d = r(this);
                        this.tagName === "INPUT" ? d.val(a) : d.text(a),
                        d.trigger("change")
                    })
                }
                this._fireEvent("change-value", {
                    val: a
                }),
                this._fireEvent("change", {
                    val: a,
                    percent: i,
                    buffer: s
                })
            },
            _marker: function() {
                let e = this.slider
                  , o = this.options
                  , a = e.find(".marker")
                  , i = e.find(".complete")
                  , s = o.vertical === !0 ? e.outerHeight() : e.outerWidth()
                  , c = Number.parseInt(t.utils.getStyleOne(a, "width"))
                  , d = t.utils.isVisible(e);
                d && a.css({
                    "margin-top": 0,
                    "margin-left": 0
                }),
                o.vertical === !0 ? (d ? a.css("top", s - this.pixel) : (a.css("top", `${100 - this.percent}%`),
                a.css("margin-top", c / 2)),
                i.css("height", `${this.percent}%`)) : (d ? a.css("left", this.pixel) : (a.css("left", `${this.percent}%`),
                a.css("margin-left", this.percent === 0 ? 0 : -1 * c / 2)),
                i.css("width", `${this.percent}%`))
            },
            _redraw: function() {
                this._marker(),
                this._value(),
                this._hint()
            },
            _buffer: function() {
                let e = this.element
                  , o = this.options
                  , a = this.slider.find(".buffer");
                o.vertical === !0 ? a.css("height", `${this.buffer}%`) : a.css("width", `${this.buffer}%`),
                this._fireEvent("change-buffer", {
                    val: this.buffer
                }),
                this._fireEvent("change", {
                    val: e.val(),
                    percent: this.percent,
                    buffer: this.buffer
                })
            },
            val: function(e) {
                let o = this.options;
                if (e === void 0 || Number.isNaN(e))
                    return this.value;
                let a = Number.parseFloat(e);
                a < o.min && (a = o.min),
                a > o.max && (a = o.max),
                this.value = this._correct(a),
                this.percent = this._convert(this.value, "val2prc"),
                this.pixel = this._convert(this.percent, "prc2pix"),
                this._redraw()
            },
            buff: function(e) {
                let a = this.slider.find(".buffer");
                if (e === void 0 || Number.isNaN(e))
                    return this.buffer;
                if (a.length === 0)
                    return !1;
                let i = Number.parseFloat(e);
                i > 100 && (i = 100),
                i < 0 && (i = 0),
                this.buffer = i,
                this._buffer()
            },
            changeValue: function() {
                let e = this.element
                  , o = this.options
                  , a = e.attr("data-value");
                a < o.min && (a = o.min),
                a > o.max && (a = o.max),
                this.val(a)
            },
            changeBuffer: function() {
                let e = this.element
                  , o = Number.parseInt(e.attr("data-buffer"));
                o < 0 && (o = 0),
                o > 100 && (o = 100),
                this.buff(o)
            },
            disable: function() {
                this.element.data("disabled", !0),
                this.element.parent().addClass("disabled")
            },
            enable: function() {
                this.element.data("disabled", !1),
                this.element.parent().removeClass("disabled")
            },
            toggleState: function() {
                this.elem.disabled ? this.disable() : this.enable()
            },
            changeAttribute: function(e) {
                switch (e) {
                case "data-value":
                    this.changeValue();
                    break;
                case "data-buffer":
                    this.changeBuffer();
                    break;
                case "disabled":
                    this.toggleState();
                    break
                }
            },
            destroy: function() {
                let e = this.options
                  , o = this.slider
                  , a = o.find(".marker");
                a.off(t.events.startAll),
                a.off(t.events.focus),
                a.off(t.events.blur),
                a.off(t.events.keydown),
                a.off(t.events.keyup),
                o.off(t.events.click),
                r(globalThis).off(t.events.resize, {
                    ns: this.id
                }),
                e.label && o.prev("label").remove(),
                o.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            audioDeferred: 0,
            playlist: null,
            src: null,
            volume: .5,
            loop: !1,
            autoplay: !1,
            showLoop: !0,
            showPlay: !0,
            showStop: !0,
            showMute: !0,
            showFull: !0,
            showStream: !0,
            showVolume: !0,
            showInfo: !0,
            showPlaylist: !0,
            showNext: !0,
            showPrev: !0,
            showFirst: !0,
            showLast: !0,
            showForward: !0,
            showBackward: !0,
            showShuffle: !0,
            showRandom: !0,
            loopIcon: "\u2B94",
            stopIcon: "\u23F9",
            playIcon: "\u25B6",
            pauseIcon: "\u23F8",
            muteIcon: "\u{1F507}",
            volumeLowIcon: "\u{1F508}",
            volumeMediumIcon: "\u{1F509}",
            volumeHighIcon: "\u{1F50A}",
            playlistIcon: "\u{1F4C3}",
            nextIcon: "\u2192",
            prevIcon: "\u2190",
            firstIcon: "\u21E4",
            lastIcon: "\u21E5",
            forwardIcon: "\u21C9",
            backwardIcon: "\u21C7",
            shuffleIcon: "\u{1F500}",
            randomIcon: "\u{1F3B2}",
            onPlay: t.noop,
            onPause: t.noop,
            onStop: t.noop,
            onEnd: t.noop,
            onMetadata: t.noop,
            onTime: t.noop,
            onAudioPlayerCreate: t.noop
        };
        t.audioPlayerSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroAudioPlayerSetup != "undefined" && t.audioPlayerSetup(globalThis.metroAudioPlayerSetup),
        t.Component("audio-player", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    player: null,
                    audio: o,
                    stream: null,
                    volume: null,
                    volumeBackup: 0,
                    muted: !1
                }),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options;
                this._createPlayer(),
                this._createEvents(),
                o.autoplay === !0 && this.play(),
                this._fireEvent("audio-player-create", {
                    element: e,
                    player: this.player
                })
            },
            _createPlayer: function() {
                let e = this.element
                  , o = this.options
                  , a = this.audio
                  , i = e.wrap("<div>").addClass(`media-player audio-player ${e[0].className}`);
                r.each(["muted", "autoplay", "controls", "height", "width", "loop", "poster", "preload"], function() {
                    e.removeAttr(this)
                }),
                e.attr("preload", "auto"),
                a.volume = o.volume,
                o.src !== null && this._setSource(o.src),
                e[0].className = "",
                this.player = i,
                this._createControls()
            },
            _setSource: function(e) {
                let o = this.element;
                o.find("source").remove(),
                o.removeAttr("src"),
                Array.isArray(e) ? r.each(e, function() {
                    this.src !== void 0 && r("<source>").attr("src", this.src).attr("type", this.type !== void 0 ? this.type : "").appendTo(o)
                }) : o.attr("src", e)
            },
            _createControls: function() {
                let e = this.element
                  , o = this.options
                  , a = this.elem
                  , i = r("<div>").addClass("controls").addClass(o.clsControls).insertAfter(e)
                  , s = r("<div>").addClass("stream").appendTo(i)
                  , c = r("<input>").addClass("stream-slider ultra-thin cycle-marker").appendTo(s)
                  , d = r("<div>").addClass("volume").appendTo(i)
                  , p = r("<input>").addClass("volume-slider ultra-thin cycle-marker").appendTo(d)
                  , m = r("<div>").addClass("info-box").appendTo(i);
                o.showInfo !== !0 && m.hide(),
                t.makePlugin(c, "slider", {
                    clsMarker: "bg-dark-cyan",
                    clsHint: "bg-cyan fg-white",
                    clsComplete: "bg-cyan",
                    hint: !0,
                    hideButton: !0,
                    onStart: () => {
                        a.paused || a.pause()
                    }
                    ,
                    onStop: f => {
                        a.seekable.length > 0 && (a.currentTime = (this.duration * f / 100).toFixed(0)),
                        a.paused && a.currentTime > 0 && a.play()
                    }
                }),
                this.stream = c,
                o.showStream !== !0 && s.hide(),
                t.makePlugin(p, "slider", {
                    clsMarker: "bg-dark-red",
                    clsHint: "bg-cyan fg-white",
                    clsComplete: "bg-red",
                    hint: !0,
                    hideButton: !0,
                    value: o.volume * 100,
                    onChangeValue: f => {
                        a.volume = f / 100
                    }
                }),
                this.volume = p,
                o.showVolume !== !0 && d.hide();
                let g;
                o.showLoop === !0 && (g = r("<button>").attr("type", "button").addClass("medium cycle loop").html(o.loopIcon).appendTo(i),
                g.addClass("active"),
                e.attr("loop", "loop")),
                o.showPlay === !0 && r("<button>").attr("type", "button").addClass("medium cycle play").html(o.playIcon).appendTo(i),
                o.showStop === !0 && r("<button>").attr("type", "button").addClass("medium cycle stop").html(o.stopIcon).appendTo(i),
                o.showMute === !0 && r("<button>").attr("type", "button").addClass("medium cycle mute").html(o.muteIcon).appendTo(i),
                this._setVolume(),
                o.muted && (this.volumeBackup = a.volume,
                t.getPlugin(this.volume, "slider").val(0),
                a.volume = 0),
                m.html("00:00 / 00:00")
            },
            _createEvents: function() {
                let e = this.element
                  , o = this.options
                  , a = this.elem
                  , i = this.player;
                e.on("loadstart", () => {}
                ),
                e.on("loadedmetadata", () => {
                    this.duration = a.duration.toFixed(0),
                    this._setInfo(0, this.duration),
                    t.utils.exec(o.onMetadata, [a, i], e[0])
                }
                ),
                e.on("canplay", () => {
                    this._setBuffer()
                }
                ),
                e.on("progress", () => {
                    this._setBuffer()
                }
                ),
                e.on("timeupdate", () => {
                    let s = Math.round(a.currentTime * 100 / this.duration);
                    this._setInfo(a.currentTime, this.duration),
                    t.getPlugin(this.stream, "slider").val(s),
                    t.utils.exec(o.onTime, [a.currentTime, this.duration, a, i], e[0])
                }
                ),
                e.on("waiting", () => {}
                ),
                e.on("loadeddata", () => {}
                ),
                e.on("play", () => {
                    i.find(".play").html(o.pauseIcon),
                    t.utils.exec(o.onPlay, [a, i], e[0])
                }
                ),
                e.on("pause", () => {
                    i.find(".play").html(o.playIcon),
                    t.utils.exec(o.onPause, [a, i], e[0])
                }
                ),
                e.on("stop", () => {
                    t.getPlugin(this.stream, "slider").val(0),
                    t.utils.exec(o.onStop, [a, i], e[0])
                }
                ),
                e.on("ended", () => {
                    t.getPlugin(this.stream, "slider").val(0),
                    t.utils.exec(o.onEnd, [a, i], e[0])
                }
                ),
                e.on("volumechange", () => {
                    this._setVolume()
                }
                ),
                i.on(t.events.click, ".play", () => {
                    a.paused ? this.play() : this.pause()
                }
                ),
                i.on(t.events.click, ".stop", () => {
                    this.stop()
                }
                ),
                i.on(t.events.click, ".mute", () => {
                    this._toggleMute()
                }
                ),
                i.on(t.events.click, ".loop", () => {
                    this._toggleLoop()
                }
                )
            },
            _toggleLoop: function() {
                let e = this.player.find(".loop");
                e.length !== 0 && (e.toggleClass("active"),
                e.hasClass("active") ? this.element.attr("loop", "loop") : this.element.removeAttr("loop"))
            },
            _toggleMute: function() {
                this.muted = !this.muted,
                this.muted === !1 ? this.audio.volume = this.volumeBackup : (this.volumeBackup = this.audio.volume,
                this.audio.volume = 0),
                t.getPlugin(this.volume, "slider").val(this.muted === !1 ? this.volumeBackup * 100 : 0)
            },
            _setInfo: function(e, o) {
                this.player.find(".info-box").html(`${t.utils.secondsToFormattedString(Math.round(e))} / ${t.utils.secondsToFormattedString(Math.round(o))}`)
            },
            _setBuffer: function() {
                let e = this.audio.buffered.length ? Math.round(Math.floor(this.audio.buffered.end(0)) / Math.floor(this.audio.duration) * 100) : 0;
                t.getPlugin(this.stream, "slider").buff(e)
            },
            _setVolume: function() {
                let e = this.audio
                  , o = this.player
                  , a = this.options
                  , i = o.find(".mute")
                  , s = e.volume * 100;
                s > 1 && s < 30 ? i.html(a.volumeLowIcon) : s >= 30 && s < 60 ? i.html(a.volumeMediumIcon) : s >= 60 && s <= 100 ? i.html(a.volumeHighIcon) : i.html(a.muteIcon)
            },
            play: function(e) {
                e !== void 0 && this._setSource(e),
                !(this.element.attr("src") === void 0 && this.element.find("source").length === 0) && this.audio.play()
            },
            pause: function() {
                this.audio.pause()
            },
            resume: function() {
                this.audio.paused && this.play()
            },
            stop: function() {
                this.audio.pause(),
                this.audio.currentTime = 0,
                t.getPlugin(this.stream, "slider").val(0)
            },
            setVolume: function(e) {
                if (e === void 0)
                    return this.audio.volume;
                let o = e > 1 ? e / 100 : e;
                this.audio.volume = e,
                t.getPlugin(this.volume, "slider").val(o * 100)
            },
            loop: function() {
                this._toggleLoop()
            },
            mute: function() {
                this._toggleMute()
            },
            changeSource: function() {
                let e = JSON.parse(this.element.attr("data-src"));
                this.play(e)
            },
            changeVolume: function() {
                let e = this.element.attr("data-volume");
                this.setVolume(e)
            },
            changeAttribute: function(e) {
                switch (e) {
                case "data-src":
                    this.changeSource();
                    break;
                case "data-volume":
                    this.changeVolume();
                    break
                }
            },
            destroy: function() {
                let e = this.element
                  , o = this.player;
                e.off("all"),
                o.off("all"),
                t.getPlugin(this.stream, "slider").destroy(),
                t.getPlugin(this.volume, "slider").destroy(),
                e.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        let l = {
            height: 200,
            barColor: "#22ec1a",
            valueColor: "#191919",
            total: 100,
            value: 60,
            valueSuffix: "",
            animationDuration: 300,
            onBar3dCreate: t.noop
        };
        t.bar3dSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof window.metroBar3dSetup != "undefined" && t.bar3dSetup(window.metroBar3dSetup),
        t.Component("bar3d", {
            init: function(e, o) {
                return this._super(o, e, l, {}),
                this
            },
            _create: function() {
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("component-create")
            },
            _drawBar: function() {
                let e = this.element
                  , o = this.options
                  , a = o.value + o.valueSuffix
                  , i = 100 - Math.round(100 * o.value / o.total);
                e.find(".growing-bar").attr("data-value", a).css({
                    transform: `translateY(${i}%)`,
                    backgroundColor: o.barColor
                }),
                e.attr("title", a)
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options;
                e.addClass("bar3d"),
                e.html(`
                <div class="side left-side">
                    <div class="growing-bar" data-value="0" style="transition-duration: ${o.animationDuration}"></div>
                </div>
                <div class="side right-side">
                    <div class="growing-bar" data-value="0" style="transition-duration: ${o.animationDuration}"></div>
                </div>
                <div class="side top-side"></div>
                <div class="side bottom-side"></div>
            `),
                o.animationDuration > 0 ? setTimeout( () => {
                    this._drawBar()
                }
                , 100) : this._drawBar()
            },
            _createEvents: function() {
                let e = this.element
                  , o = this.options
            },
            changeAttribute: function(e, o) {
                switch (e) {
                case "data-value":
                    {
                        console.log("Set value"),
                        this.options.value = o,
                        this._drawBar();
                        break
                    }
                }
            },
            destroy: function() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            type: "success",
            size: 16,
            onBullCreate: t.noop,
            onBullChange: t.noop
        };
        t.bullSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroBullSetup != "undefined" && t.bullSetup(globalThis.metroBullSetup),
        t.Component("bull", {
            init: function(e, o) {
                return this._super(o, e, l, {}),
                this
            },
            _create: function() {
                this._createStructure(),
                this._fireEvent("bull-create")
            },
            _createStructure: function() {
                let e = this.element, o = this.options, a;
                switch (o.type.toLowerCase()) {
                case "default":
                    a = `<svg width="${o.size}" height="${o.size}" aria-label="completed successfully" viewBox="0 0 16 16" role="img" xmlns="http://www.w3.org/2000/svg"><path fill="#57ab5a" d="M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16Zm3.78-9.72a.751.751 0 0 0-.018-1.042.751.751 0 0 0-1.042-.018L6.75 9.19 5.28 7.72a.751.751 0 0 0-1.042.018.751.751 0 0 0-.018 1.042l2 2a.75.75 0 0 0 1.06 0Z"></path></svg>`;
                    break;
                case "success":
                    a = `<svg width="${o.size}" height="${o.size}" aria-label="completed successfully" viewBox="0 0 16 16" role="img" xmlns="http://www.w3.org/2000/svg"><path fill="#57ab5a" d="M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16Zm3.78-9.72a.751.751 0 0 0-.018-1.042.751.751 0 0 0-1.042-.018L6.75 9.19 5.28 7.72a.751.751 0 0 0-1.042.018.751.751 0 0 0-.018 1.042l2 2a.75.75 0 0 0 1.06 0Z"></path></svg>`;
                    break;
                case "pending":
                    a = `<svg width="${o.size}" height="${o.size}" aria-label="currently running" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" class="ani-spin"><path fill="none" stroke="#DBAB0A" stroke-width="2" d="M3.05 3.05a7 7 0 1 1 9.9 9.9 7 7 0 0 1-9.9-9.9Z" opacity=".5"></path><path fill="#DBAB0A" fill-rule="evenodd" d="M8 4a4 4 0 1 0 0 8 4 4 0 0 0 0-8Z" clip-rule="evenodd"></path><path fill="#DBAB0A" d="M14 8a6 6 0 0 0-6-6V0a8 8 0 0 1 8 8h-2Z"></path></svg>`;
                    break;
                case "fail":
                    a = `<svg width="${o.size}" height="${o.size}" aria-label="failed" viewBox="0 0 16 16" role="img" xmlns="http://www.w3.org/2000/svg"><path fill="#e5534b" d="M2.343 13.657A8 8 0 1 1 13.658 2.343 8 8 0 0 1 2.343 13.657ZM6.03 4.97a.751.751 0 0 0-1.042.018.751.751 0 0 0-.018 1.042L6.94 8 4.97 9.97a.749.749 0 0 0 .326 1.275.749.749 0 0 0 .734-.215L8 9.06l1.97 1.97a.749.749 0 0 0 1.275-.326.749.749 0 0 0-.215-.734L9.06 8l1.97-1.97a.749.749 0 0 0-.326-1.275.749.749 0 0 0-.734.215L8 6.94Z"></path></svg>`;
                    break;
                case "warning":
                    a = `<svg width="${o.size}" height="${o.size}" aria-label="warning" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path fill="#ff4d00" d="M246.312928,5.62892705 C252.927596,9.40873724 258.409564,14.8907053 262.189374,21.5053731 L444.667042,340.84129 C456.358134,361.300701 449.250007,387.363834 428.790595,399.054926 C422.34376,402.738832 415.04715,404.676552 407.622001,404.676552 L42.6666667,404.676552 C19.1025173,404.676552 7.10542736e-15,385.574034 7.10542736e-15,362.009885 C7.10542736e-15,354.584736 1.93772021,347.288125 5.62162594,340.84129 L188.099293,21.5053731 C199.790385,1.04596203 225.853517,-6.06216498 246.312928,5.62892705 Z M224,272 C208.761905,272 197.333333,283.264 197.333333,298.282667 C197.333333,313.984 208.415584,325.248 224,325.248 C239.238095,325.248 250.666667,313.984 250.666667,298.624 C250.666667,283.264 239.238095,272 224,272 Z M245.333333,106.666667 L202.666667,106.666667 L202.666667,234.666667 L245.333333,234.666667 L245.333333,106.666667 Z" id="Combined-Shape"></path></svg>`;
                    break;
                case "bulb":
                    a = `<svg width="${o.size}" height="${o.size}" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path fill="#ffde21" d="M213.333333,85.3333333 C284.025781,85.3333333 341.333333,142.640885 341.333333,213.333333 C341.333333,260.711239 315.5928,302.077122 277.333732,324.208982 L277.333333,405.333333 L256,426.666667 L234.666667,426.666667 C234.666667,438.448741 225.115408,448 213.333333,448 C201.551259,448 192,438.448741 192,426.666667 L192,426.666667 L170.666667,426.666667 L149.333333,405.333333 L149.332954,324.208993 C111.073876,302.077136 85.3333333,260.711248 85.3333333,213.333333 C85.3333333,142.640885 142.640885,85.3333333 213.333333,85.3333333 Z M234.667665,339.563386 C227.72957,340.727434 220.602209,341.333333 213.333333,341.333333 C206.064458,341.333333 198.937097,340.727434 191.999002,339.563386 L192,384 L234.666667,384 L234.667665,339.563386 Z M96.4250122,307.614237 L119.052429,330.241654 L73.7975952,375.496488 L51.1701782,352.869071 L96.4250122,307.614237 Z M330.241654,307.614237 L375.496488,352.869071 L352.869071,375.496488 L307.614237,330.241654 L330.241654,307.614237 Z M426.666667,197.333333 L426.666667,229.333333 L362.666667,229.333333 L362.666667,197.333333 L426.666667,197.333333 Z M64,197.333333 L64,229.333333 L7.10542736e-15,229.333333 L7.10542736e-15,197.333333 L64,197.333333 Z M352.869071,51.1701782 L375.496488,73.7975952 L330.241654,119.052429 L307.614237,96.4250122 L352.869071,51.1701782 Z M73.7975952,51.1701782 L119.052429,96.4250122 L96.4250122,119.052429 L51.1701782,73.7975952 L73.7975952,51.1701782 Z M229.333333,-1.0658141e-14 L229.333333,64 L197.333333,64 L197.333333,-1.0658141e-14 L229.333333,-1.0658141e-14 Z" id="Combined-Shape"></path></svg>`;
                    break;
                case "star":
                    a = `<svg width="${o.size}" height="${o.size}" viewBox="0 0 16 16" ><path d="M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16Zm.252-12.932a.476.476 0 0 0-.682.195l-1.2 2.432-2.684.39a.477.477 0 0 0-.266.816l1.944 1.892-.46 2.674a.479.479 0 0 0 .694.504L8 10.709l2.4 1.261a.478.478 0 0 0 .694-.504l-.458-2.673L12.578 6.9a.479.479 0 0 0-.265-.815l-2.685-.39-1.2-2.432a.473.473 0 0 0-.176-.195Z"></path></svg>`;
                    break;
                case "badge":
                    a = `<svg width="${o.size}" height="${o.size}" viewBox="0 0 16 16" ><path d="M7.22 6.5a.72.72 0 1 1-1.44 0 .72.72 0 0 1 1.44 0Z"></path><path d="M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16ZM4 5v3.38c.001.397.159.778.44 1.059l3.211 3.213a1.202 1.202 0 0 0 1.698 0l3.303-3.303a1.202 1.202 0 0 0 0-1.698L9.439 4.44A1.5 1.5 0 0 0 8.379 4H5a1 1 0 0 0-1 1Z"></path></svg>`
                }
                e.clear().html(a)
            },
            setType: function(e="default") {
                let o = this.element
                  , a = this.options;
                e !== a.type && (a.type = e.toLowerCase(),
                this._createStructure(),
                this._fireEvent("bull-change"))
            },
            changeAttribute: function(e, o) {
                e === "data-type" && this._createStructure()
            },
            destroy: function() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            buttongroupDeferred: 0,
            targets: "button",
            clsActive: "",
            requiredButton: !1,
            mode: t.groupMode.ONE,
            onButtonClick: t.noop,
            onButtonGroupCreate: t.noop
        };
        t.buttonGroupSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroButtonGroupSetup != "undefined" && t.buttonGroupSetup(globalThis.metroButtonGroupSetup),
        t.Component("button-group", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    active: null,
                    id: null
                }),
                this
            },
            _create: function() {
                let e = this.element;
                this.id = Hooks.useId(this.elem),
                this._createGroup(),
                this._createEvents(),
                this._fireEvent("button-group-create", {
                    element: e
                })
            },
            _createGroup: function() {
                let e = this.element
                  , o = this.options;
                e.addClass("button-group");
                let a = e.find(o.targets)
                  , i = e.find(".active");
                o.mode === t.groupMode.ONE && i.length === 0 && o.requiredButton === !0 && r(a[0]).addClass("active"),
                o.mode === t.groupMode.ONE && i.length > 1 && (a.removeClass("active").removeClass(o.clsActive),
                r(a[0]).addClass("active")),
                e.find(".active").addClass("js-active").addClass(o.clsActive)
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options;
                o.on(t.events.click, a.targets, function() {
                    let i = r(this);
                    e._fireEvent("button-click", {
                        button: this
                    }),
                    !(a.mode === t.groupMode.ONE && i.hasClass("active")) && (a.mode === t.groupMode.ONE ? (o.find(a.targets).removeClass(a.clsActive).removeClass("active js-active"),
                    i.addClass("active").addClass(a.clsActive).addClass("js-active")) : i.toggleClass("active").toggleClass(a.clsActive).toggleClass("js-active"))
                })
            },
            changeAttribute: e => {}
            ,
            destroy: function() {
                let e = this.element
                  , o = this.options;
                e.off(t.events.click, o.targets),
                e.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            spinnerDeferred: 0,
            label: "",
            step: 1,
            plusIcon: "+",
            minusIcon: "-",
            buttonsPosition: "default",
            defaultValue: 0,
            minValue: null,
            maxValue: null,
            fixed: 0,
            repeatThreshold: 2e3,
            hideCursor: !1,
            clsSpinner: "",
            clsSpinnerInput: "",
            clsSpinnerButton: "",
            clsSpinnerButtonPlus: "",
            clsSpinnerButtonMinus: "",
            clsLabel: "",
            onBeforeChange: t.noop_true,
            onChange: t.noop,
            onPlusClick: t.noop,
            onMinusClick: t.noop,
            onArrowUp: t.noop,
            onArrowDown: t.noop,
            onButtonClick: t.noop,
            onArrowClick: t.noop,
            onSpinnerCreate: t.noop
        };
        t.spinnerSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroSpinnerSetup != "undefined" && t.spinnerSetup(globalThis.metroSpinnerSetup),
        t.Component("spinner", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    repeat_timer: !1
                }),
                this
            },
            _create: function() {
                let e = this.element;
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("spinner-create", {
                    element: e
                })
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options
                  , a = r("<div>").addClass("spinner").addClass(`buttons-${o.buttonsPosition}`).addClass(e[0].className).addClass(o.clsSpinner)
                  , i = r("<button>").attr("type", "button").addClass("button spinner-button spinner-button-plus").addClass(`${o.clsSpinnerButton} ${o.clsSpinnerButtonPlus}`).html(o.plusIcon)
                  , s = r("<button>").attr("type", "button").addClass("button spinner-button spinner-button-minus").addClass(`${o.clsSpinnerButton} ${o.clsSpinnerButtonMinus}`).html(o.minusIcon)
                  , c = e.val().trim();
                if (t.utils.isValue(c) || e.val(0),
                e[0].className = "",
                a.insertBefore(e),
                e.appendTo(a).addClass(o.clsSpinnerInput),
                e.addClass("metro-input"),
                i.appendTo(a),
                s.appendTo(a),
                o.hideCursor === !0 && a.addClass("hide-cursor"),
                o.label) {
                    let d = r("<label>").addClass("label-for-input").addClass(o.clsLabel).html(o.label).insertBefore(a);
                    if (e.attr("id"))
                        d.attr("for", e.attr("id"));
                    else {
                        let p = Hooks.useId(e[0]);
                        d.attr("for", p),
                        e.attr("id", p)
                    }
                    e.attr("dir") === "rtl" && d.addClass("rtl")
                }
                o.disabled === !0 || e.is(":disabled") ? this.disable() : this.enable()
            },
            _createEvents: function() {
                let e = this.element, o = this.options, a = e.closest(".spinner"), i, s = c => {
                    let d = [c ? "plus-click" : "minus-click", c ? "arrow-up" : "arrow-down", "button-click", "arrow-click"]
                      , p = +e.val()
                      , m = +e.val()
                      , g = +o.step;
                    c ? m += g : m -= g,
                    this._setValue(m.toFixed(o.fixed), !0),
                    this._fireEvents(d, {
                        curr: p,
                        val: m,
                        elementVal: e.val(),
                        button: c ? "plus" : "minus"
                    })
                }
                ;
                a.on(t.events.startAll, ".spinner-button", function(c) {
                    let d = r(this).hasClass("spinner-button-plus");
                    i = setInterval( () => {
                        s(d)
                    }
                    , 100)
                }, {
                    passive: !0
                }),
                a.on(t.events.stopAll, ".spinner-button", c => {
                    clearInterval(i)
                }
                , {
                    passive: !0
                }),
                a.on(t.events.click, ".spinner-button", function(c) {
                    let d = r(this).hasClass("spinner-button-plus");
                    s(d)
                }, {
                    passive: !0
                }),
                a.on(t.events.click, c => {
                    r(".focused").removeClass("focused"),
                    a.addClass("focused"),
                    c.preventDefault(),
                    c.stopPropagation()
                }
                )
            },
            _setValue: function(e=0, o=!1) {
                let a = this.element
                  , i = this.options;
                if (t.utils.exec(i.onBeforeChange, [e], a[0]) !== !0)
                    return;
                let s = +e;
                s > Number(i.maxValue) && (s = Number(i.maxValue)),
                s < Number(i.minValue) && (s = Number(i.minValue)),
                a.val(e),
                this._fireEvent("change", {
                    val: e
                }, !1, !0),
                o === !0 && a.fire("change", {
                    val: e
                })
            },
            val: function(e) {
                let o = this.element
                  , a = this.options;
                if (!t.utils.isValue(e))
                    return o.val();
                this._setValue(e.toFixed(a.fixed), !0)
            },
            toDefault: function() {
                let e = this.options
                  , o = t.utils.isValue(e.defaultValue) ? Number(e.defaultValue) : 0;
                this._setValue(o.toFixed(e.fixed), !0),
                this._fireEvent("change", {
                    val: o
                })
            },
            disable: function() {
                this.element.data("disabled", !0),
                this.element.parent().addClass("disabled")
            },
            enable: function() {
                this.element.data("disabled", !1),
                this.element.parent().removeClass("disabled")
            },
            toggleState: function() {
                this.elem.disabled ? this.disable() : this.enable()
            },
            changeAttribute: function(e) {
                let o = this.element
                  , a = () => {
                    let i = o.attr("value").trim();
                    t.utils.isValue(i) && this._setValue(Number(i), !1)
                }
                ;
                switch (e) {
                case "disabled":
                    this.toggleState();
                    break;
                case "value":
                    a();
                    break
                }
            },
            destroy: function() {
                let e = this.element
                  , o = this.options
                  , a = e.closest(".spinner")
                  , i = a.find(".spinner-button");
                a.off(t.events.click),
                i.off(t.events.start),
                i.off(t.events.stop),
                e.off(t.events.keydown),
                a.off(t.events.keyup),
                o.label && a.prev("label").remove(),
                a.remove()
            }
        }),
        r(document).on(t.events.click, () => {
            r(".spinner").removeClass("focused")
        }
        )
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            weekStart: null,
            static: !1,
            readonly: !1,
            showGhost: !1,
            events: null,
            startContent: "days",
            showTime: !1,
            initialTime: null,
            initialHours: null,
            initialMinutes: null,
            labelTimeHours: null,
            labelTimeMinutes: null,
            animationContent: !0,
            animationSpeed: 10,
            calendarDeferred: 0,
            dayBorder: !1,
            excludeDay: null,
            prevMonthIcon: "\u2BC7",
            nextMonthIcon: "\u2BC8",
            prevYearIcon: "\u2BC7",
            nextYearIcon: "\u2BC8",
            compact: !1,
            wide: !1,
            widePoint: null,
            pickerMode: !1,
            show: null,
            outside: !0,
            buttons: "",
            yearsBefore: 100,
            yearsAfter: 100,
            headerFormat: "dddd, MMM DD",
            showHeader: !0,
            showFooter: !0,
            showWeekNumber: !1,
            isDialog: !1,
            ripple: !1,
            rippleColor: "#cccccc",
            exclude: null,
            preset: null,
            minDate: null,
            maxDate: null,
            weekDayClick: !1,
            weekNumberClick: !1,
            multiSelect: !1,
            special: null,
            format: METRO_DATE_FORMAT,
            inputFormat: null,
            clsCalendar: "",
            clsCalendarHeader: "",
            clsCalendarContent: "",
            clsCalendarFooter: "",
            clsCalendarMonths: "",
            clsCalendarYears: "",
            clsToday: "",
            clsSelected: "",
            clsExcluded: "",
            clsCancelButton: "",
            clsTodayButton: "",
            clsClearButton: "",
            clsDoneButton: "",
            clsEventCounter: "",
            clsWeekend: "",
            clsCurrentWeek: "",
            clsCalendarTime: "",
            clsTime: "",
            clsTimeHours: "",
            clsTimeMinutes: "",
            clsTimeButton: "",
            clsTimeButtonPlus: "",
            clsTimeButtonMinus: "",
            clsSpecial: "",
            clsEvents: "",
            clsEvent: "",
            onCancel: t.noop,
            onToday: t.noop,
            onClear: t.noop,
            onDone: t.noop,
            onDayClick: t.noop,
            onDrawDay: t.noop,
            onDrawMonth: t.noop,
            onDrawYear: t.noop,
            onWeekDayClick: t.noop,
            onWeekNumberClick: t.noop,
            onMonthChange: t.noop,
            onYearChange: t.noop,
            onTimeChange: t.noop,
            onHoursChange: t.noop,
            onMinutesChange: t.noop,
            onCalendarCreate: t.noop
        };
        t.calendarSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroCalendarSetup != "undefined" && t.calendarSetup(globalThis.metroCalendarSetup),
        t.Component("calendar", {
            init: function(e, o) {
                let a = datetime()
                  , i = this._correctDate(datetime());
                return this._super(o, e, l, {
                    today: i,
                    show: i,
                    current: {
                        year: i.year(),
                        month: i.month(),
                        day: i.day()
                    },
                    preset: [],
                    selected: [],
                    exclude: [],
                    special: [],
                    excludeDay: [],
                    events: [],
                    min: null,
                    max: null,
                    minYear: null,
                    maxYear: null,
                    id: null,
                    time: [a.hour(), a.minute()],
                    content: "days",
                    yearDistance: 11,
                    yearGroupStart: i.year()
                }),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options;
                this.id = Hooks.useId(this.elem),
                this.content = o.startContent,
                this.minYear = this.current.year - this.options.yearsBefore,
                this.maxYear = this.current.year + this.options.yearsAfter,
                e.html("").addClass(`calendar ${o.compact === !0 ? "compact" : ""}`).addClass(o.clsCalendar),
                t.utils.isValue(o.initialTime) && (this.time = o.initialTime.split(":")),
                t.utils.isValue(o.initialHours) && t.utils.between(o.initialHours, 0, 23, !0) && (this.time[0] = Number.parseInt(o.initialHours)),
                t.utils.isValue(o.initialMinutes) && t.utils.between(o.initialMinutes, 0, 59, !0) && (this.time[1] = Number.parseInt(o.initialMinutes)),
                o.dayBorder === !0 && e.addClass("day-border"),
                t.utils.isValue(o.excludeDay) && (this.excludeDay = `${o.excludeDay}`.toArray(",", "int")),
                t.utils.isValue(o.preset) && this._dates2array(o.preset, "selected"),
                t.utils.isValue(o.exclude) && this._dates2array(o.exclude, "exclude"),
                t.utils.isValue(o.special) && this._dates2array(o.special, "special"),
                t.utils.isValue(o.events) && this._dates2array(o.events, "events"),
                this.min = o.minDate ? (o.inputFormat ? Datetime.from(o.minDate, o.inputFormat) : datetime(o.minDate)).align("day") : null,
                this.max = o.maxDate ? (o.inputFormat ? Datetime.from(o.maxDate, o.inputFormat) : datetime(o.maxDate)).align("day") : null,
                o.show && (this.show = (o.show ? o.inputFormat ? Datetime.from(o.show, o.inputFormat) : datetime(o.show) : datetime()).align("day"),
                this.current = {
                    year: this.show.year(),
                    month: this.show.month(),
                    day: this.show.day()
                }),
                this._drawCalendar(),
                this._createEvents(),
                (o.wide === !0 || !t.utils.isNull(o.widePoint) && t.utils.mediaExist(o.widePoint)) && e.addClass("calendar-wide"),
                o.ripple === !0 && t.utils.isFunc(e.ripple) !== !1 && e.ripple({
                    rippleTarget: ".button, .prev-month, .next-month, .prev-year, .next-year, .day",
                    rippleColor: this.options.rippleColor
                });
                let a = e.id();
                a && t.storage.getItem(`METRO:CALENDAR:${a}:COLLAPSED`, e.hasClass("calendar-collapsed")) && e.addClass("calendar-collapsed"),
                this._fireEvent("calendar-create")
            },
            _dates2array: function(e, o) {
                let a = this
                  , i = this.options;
                if (t.utils.isNull(e))
                    return;
                let s = typeof e == "string" ? e.toArray() : Array.isArray(e) ? e : [];
                r.each(s, function() {
                    let c;
                    try {
                        c = a._correctDate(i.inputFormat ? Datetime.from(this, i.inputFormat) : datetime(this)).format("YYYY-MM-DD")
                    } catch (d) {
                        return
                    }
                    a[o].push(c)
                })
            },
            _correctDate: e => datetime(e).addDay(1).align("day").addMinute(new Date().getTimezoneOffset()),
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options;
                r(globalThis).on(t.events.resize, () => {
                    a.wide !== !0 && (!t.utils.isNull(a.widePoint) && t.utils.mediaExist(a.widePoint) ? o.addClass("calendar-wide") : o.removeClass("calendar-wide"))
                }
                , {
                    ns: this.id
                }),
                o.on(t.events.click, ".button-collapse", () => {
                    let i = o.id();
                    o.toggleClass("calendar-collapsed"),
                    i && t.storage.setItem(`METRO:CALENDAR:${i}:COLLAPSED`, o.hasClass("calendar-collapsed"))
                }
                ),
                o.on(t.events.click, ".prev-year-group, .next-year-group", function() {
                    a.static || (r(this).hasClass("prev-year-group") ? e.yearGroupStart -= e.yearDistance : e.yearGroupStart += e.yearDistance,
                    e._drawContent())
                }),
                o.on(t.events.click, ".prev-month, .next-month, .prev-year, .next-year", function() {
                    let i, s = r(this);
                    a.static || s.hasClass("prev-month") && (i = datetime(e.current.year, e.current.month - 1, 1).useLocale(e.locale, !0),
                    i.year() < e.minYear) || s.hasClass("next-month") && (i = datetime(e.current.year, e.current.month + 1, 1).useLocale(e.locale, !0),
                    i.year() > e.maxYear) || s.hasClass("prev-year") && (i = datetime(e.current.year - 1, e.current.month, 1).useLocale(e.locale, !0),
                    i.year() < e.minYear) || s.hasClass("next-year") && (i = datetime(e.current.year + 1, e.current.month, 1).useLocale(e.locale, !0),
                    i.year() > e.maxYear) || (e.current = {
                        year: i.year(),
                        month: i.month(),
                        day: i.day()
                    },
                    setTimeout( () => {
                        e._drawContent(),
                        (s.hasClass("prev-month") || s.hasClass("next-month")) && e._fireEvent("month-change", {
                            current: e.current
                        }),
                        (s.hasClass("prev-year") || s.hasClass("next-year")) && e._fireEvent("year-change", {
                            current: e.current
                        })
                    }
                    , a.ripple ? 300 : 1))
                }),
                o.on(t.events.click, ".button-today", () => {
                    e.toDay(),
                    e._fireEvent("today", {
                        today: e.today.val(),
                        time: e.time
                    })
                }
                ),
                o.on(t.events.click, ".button-clear", () => {
                    let i = datetime();
                    e.selected = [],
                    e.time = [i.hour(), i.minute()],
                    e.yearGroupStart = i.year(),
                    e._drawContent(),
                    e._fireEvent("clear")
                }
                ),
                o.on(t.events.click, ".button-cancel", () => {
                    e._drawContent(),
                    e._fireEvent("cancel")
                }
                ),
                o.on(t.events.click, ".button-done", () => {
                    e._drawContent(),
                    e._fireEvent("done", {
                        selected: e.selected,
                        time: e.time
                    })
                }
                ),
                a.weekDayClick === !0 && o.on(t.events.click, ".week-days .week-day", function(i) {
                    let s, c, d = [];
                    if (a.static || a.readonly)
                        return;
                    let p = r(this);
                    s = p.index();
                    for (let m = 0; m < 7; m++)
                        d.push(s),
                        s += a.showWeekNumber ? 8 : 7;
                    a.multiSelect === !0 && (c = o.find(".day").filter(m => {
                        let g = r(m);
                        return d.indexOf(g.index()) > -1 && !g.hasClass("outside disabled excluded")
                    }
                    ),
                    r.each(c, function() {
                        let m = r(this)
                          , g = m.data("day");
                        e.selected.indexOf(g) === -1 ? (e.selected.push(g),
                        m.addClass("selected").addClass(a.clsSelected)) : (m.removeClass("selected").removeClass(a.clsSelected),
                        t.utils.arrayDelete(e.selected, g))
                    })),
                    e._fireEvent("week-day-click", {
                        selected: e.selected,
                        day: p[0]
                    }),
                    i.preventDefault(),
                    i.stopPropagation()
                }),
                a.weekNumberClick && o.on(t.events.click, ".week-number", function(i) {
                    let s, c = r(this), d = c.text(), p = c.index();
                    d !== "#" && (a.static || a.readonly || (a.multiSelect === !0 && (s = o.find(".day").filter(m => {
                        let g = r(m)
                          , f = g.index();
                        return t.utils.between(f, p, p + 8, !1) && !g.hasClass("outside disabled excluded")
                    }
                    ),
                    r.each(s, function() {
                        let m = r(this)
                          , g = m.data("day");
                        e.selected.indexOf(g) === -1 ? (e.selected.push(g),
                        m.addClass("selected").addClass(a.clsSelected)) : (m.removeClass("selected").removeClass(a.clsSelected),
                        t.utils.arrayDelete(e.selected, g))
                    })),
                    e._fireEvent("week-number-click", {
                        selected: e.selected,
                        num: d,
                        numElement: c[0]
                    }),
                    i.preventDefault(),
                    i.stopPropagation()))
                }),
                o.on(t.events.click, ".day", function(i) {
                    let s = r(this), c, d;
                    if (!(a.static || a.readonly)) {
                        if (d = s.data("day"),
                        c = e.selected.indexOf(d),
                        s.hasClass("outside")) {
                            d = datetime(d),
                            e.current = {
                                year: d.year(),
                                month: d.month(),
                                day: d.day()
                            },
                            e._drawContent(),
                            e._fireEvent("month-change", {
                                current: e.current
                            });
                            return
                        }
                        s.hasClass("disabled") || (a.pickerMode === !0 ? (e.selected = [d],
                        e.today = datetime(d),
                        e.current.year = e.today.year(),
                        e.current.month = e.today.month(),
                        e.current.day = e.today.day(),
                        e._drawHeader(),
                        e._drawContent()) : c === -1 ? (a.multiSelect === !1 && (o.find(".day").removeClass("selected").removeClass(a.clsSelected),
                        e.selected = []),
                        e.selected.push(d),
                        s.addClass("selected").addClass(a.clsSelected)) : (s.removeClass("selected").removeClass(a.clsSelected),
                        t.utils.arrayDelete(e.selected, d))),
                        e._fireEvent("day-click", {
                            selected: e.selected,
                            day: s[0],
                            time: e.time
                        }),
                        i.preventDefault(),
                        i.stopPropagation()
                    }
                }),
                o.on(t.events.click, ".curr-month, .header-day", i => {
                    e.content = "months",
                    e._drawContent(),
                    i.preventDefault(),
                    i.stopPropagation()
                }
                ),
                o.on(t.events.click, ".month", function(i) {
                    e.current.month = Number.parseInt(r(this).attr("data-month")),
                    e.content = "days",
                    e._drawContent(),
                    e._fireEvent("month-change", {
                        current: e.current
                    }),
                    i.preventDefault(),
                    i.stopPropagation()
                }),
                o.on(t.events.click, ".curr-year, .header-year", i => {
                    e.content !== "years" && (e.content = "years",
                    e._drawContent(),
                    i.preventDefault(),
                    i.stopPropagation())
                }
                ),
                o.on(t.events.click, ".year", function(i) {
                    e.current.year = Number.parseInt(r(this).attr("data-year")),
                    e.yearGroupStart = e.current.year,
                    e.content = "months",
                    e._drawContent(),
                    e._fireEvent("year-change", {
                        current: e.current
                    }),
                    i.preventDefault(),
                    i.stopPropagation()
                })
            },
            _drawHeader: function() {
                let e = this.element
                  , o = this.options
                  , a = e.find(".calendar-header");
                a.length === 0 && (a = r("<div>").addClass("calendar-header").addClass(o.clsCalendarHeader).appendTo(e)),
                a.html(""),
                r("<div>").addClass("header-year").html(this.today.year()).appendTo(a),
                r("<div>").addClass("header-day").html(this.today.format(o.headerFormat, this.locale)).appendTo(a);
                let i = r("<div>").addClass("header-actions").appendTo(a);
                r("<button>").addClass("square small button-collapse").html(`
                <svg aria-hidden="true" class="caret toggle-collapsed" width="16" height="16" viewBox="0 0 24 24">
                    <path d="m14.83 11.29-4.24-4.24a1 1 0 1 0-1.42 1.41L12.71 12l-3.54 3.54a1 1 0 0 0 0 1.41 1 1 0 0 0 .71.29 1 1 0 0 0 .71-.29l4.24-4.24a1.002 1.002 0 0 0 0-1.42Z"></path>
                </svg>
            `).attr("title", this.strings.label_collapse).appendTo(i),
                o.showHeader === !1 && a.hide()
            },
            _drawFooter: function() {
                let e = this.element
                  , o = this.options
                  , a = this.strings
                  , i = e.find(".calendar-footer");
                o.buttons && (i.length === 0 && (i = r("<div>").addClass("calendar-footer").addClass(o.clsCalendarFooter).appendTo(e)),
                i.html(""),
                r.each(o.buttons.toArray(","), function() {
                    let s = r("<button>").attr("type", "button").addClass(`button button-${this} ${o[`cls${Str.capitalize(this)}Button`]}`).html(a[`label_${this}`]).appendTo(i);
                    (this === "cancel" || this === "done") && s.addClass("js-dialog-close")
                }),
                o.showFooter === !1 && i.hide())
            },
            _drawTime: function() {
                let e = this, o = this.element, a = this.options, i = this.strings, s = o.find(".calendar-content"), c = r("<div>").addClass("calendar-time").addClass(a.clsCalendarTime).appendTo(s), d, p, m, g, f = `${this.time[0]}`, u = `${this.time[1]}`, h = function(b) {
                    let w = Number.parseInt(b);
                    r(this).attr("data-time-part") === "hours" ? (e.time[0] = w,
                    e._fireEvent("hours-change", {
                        time: e.time,
                        hours: w
                    })) : (e.time[1] = w,
                    e._fireEvent("minutes-change", {
                        time: e.time,
                        minutes: w
                    })),
                    e._fireEvent("time-change", {
                        time: e.time
                    })
                };
                c.append(d = r("<div>").addClass("calendar-time__inner")),
                d.append(g = r("<div>").addClass("calendar-time__inner-row")),
                g.append(r("<div>").addClass("calendar-time__inner-cell").append(r("<span>").html(str(i.label_hours).capitalize()))),
                g.append(r("<div>").addClass("calendar-time__inner-cell").append(r("<span>").html(str(i.label_minutes).capitalize()))),
                c.append(d = r("<div>").addClass("calendar-time__inner spinners").addClass(a.clsTime)),
                d.append(p = r(`<input type='text' data-cls-spinner-input='${a.clsTimeHours}' data-time-part='hours' data-buttons-position='right' data-min-value='0' data-max-value='23'>`).addClass("hours").addClass(a.compact ? "input-small" : "input-normal")),
                d.append(m = r(`<input type='text' data-cls-spinner-input='${a.clsTimeMinutes}' data-time-part='minutes' data-buttons-position='right' data-min-value='0' data-max-value='59'>`).addClass("minutes").addClass(a.compact ? "input-small" : "input-normal")),
                f = Str.lpad(f, "0", 2),
                u = Str.lpad(u, "0", 2),
                p.val(f),
                m.val(u),
                t.makePlugin(d.find("input[type=text]"), "spinner", {
                    onChange: h,
                    clsSpinnerButton: a.clsTimeButton,
                    clsSpinnerButtonPlus: a.clsTimeButtonPlus,
                    clsSpinnerButtonMinus: a.clsTimeButtonMinus
                }),
                a.showTime === !1 && c.hide()
            },
            _drawContentDays: function() {
                let e = this, o = this.element, a = this.options, i = this.strings, s = o.find(".calendar-content"), c, d = datetime(this.current.year, this.current.month, this.current.day).useLocale(this.locale, !0).calendar(t.utils.isValue(a.weekStart) ? a.weekStart : i.weekStart), p = this.show.format("YYYY-MM-DD"), m = datetime();
                s.length === 0 && (s = r("<div>").addClass("calendar-content").addClass(a.clsCalendarContent).appendTo(o)),
                a.showWeekNumber && s.addClass("-week-numbers"),
                s.empty();
                let g = r("<div>").addClass("calendar-toolbar").appendTo(s);
                r("<span>").addClass("prev-month").html(a.prevMonthIcon).appendTo(g),
                r("<span>").addClass("curr-month").html(Datetime.getLocale(this.locale).months[this.current.month]).appendTo(g),
                r("<span>").addClass("next-month").html(a.nextMonthIcon).appendTo(g),
                r("<span>").addClass("prev-year").html(a.prevYearIcon).appendTo(g),
                r("<span>").addClass("curr-year").html(this.current.year).appendTo(g),
                r("<span>").addClass("next-year").html(a.nextYearIcon).appendTo(g),
                c = r("<div>").addClass("week-days").appendTo(s),
                a.showWeekNumber && r("<span>").addClass("week-number").html("#").appendTo(c),
                r.each(d.weekdays, function() {
                    r("<span>").addClass("week-day").html(this).appendTo(c)
                });
                let f = r("<div>").addClass("days").appendTo(s);
                r.each(d.days, function(u) {
                    let h = `${this}`
                      , b = e._correctDate(h)
                      , w = b.month() !== e.current.month;
                    a.showWeekNumber && u % 7 === 0 && r("<span>").addClass("week-number").html(`<span class="week-number-content">${b.weekNumber(a.weekStart)}</span>`).appendTo(f);
                    let Q = b.day()
                      , C = b.format("YYYY-MM-DD")
                      , B = r("<span>").addClass("day").html(`<span class="day-content">${Q}</span>`).appendTo(f);
                    if (B.attr("data-day", C),
                    h === p && B.addClass("showed"),
                    w && (B.addClass("outside"),
                    a.outside || B.empty()),
                    h === d.today && B.addClass("today"),
                    a.showGhost && b.day() === m.day() && B.addClass("coincidental"),
                    e.special.length ? e.special.indexOf(h) === -1 ? B.addClass("disabled excluded").addClass(a.clsExcluded) : B.addClass(a.clsSpecial) : (e.selected.includes(h) && B.addClass("selected").addClass(a.clsSelected),
                    e.exclude.includes(h) && B.addClass("disabled excluded").addClass(a.clsExcluded),
                    e.min && b.older(e.min) && B.addClass("disabled excluded").addClass(a.clsExcluded),
                    e.max && b.younger(e.max) && B.addClass("disabled excluded").addClass(a.clsExcluded)),
                    d.weekends.indexOf(h) !== -1 && B.addClass(a.clsWeekend),
                    d.week.indexOf(h) !== -1 && B.addClass(a.clsCurrentWeek),
                    e.events.length) {
                        let x = r("<div>").addClass("events").addClass(a.clsEvents).appendTo(B);
                        r.each(e.events, function() {
                            if (this === h) {
                                let v = r("<div>").addClass("event").addClass(a.clsEvent).appendTo(x);
                                a.clsEvent || v.css({
                                    backgroundColor: Farbe.Routines.randomColor()
                                })
                            }
                        })
                    }
                    a.animationContent && B.addClass("to-animate"),
                    e._fireEvent("draw-day", {
                        date: b.val(),
                        day: b.day(),
                        month: b.month(),
                        year: b.year(),
                        cell: B[0]
                    })
                }),
                this._drawTime(),
                this._animateContent(".day")
            },
            _drawContentMonths: function() {
                let e = this.element, o = this.elem, a = this.options, i = this.locale, s = e.find(".calendar-content"), c, d, p = datetime().year(), m = datetime().month();
                s.length === 0 && (s = r("<div>").addClass("calendar-content").addClass(a.clsCalendarContent).appendTo(e)),
                s.clear();
                let g = r("<div>").addClass("calendar-toolbar").appendTo(s);
                r("<span>").addClass("prev-year").html(a.prevYearIcon).appendTo(g),
                r("<span>").addClass("curr-year").html(this.current.year).appendTo(g),
                r("<span>").addClass("next-year").html(a.nextYearIcon).appendTo(g),
                s.append(c = r("<div>").addClass("months"));
                let f = 0;
                for (let u of Datetime.getLocale(i).months)
                    c.append(d = r("<div>").attr("data-month", f).addClass("month").addClass(f === m && this.current.year === p ? "today" : "").html(u)),
                    a.animationContent && d.addClass("to-animate"),
                    this._fireEvent("draw-month", {
                        month: f,
                        year: this.current.year,
                        cell: d[0]
                    }),
                    f++;
                t.i18n.updateUI(o, i),
                this._animateContent(".months .month")
            },
            _drawContentYears: function() {
                let e = this.element, o = this.options, a = e.find(".calendar-content"), i, s;
                a.length === 0 && (a = r("<div>").addClass("calendar-content").addClass(o.clsCalendarContent).appendTo(e)),
                a.clear();
                let c = r("<div>").addClass("calendar-toolbar").appendTo(a);
                r("<span>").addClass("prev-year-group").html(o.prevYearIcon).appendTo(c),
                r("<span>").addClass("curr-year").html(`${this.yearGroupStart} - ${this.yearGroupStart + this.yearDistance}`).appendTo(c),
                r("<span>").addClass("next-year-group").html(o.nextYearIcon).appendTo(c),
                a.append(i = r("<div>").addClass("years"));
                for (let d = this.yearGroupStart; d <= this.yearGroupStart + this.yearDistance; d++)
                    i.append(s = r("<div>").attr("data-year", d).addClass("year").addClass(d === this.current.year ? "today" : "").html(d)),
                    o.animationContent && s.addClass("to-animate"),
                    (d < o.minYear || d > o.maxYear) && s.addClass("disabled"),
                    this._fireEvent("draw-year", {
                        year: d,
                        cell: s[0]
                    });
                this._animateContent(".years .year")
            },
            _drawContent: function() {
                switch (this.content) {
                case "years":
                    this._drawContentYears();
                    break;
                case "months":
                    this._drawContentMonths();
                    break;
                default:
                    this._drawContentDays()
                }
                t.i18n.updateUI(this.elem, this.locale)
            },
            _drawCalendar: function() {
                let e = this.elem;
                setTimeout( () => {
                    this.element.html(""),
                    this._drawHeader(),
                    this._drawContent(),
                    this._drawFooter(),
                    t.i18n.updateUI(e, this.locale)
                }
                , 0)
            },
            _animateContent: function(e, o="to-animate") {
                let a = this.element
                  , i = this.options;
                a.find(".calendar-content").find(e).each(function(c) {
                    let d = r(this);
                    setTimeout( () => {
                        d.removeClass(o)
                    }
                    , i.animationSpeed * c)
                })
            },
            getTime: function(e=!1) {
                let o = Str.lpad(this.time[0], "0", 2)
                  , a = Str.lpad(this.time[1], "0", 2);
                return e ? `${o}:${a}` : this.time
            },
            setTime: function(e) {
                Array.isArray(e) ? this.time = e : this.time = e.split(":"),
                this._drawCalendar()
            },
            getPreset: function() {
                return this.preset
            },
            getSelected: function() {
                return this.selected
            },
            getExcluded: function() {
                return this.exclude
            },
            getToday: function() {
                return this.today
            },
            getCurrent: function() {
                return this.current
            },
            clearSelected: function() {
                this.selected = [],
                this._drawContent()
            },
            toDay: function() {
                let e = datetime();
                this.today = datetime().align("day"),
                this.current = {
                    year: this.today.year(),
                    month: this.today.month(),
                    day: this.today.day()
                },
                this.time = [e.hour(), e.minute()],
                this.yearGroupStart = this.today.year(),
                this.content = "days",
                this._drawHeader(),
                this._drawContent()
            },
            setExclude: function(e) {
                let o = this.element
                  , a = this.options;
                t.utils.isNull(e) && t.utils.isNull(o.attr("data-exclude")) || (a.exclude = e || o.attr("data-exclude"),
                this._dates2array(a.exclude, "exclude"),
                this._drawContent())
            },
            setPreset: function(e) {
                let o = this.element
                  , a = this.options;
                t.utils.isNull(e) && t.utils.isNull(o.attr("data-preset")) || (a.preset = e || o.attr("data-preset"),
                this._dates2array(a.preset, "selected"),
                this._drawContent())
            },
            setSpecial: function(e) {
                let o = this.element
                  , a = this.options;
                t.utils.isNull(e) && t.utils.isNull(o.attr("data-special")) || (a.special = e || o.attr("data-special"),
                this._dates2array(a.exclude, "special"),
                this._drawContent())
            },
            showDate: function(e) {
                return this.setShow(e)
            },
            setShow: function(e) {
                let o = this.element
                  , a = this.options
                  , i = o.attr("data-show");
                !e && !i || (a.show = e || i,
                a.show ? typeof a.show == "string" && a.inputFormat ? this.show = Datetime.from(a.show, a.inputFormat) : this.show = datetime(a.show) : this.show = datetime(),
                this.show = this.show.align("day"),
                this.current = {
                    year: this.show.year(),
                    month: this.show.month(),
                    day: this.show.day()
                },
                this._drawContent())
            },
            setMinDate: function(e) {
                let o = this.element
                  , a = this.options
                  , i = o.attr("data-min-date");
                !e && !i || (a.minDate = e || i,
                this.min = a.minDate ? (a.inputFormat ? Datetime.from(a.minDate, a.inputFormat) : datetime(a.minDate)).align("day") : null,
                this._drawContent())
            },
            setMaxDate: function(e) {
                let o = this.element
                  , a = this.options
                  , i = o.attr("data-max-date");
                a.maxDate = e || i,
                this.max = a.maxDate ? (a.inputFormat ? Datetime.from(a.maxDate, a.inputFormat) : datetime(a.maxDate)).align("day") : null,
                this._drawContent()
            },
            changeAttribute: function(e) {
                switch (e) {
                case "data-exclude":
                    this.setExclude();
                    break;
                case "data-preset":
                    this.setPreset();
                    break;
                case "data-special":
                    this.setSpecial();
                    break;
                case "data-show":
                    this.setShow();
                    break;
                case "data-min-date":
                    this.setMinDate();
                    break;
                case "data-max-date":
                    this.setMaxDate();
                    break
                }
            },
            destroy: function() {
                let e = this.element
                  , o = this.options;
                e.off(t.events.click, ".prev-month, .next-month, .prev-year, .next-year"),
                e.off(t.events.click, ".button.today"),
                e.off(t.events.click, ".button.clear"),
                e.off(t.events.click, ".button.cancel"),
                e.off(t.events.click, ".button.done"),
                e.off(t.events.click, ".week-days .day"),
                e.off(t.events.click, ".days-row .day"),
                e.off(t.events.click, ".curr-month"),
                e.off(t.events.click, ".calendar-months li"),
                e.off(t.events.click, ".curr-year"),
                e.off(t.events.click, ".calendar-years li"),
                e.off(t.events.click),
                o.ripple === !0 && e.data("ripple").destroy(),
                r(globalThis).off(t.events.resize, {
                    ns: this.id
                }),
                e.remove()
            }
        }),
        r(document).on(t.events.click, () => {
            r(".calendar .calendar-years").each(function() {
                r(this).removeClass("open")
            }),
            r(".calendar .calendar-months").each(function() {
                r(this).removeClass("open")
            })
        }
        ),
        t.defaults.Calendar = l
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            label: "",
            value: "",
            calendarPickerDeferred: 0,
            nullValue: !0,
            useNow: !1,
            prepend: "",
            dialogMode: !1,
            dialogPoint: 640,
            dialogOverlay: !0,
            overlayColor: "#000000",
            overlayAlpha: .5,
            size: "100%",
            format: METRO_DATE_FORMAT,
            inputFormat: null,
            clearButton: !1,
            calendarButtonIcon: "\u{1F4C5}",
            clearButtonIcon: "\u274C",
            prevMonthIcon: "\u2BC7",
            nextMonthIcon: "\u2BC8",
            prevYearIcon: "\u2BC7",
            nextYearIcon: "\u2BC8",
            copyInlineStyles: !1,
            openMode: "auto",
            clsPicker: "",
            clsInput: "",
            clsPrepend: "",
            clsLabel: "",
            onDayClick: t.noop,
            onCalendarPickerCreate: t.noop,
            onCalendarShow: t.noop,
            onCalendarHide: t.noop,
            onChange: t.noop,
            onPickerChange: t.noop,
            onMonthChange: t.noop,
            onYearChange: t.noop
        };
        t.calendarPickerSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroCalendarPickerSetup != "undefined" && t.calendarPickerSetup(globalThis.metroCalendarPickerSetup),
        t.Component("calendar-picker", {
            init: function(e, o) {
                let a = datetime();
                return this._super(o, e, r.extend({}, t.defaults.Calendar, {}, l), {
                    value: null,
                    value_date: null,
                    calendar: null,
                    overlay: null,
                    id: null,
                    time: [a.hour(), a.minute()]
                }),
                this
            },
            _create: function() {
                this.id = Hooks.useId(this.element),
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("calendar-picker-create", {
                    element: this.element
                })
            },
            _correctTime: e => {
                let o = Str.lpad(e[0], "0", 2)
                  , a = Str.lpad(e[1], "0", 2);
                return `${o}:${a}`
            }
            ,
            _createStructure: function() {
                var C;
                let e = this.element, o = this.options, a = this.locale, i = r("<div>").addClass(`input ${e[0].className} calendar-picker`), s = r("<div>").addClass("button-group"), c, d = r("<div>"), p, m, g, f, u, h = r("body");
                e.attr("type", "text"),
                e.attr("autocomplete", "off"),
                e.attr("readonly", !0),
                t.utils.isValue(o.initialTime) && (this.time = o.initialTime.trim().split(":")),
                t.utils.isValue(o.initialHours) && (this.time[0] = Number.parseInt(o.initialHours)),
                t.utils.isValue(o.initialMinutes) && (this.time[1] = Number.parseInt(o.initialMinutes)),
                p = `${o.value}`.trim() !== "" ? o.value : e.val().trim();
                let b = p || "";
                t.utils.isValue(p) ? (m = p.split(" "),
                this.value = (o.inputFormat ? Datetime.from(m[0], o.inputFormat, a) : datetime(m[0])).addDay(1).align("day").addMinute(new Date().getTimezoneOffset()),
                m[1] && (this.time = m[1].trim().split(":"))) : o.useNow && (this.value = datetime().addDay(1).align("day").addMinute(new Date().getTimezoneOffset()),
                this.time = [this.value.hour(), this.value.minute()]),
                u = !p && o.nullValue === !0 ? "" : datetime(this.value).format(o.format, a),
                o.showTime && this.time && u && (u += ` ${this._correctTime(this.time)}`),
                e.val(u),
                i.insertBefore(e),
                e.appendTo(i),
                s.appendTo(i),
                d.appendTo(o.dialogMode ? h : i),
                (C = this.time) != null && C.length && (g = this.time[0],
                typeof this.time[1] != "undefined" && (f = this.time[1]));
                let w = o.initialTime;
                if (o.initialHours && (g = o.initialHours),
                o.initialHours && (f = o.initialMinutes),
                t.makePlugin(d, "calendar", {
                    showTime: o.showTime,
                    initialTime: w,
                    initialHours: g,
                    initialMinutes: f,
                    clsCalendarTime: o.clsCalendarTime,
                    clsTime: o.clsTime,
                    clsTimeHours: o.clsTimeHours,
                    clsTimeMinutes: o.clsTimeMinutes,
                    clsTimeButton: o.clsTimeButton,
                    clsTimeButtonPlus: o.clsTimeButtonPlus,
                    clsTimeButtonMinus: o.clsTimeButtonMinus,
                    wide: o.wide,
                    widePoint: o.widePoint,
                    format: o.format,
                    inputFormat: o.inputFormat,
                    pickerMode: !0,
                    show: b,
                    preset: b,
                    weekStart: o.weekStart,
                    outside: o.outside,
                    buttons: !1,
                    headerFormat: o.headerFormat,
                    prevMonthIcon: o.prevMonthIcon,
                    nextMonthIcon: o.nextMonthIcon,
                    prevYearIcon: o.prevYearIcon,
                    nextYearIcon: o.nextYearIcon,
                    clsCalendar: [o.clsCalendar, "calendar-for-picker", o.dialogMode ? "dialog-mode" : ""].join(" "),
                    clsCalendarHeader: o.clsCalendarHeader,
                    clsCalendarContent: o.clsCalendarContent,
                    clsCalendarFooter: "d-none",
                    clsCalendarMonths: o.clsCalendarMonths,
                    clsCalendarYears: o.clsCalendarYears,
                    clsToday: o.clsToday,
                    clsSelected: o.clsSelected,
                    clsExcluded: o.clsExcluded,
                    ripple: o.ripple,
                    rippleColor: o.rippleColor,
                    exclude: o.exclude,
                    minDate: o.minDate,
                    maxDate: o.maxDate,
                    yearsBefore: o.yearsBefore,
                    yearsAfter: o.yearsAfter,
                    special: o.special,
                    events: o.events,
                    showHeader: !1,
                    showFooter: !1,
                    multiSelect: !1,
                    showWeekNumber: o.showWeekNumber,
                    onDayClick: (B, x, v, E) => {
                        let k = datetime(B[0]).addDay(1).align("day").addMinute(new Date().getTimezoneOffset()), S;
                        this._removeOverlay(),
                        this.value = k,
                        this.time = v,
                        S = k.format(o.format, a),
                        o.showTime && (S += ` ${this._correctTime(v)}`),
                        e.val(S),
                        e.trigger("change"),
                        d.removeClass("open open-up"),
                        d.hide(),
                        this._fireEvent("change", {
                            val: this.value.val(),
                            time: this.time
                        }),
                        this._fireEvent("day-click", {
                            sel: B,
                            day: x,
                            time: v,
                            el: E
                        }),
                        this._fireEvent("picker-change", {
                            val: this.value.val(),
                            time: this.time
                        })
                    }
                    ,
                    onTimeChange: B => {
                        let x;
                        this.time = B,
                        this.value || (this.value = datetime()),
                        x = this.value.format(o.format, this.locale),
                        o.showTime && (x += ` ${this._correctTime(B)}`),
                        e.val(x),
                        this._fireEvent("change", {
                            val: this.value.val(),
                            time: this.time
                        }),
                        this._fireEvent("picker-change", {
                            val: this.value.val(),
                            time: this.time
                        })
                    }
                    ,
                    onMonthChange: o.onMonthChange,
                    onYearChange: o.onYearChange
                }),
                this.calendar = d,
                o.clearButton === !0 && (c = r("<button>").addClass("button input-clear-button").attr("tabindex", -1).attr("type", "button").html(o.clearButtonIcon),
                c.appendTo(s)),
                r("<button>").addClass("button input-calendar-button").attr("tabindex", -1).attr("type", "button").html(o.calendarButtonIcon).appendTo(s),
                o.prepend !== "" && r("<div>").html(o.prepend).addClass("prepend").addClass(o.clsPrepend).appendTo(i),
                e.attr("dir") === "rtl" && i.addClass("rtl"),
                String(o.size).indexOf("%") > -1 ? i.css({
                    width: o.size
                }) : i.css({
                    width: `${Number.parseInt(o.size)}px`
                }),
                e[0].className = "",
                o.copyInlineStyles === !0 && r.each(t.utils.getInlineStyles(e), (B, x) => {
                    i.css(B, x)
                }
                ),
                i.addClass(o.clsPicker),
                e.addClass(o.clsInput),
                o.dialogOverlay === !0 && (this.overlay = this._overlay()),
                o.dialogMode === !0 ? i.addClass("dialog-mode") : t.utils.media(`(max-width: ${o.dialogPoint}px)`) && (i.addClass("dialog-mode"),
                this.calendar.addClass("dialog-mode")),
                o.label) {
                    let B = r("<label>").addClass("label-for-input").addClass(o.clsLabel).html(o.label).insertBefore(i);
                    if (e.attr("id"))
                        B.attr("for", e.attr("id"));
                    else {
                        let x = Hooks.useId(e[0]);
                        B.attr("for", x),
                        e.attr("id", x)
                    }
                    e.attr("dir") === "rtl" && B.addClass("rtl")
                }
                e.is(":disabled") ? this.disable() : this.enable()
            },
            _createEvents: function() {
                let e = this.element
                  , o = this.options
                  , a = e.parent()
                  , i = a.find(".input-clear-button")
                  , s = this.calendar
                  , c = t.getPlugin(s[0], "calendar")
                  , d = this.calendar;
                r(globalThis).on(t.events.resize, () => {
                    o.dialogMode !== !0 && (t.utils.media(`(max-width: ${o.dialogPoint}px)`) ? (a.addClass("dialog-mode"),
                    d.appendTo("body").addClass("dialog-mode")) : (a.removeClass("dialog-mode"),
                    d.appendTo(a).removeClass("dialog-mode")))
                }
                , {
                    ns: this.id
                }),
                i.length > 0 && i.on(t.events.click, p => {
                    e.val("").trigger("change").blur(),
                    this.value = null,
                    p.preventDefault(),
                    p.stopPropagation()
                }
                ),
                a.on(t.events.click, "button, input", p => {
                    let m = this.value ? this.value : datetime().addDay(1).align("day").addMinute(new Date().getTimezoneOffset())
                      , g = m.format("YYYY/MM/DD");
                    m.align("day"),
                    s.hasClass("open") === !1 && s.hasClass("open-up") === !1 ? (r(".calendar-picker .calendar").removeClass("open open-up").hide(),
                    c.setPreset([g]),
                    c.setShow(m),
                    a.hasClass("dialog-mode") && this.overlay.appendTo(r("body")),
                    s.addClass("open"),
                    o.openMode === "auto" ? (t.utils.inViewport(s[0]) || s.addClass("open-up"),
                    t.utils.inViewport(s[0]) || s.removeClass("open-up")) : o.openMode === "up" && s.addClass("open-up"),
                    this._fireEvent("calendar-show", {
                        calendar: s
                    })) : (this._removeOverlay(),
                    s.removeClass("open open-up"),
                    this._fireEvent("calendar-hide", {
                        calendar: s
                    })),
                    p.preventDefault(),
                    p.stopPropagation()
                }
                ),
                e.on(t.events.blur, () => {
                    a.removeClass("focused")
                }
                ),
                e.on(t.events.focus, () => {
                    a.addClass("focused")
                }
                ),
                e.on(t.events.change, () => {
                    t.utils.exec(o.onChange, [this.value.val()], e[0])
                }
                ),
                a.on(t.events.click, p => {
                    p.preventDefault(),
                    p.stopPropagation()
                }
                )
            },
            _overlay: function() {
                let e = this.options
                  , o = r("<div>");
                return o.addClass("overlay for-calendar-picker").addClass(e.clsOverlay),
                e.overlayColor === "transparent" ? o.addClass("transparent") : o.css({
                    background: Farbe.Routines.toRGBA(e.overlayColor, e.overlayAlpha)
                }),
                o
            },
            _removeOverlay: () => {
                r("body").find(".overlay.for-calendar-picker").remove()
            }
            ,
            clear: function() {
                this.value = datetime(),
                this.time = [datetime().hour(), datetime().minute()],
                this.element.val("")
            },
            val: function(e, o) {
                let a = this.element, i = this.options, s;
                if (arguments.length === 0 || t.utils.isNull(e))
                    return {
                        date: this.value.val(),
                        time: this.time
                    };
                if (e === "")
                    return this.clear();
                o && (i.inputFormat = o);
                let c = e.split(" ");
                this.value = i.inputFormat ? Datetime.from(c[0], i.inputFormat, this.locale) : datetime(c[0]),
                c[1] && (this.time = c[1].trim().split(":")),
                this.value.align("day"),
                t.getPlugin(this.calendar, "calendar").setTime(this.time),
                s = this.value.format(i.format),
                i.showTime && this.time && s && (s += ` ${this._correctTime(this.time)}`),
                a.val(s),
                a.trigger("change")
            },
            disable: function() {
                this.element.data("disabled", !0),
                this.element.parent().addClass("disabled")
            },
            enable: function() {
                this.element.data("disabled", !1),
                this.element.parent().removeClass("disabled")
            },
            toggleState: function() {
                this.elem.disabled ? this.disable() : this.enable()
            },
            getTime: function(e=!1) {
                let o = Str.lpad(this.time[0], "0", 2)
                  , a = Str.lpad(this.time[1], "0", 2);
                return e ? `${o}:${a}` : this.time
            },
            changeAttribute: function(e, o) {
                let a = t.getPlugin(this.calendar[0], "calendar");
                switch (e) {
                case "value":
                    this.val(o);
                    break;
                case "disabled":
                    this.toggleState();
                    break;
                case "data-special":
                    a.setSpecial(o);
                    break;
                case "data-exclude":
                    a.setExclude(o);
                    break;
                case "data-min-date":
                    a.setMinDate(o);
                    break;
                case "data-max-date":
                    a.setMaxDate(o);
                    break;
                case "data-value":
                    this.val(o);
                    break
                }
            },
            destroy: function() {
                let e = this.element
                  , o = this.options
                  , a = e.parent()
                  , i = a.find(".input-clear-button");
                r(globalThis).off(t.events.resize, {
                    ns: this.id
                }),
                i.off(t.events.click),
                a.off(t.events.click, "button, input"),
                e.off(t.events.blur),
                e.off(t.events.focus),
                e.off(t.events.change),
                t.getPlugin(this.calendar, "calendar").destroy(),
                o.label && a.prev("label").remove(),
                a.remove()
            }
        }),
        r(document).on(t.events.click, ".overlay.for-calendar-picker", function() {
            r(this).remove(),
            r(".calendar-for-picker.open").removeClass("open open-up")
        }),
        r(document).on(t.events.click, () => {
            r(".calendar-picker .calendar").removeClass("open open-up")
        }
        )
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = ["slide", "slide-v", "fade", "switch", "zoom", "swirl"]
          , e = {
            carouselDeferred: 0,
            autoStart: !1,
            width: "100%",
            height: "16/9",
            effect: l[0],
            effectFunc: "linear",
            direction: "left",
            duration: 300,
            period: 5e3,
            stopOnMouse: !0,
            controls: !0,
            controlsOnMouse: !1,
            controlsOutside: !1,
            controlPrev: "&larr;",
            controlNext: "&rarr;",
            bullets: !0,
            bulletsStyle: "square",
            bulletsSize: "default",
            bulletsPosition: "default",
            clsCarousel: "",
            clsSlides: "",
            clsSlide: "",
            clsControls: "",
            clsControlNext: "",
            clsControlPrev: "",
            clsBullets: "",
            clsBullet: "",
            clsBulletOn: "",
            clsThumbOn: "",
            onStop: t.noop,
            onStart: t.noop,
            onPlay: t.noop,
            onSlideClick: t.noop,
            onBulletClick: t.noop,
            onThumbClick: t.noop,
            onMouseEnter: t.noop,
            onMouseLeave: t.noop,
            onNextClick: t.noop,
            onPrevClick: t.noop,
            onSlideShow: t.noop,
            onSlideHide: t.noop,
            onCarouselCreate: t.noop
        };
        t.carouselSetup = o => {
            e = r.extend({}, e, o)
        }
        ,
        typeof globalThis.metroCarouselSetup != "undefined" && t.carouselSetup(globalThis.metroCarouselSetup),
        t.Component("carousel", {
            init: function(o, a) {
                return this._super(a, o, e, {
                    height: 0,
                    width: 0,
                    slides: [],
                    current: null,
                    currentIndex: null,
                    dir: "left",
                    interval: !1,
                    isAnimate: !1,
                    id: null
                }),
                this
            },
            _create: function() {
                let o = this.element
                  , a = this.options
                  , i = o.find(".slide")
                  , s = o.find(".slides");
                this.id = Hooks.useId(this.elem),
                this.dir = this.options.direction,
                o.addClass("carousel").addClass(a.clsCarousel),
                o.css({
                    maxWidth: a.width
                }),
                a.controlsOutside === !0 && o.addClass("controls-outside"),
                s.length === 0 && (s = r("<div>").addClass("slides").appendTo(o),
                i.appendTo(s)),
                i.addClass(a.clsSlides),
                i.length > 0 && (this._createSlides(),
                this._createControls(),
                this._createBullets(),
                this._createEvents(),
                this._resize(),
                a.controlsOnMouse === !0 && (o.find("[class*=carousel-switch]").fadeOut(0),
                o.find(".carousel-bullets").fadeOut(0)),
                a.autoStart === !0 ? this._start() : this._fireEvent("slide-show", {
                    current: this.slides[this.currentIndex][0],
                    prev: void 0
                })),
                this._fireEvent("carousel-create", {
                    element: o
                })
            },
            _start: function() {
                let o = this
                  , a = this.element
                  , i = this.options
                  , s = i.period
                  , c = this.slides[this.currentIndex];
                c.data("period") !== void 0 && (s = c.data("period")),
                !(this.slides.length <= 1) && (this.interval === !1 && (this.interval = setTimeout(function() {
                    let p = i.direction === "left" ? "next" : "prior";
                    o._slideTo(p, !0)
                }, s)),
                this._fireEvent("start", {
                    element: a
                }))
            },
            _stop: function() {
                clearInterval(this.interval),
                this.interval = !1
            },
            _resize: function() {
                let o = this.element, a = this.options, i = o.outerWidth(), s, c = [];
                ["16/9", "21/9", "4/3"].indexOf(a.height) > -1 ? s = t.utils.aspectRatioH(i, a.height) : String(a.height).indexOf("@") > -1 ? (c = a.height.substring(1).toArray("|"),
                r.each(c, function() {
                    let d = this.toArray(",");
                    globalThis.matchMedia(d[0]).matches && (["16/9", "21/9", "4/3"].indexOf(d[1]) > -1 ? s = t.utils.aspectRatioH(i, d[1]) : s = Number.parseInt(d[1]))
                })) : s = Number.parseInt(a.height),
                o.css({
                    height: s
                })
            },
            _createSlides: function() {
                let o = this
                  , a = this.element
                  , i = this.options
                  , s = a.find(".slide");
                r.each(s, function(c) {
                    let d = r(this);
                    if (d.data("cover") !== void 0 && d.css({
                        backgroundImage: `url(${d.data("cover")})`
                    }),
                    c !== 0)
                        switch (i.effect) {
                        case "switch":
                        case "slide":
                            d.css("left", "100%");
                            break;
                        case "slide-v":
                            d.css("top", "100%");
                            break;
                        case "fade":
                        case "zoom":
                        case "swirl":
                            d.css("opacity", "0");
                            break
                        }
                    else
                        d.addClass("active-slide");
                    d.addClass(i.clsSlide),
                    o.slides.push(d)
                }),
                this.currentIndex = 0,
                this.current = this.slides[this.currentIndex]
            },
            _createControls: function() {
                let o = this.element, a = this.options, i, s;
                a.controls !== !1 && (i = r("<span>").addClass("carousel-switch-next").addClass(a.clsControls).addClass(a.clsControlNext).html("<div></div>"),
                s = r("<span>").addClass("carousel-switch-prev").addClass(a.clsControls).addClass(a.clsControlPrev).html("<div></div>"),
                a.controlNext && i.children("div").html(a.controlNext),
                a.controlPrev && s.children("div").html(a.controlPrev),
                i.appendTo(o),
                s.appendTo(o))
            },
            _createBullets: function() {
                let o = this.element, a = this.options, i, s;
                if (a.bullets !== !1) {
                    for (i = r("<div>").addClass("carousel-bullets").addClass(`${a.bulletsSize}-size`).addClass(`bullet-style-${a.bulletsStyle}`).addClass(a.clsBullets),
                    a.bulletsPosition === "default" || a.bulletsPosition === "center" ? i.addClass("flex-justify-center") : a.bulletsPosition === "left" ? i.addClass("flex-justify-start") : i.addClass("flex-justify-end"),
                    s = 0; s < this.slides.length; s++) {
                        let c = r("<span>").addClass("carousel-bullet").addClass(a.clsBullet).data("slide", s);
                        s === 0 && c.addClass("bullet-on").addClass(a.clsBulletOn),
                        c.appendTo(i)
                    }
                    i.appendTo(o)
                }
            },
            _createEvents: function() {
                let o = this
                  , a = this.element
                  , i = this.options;
                a.on(t.events.click, ".carousel-bullet", function() {
                    let s = r(this);
                    o.isAnimate === !1 && (o._slideToSlide(s.data("slide")),
                    o._fireEvent("bullet-click", {
                        bullet: s
                    }))
                }),
                a.on(t.events.click, ".carousel-switch-next", function() {
                    o.isAnimate === !1 && (o._slideTo("next", !1),
                    o._fireEvent("next-click", {
                        button: this
                    }))
                }),
                a.on(t.events.click, ".carousel-switch-prev", function() {
                    o.isAnimate === !1 && (o._slideTo("prev", !1),
                    o._fireEvent("prev-click", {
                        button: this
                    }))
                }),
                i.stopOnMouse === !0 && i.autoStart === !0 && (a.on(t.events.enter, () => {
                    o._stop(),
                    o._fireEvent("mouse-enter", {
                        element: a
                    }, !1, !0)
                }
                ),
                a.on(t.events.leave, () => {
                    o._start(),
                    o._fireEvent("mouse-leave", {
                        element: a
                    }, !1, !0)
                }
                )),
                i.controlsOnMouse === !0 && (a.on(t.events.enter, () => {
                    a.find("[class*=carousel-switch]").fadeIn(),
                    a.find(".carousel-bullets").fadeIn()
                }
                ),
                a.on(t.events.leave, () => {
                    a.find("[class*=carousel-switch]").fadeOut(),
                    a.find(".carousel-bullets").fadeOut()
                }
                )),
                a.on(t.events.click, ".slide", function() {
                    let s = r(this);
                    o._fireEvent("slide-click", {
                        slide: s
                    })
                }),
                r(globalThis).on(t.events.resize, () => {
                    o._resize()
                }
                , {
                    ns: this.id
                })
            },
            _slideToSlide: function(o) {
                let a = this.element
                  , i = this.options;
                if (this.slides[o] === void 0 || this.currentIndex === o)
                    return;
                let s = o > this.currentIndex ? "next" : "prev"
                  , c = this.slides[this.currentIndex]
                  , d = this.slides[o];
                this.currentIndex = o,
                this._effect(c, d, i.effect, s),
                a.find(".carousel-bullet").removeClass("bullet-on").removeClass(i.clsBulletOn),
                a.find(`.carousel-bullet:nth-child(${this.currentIndex + 1})`).addClass("bullet-on").addClass(i.clsBulletOn)
            },
            _slideTo: function(o="next", a=!1) {
                let i = this.element
                  , s = this.options
                  , c = this.slides[this.currentIndex];
                o === "next" ? (this.currentIndex++,
                this.currentIndex >= this.slides.length && (this.currentIndex = 0)) : (this.currentIndex--,
                this.currentIndex < 0 && (this.currentIndex = this.slides.length - 1));
                let d = this.slides[this.currentIndex];
                this._effect(c, d, s.effect, o, a),
                i.find(".carousel-bullet").removeClass("bullet-on").removeClass(s.clsBulletOn),
                i.find(`.carousel-bullet:nth-child(${this.currentIndex + 1})`).addClass("bullet-on").addClass(s.clsBulletOn)
            },
            _effect: function(o, a, i, s, c) {
                let d = this, p = this.options, m = p.duration, g, f = p.effectFunc, u = p.period, h = (b, w, Q, C) => {
                    t.Effects[b](w[0], Q[0], C)
                }
                ;
                a.data("duration") !== void 0 && (m = a.data("duration")),
                a.data("effectFunc") !== void 0 && (f = a.data("effectFunc")),
                i === "switch" && (m = 0),
                o.stop(!0),
                a.stop(!0),
                this.isAnimate = !0,
                setTimeout( () => {
                    d.isAnimate = !1
                }
                , m + 100),
                i === "slide" ? g = s === "next" ? "slideLeft" : "slideRight" : i === "slide-v" ? g = s === "next" ? "slideUp" : "slideDown" : g = i,
                l.includes(i) || (g = "switch"),
                h(g, o, a, {
                    duration: m,
                    ease: f
                }),
                o.removeClass("active-slide"),
                a.addClass("active-slide"),
                setTimeout( () => {
                    d._fireEvent("slide-show", {
                        current: a[0],
                        prev: o[0]
                    })
                }
                , m),
                setTimeout( () => {
                    d._fireEvent("slide-hide", {
                        current: o[0],
                        next: a[0]
                    })
                }
                , m),
                c === !0 && (a.data("period") !== void 0 && (u = a.data("period")),
                this.interval = setTimeout(function() {
                    let w = p.direction === "left" ? "next" : "prior";
                    d._slideTo(w, !0)
                }, u))
            },
            toSlide: function(o) {
                this._slideToSlide(o)
            },
            next: function() {
                this._slideTo("next")
            },
            prev: function() {
                this._slideTo("prev")
            },
            stop: function() {
                clearInterval(this.interval),
                this._fireEvent("stop")
            },
            play: function() {
                this._start(),
                this._fireEvent("play")
            },
            setEffect: function(o) {
                let a = this.element
                  , i = this.options
                  , s = a.find(".slide");
                l.includes(o) && (i.effect = o,
                s.removeStyleProperty("transform").css({
                    top: 0,
                    left: 0
                }))
            },
            changeAttribute: function(o, a) {
                o === "data-effect" && this.setEffect(a)
            },
            destroy: function() {
                let o = this.element
                  , a = this.options;
                return o.off(t.events.click, ".carousel-bullet"),
                o.off(t.events.click, ".carousel-switch-next"),
                o.off(t.events.click, ".carousel-switch-prev"),
                a.stopOnMouse === !0 && a.autoStart === !0 && (o.off(t.events.enter),
                o.off(t.events.leave)),
                a.controlsOnMouse === !0 && (o.off(t.events.enter),
                o.off(t.events.leave)),
                o.off(t.events.click, ".slide"),
                r(globalThis).off(t.events.resize, {
                    ns: this.id
                }),
                o
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            charmsDeferred: 0,
            position: "right",
            opacity: 1,
            clsCharms: "",
            onCharmCreate: t.noop,
            onOpen: t.noop,
            onClose: t.noop,
            onToggle: t.noop
        };
        t.charmsSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroCharmsSetup != "undefined" && t.charmsSetup(globalThis.metroCharmsSetup),
        t.Component("charms", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    origin: {
                        background: ""
                    }
                }),
                this
            },
            _create: function() {
                let e = this.element;
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("charm-create", {
                    element: e
                })
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options;
                e.addClass("charms").addClass(`${o.position}-side`).addClass(o.clsCharms),
                this.origin.background = e.css("background-color"),
                e.css({
                    backgroundColor: Farbe.Routines.toRGBA(t.utils.getStyleOne(e, "background-color"), o.opacity)
                })
            },
            _createEvents: () => {}
            ,
            open: function() {
                this.element.addClass("open"),
                this._fireEvent("open")
            },
            close: function() {
                this.element.removeClass("open"),
                this._fireEvent("close")
            },
            toggle: function() {
                this.element.hasClass("open") === !0 ? this.close() : this.open(),
                this._fireEvent("toggle")
            },
            opacity: function(e) {
                let o = this.element
                  , a = this.options;
                if (e === void 0)
                    return a.opacity;
                let i = Math.abs(Number.parseFloat(e));
                i < 0 || i > 1 || (a.opacity = i,
                o.css({
                    backgroundColor: Farbe.Routines.toRGBA(t.utils.getStyleOne(o, "background-color"), i)
                }))
            },
            changeOpacity: function() {
                let e = this.element;
                this.opacity(e.attr("data-opacity"))
            },
            changeAttribute: function(e) {
                switch (e) {
                case "data-opacity":
                    this.changeOpacity();
                    break
                }
            },
            destroy: function() {
                return this.element
            }
        }),
        t.charms = {
            check: e => t.utils.isMetroObject(e, "charms") === !1 ? (console.warn("Element is not a charms component"),
            !1) : !0,
            isOpen: function(e) {
                if (this.check(e) !== !1)
                    return r(e).hasClass("open")
            },
            open: function(e) {
                this.check(e) !== !1 && t.getPlugin(e, "charms").open()
            },
            close: function(e) {
                this.check(e) !== !1 && t.getPlugin(e, "charms").close()
            },
            toggle: function(e) {
                this.check(e) !== !1 && t.getPlugin(e, "charms").toggle()
            },
            closeAll: () => {
                r("[data-role*=charms]").each(function() {
                    t.getPlugin(this, "charms").close()
                })
            }
            ,
            opacity: function(e, o) {
                this.check(e) !== !1 && t.getPlugin(e, "charms").opacity(o)
            }
        }
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            label: "",
            textareaDeferred: 0,
            charsCounter: null,
            charsCounterTemplate: "$1",
            defaultValue: "",
            prepend: "",
            append: "",
            clearButton: !0,
            clearButtonIcon: "\u274C",
            btnSize: "default",
            autoSize: !0,
            maxHeight: 0,
            initialHeight: 100,
            clsPrepend: "",
            clsAppend: "",
            clsComponent: "",
            clsTextarea: "",
            clsLabel: "",
            onChange: t.noop,
            onTextareaCreate: t.noop
        };
        t.textareaSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroTextareaSetup != "undefined" && t.textareaSetup(globalThis.metroTextareaSetup),
        t.Component("textarea", {
            init: function(e, o) {
                return this._super(o, e, l),
                this
            },
            _create: function() {
                let e = this.element;
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("textarea-create", {
                    element: e
                })
            },
            _createStructure: function() {
                let e = this.element, o = this.elem, a = this.options, i, s = r("<textarea>").addClass("fake-textarea");
                e.id() || e.attr("id", Hooks.useId(e[0]));
                let c = e.wrap("<div>").addClass(`textarea ${e[0].className}`);
                if (c.attr("id", Hooks.useId(c[0])),
                s.appendTo(c),
                a.clearButton !== !1 && !e[0].readOnly && (i = r("<button>").addClass("button square input-clear-button").attr("tabindex", -1).attr("type", "button").html(a.clearButtonIcon),
                i.appendTo(c)),
                e.attr("dir") === "rtl" && c.addClass("rtl").attr("dir", "rtl"),
                a.prepend !== "" && r("<div>").html(a.prepend).addClass("prepend").addClass(a.clsPrepend).appendTo(c),
                a.append !== "") {
                    let d = r("<div>").html(a.append);
                    d.addClass("append").addClass(a.clsAppend).appendTo(c),
                    i.css({
                        right: d.outerWidth() + 4
                    })
                }
                o.className = "",
                t.utils.isValue(a.defaultValue) && e.val().trim() === "" && e.val(a.defaultValue),
                c.addClass(a.clsComponent),
                e.addClass(a.clsTextarea),
                this._addLabel(a.label, c, {
                    className: a.clsLabel,
                    id: e.attr("id"),
                    dir: e.attr("dir")
                }),
                e.is(":disabled") ? this.disable() : this.enable(),
                s.val(e.val()),
                c.find("textarea").css({
                    minHeight: a.initialHeight + "px"
                }),
                a.autoSize === !0 && (c.addClass("autosize no-scroll-vertical"),
                setTimeout( () => {
                    this.resize()
                }
                , 100)),
                this.component = c
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options
                  , i = o.closest(".textarea")
                  , s = i.find(".fake-textarea")
                  , c = r(a.charsCounter);
                i.on(t.events.click, ".input-clear-button", d => {
                    o.val(t.utils.isValue(a.defaultValue) ? a.defaultValue : "").trigger("change").trigger("keyup").focus(),
                    d.preventDefault(),
                    d.stopPropagation()
                }
                ),
                a.autoSize && o.on(`${t.events.inputchange} ${t.events.keyup}`, function() {
                    s.val(this.value),
                    e.resize()
                }),
                o.on(t.events.blur, () => {
                    i.removeClass("focused")
                }
                ),
                o.on(t.events.focus, () => {
                    i.addClass("focused")
                }
                ),
                o.on(t.events.keyup, () => {
                    t.utils.isValue(a.charsCounter) && c.length > 0 && (c[0].tagName === "INPUT" ? c.val(e.length()) : c.html(a.charsCounterTemplate.replace("$1", e.length()))),
                    e._fireEvent("change", {
                        val: o.val(),
                        length: e.length()
                    })
                }
                )
            },
            resize: function() {
                let e = this.element
                  , o = this.options
                  , a = e.closest(".textarea")
                  , i = a.find(".fake-textarea")
                  , s = i[0].scrollHeight;
                if (o.maxHeight && s >= o.maxHeight) {
                    a.removeClass("no-scroll-vertical");
                    return
                }
                o.maxHeight && s < o.maxHeight && a.addClass("no-scroll-vertical"),
                i[0].style.cssText = "height:auto;",
                i[0].style.cssText = `height:${i[0].scrollHeight}px; min-height:${o.initialHeight}px;`,
                e[0].style.cssText = `height:${i[0].scrollHeight}px; min-height:${o.initialHeight}px;`
            },
            clear: function() {
                this.element.val("").trigger("change").trigger("keyup").focus()
            },
            toDefault: function() {
                this.element.val(t.utils.isValue(this.options.defaultValue) ? this.options.defaultValue : "").trigger("change").trigger("keyup").focus()
            },
            length: function() {
                return this.elem.value.split("").length
            },
            disable: function() {
                this.element.data("disabled", !0),
                this.element.parent().addClass("disabled")
            },
            enable: function() {
                this.element.data("disabled", !1),
                this.element.parent().removeClass("disabled")
            },
            toggleState: function() {
                this.elem.disabled ? this.disable() : this.enable()
            },
            changeAttribute: function(e) {
                switch (e) {
                case "disabled":
                    this.toggleState();
                    break
                }
            },
            destroy: function() {
                let e = this.element
                  , o = this.options;
                e.closest(".textarea").off(t.events.click, ".input-clear-button"),
                o.autoSize && e.off(`${t.events.inputchange} ${t.events.keyup}`),
                e.off(t.events.blur),
                e.off(t.events.focus),
                e.off(t.events.keyup),
                o.label && this.component.prev("label").remove(),
                this.component.remove()
            }
        })
    }
    )(Metro, Dom);
    var Ko = {
        "o/": "\u{1F44B}",
        "</3": "\u{1F494}",
        "<3": "\u{1F497}",
        "8-D": "\u{1F601}",
        "8D": "\u{1F601}",
        ":-D": "\u{1F601}",
        ":-3": "\u{1F601}",
        ":3": "\u{1F601}",
        ":D": "\u{1F601}",
        "B^D": "\u{1F601}",
        "X-D": "\u{1F601}",
        XD: "\u{1F601}",
        "x-D": "\u{1F601}",
        xD: "\u{1F601}",
        ":')": "\u{1F602}",
        ":'-)": "\u{1F602}",
        ":-))": "\u{1F603}",
        "8)": "\u{1F604}",
        ":)": "\u{1F60A}",
        ":-)": "\u{1F604}",
        ":]": "\u{1F604}",
        ":^)": "\u{1F604}",
        ":c)": "\u{1F604}",
        ":o)": "\u{1F604}",
        ":}": "\u{1F604}",
        ":\u3063)": "\u{1F604}",
        "0:)": "\u{1F607}",
        "0:-)": "\u{1F607}",
        "0:-3": "\u{1F607}",
        "0:3": "\u{1F607}",
        "0;^)": "\u{1F607}",
        "O:-)": "\u{1F607}",
        "3:)": "\u{1F608}",
        "3:-)": "\u{1F608}",
        "}:)": "\u{1F608}",
        "}:-)": "\u{1F608}",
        "*)": "\u{1F609}",
        "*-)": "\u{1F609}",
        ":-,": "\u{1F609}",
        ";)": "\u{1F609}",
        ";-)": "\u{1F609}",
        ";-]": "\u{1F609}",
        ";D": "\u{1F609}",
        ";]": "\u{1F609}",
        ";^)": "\u{1F609}",
        ":-|": "\u{1F610}",
        ":|": "\u{1F610}",
        ":(": "\u{1F61E}",
        ":-(": "\u{1F612}",
        ":-<": "\u{1F612}",
        ":-[": "\u{1F612}",
        ":-c": "\u{1F612}",
        ":<": "\u{1F612}",
        ":[": "\u{1F612}",
        ":c": "\u{1F612}",
        ":{": "\u{1F612}",
        ":\u3063C": "\u{1F612}",
        "%)": "\u{1F616}",
        "%-)": "\u{1F616}",
        ":-P": "\u{1F61C}",
        ":-b": "\u{1F61C}",
        ":-p": "\u{1F61C}",
        ":-\xDE": "\u{1F61C}",
        ":-\xFE": "\u{1F61C}",
        ":P": "\u{1F61C}",
        ":b": "\u{1F61C}",
        ":p": "\u{1F61C}",
        ":\xDE": "\u{1F61C}",
        ":\xFE": "\u{1F61C}",
        ";(": "\u{1F61C}",
        "X-P": "\u{1F61C}",
        XP: "\u{1F61C}",
        "d:": "\u{1F61C}",
        "x-p": "\u{1F61C}",
        xp: "\u{1F61C}",
        ":-||": "\u{1F620}",
        ":@": "\u{1F620}",
        ":-.": "\u{1F621}",
        ":-/": "\u{1F621}",
        ":/": "\u{1F610}",
        ":L": "\u{1F621}",
        ":S": "\u{1F621}",
        ":\\": "\u{1F621}",
        ":'(": "\u{1F622}",
        ":'-(": "\u{1F622}",
        "^5": "\u{1F624}",
        "^<_<": "\u{1F624}",
        "o/\\o": "\u{1F624}",
        "|-O": "\u{1F62B}",
        "|;-)": "\u{1F62B}",
        ":###..": "\u{1F630}",
        ":#": "\u{1F605}",
        ":-###..": "\u{1F630}",
        "D-':": "\u{1F631}",
        D8: "\u{1F631}",
        "D:": "\u{1F631}",
        "D:<": "\u{1F631}",
        "D;": "\u{1F631}",
        DX: "\u{1F631}",
        "v.v": "\u{1F631}",
        "8-0": "\u{1F632}",
        ":-O": "\u{1F632}",
        ":-o": "\u{1F632}",
        ":O": "\u{1F632}",
        ":o": "\u{1F632}",
        "O-O": "\u{1F632}",
        O_O: "\u{1F632}",
        O_o: "\u{1F632}",
        "o-o": "\u{1F632}",
        o_O: "\u{1F632}",
        o_o: "\u{1F632}",
        ":$": "\u{1F633}",
        "#-)": "\u{1F635}",
        ":&": "\u{1F636}",
        ":-#": "\u{1F636}",
        ":-&": "\u{1F636}",
        ":-X": "\u{1F636}",
        ":X": "\u{1F636}",
        ":-J": "\u{1F63C}",
        ":*": "\u{1F618}",
        ":^*": "\u{1F63D}",
        \u0CA0_\u0CA0: "\u{1F645}",
        "*\\0/*": "\u{1F646}",
        "\\o/": "\u{1F646}",
        ":>": "\u{1F604}",
        ">.<": "\u{1F621}",
        ">:(": "\u{1F620}",
        ">:)": "\u{1F608}",
        ">:-)": "\u{1F608}",
        ">:/": "\u{1F621}",
        ">:O": "\u{1F632}",
        ">:P": "\u{1F61C}",
        ">:[": "\u{1F612}",
        ">:\\": "\u{1F621}",
        ">;)": "\u{1F608}",
        ">_>^": "\u{1F624}",
        "^^": "\u{1F60A}",
        ":sweat:": "\u{1F605}",
        ":smile:": "\u{1F604}",
        ":laughing:": "\u{1F606}",
        ":blush:": "\u{1F60A}",
        ":smiley:": "\u{1F603}",
        ":relaxed:": "\u263A\uFE0F",
        ":smirk:": "\u{1F60F}",
        ":heart_eyes:": "\u{1F60D}",
        ":kissing_heart:": "\u{1F618}",
        ":kissing_closed_eyes:": "\u{1F61A}",
        ":flushed:": "\u{1F633}",
        ":relieved:": "\u{1F60C}",
        ":satisfied:": "\u{1F606}",
        ":grin:": "\u{1F601}",
        ":wink:": "\u{1F609}",
        ":stuck_out_tongue_winking_eye:": "\u{1F61C}",
        ":stuck_out_tongue_closed_eyes:": "\u{1F61D}",
        ":grinning:": "\u{1F600}",
        ":kissing:": "\u{1F617}",
        ":kissing_smiling_eyes:": "\u{1F619}",
        ":stuck_out_tongue:": "\u{1F61B}",
        ":sleeping:": "\u{1F634}",
        ":worried:": "\u{1F61F}",
        ":frowning:": "\u{1F626}",
        ":anguished:": "\u{1F627}",
        ":open_mouth:": "\u{1F62E}",
        ":grimacing:": "\u{1F62C}",
        ":confused:": "\u{1F615}",
        ":hushed:": "\u{1F62F}",
        ":expressionless:": "\u{1F611}",
        ":unamused:": "\u{1F612}",
        ":sweat_smile:": "\u{1F605}",
        ":disappointed_relieved:": "\u{1F625}",
        ":weary:": "\u{1F629}",
        ":pensive:": "\u{1F614}",
        ":disappointed:": "\u{1F61E}",
        ":confounded:": "\u{1F616}",
        ":fearful:": "\u{1F628}",
        ":cold_sweat:": "\u{1F630}",
        ":persevere:": "\u{1F623}",
        ":cry:": "\u{1F622}",
        ":sob:": "\u{1F62D}",
        ":joy:": "\u{1F602}",
        ":astonished:": "\u{1F632}",
        ":scream:": "\u{1F631}",
        ":tired_face:": "\u{1F62B}",
        ":angry:": "\u{1F620}",
        ":rage:": "\u{1F621}",
        ":triumph:": "\u{1F624}",
        ":sleepy:": "\u{1F62A}",
        ":yum:": "\u{1F60B}",
        ":mask:": "\u{1F637}",
        ":sunglasses:": "\u{1F60E}",
        ":dizzy_face:": "\u{1F635}",
        ":imp:": "\u{1F47F}",
        ":smiling_imp:": "\u{1F608}",
        ":neutral_face:": "\u{1F610}",
        ":no_mouth:": "\u{1F636}",
        ":innocent:": "\u{1F607}",
        ":alien:": "\u{1F47D}",
        ":yellow_heart:": "\u{1F49B}",
        ":blue_heart:": "\u{1F499}",
        ":purple_heart:": "\u{1F49C}",
        ":heart:": "\u2764\uFE0F",
        ":green_heart:": "\u{1F49A}",
        ":broken_heart:": "\u{1F494}",
        ":heartbeat:": "\u{1F493}",
        ":heartpulse:": "\u{1F497}",
        ":two_hearts:": "\u{1F495}",
        ":revolving_hearts:": "\u{1F49E}",
        ":cupid:": "\u{1F498}",
        ":sparkling_heart:": "\u{1F496}",
        ":sparkles:": "\u2728",
        ":star:": "\u2B50",
        ":star2:": "\u{1F31F}",
        ":dizzy:": "\u{1F4AB}",
        ":boom:": "\u{1F4A5}",
        ":collision:": "\u{1F4A5}",
        ":anger:": "\u{1F4A2}",
        ":exclamation:": "\u2757",
        ":question:": "\u2753",
        ":grey_exclamation:": "\u2755",
        ":grey_question:": "\u2754",
        ":zzz:": "\u{1F4A4}",
        ":dash:": "\u{1F4A8}",
        ":sweat_drops:": "\u{1F4A6}",
        ":notes:": "\u{1F3B6}",
        ":musical_note:": "\u{1F3B5}",
        ":fire:": "\u{1F525}",
        ":hankey:": "\u{1F4A9}",
        ":poop:": "\u{1F4A9}",
        ":shit:": "\u{1F4A9}",
        ":+1:": "\u{1F44D}",
        ":thumbsup:": "\u{1F44D}",
        ":-1:": "\u{1F44E}",
        ":thumbsdown:": "\u{1F44E}",
        ":ok_hand:": "\u{1F44C}",
        ":punch:": "\u{1F44A}",
        ":facepunch:": "\u{1F44A}",
        ":fist:": "\u270A",
        ":v:": "\u270C\uFE0F",
        ":wave:": "\u{1F44B}",
        ":hand:": "\u270B",
        ":raised_hand:": "\u270B",
        ":open_hands:": "\u{1F450}",
        ":point_up:": "\u261D\uFE0F",
        ":point_down:": "\u{1F447}",
        ":point_left:": "\u{1F448}",
        ":point_right:": "\u{1F449}",
        ":raised_hands:": "\u{1F64C}",
        ":pray:": "\u{1F64F}",
        ":point_up_2:": "\u{1F446}",
        ":clap:": "\u{1F44F}",
        ":muscle:": "\u{1F4AA}",
        ":metal:": "\u{1F918}",
        ":fu:": "\u{1F595}",
        ":walking:": "\u{1F6B6}",
        ":runner:": "\u{1F3C3}",
        ":running:": "\u{1F3C3}",
        ":couple:": "\u{1F46B}",
        ":family:": "\u{1F46A}",
        ":two_men_holding_hands:": "\u{1F46C}",
        ":two_women_holding_hands:": "\u{1F46D}",
        ":dancer:": "\u{1F483}",
        ":dancers:": "\u{1F46F}",
        ":no_good:": "\u{1F645}",
        ":information_desk_person:": "\u{1F481}",
        ":raising_hand:": "\u{1F64B}",
        ":bride_with_veil:": "\u{1F470}",
        ":bow:": "\u{1F647}",
        ":couplekiss:": "\u{1F48F}",
        ":couple_with_heart:": "\u{1F491}",
        ":massage:": "\u{1F486}",
        ":haircut:": "\u{1F487}",
        ":nail_care:": "\u{1F485}",
        ":boy:": "\u{1F466}",
        ":girl:": "\u{1F467}",
        ":woman:": "\u{1F469}",
        ":man:": "\u{1F468}",
        ":baby:": "\u{1F476}",
        ":older_woman:": "\u{1F475}",
        ":older_man:": "\u{1F474}",
        ":man_with_gua_pi_mao:": "\u{1F472}",
        ":construction_worker:": "\u{1F477}",
        ":cop:": "\u{1F46E}",
        ":angel:": "\u{1F47C}",
        ":princess:": "\u{1F478}",
        ":smiley_cat:": "\u{1F63A}",
        ":smile_cat:": "\u{1F638}",
        ":heart_eyes_cat:": "\u{1F63B}",
        ":kissing_cat:": "\u{1F63D}",
        ":smirk_cat:": "\u{1F63C}",
        ":scream_cat:": "\u{1F640}",
        ":crying_cat_face:": "\u{1F63F}",
        ":joy_cat:": "\u{1F639}",
        ":pouting_cat:": "\u{1F63E}",
        ":japanese_ogre:": "\u{1F479}",
        ":japanese_goblin:": "\u{1F47A}",
        ":see_no_evil:": "\u{1F648}",
        ":hear_no_evil:": "\u{1F649}",
        ":speak_no_evil:": "\u{1F64A}",
        ":skull:": "\u{1F480}",
        ":feet:": "\u{1F43E}",
        ":lips:": "\u{1F444}",
        ":kiss:": "\u{1F48B}",
        ":droplet:": "\u{1F4A7}",
        ":ear:": "\u{1F442}",
        ":eyes:": "\u{1F440}",
        ":nose:": "\u{1F443}",
        ":tongue:": "\u{1F445}",
        ":love_letter:": "\u{1F48C}",
        ":bust_in_silhouette:": "\u{1F464}",
        ":busts_in_silhouette:": "\u{1F465}",
        ":speech_balloon:": "\u{1F4AC}",
        ":thought_balloon:": "\u{1F4AD}",
        ":sunny:": "\u2600\uFE0F",
        ":umbrella:": "\u2614",
        ":cloud:": "\u2601\uFE0F",
        ":snowflake:": "\u2744\uFE0F",
        ":snowman:": "\u26C4",
        ":zap:": "\u26A1",
        ":cyclone:": "\u{1F300}",
        ":foggy:": "\u{1F301}",
        ":ocean:": "\u{1F30A}",
        ":cat:": "\u{1F431}",
        ":dog:": "\u{1F436}",
        ":mouse:": "\u{1F42D}",
        ":hamster:": "\u{1F439}",
        ":rabbit:": "\u{1F430}",
        ":wolf:": "\u{1F43A}",
        ":frog:": "\u{1F438}",
        ":tiger:": "\u{1F42F}",
        ":koala:": "\u{1F428}",
        ":bear:": "\u{1F43B}",
        ":pig:": "\u{1F437}",
        ":pig_nose:": "\u{1F43D}",
        ":cow:": "\u{1F42E}",
        ":boar:": "\u{1F417}",
        ":monkey_face:": "\u{1F435}",
        ":monkey:": "\u{1F412}",
        ":horse:": "\u{1F434}",
        ":racehorse:": "\u{1F40E}",
        ":camel:": "\u{1F42B}",
        ":sheep:": "\u{1F411}",
        ":elephant:": "\u{1F418}",
        ":panda_face:": "\u{1F43C}",
        ":snake:": "\u{1F40D}",
        ":bird:": "\u{1F426}",
        ":baby_chick:": "\u{1F424}",
        ":hatched_chick:": "\u{1F425}",
        ":hatching_chick:": "\u{1F423}",
        ":chicken:": "\u{1F414}",
        ":penguin:": "\u{1F427}",
        ":turtle:": "\u{1F422}",
        ":bug:": "\u{1F41B}",
        ":honeybee:": "\u{1F41D}",
        ":ant:": "\u{1F41C}",
        ":beetle:": "\u{1F41E}",
        ":snail:": "\u{1F40C}",
        ":octopus:": "\u{1F419}",
        ":tropical_fish:": "\u{1F420}",
        ":fish:": "\u{1F41F}",
        ":whale:": "\u{1F433}",
        ":whale2:": "\u{1F40B}",
        ":dolphin:": "\u{1F42C}",
        ":cow2:": "\u{1F404}",
        ":ram:": "\u{1F40F}",
        ":rat:": "\u{1F400}",
        ":water_buffalo:": "\u{1F403}",
        ":tiger2:": "\u{1F405}",
        ":rabbit2:": "\u{1F407}",
        ":dragon:": "\u{1F409}",
        ":goat:": "\u{1F410}",
        ":rooster:": "\u{1F413}",
        ":dog2:": "\u{1F415}",
        ":pig2:": "\u{1F416}",
        ":mouse2:": "\u{1F401}",
        ":ox:": "\u{1F402}",
        ":dragon_face:": "\u{1F432}",
        ":blowfish:": "\u{1F421}",
        ":crocodile:": "\u{1F40A}",
        ":dromedary_camel:": "\u{1F42A}",
        ":leopard:": "\u{1F406}",
        ":cat2:": "\u{1F408}",
        ":poodle:": "\u{1F429}",
        ":paw_prints:": "\u{1F43E}",
        ":bouquet:": "\u{1F490}",
        ":cherry_blossom:": "\u{1F338}",
        ":tulip:": "\u{1F337}",
        ":four_leaf_clover:": "\u{1F340}",
        ":rose:": "\u{1F339}",
        ":sunflower:": "\u{1F33B}",
        ":hibiscus:": "\u{1F33A}",
        ":maple_leaf:": "\u{1F341}",
        ":leaves:": "\u{1F343}",
        ":fallen_leaf:": "\u{1F342}",
        ":herb:": "\u{1F33F}",
        ":mushroom:": "\u{1F344}",
        ":cactus:": "\u{1F335}",
        ":palm_tree:": "\u{1F334}",
        ":evergreen_tree:": "\u{1F332}",
        ":deciduous_tree:": "\u{1F333}",
        ":chestnut:": "\u{1F330}",
        ":seedling:": "\u{1F331}",
        ":blossom:": "\u{1F33C}",
        ":ear_of_rice:": "\u{1F33E}",
        ":shell:": "\u{1F41A}",
        ":globe_with_meridians:": "\u{1F310}",
        ":sun_with_face:": "\u{1F31E}",
        ":full_moon_with_face:": "\u{1F31D}",
        ":new_moon_with_face:": "\u{1F31A}",
        ":new_moon:": "\u{1F311}",
        ":waxing_crescent_moon:": "\u{1F312}",
        ":first_quarter_moon:": "\u{1F313}",
        ":waxing_gibbous_moon:": "\u{1F314}",
        ":full_moon:": "\u{1F315}",
        ":waning_gibbous_moon:": "\u{1F316}",
        ":last_quarter_moon:": "\u{1F317}",
        ":waning_crescent_moon:": "\u{1F318}",
        ":last_quarter_moon_with_face:": "\u{1F31C}",
        ":first_quarter_moon_with_face:": "\u{1F31B}",
        ":moon:": "\u{1F314}",
        ":earth_africa:": "\u{1F30D}",
        ":earth_americas:": "\u{1F30E}",
        ":earth_asia:": "\u{1F30F}",
        ":volcano:": "\u{1F30B}",
        ":milky_way:": "\u{1F30C}",
        ":partly_sunny:": "\u26C5",
        ":bamboo:": "\u{1F38D}",
        ":gift_heart:": "\u{1F49D}",
        ":dolls:": "\u{1F38E}",
        ":school_satchel:": "\u{1F392}",
        ":mortar_board:": "\u{1F393}",
        ":flags:": "\u{1F38F}",
        ":fireworks:": "\u{1F386}",
        ":sparkler:": "\u{1F387}",
        ":wind_chime:": "\u{1F390}",
        ":rice_scene:": "\u{1F391}",
        ":jack_o_lantern:": "\u{1F383}",
        ":ghost:": "\u{1F47B}",
        ":santa:": "\u{1F385}",
        ":christmas_tree:": "\u{1F384}",
        ":gift:": "\u{1F381}",
        ":bell:": "\u{1F514}",
        ":no_bell:": "\u{1F515}",
        ":tanabata_tree:": "\u{1F38B}",
        ":tada:": "\u{1F389}",
        ":confetti_ball:": "\u{1F38A}",
        ":balloon:": "\u{1F388}",
        ":crystal_ball:": "\u{1F52E}",
        ":cd:": "\u{1F4BF}",
        ":dvd:": "\u{1F4C0}",
        ":floppy_disk:": "\u{1F4BE}",
        ":camera:": "\u{1F4F7}",
        ":video_camera:": "\u{1F4F9}",
        ":movie_camera:": "\u{1F3A5}",
        ":computer:": "\u{1F4BB}",
        ":tv:": "\u{1F4FA}",
        ":iphone:": "\u{1F4F1}",
        ":phone:": "\u260E\uFE0F",
        ":telephone:": "\u260E\uFE0F",
        ":telephone_receiver:": "\u{1F4DE}",
        ":pager:": "\u{1F4DF}",
        ":fax:": "\u{1F4E0}",
        ":minidisc:": "\u{1F4BD}",
        ":vhs:": "\u{1F4FC}",
        ":sound:": "\u{1F509}",
        ":speaker:": "\u{1F508}",
        ":mute:": "\u{1F507}",
        ":loudspeaker:": "\u{1F4E2}",
        ":mega:": "\u{1F4E3}",
        ":hourglass:": "\u231B",
        ":hourglass_flowing_sand:": "\u23F3",
        ":alarm_clock:": "\u23F0",
        ":watch:": "\u231A",
        ":radio:": "\u{1F4FB}",
        ":satellite:": "\u{1F4E1}",
        ":loop:": "\u27BF",
        ":mag:": "\u{1F50D}",
        ":mag_right:": "\u{1F50E}",
        ":unlock:": "\u{1F513}",
        ":lock:": "\u{1F512}",
        ":lock_with_ink_pen:": "\u{1F50F}",
        ":closed_lock_with_key:": "\u{1F510}",
        ":key:": "\u{1F511}",
        ":bulb:": "\u{1F4A1}",
        ":flashlight:": "\u{1F526}",
        ":high_brightness:": "\u{1F506}",
        ":low_brightness:": "\u{1F505}",
        ":electric_plug:": "\u{1F50C}",
        ":battery:": "\u{1F50B}",
        ":calling:": "\u{1F4F2}",
        ":email:": "\u2709\uFE0F",
        ":mailbox:": "\u{1F4EB}",
        ":postbox:": "\u{1F4EE}",
        ":bath:": "\u{1F6C0}",
        ":bathtub:": "\u{1F6C1}",
        ":shower:": "\u{1F6BF}",
        ":toilet:": "\u{1F6BD}",
        ":wrench:": "\u{1F527}",
        ":nut_and_bolt:": "\u{1F529}",
        ":hammer:": "\u{1F528}",
        ":seat:": "\u{1F4BA}",
        ":moneybag:": "\u{1F4B0}",
        ":yen:": "\u{1F4B4}",
        ":dollar:": "\u{1F4B5}",
        ":pound:": "\u{1F4B7}",
        ":euro:": "\u{1F4B6}",
        ":credit_card:": "\u{1F4B3}",
        ":money_with_wings:": "\u{1F4B8}",
        ":e-mail:": "\u{1F4E7}",
        ":inbox_tray:": "\u{1F4E5}",
        ":outbox_tray:": "\u{1F4E4}",
        ":envelope:": "\u2709\uFE0F",
        ":incoming_envelope:": "\u{1F4E8}",
        ":postal_horn:": "\u{1F4EF}",
        ":mailbox_closed:": "\u{1F4EA}",
        ":mailbox_with_mail:": "\u{1F4EC}",
        ":mailbox_with_no_mail:": "\u{1F4ED}",
        ":package:": "\u{1F4E6}",
        ":door:": "\u{1F6AA}",
        ":smoking:": "\u{1F6AC}",
        ":bomb:": "\u{1F4A3}",
        ":gun:": "\u{1F52B}",
        ":hocho:": "\u{1F52A}",
        ":pill:": "\u{1F48A}",
        ":syringe:": "\u{1F489}",
        ":page_facing_up:": "\u{1F4C4}",
        ":page_with_curl:": "\u{1F4C3}",
        ":bookmark_tabs:": "\u{1F4D1}",
        ":bar_chart:": "\u{1F4CA}",
        ":chart_with_upwards_trend:": "\u{1F4C8}",
        ":chart_with_downwards_trend:": "\u{1F4C9}",
        ":scroll:": "\u{1F4DC}",
        ":clipboard:": "\u{1F4CB}",
        ":calendar:": "\u{1F4C6}",
        ":date:": "\u{1F4C5}",
        ":card_index:": "\u{1F4C7}",
        ":file_folder:": "\u{1F4C1}",
        ":open_file_folder:": "\u{1F4C2}",
        ":scissors:": "\u2702\uFE0F",
        ":pushpin:": "\u{1F4CC}",
        ":paperclip:": "\u{1F4CE}",
        ":black_nib:": "\u2712\uFE0F",
        ":pencil2:": "\u270F\uFE0F",
        ":straight_ruler:": "\u{1F4CF}",
        ":triangular_ruler:": "\u{1F4D0}",
        ":closed_book:": "\u{1F4D5}",
        ":green_book:": "\u{1F4D7}",
        ":blue_book:": "\u{1F4D8}",
        ":orange_book:": "\u{1F4D9}",
        ":notebook:": "\u{1F4D3}",
        ":notebook_with_decorative_cover:": "\u{1F4D4}",
        ":ledger:": "\u{1F4D2}",
        ":books:": "\u{1F4DA}",
        ":bookmark:": "\u{1F516}",
        ":name_badge:": "\u{1F4DB}",
        ":microscope:": "\u{1F52C}",
        ":telescope:": "\u{1F52D}",
        ":newspaper:": "\u{1F4F0}",
        ":football:": "\u{1F3C8}",
        ":basketball:": "\u{1F3C0}",
        ":soccer:": "\u26BD",
        ":baseball:": "\u26BE",
        ":tennis:": "\u{1F3BE}",
        ":8ball:": "\u{1F3B1}",
        ":rugby_football:": "\u{1F3C9}",
        ":bowling:": "\u{1F3B3}",
        ":golf:": "\u26F3",
        ":mountain_bicyclist:": "\u{1F6B5}",
        ":bicyclist:": "\u{1F6B4}",
        ":horse_racing:": "\u{1F3C7}",
        ":snowboarder:": "\u{1F3C2}",
        ":swimmer:": "\u{1F3CA}",
        ":surfer:": "\u{1F3C4}",
        ":ski:": "\u{1F3BF}",
        ":spades:": "\u2660\uFE0F",
        ":hearts:": "\u2665\uFE0F",
        ":clubs:": "\u2663\uFE0F",
        ":diamonds:": "\u2666\uFE0F",
        ":gem:": "\u{1F48E}",
        ":ring:": "\u{1F48D}",
        ":trophy:": "\u{1F3C6}",
        ":musical_score:": "\u{1F3BC}",
        ":musical_keyboard:": "\u{1F3B9}",
        ":violin:": "\u{1F3BB}",
        ":space_invader:": "\u{1F47E}",
        ":video_game:": "\u{1F3AE}",
        ":black_joker:": "\u{1F0CF}",
        ":flower_playing_cards:": "\u{1F3B4}",
        ":game_die:": "\u{1F3B2}",
        ":dart:": "\u{1F3AF}",
        ":mahjong:": "\u{1F004}",
        ":clapper:": "\u{1F3AC}",
        ":memo:": "\u{1F4DD}",
        ":pencil:": "\u{1F4DD}",
        ":book:": "\u{1F4D6}",
        ":art:": "\u{1F3A8}",
        ":microphone:": "\u{1F3A4}",
        ":headphones:": "\u{1F3A7}",
        ":trumpet:": "\u{1F3BA}",
        ":saxophone:": "\u{1F3B7}",
        ":guitar:": "\u{1F3B8}",
        ":shoe:": "\u{1F45E}",
        ":sandal:": "\u{1F461}",
        ":high_heel:": "\u{1F460}",
        ":lipstick:": "\u{1F484}",
        ":boot:": "\u{1F462}",
        ":shirt:": "\u{1F455}",
        ":tshirt:": "\u{1F455}",
        ":necktie:": "\u{1F454}",
        ":womans_clothes:": "\u{1F45A}",
        ":dress:": "\u{1F457}",
        ":running_shirt_with_sash:": "\u{1F3BD}",
        ":jeans:": "\u{1F456}",
        ":kimono:": "\u{1F458}",
        ":bikini:": "\u{1F459}",
        ":ribbon:": "\u{1F380}",
        ":tophat:": "\u{1F3A9}",
        ":crown:": "\u{1F451}",
        ":womans_hat:": "\u{1F452}",
        ":mans_shoe:": "\u{1F45E}",
        ":closed_umbrella:": "\u{1F302}",
        ":briefcase:": "\u{1F4BC}",
        ":handbag:": "\u{1F45C}",
        ":pouch:": "\u{1F45D}",
        ":purse:": "\u{1F45B}",
        ":eyeglasses:": "\u{1F453}",
        ":fishing_pole_and_fish:": "\u{1F3A3}",
        ":coffee:": "\u2615",
        ":tea:": "\u{1F375}",
        ":sake:": "\u{1F376}",
        ":baby_bottle:": "\u{1F37C}",
        ":beer:": "\u{1F37A}",
        ":beers:": "\u{1F37B}",
        ":cocktail:": "\u{1F378}",
        ":tropical_drink:": "\u{1F379}",
        ":wine_glass:": "\u{1F377}",
        ":fork_and_knife:": "\u{1F374}",
        ":pizza:": "\u{1F355}",
        ":hamburger:": "\u{1F354}",
        ":fries:": "\u{1F35F}",
        ":poultry_leg:": "\u{1F357}",
        ":meat_on_bone:": "\u{1F356}",
        ":spaghetti:": "\u{1F35D}",
        ":curry:": "\u{1F35B}",
        ":fried_shrimp:": "\u{1F364}",
        ":bento:": "\u{1F371}",
        ":sushi:": "\u{1F363}",
        ":fish_cake:": "\u{1F365}",
        ":rice_ball:": "\u{1F359}",
        ":rice_cracker:": "\u{1F358}",
        ":rice:": "\u{1F35A}",
        ":ramen:": "\u{1F35C}",
        ":stew:": "\u{1F372}",
        ":oden:": "\u{1F362}",
        ":dango:": "\u{1F361}",
        ":egg:": "\u{1F95A}",
        ":bread:": "\u{1F35E}",
        ":doughnut:": "\u{1F369}",
        ":custard:": "\u{1F36E}",
        ":icecream:": "\u{1F366}",
        ":ice_cream:": "\u{1F368}",
        ":shaved_ice:": "\u{1F367}",
        ":birthday:": "\u{1F382}",
        ":cake:": "\u{1F370}",
        ":cookie:": "\u{1F36A}",
        ":chocolate_bar:": "\u{1F36B}",
        ":candy:": "\u{1F36C}",
        ":lollipop:": "\u{1F36D}",
        ":honey_pot:": "\u{1F36F}",
        ":apple:": "\u{1F34E}",
        ":green_apple:": "\u{1F34F}",
        ":tangerine:": "\u{1F34A}",
        ":lemon:": "\u{1F34B}",
        ":cherries:": "\u{1F352}",
        ":grapes:": "\u{1F347}",
        ":watermelon:": "\u{1F349}",
        ":strawberry:": "\u{1F353}",
        ":peach:": "\u{1F351}",
        ":melon:": "\u{1F348}",
        ":banana:": "\u{1F34C}",
        ":pear:": "\u{1F350}",
        ":pineapple:": "\u{1F34D}",
        ":sweet_potato:": "\u{1F360}",
        ":eggplant:": "\u{1F346}",
        ":tomato:": "\u{1F345}",
        ":corn:": "\u{1F33D}",
        ":house:": "\u{1F3E0}",
        ":house_with_garden:": "\u{1F3E1}",
        ":school:": "\u{1F3EB}",
        ":office:": "\u{1F3E2}",
        ":post_office:": "\u{1F3E3}",
        ":hospital:": "\u{1F3E5}",
        ":bank:": "\u{1F3E6}",
        ":convenience_store:": "\u{1F3EA}",
        ":love_hotel:": "\u{1F3E9}",
        ":hotel:": "\u{1F3E8}",
        ":wedding:": "\u{1F492}",
        ":church:": "\u26EA",
        ":department_store:": "\u{1F3EC}",
        ":european_post_office:": "\u{1F3E4}",
        ":city_sunrise:": "\u{1F307}",
        ":city_sunset:": "\u{1F306}",
        ":japanese_castle:": "\u{1F3EF}",
        ":european_castle:": "\u{1F3F0}",
        ":tent:": "\u26FA",
        ":factory:": "\u{1F3ED}",
        ":tokyo_tower:": "\u{1F5FC}",
        ":japan:": "\u{1F5FE}",
        ":mount_fuji:": "\u{1F5FB}",
        ":sunrise_over_mountains:": "\u{1F304}",
        ":sunrise:": "\u{1F305}",
        ":stars:": "\u{1F320}",
        ":statue_of_liberty:": "\u{1F5FD}",
        ":bridge_at_night:": "\u{1F309}",
        ":carousel_horse:": "\u{1F3A0}",
        ":rainbow:": "\u{1F308}",
        ":ferris_wheel:": "\u{1F3A1}",
        ":fountain:": "\u26F2",
        ":roller_coaster:": "\u{1F3A2}",
        ":ship:": "\u{1F6A2}",
        ":speedboat:": "\u{1F6A4}",
        ":boat:": "\u26F5",
        ":sailboat:": "\u26F5",
        ":rowboat:": "\u{1F6A3}",
        ":anchor:": "\u2693",
        ":rocket:": "\u{1F680}",
        ":airplane:": "\u2708\uFE0F",
        ":helicopter:": "\u{1F681}",
        ":steam_locomotive:": "\u{1F682}",
        ":tram:": "\u{1F68A}",
        ":mountain_railway:": "\u{1F69E}",
        ":bike:": "\u{1F6B2}",
        ":aerial_tramway:": "\u{1F6A1}",
        ":suspension_railway:": "\u{1F69F}",
        ":mountain_cableway:": "\u{1F6A0}",
        ":tractor:": "\u{1F69C}",
        ":blue_car:": "\u{1F699}",
        ":oncoming_automobile:": "\u{1F698}",
        ":car:": "\u{1F697}",
        ":red_car:": "\u{1F697}",
        ":taxi:": "\u{1F695}",
        ":oncoming_taxi:": "\u{1F696}",
        ":articulated_lorry:": "\u{1F69B}",
        ":bus:": "\u{1F68C}",
        ":oncoming_bus:": "\u{1F68D}",
        ":rotating_light:": "\u{1F6A8}",
        ":police_car:": "\u{1F693}",
        ":oncoming_police_car:": "\u{1F694}",
        ":fire_engine:": "\u{1F692}",
        ":ambulance:": "\u{1F691}",
        ":minibus:": "\u{1F690}",
        ":truck:": "\u{1F69A}",
        ":train:": "\u{1F68B}",
        ":station:": "\u{1F689}",
        ":train2:": "\u{1F686}",
        ":bullettrain_front:": "\u{1F685}",
        ":bullettrain_side:": "\u{1F684}",
        ":light_rail:": "\u{1F688}",
        ":monorail:": "\u{1F69D}",
        ":railway_car:": "\u{1F683}",
        ":trolleybus:": "\u{1F68E}",
        ":ticket:": "\u{1F3AB}",
        ":fuelpump:": "\u26FD",
        ":vertical_traffic_light:": "\u{1F6A6}",
        ":traffic_light:": "\u{1F6A5}",
        ":warning:": "\u26A0\uFE0F",
        ":construction:": "\u{1F6A7}",
        ":beginner:": "\u{1F530}",
        ":atm:": "\u{1F3E7}",
        ":slot_machine:": "\u{1F3B0}",
        ":busstop:": "\u{1F68F}",
        ":barber:": "\u{1F488}",
        ":hotsprings:": "\u2668\uFE0F",
        ":checkered_flag:": "\u{1F3C1}",
        ":crossed_flags:": "\u{1F38C}",
        ":izakaya_lantern:": "\u{1F3EE}",
        ":moyai:": "\u{1F5FF}",
        ":circus_tent:": "\u{1F3AA}",
        ":performing_arts:": "\u{1F3AD}",
        ":round_pushpin:": "\u{1F4CD}",
        ":triangular_flag_on_post:": "\u{1F6A9}",
        ":jp:": "\u{1F1EF}\u{1F1F5}",
        ":kr:": "\u{1F1F0}\u{1F1F7}",
        ":cn:": "\u{1F1E8}\u{1F1F3}",
        ":us:": "\u{1F1FA}\u{1F1F8}",
        ":fr:": "\u{1F1EB}\u{1F1F7}",
        ":es:": "\u{1F1EA}\u{1F1F8}",
        ":it:": "\u{1F1EE}\u{1F1F9}",
        ":ru:": "\u{1F1F7}\u{1F1FA}",
        ":gb:": "\u{1F1EC}\u{1F1E7}",
        ":uk:": "\u{1F1EC}\u{1F1E7}",
        ":de:": "\u{1F1E9}\u{1F1EA}",
        ":one:": "1\uFE0F\u20E3",
        ":two:": "2\uFE0F\u20E3",
        ":three:": "3\uFE0F\u20E3",
        ":four:": "4\uFE0F\u20E3",
        ":five:": "5\uFE0F\u20E3",
        ":six:": "6\uFE0F\u20E3",
        ":seven:": "7\uFE0F\u20E3",
        ":eight:": "8\uFE0F\u20E3",
        ":nine:": "9\uFE0F\u20E3",
        ":keycap_ten:": "\u{1F51F}",
        ":1234:": "\u{1F522}",
        ":zero:": "0\uFE0F\u20E3",
        ":hash:": "#\uFE0F\u20E3",
        ":symbols:": "\u{1F523}",
        ":arrow_backward:": "\u25C0\uFE0F",
        ":arrow_down:": "\u2B07\uFE0F",
        ":arrow_forward:": "\u25B6\uFE0F",
        ":arrow_left:": "\u2B05\uFE0F",
        ":capital_abcd:": "\u{1F520}",
        ":abcd:": "\u{1F521}",
        ":abc:": "\u{1F524}",
        ":arrow_lower_left:": "\u2199\uFE0F",
        ":arrow_lower_right:": "\u2198\uFE0F",
        ":arrow_right:": "\u27A1\uFE0F",
        ":arrow_up:": "\u2B06\uFE0F",
        ":arrow_upper_left:": "\u2196\uFE0F",
        ":arrow_upper_right:": "\u2197\uFE0F",
        ":arrow_double_down:": "\u23EC",
        ":arrow_double_up:": "\u23EB",
        ":arrow_down_small:": "\u{1F53D}",
        ":arrow_heading_down:": "\u2935\uFE0F",
        ":arrow_heading_up:": "\u2934\uFE0F",
        ":leftwards_arrow_with_hook:": "\u21A9\uFE0F",
        ":arrow_right_hook:": "\u21AA\uFE0F",
        ":left_right_arrow:": "\u2194\uFE0F",
        ":arrow_up_down:": "\u2195\uFE0F",
        ":arrow_up_small:": "\u{1F53C}",
        ":arrows_clockwise:": "\u{1F503}",
        ":arrows_counterclockwise:": "\u{1F504}",
        ":rewind:": "\u23EA",
        ":fast_forward:": "\u23E9",
        ":information_source:": "\u2139\uFE0F",
        ":ok:": "\u{1F197}",
        ":twisted_rightwards_arrows:": "\u{1F500}",
        ":repeat:": "\u{1F501}",
        ":repeat_one:": "\u{1F502}",
        ":new:": "\u{1F195}",
        ":top:": "\u{1F51D}",
        ":up:": "\u{1F199}",
        ":cool:": "\u{1F192}",
        ":free:": "\u{1F193}",
        ":ng:": "\u{1F196}",
        ":cinema:": "\u{1F3A6}",
        ":koko:": "\u{1F201}",
        ":signal_strength:": "\u{1F4F6}",
        ":u5272:": "\u{1F239}",
        ":u5408:": "\u{1F234}",
        ":u55b6:": "\u{1F23A}",
        ":u6307:": "\u{1F22F}",
        ":u6708:": "\u{1F237}\uFE0F",
        ":u6709:": "\u{1F236}",
        ":u6e80:": "\u{1F235}",
        ":u7121:": "\u{1F21A}",
        ":u7533:": "\u{1F238}",
        ":u7a7a:": "\u{1F233}",
        ":u7981:": "\u{1F232}",
        ":sa:": "\u{1F202}\uFE0F",
        ":restroom:": "\u{1F6BB}",
        ":mens:": "\u{1F6B9}",
        ":womens:": "\u{1F6BA}",
        ":baby_symbol:": "\u{1F6BC}",
        ":no_smoking:": "\u{1F6AD}",
        ":parking:": "\u{1F17F}\uFE0F",
        ":wheelchair:": "\u267F",
        ":metro:": "\u{1F687}",
        ":baggage_claim:": "\u{1F6C4}",
        ":accept:": "\u{1F251}",
        ":wc:": "\u{1F6BE}",
        ":potable_water:": "\u{1F6B0}",
        ":put_litter_in_its_place:": "\u{1F6AE}",
        ":secret:": "\u3299\uFE0F",
        ":congratulations:": "\u3297\uFE0F",
        ":m:": "\u24C2\uFE0F",
        ":passport_control:": "\u{1F6C2}",
        ":left_luggage:": "\u{1F6C5}",
        ":customs:": "\u{1F6C3}",
        ":ideograph_advantage:": "\u{1F250}",
        ":cl:": "\u{1F191}",
        ":sos:": "\u{1F198}",
        ":id:": "\u{1F194}",
        ":no_entry_sign:": "\u{1F6AB}",
        ":underage:": "\u{1F51E}",
        ":no_mobile_phones:": "\u{1F4F5}",
        ":do_not_litter:": "\u{1F6AF}",
        ":non-potable_water:": "\u{1F6B1}",
        ":no_bicycles:": "\u{1F6B3}",
        ":no_pedestrians:": "\u{1F6B7}",
        ":children_crossing:": "\u{1F6B8}",
        ":no_entry:": "\u26D4",
        ":eight_spoked_asterisk:": "\u2733\uFE0F",
        ":sparkle:": "\u2747\uFE0F",
        ":eight_pointed_black_star:": "\u2734\uFE0F",
        ":heart_decoration:": "\u{1F49F}",
        ":vs:": "\u{1F19A}",
        ":vibration_mode:": "\u{1F4F3}",
        ":mobile_phone_off:": "\u{1F4F4}",
        ":chart:": "\u{1F4B9}",
        ":currency_exchange:": "\u{1F4B1}",
        ":aries:": "\u2648",
        ":taurus:": "\u2649",
        ":gemini:": "\u264A",
        ":cancer:": "\u264B",
        ":leo:": "\u264C",
        ":virgo:": "\u264D",
        ":libra:": "\u264E",
        ":scorpius:": "\u264F",
        ":sagittarius:": "\u2650",
        ":capricorn:": "\u2651",
        ":aquarius:": "\u2652",
        ":pisces:": "\u2653",
        ":ophiuchus:": "\u26CE",
        ":six_pointed_star:": "\u{1F52F}",
        ":negative_squared_cross_mark:": "\u274E",
        ":a:": "\u{1F170}\uFE0F",
        ":b:": "\u{1F171}\uFE0F",
        ":ab:": "\u{1F18E}",
        ":o2:": "\u{1F17E}\uFE0F",
        ":diamond_shape_with_a_dot_inside:": "\u{1F4A0}",
        ":recycle:": "\u267B\uFE0F",
        ":end:": "\u{1F51A}",
        ":back:": "\u{1F519}",
        ":on:": "\u{1F51B}",
        ":soon:": "\u{1F51C}",
        ":clock1:": "\u{1F550}",
        ":clock130:": "\u{1F55C}",
        ":clock10:": "\u{1F559}",
        ":clock1030:": "\u{1F565}",
        ":clock11:": "\u{1F55A}",
        ":clock1130:": "\u{1F566}",
        ":clock12:": "\u{1F55B}",
        ":clock1230:": "\u{1F567}",
        ":clock2:": "\u{1F551}",
        ":clock230:": "\u{1F55D}",
        ":clock3:": "\u{1F552}",
        ":clock330:": "\u{1F55E}",
        ":clock4:": "\u{1F553}",
        ":clock430:": "\u{1F55F}",
        ":clock5:": "\u{1F554}",
        ":clock530:": "\u{1F560}",
        ":clock6:": "\u{1F555}",
        ":clock630:": "\u{1F561}",
        ":clock7:": "\u{1F556}",
        ":clock730:": "\u{1F562}",
        ":clock8:": "\u{1F557}",
        ":clock830:": "\u{1F563}",
        ":clock9:": "\u{1F558}",
        ":clock930:": "\u{1F564}",
        ":heavy_dollar_sign:": "\u{1F4B2}",
        ":copyright:": "\xA9\uFE0F",
        ":registered:": "\xAE\uFE0F",
        ":tm:": "\u2122\uFE0F",
        ":x:": "\u274C",
        ":heavy_exclamation_mark:": "\u2757",
        ":bangbang:": "\u203C\uFE0F",
        ":interrobang:": "\u2049\uFE0F",
        ":o:": "\u2B55",
        ":heavy_multiplication_x:": "\u2716\uFE0F",
        ":heavy_plus_sign:": "\u2795",
        ":heavy_minus_sign:": "\u2796",
        ":heavy_division_sign:": "\u2797",
        ":white_flower:": "\u{1F4AE}",
        ":100:": "\u{1F4AF}",
        ":heavy_check_mark:": "\u2714\uFE0F",
        ":ballot_box_with_check:": "\u2611\uFE0F",
        ":radio_button:": "\u{1F518}",
        ":link:": "\u{1F517}",
        ":curly_loop:": "\u27B0",
        ":wavy_dash:": "\u3030\uFE0F",
        ":part_alternation_mark:": "\u303D\uFE0F"
    };
    ( (t, r) => {
        "use strict";
        let l = `
	<?xml version="1.0" encoding="utf-8"?>
	<svg width="800px" height="800px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
		<path d="M16.617 14.496a1 1 0 0 1 1.414 1.414l-3.182 3.182a7 7 0 1 1-9.9-9.9l5.658-5.656a5 5 0 1 1 7.07 7.07l-5.656 5.658a3 3 0 0 1-4.243-4.243l4.596-4.596a1 1 0 1 1 1.415 1.414l-4.597 4.596a1 1 0 1 0 1.415 1.414l5.656-5.657a3 3 0 1 0-4.242-4.242l-5.657 5.657a5 5 0 1 0 7.071 7.07l3.182-3.181z"/>
	</svg>
	`
          , e = `
	<?xml version="1.0" encoding="utf-8"?>
	<svg width="800px" height="800px" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
		<g>
			<path fill="none" d="M0 0h24v24H0z"/>
			<path d="M3 13h6v-2H3V1.846a.5.5 0 0 1 .741-.438l18.462 10.154a.5.5 0 0 1 0 .876L3.741 22.592A.5.5 0 0 1 3 22.154V13z"/>
		</g>
	</svg>
	`
          , o = `
	<?xml version="1.0" encoding="utf-8"?>
	<svg width="800px" height="800px" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="none">
		<path fill-rule="evenodd" clip-rule="evenodd" d="M4.111 2.18a7 7 0 1 1 7.778 11.64A7 7 0 0 1 4.11 2.18zm.556 10.809a6 6 0 1 0 6.666-9.978 6 6 0 0 0-6.666 9.978zM6.5 7a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm5 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM8 11a3 3 0 0 1-2.65-1.58l-.87.48a4 4 0 0 0 7.12-.16l-.9-.43A3 3 0 0 1 8 11z"/>
	</svg>
	`
          , a = {
            chatDeferred: 0,
            inputTimeFormat: null,
            timeFormat: "D MMM hh:mm A",
            name: "John Doe",
            avatar: "<span>\u{1F466}</span>",
            welcome: null,
            welcomeAvatar: "<span>\u{1F47D}</span>",
            title: null,
            width: "100%",
            height: "auto",
            messages: null,
            readonly: !1,
            attachAccept: "*",
            scrollSpeed: 200,
            sendMode: "enter",
            buttons: "attach send",
            useEmoji: !0,
            useCode: !0,
            useLink: !0,
            clsChat: "",
            clsName: "",
            clsTime: "",
            clsInput: "",
            clsSendButton: "",
            clsAttachButton: "",
            clsSmileButton: "",
            clsMessageLeft: "default",
            clsMessageRight: "default",
            onMessage: t.noop,
            onSend: t.noop,
            onSendButtonClick: t.noop,
            onChatCreate: t.noop
        };
        t.chatSetup = i => {
            a = r.extend({}, a, i)
        }
        ,
        typeof globalThis.metroChatSetup != "undefined" && t.chatSetup(globalThis.metroChatSetup),
        t.Component("chat", {
            init: function(i, s) {
                return this._super(s, i, a, {
                    input: null,
                    classes: "primary secondary success alert warning yellow info dark light".split(" "),
                    lastMessage: null,
                    attach: null,
                    file: null,
                    locale: null,
                    buttons: []
                }),
                this
            },
            _create: function() {
                let i = this.element;
                this.locale = i.closest("[lang]").attr("lang") || "en",
                this.buttons = this.options.buttons.toArray(" "),
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("chat-create", {
                    element: i
                })
            },
            _createStructure: function() {
                let i = this
                  , s = this.element
                  , c = this.options;
                s.addClass("chat").addClass(c.clsChat),
                this.file = r("<input type='file'>").appendTo(s),
                this.file.attr("accept", c.attachAccept),
                this.file.css({
                    display: "none"
                }),
                s.css({
                    width: c.width,
                    height: c.height
                }),
                t.utils.isValue(c.title) && r("<div>").addClass("title").html(c.title).appendTo(s),
                r("<div>").addClass("messages").appendTo(s);
                let p = r("<div>").addClass("message-input").appendTo(s)
                  , m = r("<textarea>").attr("placeholder", "Write a message...");
                m.appendTo(p),
                t.makePlugin(m[0], "textarea", {
                    clsInput: c.clsInput,
                    initialHeight: 34,
                    clearButton: !1
                }),
                m.addClass("chat-input");
                let g = r("<div>").addClass("buttons").appendTo(p);
                this.buttons.includes("attach") && r("<span>").addClass(`flat js-chat-attach-button ${c.clsAttachButton}`).html(l).appendTo(g),
                this.buttons.includes("send") && r("<span>").addClass(`flat js-chat-send-button ${c.clsSendButton}`).html(e).appendTo(g),
                c.welcome && this.add({
                    text: c.welcome,
                    time: datetime(),
                    position: "left",
                    name: "Chat Bot",
                    avatar: c.welcomeAvatar
                }),
                typeof c.messages == "string" && c.messages && (c.messages = t.utils.isObject(c.messages)),
                c.messages && typeof c.messages == "object" && t.utils.objectLength(c.messages) > 0 && r.each(c.messages, function() {
                    i.add(this)
                }),
                s.find(".message-input")[c.readonly ? "addClass" : "removeClass"]("disabled")
            },
            _createEvents: function() {
                let i = this.element
                  , s = this.options
                  , c = i.find("textarea")
                  , d = () => {
                    let p = `${c.val()}`;
                    if (p.trim() === "" && !this.attach)
                        return !1;
                    let m = {
                        id: t.utils.elementId("chat-message"),
                        name: s.name,
                        avatar: s.avatar,
                        text: p,
                        position: "right",
                        time: datetime(),
                        attach: this.attach ? new File([this.attach],this.attach.name,{
                            type: this.attach.type,
                            lastModified: this.attach.lastModified
                        }) : null
                    };
                    this.add(m),
                    c.val("").trigger("change"),
                    this.attach = null,
                    this._fireEvent("send", {
                        msg: m
                    }),
                    c.focus()
                }
                ;
                i.on(t.events.click, ".js-chat-send-button", () => {
                    d()
                }
                ),
                i.on(t.events.keyup, "textarea", p => {
                    s.sendMode !== "button" && p.keyCode === t.keyCode.ENTER && (s.sendMode === "control+enter" && (p.ctrlKey || p.metaKey) || s.sendMode === "enter" && !p.shiftKey) && d()
                }
                ),
                i.on(t.events.click, ".js-chat-attach-button", () => {
                    this.file[0].click()
                }
                ),
                this.file.on("change", p => {
                    let m = p.target.files[0];
                    m && (this.attach = m,
                    d())
                }
                )
            },
            add: function(i) {
                let s = this.element, c = this.options, d, p, m = s.find(".messages"), g = (B, x) => `<div class="attach-link"><a class="attach" href="${B}" target="_blank" download="${x.name}">${x.name} <span class="reduce-2">(Size: ${Math.round(x.size / ne(1024, 2))} MB)</span></a></div>`, f = B => {
                    if (B === null)
                        return "";
                    let x = URL.createObjectURL(B)
                      , v = '<div class="message-attach">';
                    return B.type.startsWith("image/") ? (v += `<img class="attach" src="${x}" alt="${B.name}">`,
                    v += g(x, B)) : B.type.startsWith("video/") ? (v += `<video class="attach" controls><source src="${x}" type="${B.type}"></video>`,
                    v += g(x, B)) : (B.type.startsWith("audio/") && (v += `<audio class="attach" controls><source src="${x}" type="${B.type}"></audio>`),
                    v += g(x, B)),
                    v += "</div>",
                    v
                }
                , u = c.inputTimeFormat ? Datetime.from(i.time, c.inputTimeFormat, this.locale) : datetime(i.time), h = r("<div>").addClass("message").addClass(i.position).appendTo(m), b = r("<div>").addClass("message-item").appendTo(h);
                if (t.utils.isUrl(i.avatar) || i.avatar.includes("data:image"))
                    d = r("<img>").attr("src", i.avatar).attr("alt", i.avatar).addClass("message-avatar").appendTo(b);
                else if (i.avatar) {
                    let B = r(i.avatar);
                    B.length ? d = B.addClass("message-avatar").appendTo(b) : d = r("<span>").addClass("message-avatar").html(i.avatar).appendTo(b)
                }
                let w = Str.stripTags(i.text);
                if (c.useEmoji) {
                    let B = w.split(" ")
                      , x = [];
                    for (let v of B)
                        v && (v in Ko && (v = Ko[v]),
                        x.push(v));
                    w = x.join(" ")
                }
                c.useCode && (w = w.replace(/```(\w+)?\n?([\s\S]*?)```/g, "<pre><code class='$1'>$2</code></pre>"),
                w = w.replace(/`([^`]+)`/g, "<code>$1</code>")),
                c.useLink && w.startsWith("http") && (w = `<a href="${w}" target="_blank">${w}</a>`),
                p = r("<div>").addClass("message-text").append(r("<div>").addClass("message-text-inner").html(i.attach ? f(i.attach) : w)).appendTo(b);
                let Q = r("<div>").addClass("message-time").addClass(c.clsTime).text(u.format(c.timeFormat)).appendTo(p)
                  , C = r("<div>").addClass("message-sender").addClass(c.clsName).text(i.name).appendTo(p);
                return t.utils.isValue(i.id) && h.attr("id", i.id),
                i.position === "left" && t.utils.isValue(c.clsMessageLeft) && p.addClass(c.clsMessageLeft),
                i.position === "right" && t.utils.isValue(c.clsMessageRight) && p.addClass(c.clsMessageRight),
                this.lastMessage && this.lastMessage.position === i.position && (p.addClass("--next"),
                d.visible(!1),
                C.hide()),
                this._fireEvent("message", {
                    msg: i,
                    el: {
                        message: h,
                        sender: C,
                        time: Q,
                        item: b,
                        avatar: d,
                        text: p
                    }
                }),
                m.animate({
                    draw: {
                        scrollTop: m[0].scrollHeight
                    },
                    dur: c.scrollSpeed
                }),
                this.lastMessage = i,
                this
            },
            addMessages: function(i) {
                let s = this
                  , c = i;
                return typeof c == "string" && c && (c = t.utils.isObject(c)),
                typeof c == "object" && t.utils.objectLength(c) > 0 && r.each(c, function() {
                    s.add(this)
                }),
                this
            },
            delMessage: function(i) {
                return this.element.find(".messages").find(`#${i}`).remove(),
                this
            },
            updMessage: function(i) {
                let s = this.element
                  , c = this.options
                  , d = typeof i == "string" ? i : i.id
                  , p = s.find(".messages").find(`#${d}`);
                if (p.length === 0)
                    return this;
                let m = c.inputTimeFormat ? Datetime.from(i.time, c.inputTimeFormat, this.locale) : datetime(i.time);
                return p.find(".message-text-inner").html(i.text),
                p.find(".message-time").html(m.format(c.timeFormat)),
                this
            },
            clear: function() {
                this.element.find(".messages").html(""),
                this.lastMessage = null
            },
            toggleReadonly: function(i) {
                let s = this.element
                  , c = this.options;
                c.readonly = typeof i == "undefined" ? !c.readonly : i,
                s.find(".message-input")[c.readonly ? "addClass" : "removeClass"]("disabled")
            },
            changeAttribute: function(i) {
                switch (i) {
                case "data-readonly":
                    this.toggleReadonly();
                    break
                }
            },
            destroy: function() {
                let i = this.element
                  , s = i.find(".js-chat-send-button")
                  , c = i.find("input[type=text]");
                return s.off(t.events.click),
                c.off(t.events.keyup),
                i
            }
        }),
        t.defaults.Chat = a
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        globalThis.CHECKBOX_STATE = {
            CHECKED: 1,
            UNCHECKED: -1,
            INDETERMINATE: 0
        };
        let l = {
            checkboxDeferred: 0,
            state: CHECKBOX_STATE.UNCHECKED,
            threeState: !1,
            prepend: "",
            append: "",
            caption: "",
            clsCheckbox: "",
            clsCaption: "",
            clsPrepend: "",
            clsAppend: "",
            onCheckboxCreate: t.noop
        };
        t.metroCheckboxSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroCheckboxSetup != "undefined" && t.metroCheckboxSetup(globalThis.metroCheckboxSetup),
        t.Component("checkbox", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    origin: {
                        className: ""
                    },
                    state: CHECKBOX_STATE.UNCHECKED
                }),
                this
            },
            _create: function() {
                let e = this.options;
                (e.threeState === !1 && e.state === 0 || e.state === "indeterminate") && (e.state = CHECKBOX_STATE.UNCHECKED),
                e.state === CHECKBOX_STATE.UNCHECKED || e.state === "unchecked" ? this.state = CHECKBOX_STATE.UNCHECKED : e.state === 0 || e.state === "indeterminate" ? this.state = CHECKBOX_STATE.INDETERMINATE : this.state = CHECKBOX_STATE.CHECKED,
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("checkbox-create")
            },
            _indeterminate: function(e=!0) {
                let o = this.element;
                o[0].indeterminate = e,
                o.attr("data-indeterminate", e)
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options
                  , a = e.wrap("<label>").addClass("checkbox").addClass(o.clsCheckbox);
                e.attr("type", "checkbox"),
                o.prepend && a.prepend(r("<span>").addClass("caption-prepend").addClass(o.clsPrepend).addClass(o.clsCaption).html(o.prepend)),
                (o.append || o.caption) && a.append(r("<span>").addClass("caption-append").addClass(o.clsAppend).addClass(o.clsCaption).html(o.append || o.caption)),
                e.attr("readonly") !== void 0 && e.on("click", i => {
                    i.preventDefault()
                }
                ),
                this.elem.checked && this.state !== CHECKBOX_STATE.INDETERMINATE && (this.state = !0),
                this._drawState()
            },
            _drawState: function() {
                let e = this.elem;
                this._indeterminate(!1),
                e.checked = this.state !== CHECKBOX_STATE.UNCHECKED,
                this.state === CHECKBOX_STATE.INDETERMINATE && this._indeterminate(!0)
            },
            _createEvents: function() {
                let e = this.element
                  , o = this.options;
                e.on("click", () => {
                    this.state++,
                    this.state === 0 && o.threeState === !1 && (this.state = 1),
                    this.state === 2 && (this.state = -1),
                    this._drawState()
                }
                )
            },
            check: function() {
                this.setCheckState(CHECKBOX_STATE.CHECKED)
            },
            uncheck: function() {
                this.setCheckState(CHECKBOX_STATE.UNCHECKED)
            },
            indeterminate: function() {
                this.setCheckState(CHECKBOX_STATE.INDETERMINATE)
            },
            setCheckState: function(e) {
                return e === -1 || e === "unchecked" ? this.state = CHECKBOX_STATE.UNCHECKED : e === 0 || e === "indeterminate" ? this.state = CHECKBOX_STATE.INDETERMINATE : this.state = CHECKBOX_STATE.CHECKED,
                this._drawState(),
                this
            },
            getCheckState: function(e=!1) {
                if (!e)
                    return this.state;
                switch (this.state) {
                case -1:
                    return "unchecked";
                case 0:
                    return "indeterminate";
                case 1:
                    return "checked"
                }
            },
            toggle: function() {
                this.state++,
                this.state === 2 && (this.state = -1),
                this._drawState()
            },
            changeAttribute: (e, o) => {
                let a = function(i) {
                    this.toggle(i)
                };
                switch (e) {
                case "data-state":
                    a(o);
                    break
                }
            }
            ,
            destroy: function() {
                let e = this.element;
                e.off("click"),
                e.parent().remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            clockDeferred: 0,
            show: "row",
            showTime: !0,
            showDate: !0,
            dateFormat: "DD.MM.YYYY",
            timeFormat: "HH:mm",
            divider: "&nbsp;&nbsp;",
            twoLines: !1,
            onTick: t.noop,
            onSecond: t.noop,
            onClockCreate: t.noop
        };
        t.clockSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroClockSetup != "undefined" && t.clockSetup(globalThis.metroClockSetup),
        t.Component("clock", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    _clockInterval: null,
                    locale: "en"
                }),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options
                  , a = e.closest("[lang]");
                a.length && (this.locale = a.attr("lang") || "en"),
                e.addClass("clock"),
                o.show === "column" && e.addClass("show-column"),
                this._fireEvent("clock-create", {
                    element: e
                }),
                this._tick(),
                this._clockInterval = setInterval( () => {
                    this._tick()
                }
                , 500),
                this._secondInterval = setInterval( () => {
                    this._second()
                }
                , 1e3)
            },
            _second: function() {
                let e = new Date;
                this._fireEvent("second", {
                    timestamp: e
                })
            },
            _tick: function() {
                let e = this.element
                  , o = this.options
                  , a = datetime()
                  , i = ""
                  , s = a.format(o.dateFormat, this.locale)
                  , c = a.format(o.timeFormat, this.locale);
                o.showTime && (i = `<span class="clock-time">${c}</span>`),
                o.showDate && (i += `<span class="clock-date">${s}</span>`),
                e.html(i),
                this._fireEvent("tick", {
                    timestamp: a
                })
            },
            changeAttribute: function(e, o) {
                switch (e) {
                case "data-date-format":
                    this.options.dateFormat = o;
                    break;
                case "data-time-format":
                    this.options.timeFormat = o;
                    break;
                case "data-show-date":
                    this.options.showDate = JSON.parse(o);
                    break;
                case "data-show-time":
                    this.options.showTime = JSON.parse(o);
                    break;
                case "data-divider":
                    this.options.divider = o;
                    break;
                case "data-two-lines":
                    this.options.twoLines = JSON.parse(o);
                    break
                }
                this._tick()
            },
            destroy: function() {
                clearInterval(this._clockInterval),
                this._clockInterval = null,
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            collapseDeferred: 0,
            collapsed: !1,
            toggleElement: !1,
            duration: 100,
            onExpand: t.noop,
            onCollapse: t.noop,
            onCollapseCreate: t.noop
        };
        t.collapseSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroCollapseSetup != "undefined" && t.collapseSetup(globalThis.metroCollapseSetup),
        t.Component("collapse", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    toggle: null
                }),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options
                  , a = o.toggleElement !== !1 ? r(o.toggleElement) : e.siblings(".collapse-toggle").length > 0 ? e.siblings(".collapse-toggle") : e.siblings("a:nth-child(1)");
                (o.collapsed === !0 || e.attr("collapsed") === !0) && e.hide(0),
                a.on(t.events.click, i => {
                    e.css("display") !== "none" && !e.hasClass("keep-open") ? this._close(e) : this._open(e),
                    ["INPUT"].indexOf(i.target.tagName) === -1 && i.preventDefault(),
                    i.stopPropagation()
                }
                ),
                this.toggle = a,
                this._fireEvent("collapse-create", {
                    element: e
                })
            },
            _close: function(e, o) {
                let a = r(e);
                if (a.data("collapsed"))
                    return;
                let s = t.getPlugin(a[0], "collapse")
                  , c = s.options
                  , d = o ? "show" : "slideUp"
                  , p = o ? 0 : c.duration;
                this.toggle.removeClass("active-toggle"),
                a[d](p, () => {
                    e.trigger("onCollapse", null, e),
                    e.data("collapsed", !0),
                    e.addClass("collapsed"),
                    s._fireEvent("collapse")
                }
                )
            },
            _open: function(e, o) {
                let a = r(e);
                if (!a.data("collapsed"))
                    return;
                let s = t.getPlugin(a[0], "collapse")
                  , c = s.options
                  , d = o ? "show" : "slideDown"
                  , p = o ? 0 : c.duration;
                this.toggle.addClass("active-toggle"),
                a[d](p, () => {
                    e.trigger("onExpand", null, e),
                    e.data("collapsed", !1),
                    e.removeClass("collapsed"),
                    s._fireEvent("expand")
                }
                )
            },
            collapse: function(e) {
                this._close(this.element, e)
            },
            expand: function(e) {
                this._open(this.element, e)
            },
            close: function(e) {
                this._close(this.element, e)
            },
            open: function(e) {
                this._open(this.element, e)
            },
            isCollapsed: function() {
                return this.element.data("collapsed")
            },
            toggleState: function() {
                let e = this.element;
                e.attr("collapsed") === !0 || e.data("collapsed") === !0 ? this.collapse() : this.expand()
            },
            changeAttribute: function(e) {
                switch (e) {
                case "collapsed":
                case "data-collapsed":
                    this.toggleState();
                    break
                }
            },
            destroy: function() {
                return this.toggle.off(t.events.click),
                this.element
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = "[data-role-dropmenu], [data-role-dropdown]"
          , e = '<svg class="dropdown-caret" aria-hidden="true" width="16" height="16" viewBox="0 0 24 24"><path d="m14.83 11.29-4.24-4.24a1 1 0 1 0-1.42 1.41L12.71 12l-3.54 3.54a1 1 0 0 0 0 1.41 1 1 0 0 0 .71.29 1 1 0 0 0 .71-.29l4.24-4.24a1.002 1.002 0 0 0 0-1.42Z"></path></svg>'
          , o = {
            dropdownDeferred: 0,
            dropFilter: null,
            toggleElement: null,
            align: "left",
            noClose: !1,
            duration: 50,
            openMode: "auto",
            openFunc: "show",
            closeFunc: "hide",
            height: "auto",
            onDrop: t.noop,
            onUp: t.noop,
            onDropdownCreate: t.noop
        };
        t.dropdownSetup = a => {
            o = r.extend({}, o, a)
        }
        ,
        typeof globalThis.metroDropdownSetup != "undefined" && t.dropdownSetup(globalThis.metroDropdownSetup),
        t.Component("dropdown", {
            init: function(a, i) {
                return this._super(i, a, o, {
                    toggle: null,
                    displayOrigin: null,
                    isOpen: !1,
                    level: 0
                }),
                this
            },
            _create: function() {
                let a = this.element;
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("dropdown-create", {
                    element: a
                }),
                a.hasClass("open") && (a.removeClass("open"),
                setTimeout( () => {
                    this.open(!0)
                }
                , 0))
            },
            _toggle: function() {
                let a = this.element
                  , i = a.siblings(".menu-toggle, .dropdown-toggle, a");
                if (i.length === 0 && (i = a.prev(),
                i.length === 0))
                    throw new Error("Menu toggle not found");
                return i[0]
            },
            _createStructure: function() {
                let a = this.element, i = this.options, s = a.parents("[data-role-dropdown]").length, c;
                i.openMode === "up" && a.addClass("drop-up"),
                c = i.toggleElement ? r(i.toggleElement) : r(this._toggle()),
                c.length && c.append(e),
                this.displayOrigin = t.utils.getStyleOne(a, "display"),
                i.height !== "auto" && a.css({
                    height: i.height,
                    "overflow-y": "auto"
                }),
                a.css("display", "none"),
                this.toggle = c,
                this.level = s
            },
            _createEvents: function() {
                let a = this.element
                  , i = this.options
                  , s = this.toggle
                  , c = a.parent();
                s.on(t.events.click, d => {
                    if (r(".active-container").removeClass("active-container"),
                    a.css("display") !== "none" && !a.hasClass("keep-open"))
                        this.close(!0, a);
                    else {
                        if (r(l).each( (p, m) => {
                            !a.parents("[data-role-dropdown]").is(m) && !r(m).hasClass("keep-open") && r(m).css("display") !== "none" && (t.utils.isValue(i.dropFilter) ? r(m).closest(i.dropFilter).length > 0 && this.close(!0, m) : this.close(!0, m))
                        }
                        ),
                        a.hasClass("horizontal")) {
                            a.css({
                                visibility: "hidden",
                                display: "block"
                            });
                            let p = 0;
                            r.each(a.children("li"), function() {
                                p += r(this).outerWidth(!0)
                            }),
                            a.css({
                                visibility: "visible",
                                display: "none"
                            }),
                            a.css("width", p + 2)
                        }
                        this.open(!1, a),
                        c.addClass("active-container")
                    }
                    d.preventDefault(),
                    d.stopPropagation()
                }
                ),
                i.noClose === !0 && a.addClass("keep-open").on(t.events.click, d => {
                    d.preventDefault(),
                    d.stopPropagation()
                }
                ),
                r(a).find("li.disabled a").on(t.events.click, d => {
                    d.preventDefault()
                }
                )
            },
            _close: function(a, i) {
                let s = r(a)
                  , c = t.getPlugin(s, "dropdown")
                  , d = c.toggle
                  , p = c.options
                  , m = p.closeFunc;
                d.removeClass("active-toggle").removeClass("active-control"),
                c.element.parent().removeClass("active-container"),
                i && (m = "hide"),
                s[m](i ? 0 : p.duration, () => {
                    c._fireEvent("close"),
                    c._fireEvent("up"),
                    p.openMode === "auto" && c.element.removeClass("drop-up drop-as-dialog")
                }
                ),
                this.isOpen = !1
            },
            _open: function(a, i) {
                let s = t.getPlugin(a, "dropdown")
                  , c = s.options
                  , d = c.openFunc;
                s.toggle.addClass("active-toggle").addClass("active-control"),
                s.element.parent().addClass("active-container"),
                s.element[d](i ? 0 : c.duration, function() {
                    let p = r(this)
                      , m = t.utils.viewportOutByWidth(this)
                      , g = t.utils.viewportOutByHeight(this);
                    c.openMode === "auto" && (g && p.addClass("drop-up"),
                    m && p.addClass("place-right"),
                    t.utils.viewportOut(this) && p.removeClass("drop-up place-right").addClass("drop-as-dialog")),
                    s._fireEvent("open"),
                    s._fireEvent("drop")
                }),
                this.isOpen = !0
            },
            close: function(a, i) {
                this._close(i || this.element, a)
            },
            open: function(a, i) {
                this._open(i || this.element, a)
            },
            toggle: function() {
                this.isOpen ? this.close() : this.open()
            },
            changeAttribute: (a, i) => {}
            ,
            destroy: function() {
                this.toggle.off(t.events.click)
            }
        }),
        r(document).on(t.events.click, () => {
            r(l).each(function() {
                let a = r(this);
                if (a.hasClass("keep-open") || a.hasClass("stay-open") || a.hasClass("ignore-document-click"))
                    return;
                let i = t.getPlugin(a, "dropdown")
                  , s = t.getPlugin(a, "dropmenu");
                i && i.close(),
                s && s.close()
            })
        }
        )
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            id: "",
            label: "",
            size: "normal",
            selectDeferred: 0,
            clearButton: !1,
            clearButtonIcon: "\u274C",
            usePlaceholder: !1,
            placeholder: "",
            addEmptyValue: !1,
            emptyValue: "",
            duration: 0,
            prepend: "",
            append: "",
            filterPlaceholder: "",
            filter: !1,
            dropHeight: 200,
            dropWidth: null,
            dropFullSize: !1,
            openMode: "auto",
            showGroupName: !1,
            shortTag: !0,
            source: null,
            sourceMethod: "GET",
            sourceType: "json",
            filterSource: null,
            filterThreshold: 500,
            clsSelect: "",
            clsSelectInput: "",
            clsPrepend: "",
            clsAppend: "",
            clsOption: "",
            clsOptionActive: "",
            clsOptionGroup: "",
            clsDropList: "",
            clsDropContainer: "",
            clsSelectedItem: "",
            clsSelectedItemAction: "",
            clsLabel: "",
            clsGroupName: "",
            clsFilterInput: "",
            onClear: t.noop,
            onChange: t.noop,
            onUp: t.noop,
            onDrop: t.noop,
            onItemSelect: t.noop,
            onItemDeselect: t.noop,
            onSelectCreate: t.noop,
            onData: e => e
        };
        t.selectSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroSelectSetup != "undefined" && t.selectSetup(globalThis.metroSelectSetup),
        t.Component("select", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    list: null,
                    placeholder: null,
                    observer: null
                }),
                this
            },
            _create: function() {
                let e = this.element;
                this._createSelect(),
                this._createEvents(),
                this._fireEvent("select-create", {
                    element: e
                })
            },
            _setPlaceholder: function() {
                let e = this.element
                  , o = this.options
                  , a = e.siblings(".select-input");
                o.usePlaceholder === !0 && (!t.utils.isValue(e.val()) || `${e.val()}` == `${o.emptyValue}`) && a.html(o.placeholder || this.strings.label_select_more)
            },
            _addTag: function(e, o) {
                let a = this.element, i = this.options, s, c = a.closest(".select"), d = `<span class='title'>${e}</span>`, p = r("<div>").addClass("tag").addClass(i.shortTag ? "short-tag" : "").addClass(i.clsSelectedItem).html(d).data("option", o);
                return r("<span>").addClass("action unselect-option").addClass(i.clsSelectedItemAction).html("&times;").appendTo(p),
                c.hasClass("large") ? s = "large" : c.hasClass("small") ? s = "small" : c.hasClass("medium") && (s = "medium"),
                p.addClass(s),
                p
            },
            _addOption: function(e, o, a, i, s) {
                let c = r(e), d, p, m = this.element, g = this.options, f = t.utils.isValue(c.attr("data-template")) ? c.attr("data-template").replace("$1", e.text) : e.text, u = c.attr("data-display");
                d = r("<li>").addClass(g.clsOption).data("option", e).attr("data-text", e.text).attr("data-value", e.value ? e.value : ""),
                p = r("<a>").html(f);
                let h = c.attr("data-icon");
                if (h && p.prepend(r("<span>").addClass("icon").html(h)),
                u && (d.attr("data-display", u),
                f = u),
                d.addClass(e.className),
                d.data("group", s),
                c.is(":disabled") && d.addClass("disabled"),
                c.is(":selected")) {
                    let b = "";
                    g.showGroupName && s && (b = `&nbsp;<span class='selected-item__group-name ${g.clsGroupName}'>${s}</span>`),
                    i ? (d.addClass("d-none"),
                    a.append(this._addTag(p.html() + b, d))) : (f = p.html() + b,
                    m.val(e.value),
                    a.html(f),
                    m.fire("change", {
                        val: e.value
                    }),
                    d.addClass("active"))
                }
                d.append(p).appendTo(o)
            },
            _addOptionGroup: function(e, o, a, i) {
                let s = this
                  , c = this.options
                  , d = r(e);
                r("<li>").html(e.label).addClass("group-title").addClass(c.clsOptionGroup).appendTo(o),
                r.each(d.children(), function() {
                    s._addOption(this, o, a, i, e.label)
                })
            },
            _createOptions: function() {
                let e = this
                  , o = this.element
                  , a = this.options
                  , s = o.parent().find("ul").empty()
                  , c = o.find("option[selected]").length > 0
                  , d = o[0].multiple
                  , p = o.siblings(".select-input");
                o.siblings(".select-input").empty(),
                a.addEmptyValue === !0 && o.prepend(r(`<option ${c ? "" : "selected"} value='${a.emptyValue}' class='d-none'></option>`)),
                r.each(o.children(), function() {
                    this.tagName === "OPTION" ? e._addOption(this, s, p, d, null) : this.tagName === "OPTGROUP" && e._addOptionGroup(this, s, p, d)
                })
            },
            _createSelect: function() {
                return L(this, null, function*() {
                    let e = this.element, o = this.options, a = e.wrap("<label>"), i = e[0].multiple, s = Hooks.useId(a[0]), c = r("<div>").addClass("button-group"), d, p, m = Hooks.useId("select-focus-trigger"), g = r("<input type='checkbox'>").addClass("select-focus-trigger").attr("id", m);
                    this.placeholder = r("<span>").addClass("placeholder").html(o.placeholder),
                    a.attr("id", o.id ? o.id : s).attr("for", m),
                    a[0].className = t.utils.classNames(e[0].className, `input-${o.size}`, "select", o.clsSelect),
                    r("<span>").addClass("dropdown-toggle").appendTo(a),
                    i && a.addClass("multiple"),
                    c.appendTo(a),
                    g.appendTo(a);
                    let u = r("<div>").addClass("select-input").addClass(o.clsSelectInput).attr("name", `__${s}__`);
                    d = r("<div>").addClass("drop-container").addClass(o.clsDropContainer),
                    o.dropFullSize === !1 ? o.dropWidth && d.css({
                        width: +o.dropWidth
                    }) : a.addClass("drop-full-size"),
                    p = r("<div>").appendTo(d);
                    let h = r("<ul>").addClass("option-list").addClass(o.clsDropList).css({
                        "max-height": o.dropHeight
                    });
                    if (r(`<input type='text' data-role='input' data-clear-button-icon="${o.clearButtonIcon}">`).attr("placeholder", o.filterPlaceholder || `${this.strings.label_filter}...`).appendTo(p).addClass(o.clsFilterInput),
                    a.append(u),
                    a.append(d),
                    d.append(p),
                    o.filter !== !0 && p.hide(),
                    d.append(h),
                    o.source && (yield this.fetch(o.source, {
                        method: o.sourceMethod || "GET",
                        headers: {
                            "Content-Type": `application/${o.sourceType || "json"}`
                        }
                    })),
                    this._createOptions(),
                    this._setPlaceholder(),
                    this._createDroppable(d),
                    this.list = h,
                    o.clearButton === !0 && !e[0].readOnly ? r("<button>").addClass("button input-clear-button").addClass(o.clsClearButton).attr("tabindex", -1).attr("type", "button").html(o.clearButtonIcon).appendTo(c) : c.addClass("d-none"),
                    o.prepend !== "" && !i && r("<div>").html(o.prepend).addClass("prepend").addClass(o.clsPrepend).appendTo(a),
                    o.append !== "" && !i && r("<div>").html(o.append).addClass("append").addClass(o.clsAppend).appendTo(a),
                    e.attr("dir") === "rtl" && a.addClass("rtl").attr("dir", "rtl"),
                    o.label) {
                        let w = r("<label>").addClass("label-for-input").addClass(o.clsLabel).html(o.label).insertBefore(a);
                        e.attr("id") ? w.attr("for", e.attr("id")) : w.attr("for", m),
                        e.attr("dir") === "rtl" && w.addClass("rtl")
                    }
                    e.is(":disabled") ? this.disable() : this.enable(),
                    this.observer = new MutationObserver(this._updateSelect.bind(this)),
                    this.observer.observe(e[0], {
                        childList: !0,
                        subtree: !0
                    })
                })
            },
            _createDroppable: function(e) {
                let o = this.options
                  , a = e.find("input")
                  , i = this.element.closest(".select")
                  , s = e.siblings(".dropdown-caret")
                  , c = e.find("ul");
                t.makePlugin(e, "dropdown", {
                    dropFilter: ".select",
                    duration: o.duration,
                    toggleElement: [i],
                    openMode: o.openMode,
                    onDrop: () => {
                        let d;
                        s.addClass("active-toggle");
                        let p = r(".select .drop-container");
                        r.each(p, function() {
                            let m = r(this);
                            if (m.is(e))
                                return;
                            let g = t.getPlugin(m, "dropdown");
                            g != null && g.close && g.close()
                        }),
                        a.val("").trigger(t.events.keyup),
                        d = c.find("li.active").length > 0 ? r(c.find("li.active")[0]) : void 0,
                        d !== void 0 && (c[0].scrollTop = d.position().top - (c.height() - d.height()) / 2),
                        this._fireEvent("drop", {
                            list: c[0]
                        })
                    }
                    ,
                    onUp: () => {
                        s.removeClass("active-toggle"),
                        this._fireEvent("up", {
                            list: c[0]
                        })
                    }
                })
            },
            _updateSelect: function(e) {
                for (let o of e)
                    o.type === "childList" && (o.addedNodes.length || o.removedNodes.length) && this._createOptions()
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options
                  , i = o.closest(".select")
                  , s = i.find(".drop-container")
                  , c = o.siblings(".select-input")
                  , d = s.find("input")
                  , p = s.find("ul")
                  , m = i.find(".input-clear-button")
                  , g = i.find(".select-focus-trigger");
                g.on("focus", () => {
                    i.addClass("focused")
                }
                ),
                g.on("blur", () => {
                    i.removeClass("focused")
                }
                ),
                m.on(t.events.click, u => {
                    o.val(a.emptyValue),
                    o[0].multiple && p.find("li").removeClass("d-none"),
                    c.clear(),
                    e._setPlaceholder(),
                    u.preventDefault(),
                    u.stopPropagation(),
                    e._fireEvent("clear"),
                    e._fireEvent("change", {
                        selected: e.getSelected()
                    })
                }
                ),
                o.on(t.events.change, () => {
                    e._setPlaceholder()
                }
                ),
                i.on(t.events.click, () => {
                    r(".focused").removeClass("focused"),
                    i.addClass("focused")
                }
                ),
                c.on(t.events.click, () => {
                    r(".focused").removeClass("focused"),
                    i.addClass("focused")
                }
                ),
                p.on(t.events.click, "li", function(u) {
                    if (r(this).hasClass("group-title")) {
                        u.preventDefault(),
                        u.stopPropagation();
                        return
                    }
                    let h = r(this)
                      , b = h.attr("data-display")
                      , w = h.data("value")
                      , Q = h.data("group")
                      , C = b || h.children("a").html()
                      , B = h.data("option")
                      , x = o.find("option");
                    a.showGroupName && Q && (C += `&nbsp;<span class='selected-item__group-name ${a.clsGroupName}'>${Q}</span>`),
                    o[0].multiple ? (h.addClass("d-none"),
                    c.append(e._addTag(C, h))) : (p.find("li.active").removeClass("active").removeClass(a.clsOptionActive),
                    h.addClass("active").addClass(a.clsOptionActive),
                    c.html(C),
                    t.getPlugin(s, "dropdown").close()),
                    r.each(x, function() {
                        this === B && (this.selected = !0)
                    }),
                    e._fireEvent("item-select", {
                        val: w,
                        option: B,
                        leaf: h[0]
                    });
                    let v = e.getSelected();
                    e._fireEvent("change", {
                        selected: v
                    })
                }),
                c.on("click", ".tag .action", function(u) {
                    let h = r(this).closest(".tag")
                      , b = h.data("option")
                      , w = b.data("option");
                    b.removeClass("d-none"),
                    r.each(o.find("option"), function() {
                        this === w && (this.selected = !1)
                    }),
                    h.remove(),
                    e._fireEvent("item-deselect", {
                        option: w
                    });
                    let Q = e.getSelected();
                    e._fireEvent("change", {
                        selected: Q
                    }),
                    u.preventDefault(),
                    u.stopPropagation()
                });
                let f = Hooks.useDebounce(u => L(this, null, function*() {
                    let h = this.options
                      , b = this.list
                      , w = u.target.value.toLowerCase()
                      , Q = `${h.filterSource}${w}`;
                    if (h.filterSource)
                        yield this.fetch(Q, {
                            method: h.sourceMethod || "GET",
                            headers: {
                                "Content-Type": `application/${h.sourceType || "json"}`
                            }
                        }, !0);
                    else {
                        let C = b.find("li"), B, x, v;
                        for (B = 0; B < C.length; B++)
                            r(C[B]).hasClass("group-title") || (x = C[B].getElementsByTagName("a")[0],
                            v = x.innerHTML || x.innerText,
                            v.toLowerCase().includes(w) ? C[B].style.display = "" : C[B].style.display = "none")
                    }
                }), a.filterThreshold);
                d.on(t.events.keyup, f.bind(this)),
                d.on(t.events.click, u => {
                    u.preventDefault(),
                    u.stopPropagation()
                }
                ),
                s.on(t.events.click, u => {
                    u.preventDefault(),
                    u.stopPropagation()
                }
                )
            },
            _clearOptions: function() {
                this.element.clear(),
                this.list.clear()
            },
            disable: function() {
                this.element.data("disabled", !0),
                this.element.closest(".select").addClass("disabled")
            },
            enable: function() {
                this.element.data("disabled", !1),
                this.element.closest(".select").removeClass("disabled")
            },
            toggleState: function() {
                this.elem.disabled ? this.disable() : this.enable()
            },
            reset: function(e) {
                let o = this.element
                  , a = o.find("option")
                  , i = o.closest(".select");
                r.each(a, function() {
                    this.selected = t.utils.isNull(e) ? !1 : this.defaultSelected
                }),
                this.list.find("li").remove(),
                i.find(".select-input").html(""),
                this._createOptions();
                let s = this.getSelected();
                this._fireEvent("change", {
                    selected: s
                })
            },
            getSelected: function() {
                let e = this.element
                  , o = [];
                return e.find("option").each(function() {
                    this.selected && o.push(this.value)
                }),
                o
            },
            val: function(e) {
                let o = this, a = this.element, i = this.options, s = a.siblings(".select-input"), c = a.find("option"), d = this.list.find("li"), p = [], m = !!a.attr("multiple"), g, f, u, h, b, w;
                if (t.utils.isNull(e))
                    return r.each(c, function() {
                        this.selected && p.push(this.value)
                    }),
                    m ? p : p[0];
                r.each(c, function() {
                    this.selected = !1
                }),
                d.removeClass("active").removeClass(i.clsOptionActive),
                s.html("");
                let Q = Array.isArray(e) ? e : [e];
                r.each(Q, function() {
                    for (f = 0; f < c.length; f++)
                        if (g = c[f],
                        u = t.utils.isValue(g.getAttribute("data-template")) ? g.getAttribute("data-template").replace("$1", g.text) : g.text,
                        `${g.value}` == `${this}`) {
                            g.selected = !0;
                            break
                        }
                    for (f = 0; f < d.length; f++)
                        if (h = r(d[f]),
                        w = h.data("group"),
                        b = h.attr("data-value"),
                        `${b}` == `${this}`) {
                            i.showGroupName && w && (u += `&nbsp;<span class='selected-item__group-name'>${w}</span>`),
                            m ? (h.addClass("d-none"),
                            s.append(o._addTag(u, h))) : (h.addClass("active").addClass(i.clsOptionActive),
                            s.html(u));
                            break
                        }
                });
                let C = this.getSelected();
                this._fireEvent("change", {
                    selected: C
                })
            },
            options: function(e, o, a) {
                return this.data(e, o, a)
            },
            data: function(e, o, a) {
                let i = this.element, s, c, d = a || ",";
                return typeof o == "string" ? c = o.toArray(d).map(p => Number.isNaN(p) ? p : +p) : Array.isArray(o) ? c = o.slice().map(p => Number.isNaN(p) ? p : +p) : c = [],
                this.observer.disconnect(),
                i.empty(),
                typeof e == "string" ? i.html(e) : t.utils.isObject2(e) && r.each(e, (p, m) => {
                    if (t.utils.isObject2(m))
                        s = r("<optgroup label=''>").attr("label", p).appendTo(i),
                        r.each(m, (g, f) => {
                            let u = r("<option>").attr("value", g).text(f).appendTo(s);
                            c.indexOf(+g) > -1 && u.prop("selected", !0)
                        }
                        );
                    else {
                        let g = r("<option>").attr("value", p).text(m).appendTo(i);
                        c.indexOf(p) > -1 && g.prop("selected", !0)
                    }
                }
                ),
                this._createOptions(),
                this.observer.observe(i[0], {
                    childList: !0,
                    subtree: !0
                }),
                this
            },
            addOption: function(e, o, a) {
                let i = this.element
                  , s = r("<option>").attr("value", e).text(o || e);
                return i.append(s),
                a && (i[0].multiple || i.find("option").prop("selected", !1),
                s.prop("selected", !0)),
                this
            },
            addOptions: function(e) {
                let o = this;
                return e ? (this.observer.disconnect(),
                Array.isArray(e) ? r.each(e, function() {
                    t.utils.isObject2(this) ? o.addOption(this.val, this.title, this.selected) : o.addOption(this)
                }) : t.utils.isObject2(e) && r.each(e, (a, i) => {
                    o.addOption(a, i)
                }
                ),
                this._createOptions(),
                this.observer.observe(element[0], {
                    childList: !0,
                    subtree: !0
                }),
                this) : this
            },
            removeOption: function(e) {
                return this.element.find("option").each(function() {
                    let i = r(this);
                    `${i.attr("value")}` == "${val}" && i.remove()
                }),
                this._createOptions(),
                this
            },
            removeOptions: function(e) {
                let a = this.element.find("option");
                return !e || !Array.isArray(e) ? this : (a.each(function() {
                    let i = r(this)
                      , s = i.attr("value");
                    e.indexOf(s) > -1 && i.remove()
                }),
                this._createOptions(),
                this)
            },
            fetch: function(e, o, a=!1) {
                return L(this, null, function*() {
                    let i = this.element
                      , s = this.options
                      , c = Object.assign({
                        method: "GET",
                        headers: {
                            "Content-Type": `application/${s.sourceType}`
                        }
                    }, o)
                      , d = yield fetch(e, c);
                    if (d.ok === !1)
                        return;
                    a && this._clearOptions();
                    let p = s.sourceType === "json" ? yield d.json() : yield d.text();
                    p = t.utils.exec(s.onData, [p], i[0]),
                    r.each(p, function() {
                        let m = r("<option>").attr("value", this.value).html(this.text);
                        this.icon && m.attr("data-icon", this.icon),
                        m.appendTo(i)
                    })
                })
            },
            changeAttribute: function(e) {
                e === "disabled" && this.toggleState()
            },
            destroy: function() {
                let e = this.element
                  , o = this.options
                  , a = e.closest(".select")
                  , i = a.find(".drop-container")
                  , s = e.siblings(".select-input")
                  , c = i.find("input")
                  , d = i.find("ul")
                  , p = a.find(".input-clear-button");
                a.off(t.events.click),
                a.off(t.events.click, ".input-clear-button"),
                s.off(t.events.click),
                c.off(t.events.blur),
                c.off(t.events.focus),
                d.off(t.events.click, "li"),
                c.off(t.events.keyup),
                i.off(t.events.click),
                p.off(t.events.click),
                i.data("dropdown").destroy(),
                o.label && a.prev("label").remove(),
                a.remove()
            }
        }),
        r(document).on(t.events.click, () => {
            r(".select").removeClass("focused")
        }
        , {
            ns: "blur-select-elements"
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            inputDeferred: 0,
            label: "",
            autocomplete: null,
            autocompleteUrl: null,
            autocompleteUrlMethod: "GET",
            autocompleteUrlKey: null,
            autocompleteDivider: ",",
            autocompleteListHeight: 200,
            history: !1,
            historyPreset: "",
            historyDivider: "|",
            preventSubmit: !1,
            defaultValue: "",
            size: "default",
            prepend: "",
            append: "",
            searchButton: !1,
            clearButton: !0,
            revealButton: !0,
            randomButton: !1,
            clearButtonIcon: "\u274C",
            revealButtonIcon: "\u{1F440}",
            searchButtonIcon: "\u{1F50D}",
            randomButtonIcon: "\u{1F3B2}",
            customButtons: [],
            searchButtonClick: "submit",
            randomSymbols: "0123456789;abcdefghijklmnopqrstuvwxyz;ABCDEFGHIJKLMNOPQRSTUVWXYZ;<>!?@#$%^&*()_+",
            randomLength: 12,
            prependOptions: "",
            prependOptionsSep: ",",
            appendOptions: "",
            appendOptionsSep: ",",
            badge: null,
            clsComponent: "",
            clsInput: "",
            clsPrepend: "",
            clsAppend: "",
            clsClearButton: "",
            clsRevealButton: "",
            clsCustomButton: "",
            clsSearchButton: "",
            clsRandomButton: "",
            clsLabel: "",
            onAutocompleteSelect: t.noop,
            onHistoryChange: t.noop,
            onHistoryUp: t.noop,
            onHistoryDown: t.noop,
            onClearClick: t.noop,
            onRevealClick: t.noop,
            onSearchButtonClick: t.noop,
            onEnterClick: t.noop,
            onInputCreate: t.noop
        };
        t.inputSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroInputSetup != "undefined" && t.inputSetup(globalThis.metroInputSetup),
        t.Component("input", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    history: [],
                    historyIndex: -1,
                    autocomplete: [],
                    prependOptionsList: null,
                    appendOptionsList: null
                }),
                this
            },
            _create: function() {
                let e = this.element;
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("input-create", {
                    element: e
                })
            },
            _createStructure: function() {
                let e = this, o = this.element, a = this.options, i = o.wrap("<div>").addClass(`input ${o[0].className}`), s, c, d, p, m;
                o.id() || o.attr("id", Hooks.useId(o[0])),
                t.utils.isValue(a.historyPreset) && (r.each(a.historyPreset.toArray(a.historyDivider), function() {
                    e.history.push(this)
                }),
                e.historyIndex = e.history.length - 1),
                o.attr("type") === void 0 && o.attr("type", "text"),
                s = r("<div>").addClass("button-group").appendTo(i),
                t.utils.isValue(o.val().trim()) || o.val(a.defaultValue),
                a.clearButton === !0 && !o[0].readOnly && (c = r("<button>").addClass("button input-clear-button").addClass(a.clsClearButton).attr("tabindex", -1).attr("type", "button").html(a.clearButtonIcon).attr("title", this.strings.label_clear_input),
                c.appendTo(s)),
                o.attr("type") === "password" && a.revealButton === !0 && (d = r("<button>").addClass("button input-reveal-button").addClass(a.clsRevealButton).attr("tabindex", -1).attr("type", "button").html(a.revealButtonIcon).attr("title", this.strings.label_reveal_password),
                d.appendTo(s)),
                a.searchButton === !0 && (p = r("<button>").addClass("button input-search-button").addClass(a.clsSearchButton).attr("tabindex", -1).attr("type", a.searchButtonClick === "submit" ? "submit" : "button").html(a.searchButtonIcon).attr("title", this.strings.label_search_input),
                p.appendTo(s)),
                a.randomButton === !0 && (m = r("<button>").addClass("button input-random-button").addClass(a.clsRandomButton).attr("tabindex", -1).attr("type", "button").html(a.randomButtonIcon).attr("title", this.strings.label_generate_random),
                m.appendTo(s));
                let g, f;
                if (a.prepend && r("<div>").html(a.prepend).addClass("prepend").addClass(a.clsPrepend).appendTo(i),
                a.prependOptions) {
                    g = r("<div>").addClass("prepend-options").appendTo(i),
                    f = r("<select data-role='select'>").addClass("options-list"),
                    g.append(f);
                    for (let h of a.prependOptions.toArray(a.prependOptionsSep))
                        r("<option>").attr("value", h).html(h).appendTo(f);
                    this.prependOptionsList = f
                }
                if (a.append && r("<div>").html(a.append).addClass("append").addClass(a.clsAppend).appendTo(i),
                a.appendOptions) {
                    g = r("<div>").addClass("append-options").appendTo(i),
                    f = r("<select data-role='select'>").addClass("options-list"),
                    g.append(f);
                    for (let h of a.appendOptions.toArray(a.appendOptionsSep))
                        r("<option>").attr("value", h).html(h).appendTo(f);
                    this.appendOptionsList = f
                }
                let u = t.utils.isObject(a.customButtons);
                if (Array.isArray(u) && r.each(u, function() {
                    let h = r("<button>");
                    h.addClass("button input-custom-button").addClass(a.clsCustomButton).addClass(this.cls).attr("tabindex", -1).attr("type", "button").html(this.text),
                    this.attr && typeof this.attr == "object" && r.each(this.attr, (b, w) => {
                        h.attr(Str.dashedName(b), w)
                    }
                    ),
                    this.onclick && h.on("click", () => {
                        this.onclick.apply(h, [o.valueOf(), o])
                    }
                    ),
                    h.appendTo(s)
                }),
                t.utils.isValue(o.attr("data-exclaim")) && i.attr("data-exclaim", o.attr("data-exclaim")),
                o.attr("dir") === "rtl" && i.addClass("rtl").attr("dir", "rtl"),
                o[0].className = "",
                i.addClass(a.clsComponent),
                o.addClass(a.clsInput),
                a.size !== "default" && i.css({
                    width: a.size
                }),
                (!t.utils.isNull(a.autocomplete) || !t.utils.isNull(a.autocompleteUrl)) && r("<div>").addClass("autocomplete-list").css({
                    maxHeight: a.autocompleteListHeight,
                    display: "none"
                }).appendTo(i),
                t.utils.isValue(a.autocomplete)) {
                    let h = t.utils.isObject(a.autocomplete);
                    h !== !1 ? this.autocomplete = h : this.autocomplete = a.autocomplete.toArray(a.autocompleteDivider)
                }
                t.utils.isValue(a.autocompleteUrl) && fetch(a.autocompleteUrl, {
                    method: a.autocompleteUrlMethod
                }).then(h => h.text()).then(h => {
                    let b = [];
                    try {
                        b = JSON.parse(h),
                        a.autocompleteUrlKey && (b = b[a.autocompleteUrlKey])
                    } catch (w) {
                        b = h.split(`
`)
                    }
                    e.autocomplete = e.autocomplete.concat(b)
                }
                ),
                this._addLabel(a.label, i, {
                    className: a.clsLabel,
                    id: o.attr("id"),
                    dir: o.attr("dir")
                }),
                a.badge && i.append(r("<div>").addClass("badge").html(a.badge)),
                o.is(":disabled") ? this.disable() : this.enable(),
                this.component = i
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options
                  , i = o.closest(".input")
                  , s = i.find(".autocomplete-list");
                i.on(t.events.click, ".input-clear-button", () => {
                    let c = o.val();
                    o.val(t.utils.isValue(a.defaultValue) ? a.defaultValue : "").fire("clear").fire("change").fire("keyup").focus(),
                    s.length > 0 && s.css({
                        display: "none"
                    }),
                    e._fireEvent("clear-click", {
                        prev: c
                    })
                }
                ),
                i.on(t.events.click, ".input-reveal-button", () => {
                    o.attr("type") === "password" ? o.attr("type", "text") : o.attr("type", "password"),
                    e._fireEvent("reveal-click", {
                        val: o.val()
                    })
                }
                ),
                i.on(t.events.click, ".input-search-button", function() {
                    a.searchButtonClick !== "submit" ? (console.log("Search button clicked"),
                    e._fireEvent("search-button-click", {
                        val: e.val(),
                        button: this
                    })) : this.form && this.form.submit()
                }),
                i.on(t.events.click, ".input-random-button", () => {
                    let c = e._generateRandomValue();
                    o.val(c).fire("change").fire("keyup").focus(),
                    e._fireEvent("random-click", {
                        val: c
                    })
                }
                ),
                o.on(t.events.keyup, c => {
                    let d = o.val().trim();
                    a.history && c.keyCode === t.keyCode.ENTER && d !== "" && (o.val(""),
                    e.history.push(d),
                    e.historyIndex = e.history.length - 1,
                    e._fireEvent("history-change", {
                        val: d,
                        history: e.history,
                        historyIndex: e.historyIndex
                    }),
                    a.preventSubmit === !0 && c.preventDefault()),
                    a.history && c.keyCode === t.keyCode.UP_ARROW && (e.historyIndex--,
                    e.historyIndex >= 0 ? (o.val(""),
                    o.val(e.history[e.historyIndex]),
                    e._fireEvent("history-down", {
                        val: o.val(),
                        history: e.history,
                        historyIndex: e.historyIndex
                    })) : e.historyIndex = 0,
                    c.preventDefault()),
                    a.history && c.keyCode === t.keyCode.DOWN_ARROW && (e.historyIndex++,
                    e.historyIndex < e.history.length ? (o.val(""),
                    o.val(e.history[e.historyIndex]),
                    e._fireEvent("history-up", {
                        val: o.val(),
                        history: e.history,
                        historyIndex: e.historyIndex
                    })) : e.historyIndex = e.history.length - 1,
                    c.preventDefault())
                }
                ),
                o.on(t.events.keydown, c => {
                    c.keyCode === t.keyCode.ENTER && e._fireEvent("enter-click", {
                        val: o.val()
                    })
                }
                ),
                o.on(t.events.blur, () => {
                    i.removeClass("focused")
                }
                ),
                o.on(t.events.focus, () => {
                    i.addClass("focused")
                }
                ),
                o.on(t.events.input, function() {
                    let c = this.value.toLowerCase();
                    e._drawAutocompleteList(c)
                }),
                i.on(t.events.click, ".autocomplete-list .item", function() {
                    let c = r(this).attr("data-autocomplete-value");
                    o.val(c),
                    s.css({
                        display: "none"
                    }),
                    o.trigger("change"),
                    e._fireEvent("autocomplete-select", {
                        value: c
                    })
                })
            },
            _generateRandomValue: function() {
                let e = this.options
                  , o = e.randomSymbols.split(";")
                  , a = Math.round(e.randomLength / o.length)
                  , i = [];
                for (let s of o) {
                    let c = s.split("")
                      , d = c.length;
                    for (let p = 0; p < a; p++)
                        i.push(c[Math.floor(Math.random() * d)])
                }
                return i.shuffle().join("")
            },
            _drawAutocompleteList: function(e) {
                let o = this
                  , s = this.element.closest(".input").find(".autocomplete-list");
                if (s.length === 0)
                    return;
                s.html("");
                let c = this.autocomplete.filter(d => d.toLowerCase().indexOf(e) > -1);
                s.css({
                    display: c.length > 0 ? "block" : "none"
                }),
                r.each(c, function() {
                    let d = this.toLowerCase().indexOf(e), p, m = r("<div>").addClass("item").attr("data-autocomplete-value", this);
                    d === 0 ? p = `<strong>${this.substring(0, e.length)}</strong>${this.substring(e.length)}` : p = `${this.substring(0, d)}<strong>${this.substring(d, e.length)}</strong>${this.substring(d + e.length)}`,
                    m.html(p).appendTo(s),
                    o._fireEvent("draw-autocomplete-item", {
                        item: m
                    })
                })
            },
            getHistory: function() {
                return this.history
            },
            getHistoryIndex: function() {
                return this.historyIndex
            },
            setHistoryIndex: function(e) {
                this.historyIndex = e >= this.history.length ? this.history.length - 1 : e
            },
            setHistory: function(e, o) {
                let a = this
                  , i = this.options;
                if (!e)
                    return;
                typeof e != "string" && !Array.isArray(e) && (console.error("History must be a string or an array!"),
                console.dir(e));
                let s = typeof e == "string" ? e.toArray(i.historyDivider) : e;
                o === !0 ? r.each(s, function() {
                    a.history.push(this)
                }) : this.history = e,
                this.historyIndex = this.history.length - 1
            },
            clear: function() {
                this.element.val("")
            },
            toDefault: function() {
                this.element.val(t.utils.isValue(this.options.defaultValue) ? this.options.defaultValue : "")
            },
            disable: function() {
                this.element.data("disabled", !0),
                this.element.parent().addClass("disabled")
            },
            enable: function() {
                this.element.data("disabled", !1),
                this.element.parent().removeClass("disabled")
            },
            toggleState: function() {
                this.elem.disabled ? this.disable() : this.enable()
            },
            setAutocompleteList: function(e) {
                let o = t.utils.isObject(e);
                o !== !1 ? this.autocomplete = o : typeof e == "string" && (this.autocomplete = e.toArray(this.options.autocompleteDivider))
            },
            val: function(e, o=";") {
                let a = this.element
                  , i = this.options;
                if (!t.utils.isValue(e)) {
                    let m = a.val();
                    return i.prependOptions && (m = this.prependOptionsList.val() + m),
                    i.appendOptions && (m = m + this.appendOptionsList.val()),
                    m
                }
                let s = e.split(o)
                  , c = ""
                  , d = "";
                i.prependOptions && (c = s.shift(),
                t.getPlugin(this.prependOptionsList, "select").val(c),
                console.log(c)),
                i.appendOptions && (d = s.pop(),
                t.getPlugin(this.appendOptionsList, "select").val(d));
                let p = s.join("");
                a.val(p)
            },
            prependOptionsVal: function(e) {
                this.options.prependOptions && (t.utils.isValue(e) || this.prependOptionsList.val(),
                this.prependOptionsList.val(e))
            },
            appendOptionsVal: function(e) {
                if (this.options.appendOptions) {
                    if (!t.utils.isValue(e))
                        return this.appendOptionsList.val();
                    this.appendOptionsList.val(e)
                }
            },
            changeAttribute: function(e) {
                switch (e) {
                case "disabled":
                    this.toggleState();
                    break
                }
            },
            destroy: function() {
                let e = this.element
                  , o = this.options
                  , a = e.parent()
                  , i = a.find(".input-clear-button")
                  , s = a.find(".input-reveal-button")
                  , c = a.find(".input-custom-button");
                i.length > 0 && i.off(t.events.click),
                s.length > 0 && (s.off(t.events.start),
                s.off(t.events.stop)),
                c.length > 0 && i.off(t.events.click),
                e.off(t.events.blur),
                e.off(t.events.focus),
                o.label && a.prev("label").remove(),
                a.remove()
            }
        }),
        r(document).on(t.events.click, () => {
            r(".input .autocomplete-list").hide()
        }
        )
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            radioDeferred: 0,
            prepend: "",
            append: "",
            caption: "",
            clsRadio: "",
            clsCaption: "",
            clsPrepend: "",
            clsAppend: "",
            onRadioCreate: t.noop
        };
        t.metroRadioSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroRadioSetup != "undefined" && t.metroRadioSetup(globalThis.metroRadioSetup),
        t.Component("radio", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    origin: {
                        className: ""
                    }
                }),
                this
            },
            _create: function() {
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("radio-create")
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options
                  , a = e.wrap("<label>").addClass("radio").addClass(o.clsCheckbox);
                e.attr("type", "radio"),
                o.prepend && a.prepend(r("<span>").addClass("caption-prepend").addClass(o.clsPrepend).addClass(o.clsCaption).html(o.prepend)),
                (o.append || o.caption) && a.append(r("<span>").addClass("caption-append").addClass(o.clsAppend).addClass(o.clsCaption).html(o.append || o.caption)),
                e.attr("readonly") && e.on("click", i => {
                    i.preventDefault()
                }
                ),
                this.elem.checked && (this.state = !0),
                this._drawState()
            },
            _drawState: () => {}
            ,
            _createEvents: function() {
                this.element.on("click", () => {
                    this._drawState()
                }
                )
            },
            check: function() {
                this.setCheckState(CHECKBOX_STATE.CHECKED)
            },
            uncheck: function() {
                this.setCheckState(CHECKBOX_STATE.UNCHECKED)
            },
            setCheckState: function(e=!0) {
                return this.elem.checked = e,
                this._drawState(),
                this
            },
            getCheckState: function(e=!1) {
                let o = this.elem.checked;
                if (!e)
                    return o;
                switch (this.state) {
                case !1:
                    return "unchecked";
                case !0:
                    return "checked"
                }
            },
            toggle: function() {
                this.elem.checked = !this.elem.checked,
                this._drawState()
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                let e = this.element;
                e.off("click"),
                e.parent().remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = "hex, rgb, rgba, hsl, hsla, hsv, cmyk"
          , e = {
            defaultSwatches: "#FFFFFF,#000000,#FFFB0D,#0532FF,#FF9300,#00F91A,#FF2700,#686868,#EE5464,#D27AEE,#5BA8C4,#E64AA9,#1ba1e2,#6a00ff,#bebebe,#f8f8f8",
            userColors: null,
            returnValueType: "hex",
            returnAsString: !0,
            showValues: l,
            showAsString: null,
            showUserColors: !0,
            controller: null,
            addUserColorTitle: null,
            userColorsTitle: null,
            hslMode: "percent",
            showAlphaChannel: !0,
            inputThreshold: 300,
            initColor: null,
            readonlyInput: !1,
            clsSelector: "",
            clsSwatches: "",
            clsSwatch: "",
            clsValue: "",
            clsLabel: "",
            clsInput: "",
            clsUserColorButton: "",
            clsUserColors: "",
            clsUserColorsTitle: "",
            clsUserColor: "",
            onSelectColor: t.noop,
            onColorSelectorCreate: t.noop
        };
        t.colorSelectorSetup = o => {
            e = r.extend({}, e, o)
        }
        ,
        typeof globalThis.metroColorSelectorSetup != "undefined" && t.colorSelectorSetup(globalThis.metroColorSelectorSetup),
        t.Component("color-selector", {
            init: function(o, a) {
                return this._super(a, o, e, {
                    id: null,
                    defaultSwatches: [],
                    showValues: [],
                    userColors: [],
                    showAsString: [],
                    hue: 0,
                    saturation: 0,
                    lightness: 1,
                    alpha: 1,
                    hsl: null,
                    hsla: null,
                    hsv: null,
                    rgb: null,
                    rgba: null,
                    cmyk: null,
                    hex: null,
                    inputInterval: null,
                    controller: null
                }),
                this
            },
            _create: function() {
                let o = this.options;
                this.id = Hooks.useId(this.element),
                t.utils.isValue(o.defaultSwatches) && (this.defaultSwatches = o.defaultSwatches.toArray(",").map(a => a.toUpperCase())),
                t.utils.isValue(o.showValues) && (this.showValues = o.showValues.toArray(",")),
                t.utils.isValue(o.userColors) && (this.userColors = o.userColors.toArray(",").map(a => a.toUpperCase())),
                t.utils.isValue(o.showAsString) && (this.showAsString = o.showAsString.toArray(",")),
                this._createStructure(),
                this._createEvents(),
                this._setColorValues(),
                this._fireEvent("color-selector-create")
            },
            _createStructure: function() {
                let o = this, a = this.element, i = this.options, s = this.strings, c, d, p, m, g;
                a.addClass("color-selector").addClass(i.clsSelector);
                let f = r("<div>").addClass("color-box");
                a.append(f),
                c = r("<div>").addClass("row"),
                f.append(c);
                let u = r("<div>").addClass("default-swatches").addClass(i.clsSwatches);
                c.append(u),
                r.each(this.defaultSwatches, function() {
                    u.append(r("<button>").attr("data-color", this).attr("type", "button").addClass("swatch").addClass(i.clsSwatch).css("background-color", this))
                }),
                c = r("<div>").addClass("row"),
                f.append(c),
                d = r("<div>").addClass("color-map"),
                c.append(d);
                let h = r("<button>").attr("type", "button").addClass("cursor color-cursor dragging");
                d.append(h);
                let b = r("<canvas>").addClass("color-canvas");
                d.append(b),
                d = r("<div>").addClass("hue-map"),
                c.append(d);
                let w = r("<button>").attr("type", "button").addClass("cursor hue-cursor dragging");
                d.append(w);
                let Q = r("<canvas>").addClass("hue-canvas");
                d.append(Q),
                d = r("<div>").addClass("alpha-map"),
                c.append(d);
                let C = r("<button>").attr("type", "button").addClass("cursor alpha-cursor dragging");
                d.append(C);
                let B = r("<canvas>").addClass("alpha-canvas");
                d.append(B),
                c = r("<div>").addClass("row color-values-block"),
                f.append(c),
                p = r("<div>").addClass("color-value-hex"),
                c.append(p),
                p.append(r("<input type='radio' name='returnType' value='hex' checked>").addClass("check-color-value-hex")),
                g = r("<div>").addClass("color-block as-string color-hex"),
                p.append(g),
                g.append(r("<input type='text' data-prepend='HEX:'>").addClass("input-small value-hex")),
                p = r("<div>").addClass("color-value-rgb"),
                c.append(p),
                p.append(r("<input type='radio' name='returnType' value='rgb'>").addClass("check-color-value-rgb")),
                g = r("<div>").addClass("color-block color-rgb"),
                p.append(g),
                g.append(r("<input type='text' data-prepend='R:'>").addClass("input-small value-r")),
                g.append(r("<input type='text' data-prepend='G:'>").addClass("input-small value-g")),
                g.append(r("<input type='text' data-prepend='B:'>").addClass("input-small value-b")),
                g = r("<div>").addClass("color-block as-string color-rgb"),
                p.append(g),
                g.append(r("<input type='text' data-prepend='RGB:'>").addClass("input-small value-rgb")),
                this.showAsString.indexOf("rgb") > -1 ? p.find(".value-r,.value-g,.value-b").parent().hide() : p.find(".value-rgb").parent().hide(),
                p = r("<div>").addClass("color-value-rgba"),
                c.append(p),
                p.append(r("<input type='radio' name='returnType' value='rgba'>").addClass("check-color-value-rgba")),
                g = r("<div>").addClass("color-block color-rgba"),
                p.append(g),
                g.append(r("<input type='text' data-prepend='R:'>").addClass("input-small value-r")),
                g.append(r("<input type='text' data-prepend='G:'>").addClass("input-small value-g")),
                g.append(r("<input type='text' data-prepend='B:'>").addClass("input-small value-b")),
                g.append(r("<input type='text' data-prepend='A:'>").addClass("input-small value-a")),
                g = r("<div>").addClass("color-block as-string color-rgba"),
                p.append(g),
                g.append(r("<input type='text' data-prepend='RGBA:'>").addClass("input-small value-rgba")),
                this.showAsString.indexOf("rgba") > -1 ? p.find(".value-r,.value-g,.value-b,.value-a").parent().hide() : p.find(".value-rgba").parent().hide(),
                p = r("<div>").addClass("color-value-hsl"),
                c.append(p),
                p.append(r("<input type='radio' name='returnType' value='hsl'>").addClass("check-color-value-hsl")),
                g = r("<div>").addClass("color-block color-hsl"),
                p.append(g),
                g.append(r("<input type='text' data-prepend='H:'>").addClass("input-small value-h")),
                g.append(r("<input type='text' data-prepend='S:'>").addClass("input-small value-s")),
                g.append(r("<input type='text' data-prepend='L:'>").addClass("input-small value-l")),
                g = r("<div>").addClass("color-block as-string color-hsl"),
                p.append(g),
                g.append(r("<input type='text' data-prepend='HSL:'>").addClass("input-small value-hsl")),
                this.showAsString.indexOf("hsl") > -1 ? p.find(".value-h,.value-s,.value-l").parent().hide() : p.find(".value-hsl").parent().hide(),
                p = r("<div>").addClass("color-value-hsla"),
                c.append(p),
                p.append(r("<input type='radio' name='returnType' value='hsla'>").addClass("check-color-value-hsla")),
                g = r("<div>").addClass("color-block color-hsla"),
                p.append(g),
                g.append(r("<input type='text' data-prepend='H:'>").addClass("input-small value-h")),
                g.append(r("<input type='text' data-prepend='S:'>").addClass("input-small value-s")),
                g.append(r("<input type='text' data-prepend='L:'>").addClass("input-small value-l")),
                g.append(r("<input type='text' data-prepend='A:'>").addClass("input-small value-a")),
                g = r("<div>").addClass("color-block as-string color-hsla"),
                p.append(g),
                g.append(r("<input type='text' data-prepend='HSLA:'>").addClass("input-small value-hsla")),
                this.showAsString.indexOf("hsla") > -1 ? p.find(".value-h,.value-s,.value-l,.value-a").parent().hide() : p.find(".value-hsla").parent().hide(),
                p = r("<div>").addClass("color-value-hsv"),
                c.append(p),
                p.append(r("<input type='radio' name='returnType' value='hsv'>").addClass("check-color-value-hsl")),
                g = r("<div>").addClass("color-block color-hsv"),
                p.append(g),
                g.append(r("<input type='text' data-prepend='H:'>").addClass("input-small value-h")),
                g.append(r("<input type='text' data-prepend='S:'>").addClass("input-small value-s")),
                g.append(r("<input type='text' data-prepend='V:'>").addClass("input-small value-v")),
                g = r("<div>").addClass("color-block as-string color-hsv"),
                p.append(g),
                g.append(r("<input type='text' data-prepend='HSV:'>").addClass("input-small value-hsv")),
                this.showAsString.indexOf("hsv") > -1 ? p.find(".value-h,.value-s,.value-v").parent().hide() : p.find(".value-hsv").parent().hide(),
                p = r("<div>").addClass("color-value-cmyk"),
                c.append(p),
                p.append(r("<input type='radio' name='returnType' value='cmyk'>").addClass("check-color-value-cmyk")),
                g = r("<div>").addClass("color-block color-cmyk"),
                p.append(g),
                g.append(r("<input type='text' data-prepend='C:'>").addClass("input-small value-c")),
                g.append(r("<input type='text' data-prepend='M:'>").addClass("input-small value-m")),
                g.append(r("<input type='text' data-prepend='Y:'>").addClass("input-small value-y")),
                g.append(r("<input type='text' data-prepend='K:'>").addClass("input-small value-k")),
                g = r("<div>").addClass("color-block as-string color-cmyk"),
                p.append(g),
                g.append(r("<input type='text' data-prepend='CMYK:'>").addClass("input-small value-cmyk")),
                this.showAsString.indexOf("cmyk") > -1 ? p.find(".value-s,.value-m,.value-y,.value-k").parent().hide() : p.find(".value-cmyk").parent().hide(),
                c = r("<div>").addClass("row user-colors-css-container"),
                f.append(c),
                c.append(r("<div>").addClass("user-colors-title").addClass(i.clsUserColorsTitle).html(i.userColorsTitle || s.label_user_colors)),
                c.append(r("<div>").addClass("user-colors").addClass(i.clsUserColors));
                let x = r("<div>").addClass("user-colors-actions");
                c.append(x),
                x.append(r("<button>").addClass("button add-button").addClass(i.clsUserColorButton).html(`<span class='user-swatch'></span><span>${i.addUserColorTitle || s.label_add_user_color}</span>`)),
                m = f.find("input[type=text]"),
                t.makePlugin(m, "input", {
                    clearButton: !1,
                    clsPrepend: i.clsLabel,
                    clsComponent: i.clsInput
                }),
                m.addClass(i.clsValue),
                i.readonlyInput && m.attr("readonly", !0);
                let v = f.find("input[type=radio]").each(function() {
                    r(this).attr("name", `${o.id}-returnType`)
                });
                v.each(function() {
                    r(this).val() === i.returnValueType && (this.checked = !0)
                }),
                t.makePlugin(v, "radio"),
                r.each(l.toArray(","), function() {
                    o.showValues.indexOf(this) === -1 && a.find(`.color-value-${this}`).hide()
                }),
                i.showUserColors || a.find(".user-colors-css-container").hide(),
                i.showAlphaChannel || (a.addClass("no-alpha-channel"),
                r.each(["rgba", "hsla"], function() {
                    a.find(`.color-value-${this}`).hide()
                })),
                this._fillUserColors(),
                this.hueCanvas = Q,
                this.hueCursor = w,
                this.shadeCanvas = b,
                this.shadeCursor = h,
                this.alphaCanvas = B,
                this.alphaCursor = C,
                this._createShadeCanvas(),
                this._createHueCanvas(),
                this._createAlphaCanvas(),
                this._setColorValues(),
                this._updateCursorsColor(),
                i.initColor && Farbe.Routines.isColor(i.initColor) && this._colorToPos(typeof i.initColor == "string" ? Farbe.Routines.parse(i.initColor) : i.initColor),
                this.controller = i.controller ? r(i.controller) : null
            },
            _createShadeCanvas: function(o="#f00") {
                let a = this.shadeCanvas[0]
                  , i = a.getContext("2d");
                i.clearRect(0, 0, a.width, a.height),
                i.clearRect(0, 0, a.width, a.height),
                i.fillStyle = o,
                i.fillRect(0, 0, a.width, a.height);
                let s = i.createLinearGradient(0, 0, a.width, 0);
                s.addColorStop(0, "#fff"),
                s.addColorStop(1, "transparent"),
                i.fillStyle = s,
                i.fillRect(0, 0, a.width, a.height);
                let c = i.createLinearGradient(0, 0, 0, a.height);
                c.addColorStop(0, "transparent"),
                c.addColorStop(1, "#000"),
                i.fillStyle = c,
                i.fillRect(0, 0, a.width, a.height)
            },
            _createHueCanvas: function() {
                let o = this.hueCanvas[0]
                  , a = o.getContext("2d")
                  , i = a.createLinearGradient(0, 0, 0, o.height);
                i.addColorStop(0, "hsl(0,100%,50%)"),
                i.addColorStop(.17, "hsl(298.8, 100%, 50%)"),
                i.addColorStop(.33, "hsl(241.2, 100%, 50%)"),
                i.addColorStop(.5, "hsl(180, 100%, 50%)"),
                i.addColorStop(.67, "hsl(118.8, 100%, 50%)"),
                i.addColorStop(.83, "hsl(61.2,100%,50%)"),
                i.addColorStop(1, "hsl(360,100%,50%)"),
                a.clearRect(0, 0, o.width, o.height),
                a.fillStyle = i,
                a.fillRect(0, 0, o.width, o.height)
            },
            _createAlphaCanvas: function() {
                let o = this.alphaCanvas[0]
                  , a = o.getContext("2d")
                  , i = a.createLinearGradient(0, 0, 0, o.height)
                  , s = new Farbe.Primitives.HSLA(this.hue,1,.5,1).toString()
                  , c = "rgba(0,0,0,0)";
                i.addColorStop(0, s),
                i.addColorStop(1, c),
                a.clearRect(0, 0, o.width, o.height),
                a.fillStyle = i,
                a.fillRect(0, 0, o.width, o.height)
            },
            _updateHueCursor: function(o) {
                this.hueCursor.css({
                    top: o
                })
            },
            _updateAlphaCursor: function(o) {
                this.alphaCursor.css({
                    top: o
                })
            },
            _getHueColor: function(o) {
                let a = this.hueCanvas, i = a.offset(), s = a.height(), c, d;
                c = o - i.top,
                c > s && (c = s),
                c < 0 && (c = 0),
                d = 360 - 360 * (c / s),
                d === 360 && (d = 0);
                let m = `hsl(${d}, 100%, 50%)`;
                this.hue = d,
                this._createShadeCanvas(m),
                this._createAlphaCanvas(),
                this._updateHueCursor(c),
                this._updateCursorsColor(),
                this._setColorValues()
            },
            _getAlphaValue: function(o) {
                let a = this.alphaCanvas, i = a.offset(), s = a.height(), c;
                c = o - i.top,
                c > s && (c = s),
                c < 0 && (c = 0);
                let d = 1 - c / s;
                this.alpha = d.toFixed(2),
                this._updateAlphaCursor(c),
                this._updateCursorsColor(),
                this._setColorValues()
            },
            _getShadeColor: function(o, a) {
                let i = this.shadeCanvas
                  , s = i.offset()
                  , c = i.width()
                  , d = i.height()
                  , p = o - s.left
                  , m = a - s.top;
                p > c && (p = c),
                p < 0 && (p = 0),
                m > d && (m = d),
                m < 0 && (m = .1);
                let g = p / c * 100
                  , u = 1 - m / d * 100 / 100
                  , h = g / 100
                  , b = u / 2 * (2 - h)
                  , w = u * h / (1 - Math.abs(2 * b - 1));
                Number.isNaN(b) && (b = 0),
                Number.isNaN(w) && (w = 0),
                this.lightness = b,
                this.saturation = w,
                this._updateShadeCursor(p, m),
                this._updateCursorsColor(),
                this._setColorValues()
            },
            _updateCursorsColor: function() {
                this.shadeCursor.css({
                    backgroundColor: Farbe.Routines.toHEX(new Farbe.Primitives.HSL(this.hue,this.saturation,this.lightness))
                }),
                this.hueCursor.css({
                    backgroundColor: Farbe.Routines.toHEX(new Farbe.Primitives.HSL(this.hue,1,.5))
                }),
                this.alphaCursor.css({
                    backgroundColor: Farbe.Routines.toRGBA(new Farbe.Primitives.HSL(this.hue,1,.5), this.alpha).toString()
                })
            },
            _updateShadeCursor: function(o, a) {
                this.shadeCursor.css({
                    top: a,
                    left: o
                })
            },
            _colorToPos: function(o) {
                let a = this.shadeCanvas[0].getBoundingClientRect()
                  , i = this.hueCanvas[0].getBoundingClientRect()
                  , s = this.alphaCanvas[0].getBoundingClientRect()
                  , c = Farbe.Routines.toHSL(o)
                  , d = Farbe.Routines.toHSLA(o)
                  , p = Farbe.Routines.toHSV(o)
                  , m = a.width * p.s
                  , g = a.height * (1 - p.v)
                  , f = i.height - c.h / 360 * i.height
                  , u = (1 - d.a) * s.height;
                this.hue = c.h,
                this.saturation = c.s,
                this.lightness = c.l,
                this.alpha = d.a,
                this._updateHueCursor(f),
                this._updateShadeCursor(m, g),
                this._updateAlphaCursor(u),
                this._updateCursorsColor(),
                this._createShadeCanvas(`hsl(${this.hue}, 100%, 50%)`),
                this._createAlphaCanvas(),
                this._setColorValues()
            },
            _setColorValues: function() {
                let o = this.element
                  , a = this.options
                  , i = new Farbe.Primitives.HSL(this.hue,this.saturation,this.lightness)
                  , s = new Farbe.Primitives.HSLA(this.hue,this.saturation,this.lightness,this.alpha)
                  , c = Farbe.Routines.toRGB(i)
                  , d = Farbe.Routines.toRGBA(c, this.alpha)
                  , p = Farbe.Routines.toHSV(i)
                  , m = Farbe.Routines.toCMYK(i)
                  , g = Farbe.Routines.toHEX(i)
                  , f = this.controller
                  , u = a.hslMode === "percent";
                this.hsl = i,
                this.hsla = s,
                this.hsv = p,
                this.rgb = c,
                this.rgba = d,
                this.hex = g,
                this.cmyk = m,
                o.find(".color-value-hex .value-hex input").val(g),
                o.find(".color-value-rgb .value-r input").val(c.r),
                o.find(".color-value-rgb .value-g input").val(c.g),
                o.find(".color-value-rgb .value-b input").val(c.b),
                o.find(".color-value-rgb .value-rgb input").val(c.toString()),
                o.find(".color-value-rgba .value-r input").val(d.r),
                o.find(".color-value-rgba .value-g input").val(d.g),
                o.find(".color-value-rgba .value-b input").val(d.b),
                o.find(".color-value-rgba .value-a input").val(d.a),
                o.find(".color-value-rgba .value-rgba input").val(d.toString()),
                o.find(".color-value-hsl .value-h input").val(i.h.toFixed(0)),
                o.find(".color-value-hsl .value-s input").val(u ? `${Math.round(i.s * 100)}%` : i.s.toFixed(4)),
                o.find(".color-value-hsl .value-l input").val(u ? `${Math.round(i.l * 100)}%` : i.l.toFixed(4)),
                o.find(".color-value-hsl .value-hsl input").val(i.toString()),
                o.find(".color-value-hsla .value-h input").val(s.h.toFixed(0)),
                o.find(".color-value-hsla .value-s input").val(u ? `${Math.round(s.s * 100)}%` : i.s.toFixed(4)),
                o.find(".color-value-hsla .value-l input").val(u ? `${Math.round(s.l * 100)}%` : i.l.toFixed(4)),
                o.find(".color-value-hsla .value-a input").val(s.a),
                o.find(".color-value-hsla .value-hsla input").val(s.toString()),
                o.find(".color-value-hsv .value-h input").val(p.h.toFixed(0)),
                o.find(".color-value-hsv .value-s input").val(u ? `${Math.round(p.s * 100)}%` : p.s.toFixed(4)),
                o.find(".color-value-hsv .value-v input").val(u ? `${Math.round(p.v * 100)}%` : p.v.toFixed(4)),
                o.find(".color-value-hsv .value-hsv input").val(p.toString()),
                o.find(".color-value-cmyk .value-c input").val(m.c.toFixed(0)),
                o.find(".color-value-cmyk .value-m input").val(m.m.toFixed(0)),
                o.find(".color-value-cmyk .value-y input").val(m.y.toFixed(0)),
                o.find(".color-value-cmyk .value-k input").val(m.k.toFixed(0)),
                o.find(".color-value-cmyk .value-cmyk input").val(m.toString()),
                o.find(".user-colors-actions .user-swatch").css({
                    backgroundColor: g
                });
                let h = this.getVal();
                f != null && f.length && f.val(h),
                this._fireEvent("select-color", {
                    color: h,
                    primitive: {
                        hsl: this.hsl,
                        hsla: this.hsla,
                        rgb: this.rgb,
                        rgba: this.rgba,
                        hsv: this.hsv,
                        cmyk: this.cmyk,
                        hex: this.hex
                    }
                })
            },
            _clearInputInterval: function() {
                clearInterval(this.inputInterval),
                this.inputInterval = !1
            },
            _createEvents: function() {
                let o = this
                  , a = this.element
                  , i = this.options
                  , s = a.find(".hue-map")
                  , c = a.find(".alpha-map")
                  , d = a.find(".color-map")
                  , p = this.controller
                  , m = a.find(".color-values-block input[type=text]")
                  , g = f => {
                    let u = r(f.target), h = u.closest(".color-block"), b, w, Q;
                    h.hasClass("color-hex") ? b = "hex" : h.hasClass("color-rgb") ? b = "rgb" : h.hasClass("color-rgba") ? b = "rgba" : h.hasClass("color-hsl") ? b = "hsl" : h.hasClass("color-hsla") ? b = "hsla" : h.hasClass("color-hsv") ? b = "hsv" : h.hasClass("color-cmyk") && (b = "cmyk"),
                    h.hasClass("as-string") ? w = u.val() : (Q = [],
                    r.each(h.find("input"), function() {
                        Q.push(this.value)
                    }),
                    w = `${b}(${Q.join(", ")})`),
                    w && Farbe.Routines.isColor(w) && o.val(w)
                }
                ;
                if (g = Hooks.useDebounce(g, i.inputThreshold),
                m.on(t.events.inputchange, g),
                p != null && p.length) {
                    let f = Hooks.useDebounce( () => {
                        let u = p.val();
                        u && Farbe.Routines.isColor(u) && o.val(u)
                    }
                    , i.inputThreshold);
                    p.on(t.events.inputchange, f)
                }
                c.on(t.events.startAll, f => {
                    ["hsla", "rgba"].includes(i.returnValueType),
                    o._getAlphaValue(t.utils.pageXY(f).y),
                    r(document).on(t.events.moveAll, u => {
                        u.preventDefault(),
                        o._getAlphaValue(t.utils.pageXY(u).y)
                    }
                    , {
                        ns: o.id
                    }),
                    r(document).on(t.events.stopAll, () => {
                        r(document).off(t.events.moveAll, {
                            ns: o.id
                        }),
                        r(document).off(t.events.stopAll, {
                            ns: o.id
                        })
                    }
                    , {
                        ns: o.id
                    })
                }
                , {
                    passive: !0
                }),
                s.on(t.events.startAll, f => {
                    o._getHueColor(t.utils.pageXY(f).y),
                    r(document).on(t.events.moveAll, u => {
                        u.preventDefault(),
                        o._getHueColor(t.utils.pageXY(u).y)
                    }
                    , {
                        ns: o.id,
                        passive: !1
                    }),
                    r(document).on(t.events.stopAll, () => {
                        r(document).off(t.events.moveAll, {
                            ns: o.id
                        }),
                        r(document).off(t.events.stopAll, {
                            ns: o.id
                        })
                    }
                    , {
                        ns: o.id
                    })
                }
                , {
                    passive: !0
                }),
                d.on(t.events.startAll, f => {
                    o._getShadeColor(t.utils.pageXY(f).x, t.utils.pageXY(f).y),
                    r(document).on(t.events.moveAll, u => {
                        u.preventDefault(),
                        o._getShadeColor(t.utils.pageXY(u).x, t.utils.pageXY(u).y)
                    }
                    , {
                        ns: o.id,
                        passive: !1
                    }),
                    r(document).on(t.events.stopAll, () => {
                        r(document).off(t.events.moveAll, {
                            ns: o.id
                        }),
                        r(document).off(t.events.stopAll, {
                            ns: o.id
                        })
                    }
                    , {
                        ns: o.id
                    })
                }
                , {
                    passive: !0
                }),
                a.on("click", ".swatch", function() {
                    o._colorToPos(r(this).attr("data-color"))
                }),
                a.on("click", ".add-button", () => {
                    let f = Farbe.Routines.toHEX(new Farbe.Primitives.HSL(o.hue,o.saturation,o.lightness)).toUpperCase();
                    o.userColors.includes(f) || (o.userColors.push(f),
                    a.find(".user-colors").append(r("<button>").attr("data-color", f).attr("type", "button").addClass("swatch user-swatch").css({
                        backgroundColor: f
                    })))
                }
                ),
                a.find("input[type=radio]").on("click", function() {
                    i.returnValueType = r(this).val(),
                    o._setColorValues()
                })
            },
            getVal: function() {
                let o = this.options, a;
                switch (o.returnValueType.toLowerCase()) {
                case "rgb":
                    a = this.rgb;
                    break;
                case "rgba":
                    a = this.rgba;
                    break;
                case "hsl":
                    a = this.hsl;
                    break;
                case "hsla":
                    a = this.hsla;
                    break;
                case "hsv":
                    a = this.hsv;
                    break;
                case "cmyk":
                    a = this.cmyk;
                    break;
                default:
                    a = this.hex
                }
                return o.returnAsString ? a.toString() : a
            },
            val: function(o) {
                if (typeof o == "undefined")
                    return this.getVal();
                let a = Farbe.Routines.parse(o);
                this._colorToPos(a)
            },
            user: function(o) {
                if (!t.utils.isValue(o))
                    return this.userColors;
                !Array.isArray(o) && typeof o != "string" || (typeof o == "string" ? this.userColors = o.toArray(",").map(a => a.toUpperCase()) : this.userColors = o.map(a => a.toUpperCase()),
                this._fillUserColors())
            },
            _fillUserColors: function() {
                let o = this.element.find(".user-colors-css").clear();
                r.each(this.userColors, function() {
                    o.append(r("<button>").attr("data-color", this).attr("type", "button").addClass("swatch user-swatch").css({
                        backgroundColor: this
                    }))
                })
            },
            changeAttribute: function(o, a) {
                let i = this.options;
                o === "data-return-value-type" && (i.returnValueType = a),
                o === "data-return-as-string" && (i.returnValueType = t.utils.bool(a))
            },
            destroy: function() {
                this.element.remove()
            }
        }),
        t.defaults.ColorSelector = e
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            defaultSwatches: "#FFFFFF,#000000,#FFFB0D,#0532FF,#FF9300,#00F91A,#FF2700,#686868,#EE5464,#D27AEE,#5BA8C4,#E64AA9,#1ba1e2,#6a00ff,#bebebe,#f8f8f8",
            duration: 100,
            prepend: "",
            append: "",
            label: "",
            clearButton: !1,
            clearButtonIcon: "\u274C",
            pickerButtonIcon: "\u{1F3A8}",
            defaultValue: "rgba(0, 0, 0, 0)",
            openMode: "auto",
            resultType: "hex",
            inputThreshold: 500,
            onColorSelected: t.noop,
            onColorPickerCreate: t.noop
        };
        t.colorPickerSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroColorPickerSetup != "undefined" && t.colorPickerSetup(globalThis.metroColorPickerSetup),
        t.Component("color-picker", {
            init: function(e, o) {
                return this._super(o, e, r.extend({}, t.defaults.ColorSelector, {
                    showUserColors: !1,
                    showValues: ""
                }, l), {
                    value: null,
                    picker: null,
                    colorSelector: null,
                    colorSelectorBox: null,
                    colorExample: null,
                    inputInterval: null,
                    isOpen: !1
                }),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options
                  , a = e.val();
                if (!t.pluginExists("color-selector"))
                    throw new Error("Color selector component required!");
                this.value = Farbe.Routines.isColor(a) ? a : Farbe.Routines.isColor(o.defaultValue) ? o.defaultValue : "rgba(0,0,0,0)",
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("color-picker-create")
            },
            _createStructure: function() {
                let e = this.element, o = this.options, a = e.wrap(r("<div>").addClass("color-picker").addClass(e[0].className)), i, s = r("<div>").addClass("color-example-box").insertBefore(e);
                i = r("<div>").addClass("buttons").appendTo(a),
                i.append(r("<button>").addClass("button color-picker-button").attr("tabindex", -1).attr("type", "button").html(o.pickerButtonIcon)),
                o.clearButton === !0 && !e[0].readOnly && i.append(r("<button>").addClass("button input-clear-button").addClass(o.clsClearButton).attr("tabindex", -1).attr("type", "button").html(o.clearButtonIcon)),
                t.utils.isValue(o.prepend) && a.prepend(r("<div>").addClass("prepend").addClass(o.clsPrepend).html(o.prepend)),
                t.utils.isValue(o.append) && a.append(r("<div>").html(o.append).addClass("append").addClass(o.clsAppend));
                let c = r("<div>").addClass("color-selector-box").appendTo(a)
                  , d = r("<div>").appendTo(c);
                if (this.picker = a,
                this.colorExample = s,
                this.colorSelector = d,
                this.colorSelectorBox = c,
                t.makePlugin(d, "color-selector", {
                    defaultSwatches: o.defaultSwatches,
                    returnValueType: o.resultType,
                    returnAsString: !0,
                    showUserColors: !1,
                    showValues: "",
                    controller: e,
                    showAlphaChannel: !0,
                    inputThreshold: o.inputThreshold,
                    initColor: this.value,
                    readonlyInput: o.readonlyInput,
                    onSelectColor: p => {
                        this.colorExample.css({
                            backgroundColor: p
                        })
                    }
                    ,
                    onColorSelectorCreate: o.onColorSelectorCreate
                }),
                t.makePlugin(c, "dropdown", {
                    dropFilter: ".color-picker",
                    duration: o.duration,
                    toggleElement: [a],
                    checkDropUp: !0,
                    onDrop: () => {
                        t.getPlugin(d, "color-selector").val(this.value)
                    }
                }),
                e[0].className = "",
                o.label) {
                    let p = r("<label>").addClass("label-for-input").addClass(o.clsLabel).html(o.label).insertBefore(a);
                    if (e.attr("id"))
                        p.attr("for", e.attr("id"));
                    else {
                        let m = Hooks.useId(e[0]);
                        p.attr("for", m),
                        e.attr("id", m)
                    }
                    e.attr("dir") === "rtl" && p.addClass("rtl")
                }
                this._setColor()
            },
            _clearInputInterval: function() {
                clearInterval(this.inputInterval),
                this.inputInterval = !1
            },
            _setColor: function() {
                let e = this.colorExample
                  , o = this.value;
                (this.value.indexOf("cmyk") !== -1 || this.value.indexOf("hsv") !== -1) && (o = Farbe.Routines.toHEX(this.value)),
                e.css({
                    backgroundColor: o
                })
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options
                  , i = this.picker
                  , s = this.colorSelector
                  , c = this.colorSelector;
                i.on(t.events.click, ".input-clear-button", d => {
                    d.preventDefault(),
                    d.stopPropagation(),
                    o.val(a.defaultValue).trigger("change"),
                    t.getPlugin(s, "color-selector").val(a.defaultValue)
                }
                ),
                o.on(t.events.inputchange, function() {
                    e.value = this.value,
                    e._setColor()
                }),
                c.on(t.events.click, d => {
                    d.stopPropagation()
                }
                )
            },
            val: function(e) {
                if (typeof e == "undefined")
                    return this.value;
                Farbe.Routines.isColor(e) && (this.value = e,
                this.element.val(e).trigger("change"),
                this._setColor())
            },
            destroy: function() {
                let e = this.element
                  , o = this.options
                  , a = e.parent();
                o.label && a.prev("label").remove(),
                a.remove()
            }
        }),
        r(document).on(t.events.click, () => {
            r(".color-picker").removeClass("open")
        }
        )
    }
    )(Metro, Dom);
    ( (t, r) => {
        t.contextMenu = (l=[], e=document) => {
            function o(a) {
                let i = r("<ul>").addClass("d-menu context-menu").css("display", "none");
                for (let s of a)
                    if (s.type === "divider")
                        i.append(r("<li>").addClass("divider"));
                    else {
                        let c = r("<li>").appendTo(i)
                          , d = r("<a>").appendTo(c);
                        if (s.icon && d.append(r("<span>").addClass("icon").html(s.icon)),
                        d.append(r("<span>").addClass("caption").html(s.text)),
                        d.href(s.href || "#"),
                        s.onclick && d.on("click", p => {
                            t.utils.exec(s.onclick, [p, s])
                        }
                        ),
                        s.attributes)
                            for (let[p,m] of Object.entries(s.attributes))
                                d.attr(p, m);
                        if (s.disabled && d.prop("disabled", !0),
                        s.items) {
                            let p = o(s.items);
                            c.children("a").addClass("dropdown-toggle"),
                            c.append(p),
                            t.makePlugin(p, "dropdown", {})
                        }
                    }
                return i[0]
            }
            typeof e == "string" && (e = document.querySelector(e)),
            e.context_menu = o(l),
            e.nodeType === 1 ? e.append(e.context_menu) : r("body").append(e.context_menu),
            e.oncontextmenu = function(a) {
                a.preventDefault(),
                a.stopPropagation(),
                r(".context-menu").hide(),
                this.context_menu.style.position = "fixed",
                this.context_menu.style.left = `${a.pageX}px`,
                this.context_menu.style.top = `${a.pageY}px`,
                this.context_menu.style.display = "block",
                console.log(`Context menu opened at (${a.pageX}, ${a.pageY})`)
            }
        }
        ,
        r(document).on("click", () => {
            r(".context-menu").hide()
        }
        )
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            path: "/",
            expires: null,
            maxAge: null,
            domain: null,
            secure: !1,
            samesite: null
        };
        t.cookieSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroCookieSetup != "undefined" && t.cookieSetup(globalThis.metroCookieSetup),
        t.cookie = {
            getCookies: () => {
                let e = document.cookie.toArray(";")
                  , o = {};
                return r.each(e, function() {
                    let a = this.split("=");
                    o[a[0]] = a[1]
                }),
                o
            }
            ,
            getCookie: e => {
                let o = `${encodeURIComponent(e)}=`, a = document.cookie.toArray(";"), i, s;
                for (i = 0; i < a.length; i++) {
                    for (s = a[i]; s.charAt(0) === " "; )
                        s = s.substring(1, s.length);
                    if (s.indexOf(o) === 0)
                        return decodeURIComponent(s.substring(o.length, s.length))
                }
                return null
            }
            ,
            setCookie: (e, o, a) => {
                let i, s = encodeURIComponent(e), c = encodeURIComponent(o), d, p = [];
                a && typeof a != "object" ? (i = new Date,
                i.setTime(i.getTime() + Number.parseInt(a)),
                d = r.extend({}, l, {
                    expires: i.toUTCString()
                })) : d = r.extend({}, l, a),
                r.each(d, (m, g) => {
                    m !== "secure" && g && p.push(`${Str.dashedName(m)}=${g}`),
                    m === "secure" && g === !0 && p.push("secure")
                }
                ),
                document.cookie = `${s}=${c}; ${p.join("; ")}`
            }
            ,
            delCookie: function(e) {
                this.setCookie(e, !1, {
                    maxAge: -1
                })
            }
        }
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            name: "cookies_accepted",
            templateUrl: null,
            title: "",
            message: "",
            duration: "30days",
            clsContainer: "",
            clsMessage: "",
            clsButtons: "",
            clsAcceptButton: "",
            clsCancelButton: "",
            onAccept: t.noop,
            onDecline: t.noop
        };
        t.cookieDisclaimer = {
            init: function(e) {
                let o = t.cookie;
                this.options = r.extend({}, l, e),
                this.disclaimer = r("<div>"),
                !o.getCookie(this.options.name) && (this.locale = r("html").attr("lang") || "en",
                this.strings = r.extend({}, t.locales.en, t.locales[this.locale]),
                this.options.templateUrl ? fetch(this.options.templateUrl).then(t.fetch.text).then(a => {
                    this.create(a)
                }
                ) : this.create())
            },
            create: function(e) {
                let o = t.cookie
                  , a = this.options
                  , i = this.disclaimer;
                i.addClass("cookie-disclaimer").addClass(a.clsContainer),
                e ? i.append(e) : i.html(r("<div class='disclaimer-message'>").addClass(a.clsMessage).html(`
                                <div class="disclaimer-title">${a.title || this.strings.label_cookies_title}</div>
                                <div class="disclaimer-text">${a.message || this.strings.label_cookies_text}</div>
                            `));
                let s = r("<div>").addClass("disclaimer-actions").addClass(a.clsButtons).append(r("<button>").addClass("button cookie-accept-button").addClass(a.clsAcceptButton).html(this.strings.label_accept)).append(r("<button>").addClass("button cookie-cancel-button").addClass(a.clsCancelButton).html(this.strings.label_cancel));
                s.appendTo(i),
                a.customButtons && r.each(a.customButtons, function() {
                    let c = r("<button>").addClass("button cookie-custom-button").addClass(this.cls).html(this.text);
                    c.on("click", () => {
                        t.utils.exec(this.onclick)
                    }
                    ),
                    c.appendTo(s)
                }),
                i.appendTo(r("body")),
                i.on(t.events.click, ".cookie-accept-button", () => {
                    let c = 0
                      , d = `${a.duration}`.toArray(" ");
                    r.each(d, function() {
                        let p = `${this}`;
                        p.includes("day") ? c += Number.parseInt(p) * 24 * 60 * 60 * 1e3 : p.includes("hour") ? c += Number.parseInt(p) * 60 * 60 * 1e3 : p.includes("min") ? c += Number.parseInt(p) * 60 * 1e3 : p.includes("sec") ? c += Number.parseInt(p) * 1e3 : c += Number.parseInt(p)
                    }),
                    o.setCookie(a.name, !0, c),
                    t.utils.exec(a.onAccept),
                    i.remove()
                }
                ),
                i.on(t.events.click, ".cookie-cancel-button", () => {
                    t.utils.exec(a.onDecline),
                    i.remove()
                }
                )
            }
        }
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            countdownDeferred: 0,
            stopOnBlur: !0,
            animate: "none",
            ease: "linear",
            duration: 600,
            inputFormat: null,
            days: 0,
            hours: 0,
            minutes: 0,
            seconds: 0,
            date: null,
            start: !0,
            fontSize: 24,
            clsCountdown: "",
            clsPart: "",
            clsZero: "",
            clsAlarm: "",
            clsDays: "",
            clsHours: "",
            clsMinutes: "",
            clsSeconds: "",
            onAlarm: t.noop,
            onTick: t.noop,
            onZero: t.noop,
            onBlink: t.noop,
            onCountdownCreate: t.noop
        };
        t.countdownSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroCountdownSetup != "undefined" && t.countdownSetup(globalThis.metroCountdownSetup),
        t.Component("countdown", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    breakpoint: new Date().getTime(),
                    blinkInterval: null,
                    tickInterval: null,
                    zeroDaysFired: !1,
                    zeroHoursFired: !1,
                    zeroMinutesFired: !1,
                    zeroSecondsFired: !1,
                    fontSize: 0,
                    current: {
                        d: 0,
                        h: 0,
                        m: 0,
                        s: 0
                    },
                    inactiveTab: !1,
                    id: null,
                    duration: 600
                }),
                this
            },
            _create: function() {
                let e = this.options;
                this.id = Hooks.useId(this.element),
                this.duration = +e.duration <= 0 || +e.duration >= 1e3 ? 1e3 : +e.duration,
                this._build(),
                this._createEvents()
            },
            _setBreakpoint: function() {
                let e = this.options
                  , o = 864e5
                  , a = 36e5
                  , i = 6e4
                  , s = 1e3;
                this.breakpoint = datetime().time(),
                e.date && (this.breakpoint = (e.inputFormat ? Datetime.from(e.date, e.inputFormat) : datetime(e.date)).time()),
                Number.parseInt(e.days) > 0 && (this.breakpoint += Number.parseInt(e.days) * o),
                Number.parseInt(e.hours) > 0 && (this.breakpoint += Number.parseInt(e.hours) * a),
                Number.parseInt(e.minutes) > 0 && (this.breakpoint += Number.parseInt(e.minutes) * i),
                Number.parseInt(e.seconds) > 0 && (this.breakpoint += Number.parseInt(e.seconds) * s)
            },
            _build: function() {
                let e = this.element
                  , o = this.options
                  , a = ["days", "hours", "minutes", "seconds"]
                  , i = 24 * 60 * 60 * 1e3
                  , s = datetime().time()
                  , c = this.strings;
                e.attr("id") || e.attr("id", this.id),
                e.addClass("countdown").addClass(`animate-${o.animate}`).addClass(o.clsCountdown),
                e.css("font-size", o.fontSize),
                this._setBreakpoint();
                let d = Math.round((this.breakpoint - s) / i);
                r.each(a, function() {
                    let m = r("<div>").addClass(`part ${this}`).addClass(o.clsPart).attr("data-label", c[`label_${this}`]).appendTo(e);
                    if (this === "days" && m.addClass(o.clsDays),
                    this === "hours" && m.addClass(o.clsHours),
                    this === "minutes" && m.addClass(o.clsMinutes),
                    this === "seconds" && m.addClass(o.clsSeconds),
                    r("<div>").addClass("digit").appendTo(m),
                    r("<div>").addClass("digit").appendTo(m),
                    this === "days" && d >= 100)
                        for (let g = 0; g < Math.floor(d / 100) - 2; g++)
                            r("<div>").addClass("digit").appendTo(m)
                });
                let p = e.find(".digit");
                p.append(r("<span class='digit-placeholder'>").html("0")),
                p.append(r("<span class='digit-value'>").html("0")),
                this._fireEvent("countdown-create", {
                    element: e
                }),
                o.start === !0 ? this.start() : this.tick(),
                this.fontSize = Number.parseInt(e.css("font-size"))
            },
            _createEvents: function() {
                r(document).on("visibilitychange", () => {
                    document.hidden ? this.pause() : this.resume()
                }
                , {
                    ns: this.id
                })
            },
            blink: function() {
                this.element.toggleClass("blink"),
                this._fireEvent("blink", {
                    time: this.current
                })
            },
            tick: function() {
                let e = this.element, o = this.options, a = 24 * 60 * 60, i = 60 * 60, s = 60, c = 1, d, p = datetime().time(), m, g, f, u, h = e.find(".days"), b = e.find(".hours"), w = e.find(".minutes"), Q = e.find(".seconds");
                if (d = Math.floor((this.breakpoint - p) / 1e3),
                d <= -1) {
                    this.stop(),
                    e.addClass(o.clsAlarm),
                    this._fireEvent("alarm", {
                        time: p
                    });
                    return
                }
                m = Math.floor(d / a),
                d -= m * a,
                this.current.d !== m && (this.current.d = m,
                this.draw("days", m)),
                m === 0 && this.zeroDaysFired === !1 && (this.zeroDaysFired = !0,
                h.addClass(o.clsZero),
                this._fireEvent("zero", {
                    part: "days",
                    value: h
                })),
                g = Math.floor(d / i),
                d -= g * i,
                this.current.h !== g && (this.current.h = g,
                this.draw("hours", g)),
                m === 0 && g === 0 && this.zeroHoursFired === !1 && (this.zeroHoursFired = !0,
                b.addClass(o.clsZero),
                this._fireEvent("zero", {
                    part: "hours",
                    value: b
                })),
                f = Math.floor(d / s),
                d -= f * s,
                this.current.m !== f && (this.current.m = f,
                this.draw("minutes", f)),
                m === 0 && g === 0 && f === 0 && this.zeroMinutesFired === !1 && (this.zeroMinutesFired = !0,
                w.addClass(o.clsZero),
                this._fireEvent("zero", {
                    part: "minutes",
                    value: w
                })),
                u = Math.floor(d / c),
                this.current.s !== u && (this.current.s = u,
                this.draw("seconds", u)),
                m === 0 && g === 0 && f === 0 && u === 0 && this.zeroSecondsFired === !1 && (this.zeroSecondsFired = !0,
                Q.addClass(o.clsZero),
                this._fireEvent("zero", {
                    part: "seconds",
                    value: Q
                })),
                this._fireEvent("tick", {
                    days: m,
                    hours: g,
                    minutes: f,
                    seconds: u
                })
            },
            draw: function(e, o) {
                let a = this.element, i = this.options, s, c, d, p, m, g, f, u = this.duration, h = this.fontSize || Number.parseInt(getComputedStyle(a[0]).getPropertyValue("font-size")), b = (B, x) => {
                    let v = B.height();
                    B.siblings(".-old-digit").remove();
                    let E = B.clone().appendTo(B.parent());
                    E.css({
                        top: `${-1 * v}px`
                    }),
                    B.addClass("-old-digit").animate({
                        draw: {
                            top: v,
                            opacity: 0
                        },
                        dur: u,
                        ease: i.ease,
                        onDone: function() {
                            r(this).remove()
                        }
                    }),
                    E.html(x).animate({
                        draw: {
                            top: 0,
                            opacity: [0, 1]
                        },
                        dur: u,
                        ease: i.ease
                    })
                }
                , w = (B, x) => {
                    B.siblings(".-old-digit").remove();
                    let v = B.clone().appendTo(B.parent());
                    v.css({
                        opacity: 0
                    }),
                    B.addClass("-old-digit").animate({
                        draw: {
                            opacity: 0
                        },
                        dur: u / 2,
                        ease: i.ease,
                        onDone: function() {
                            r(this).remove()
                        }
                    }),
                    v.html(x).animate({
                        draw: {
                            opacity: 1
                        },
                        dur: u / 2,
                        ease: i.ease
                    })
                }
                , Q = (B, x) => {
                    let v = a.height()
                      , E = h;
                    B.siblings(".-old-digit").remove();
                    let k = B.clone().appendTo(B.parent());
                    k.css({
                        top: 0,
                        left: 0,
                        opacity: 1
                    }),
                    B.addClass("-old-digit").animate({
                        draw: {
                            top: v,
                            opacity: 0,
                            fontSize: 0
                        },
                        dur: u,
                        ease: i.ease,
                        onDone: function() {
                            r(this).remove()
                        }
                    }),
                    k.html(x).animate({
                        draw: {
                            top: 0,
                            opacity: 1,
                            fontSize: [0, E]
                        },
                        dur: u,
                        ease: i.ease
                    })
                }
                , C = `${o}`;
                for (C.length === 1 && (C = `0${o}`),
                g = C.length,
                s = a.find(`.${e} .digit:not(.-old-digit)`),
                c = s.length,
                a.find(".-old-digit").remove(),
                f = 0; f < g; f++)
                    if (m = s.eq(c - 1).find(".digit-value"),
                    d = Math.floor(Number.parseInt(o) / ne(10, f)) % 10,
                    p = Number.parseInt(m.text()),
                    c--,
                    p !== d)
                        switch (`${i.animate}`.toLowerCase()) {
                        case "slide":
                            b(m, d);
                            break;
                        case "fade":
                            w(m, d);
                            break;
                        case "zoom":
                            Q(m, d);
                            break;
                        default:
                            m.html(d)
                        }
            },
            start: function() {
                let e = this.element;
                e.data("paused") !== !1 && (clearInterval(this.blinkInterval),
                clearInterval(this.tickInterval),
                e.data("paused", !1),
                this._setBreakpoint(),
                this.tick(),
                this.blinkInterval = setInterval( () => {
                    this.blink()
                }
                , 500),
                this.tickInterval = setInterval( () => {
                    this.tick()
                }
                , 1e3))
            },
            stop: function() {
                let e = this.element;
                clearInterval(this.blinkInterval),
                clearInterval(this.tickInterval),
                e.data("paused", !0),
                e.find(".digit").html("0"),
                this.current = {
                    d: 0,
                    h: 0,
                    m: 0,
                    s: 0
                }
            },
            pause: function() {
                clearInterval(this.blinkInterval),
                clearInterval(this.tickInterval),
                this.element.data("paused", !0)
            },
            resume: function() {
                this.element.data("paused", !1),
                this.blinkInterval = setInterval( () => {
                    this.blink()
                }
                , 500),
                this.tickInterval = setInterval( () => {
                    this.tick()
                }
                , 1e3)
            },
            reset: function() {
                let e = this.element
                  , o = this.options;
                clearInterval(this.blinkInterval),
                clearInterval(this.tickInterval),
                e.find(".part").removeClass(o.clsZero);
                let a = e.find(".digit").clear();
                a.append(r("<span class='digit-placeholder'>").html("0")),
                a.append(r("<span class='digit-value'>").html("0")),
                this._setBreakpoint(),
                e.data("paused", !1),
                this.tick(),
                this.blinkInterval = setInterval( () => {
                    this.blink()
                }
                , 500),
                this.tickInterval = setInterval( () => {
                    this.tick()
                }
                , 1e3)
            },
            resetWith: function(e) {
                let o = this.element
                  , a = this.options
                  , i = ["days", "hours", "minutes", "seconds"];
                if (this.stop(),
                typeof e == "string") {
                    o.attr("data-date", e);
                    for (let s of i)
                        a[s] = 0;
                    a.date = e
                } else if (typeof e == "object") {
                    a.date = null;
                    for (let s of i) {
                        let c = e[s] !== void 0 ? e[s] : 0;
                        o.attr(`data-${s}`, c),
                        a[s] = c
                    }
                }
                this.reset()
            },
            togglePlay: function() {
                this.element.attr("data-pause") === !0 ? this.pause() : this.start()
            },
            isPaused: function() {
                return this.element.data("paused")
            },
            getBreakpoint: function(e) {
                return e === !0 ? new Date(this.breakpoint) : this.breakpoint
            },
            getLeft: function() {
                let s = new Date().getTime()
                  , c = Math.floor(this.breakpoint - s);
                return {
                    days: Math.round(c / 864e5),
                    hours: Math.round(c / 36e5),
                    minutes: Math.round(c / 6e4),
                    seconds: Math.round(c / 1e3)
                }
            },
            changeAttribute: function(e, o) {
                switch (e) {
                case "data-pause":
                    this.togglePlay();
                    break;
                case "data-duration":
                    this.duration = +o <= 0 || +o >= 1e3 ? 600 : +o;
                    break
                }
            },
            destroy: function() {
                clearInterval(this.blinkInterval),
                clearInterval(this.tickInterval),
                r(document).off("visibilitychange", {
                    ns: this.id
                }),
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            startOnViewport: !1,
            counterDeferred: 0,
            duration: 2e3,
            value: 0,
            from: 0,
            timeout: 0,
            delimiter: ",",
            prefix: "",
            suffix: "",
            size: 16,
            onStart: t.noop,
            onStop: t.noop,
            onTick: t.noop,
            onCounterCreate: t.noop
        };
        t.counterSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroCounterSetup != "undefined" && t.counterSetup(globalThis.metroCounterSetup),
        t.Component("counter", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    numbers: [],
                    html: r(o).html(),
                    started: !1,
                    id: null
                }),
                this
            },
            _create: function() {
                this.id = Hooks.useId(this.element),
                this._createStruct(),
                this._createEvents(),
                this._fireEvent("counter-create")
            },
            _createStruct: function() {
                let e = this.element
                  , o = this.elem
                  , a = this.options;
                this.elem.value = 0,
                e.css("font-size", this.options.size)
            },
            _createEvents: function() {
                this.options.startOnViewport && Hooks.useEvent({
                    effect: () => {
                        this.start()
                    }
                    ,
                    target: this.elem,
                    event: Hooks.EVENTS.VIEWPORT
                })
            },
            start: function(e, o) {
                let a = this
                  , i = this.elem
                  , s = this.options;
                t.utils.isValue(o) && (s.from = +o),
                t.utils.isValue(e) && (s.value = +e),
                this.started = !0;
                let c = s.from
                  , d = s.value;
                this._fireEvent("start"),
                r.animate({
                    el: i,
                    draw: {
                        value: [c, d]
                    },
                    defer: s.timeout,
                    dur: s.duration,
                    onFrame: function() {
                        a._fireEvent("tick", {
                            value: this.value
                        }),
                        this.innerHTML = s.prefix + Number(this.value).format(0, 0, s.delimiter) + s.suffix
                    },
                    onDone: () => {
                        a._fireEvent("stop")
                    }
                })
            },
            reset: function() {
                this.started = !1,
                this.element.html(this.html)
            },
            changeAttribute: function(e, o) {
                let a = this.options;
                e === "data-value" && (a.value = +o),
                e === "data-from" && (a.from = +o)
            },
            destroy: function() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            cubeDeferred: 0,
            rules: null,
            color: null,
            flashColor: null,
            flashInterval: 1e3,
            numbers: !1,
            offBefore: !0,
            attenuation: .3,
            stopOnBlur: !1,
            cells: 4,
            margin: 8,
            showAxis: !1,
            axisStyle: "arrow",
            cellClick: !1,
            autoRestart: 5e3,
            clsCube: "",
            clsCell: "",
            clsSide: "",
            clsSideLeft: "",
            clsSideRight: "",
            clsSideTop: "",
            clsSideLeftCell: "",
            clsSideRightCell: "",
            clsSideTopCell: "",
            clsAxis: "",
            clsAxisX: "",
            clsAxisY: "",
            clsAxisZ: "",
            custom: t.noop,
            onTick: t.noop,
            onCubeCreate: t.noop
        };
        t.cubeSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroCubeSetup != "undefined" && t.cubeSetup(globalThis.metroCubeSetup),
        t.cubeDefaultRules = [{
            on: {
                top: [16],
                left: [4],
                right: [1]
            },
            off: {
                top: [13, 4],
                left: [1, 16],
                right: [13, 4]
            }
        }, {
            on: {
                top: [12, 15],
                left: [3, 8],
                right: [2, 5]
            },
            off: {
                top: [9, 6, 3],
                left: [5, 10, 15],
                right: [14, 11, 8]
            }
        }, {
            on: {
                top: [11],
                left: [7],
                right: [6]
            },
            off: {
                top: [1, 2, 5],
                left: [9, 13, 14],
                right: [15, 12, 16]
            }
        }, {
            on: {
                top: [8, 14],
                left: [2, 12],
                right: [9, 3]
            },
            off: {
                top: [16],
                left: [4],
                right: [1]
            }
        }, {
            on: {
                top: [10, 7],
                left: [6, 11],
                right: [10, 7]
            },
            off: {
                top: [12, 15],
                left: [3, 8],
                right: [2, 5]
            }
        }, {
            on: {
                top: [13, 4],
                left: [1, 16],
                right: [13, 4]
            },
            off: {
                top: [11],
                left: [7],
                right: [6]
            }
        }, {
            on: {
                top: [9, 6, 3],
                left: [5, 10, 15],
                right: [14, 11, 8]
            },
            off: {
                top: [8, 14],
                left: [2, 12],
                right: [9, 3]
            }
        }, {
            on: {
                top: [1, 2, 5],
                left: [9, 13, 14],
                right: [15, 12, 16]
            },
            off: {
                top: [10, 7],
                left: [6, 11],
                right: [10, 7]
            }
        }],
        t.Component("cube", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    id: null,
                    rules: null,
                    interval: !1,
                    ruleInterval: !1,
                    running: !1,
                    intervals: []
                }),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options;
                o.rules === null ? this.rules = t.cubeDefaultRules : this._parseRules(o.rules),
                this._createCube(),
                this._createEvents(),
                this._fireEvent("cube-create", {
                    element: e
                })
            },
            _parseRules: function(e) {
                if (e == null)
                    return !1;
                if (t.utils.isObject(e))
                    return this.rules = t.utils.isObject(e),
                    !0;
                try {
                    return this.rules = JSON.parse(e),
                    !0
                } catch (o) {
                    return console.warn("Unknown or empty rules for cell flashing!"),
                    !1
                }
            },
            _createCube: function() {
                let e = this.element
                  , o = this.options
                  , a = ["left", "right", "top"]
                  , i = ne(o.cells, 2);
                e.addClass("cube").addClass(o.clsCube),
                e.attr("id") || e.attr("id", Hooks.useId(this.elem)),
                this.id = e.attr("id"),
                this._createCssForFlashColor(),
                this._createCssForCellSize(),
                r.each(a, function() {
                    let d;
                    d = r("<div>").addClass(`side ${this}-side`).addClass(o.clsSide).appendTo(e),
                    this === "left" && d.addClass(o.clsSideLeft),
                    this === "right" && d.addClass(o.clsSideRight),
                    this === "top" && d.addClass(o.clsSideTop);
                    for (let p = 0; p < i; p++) {
                        let m = r("<div>").addClass("cube-cell").addClass(`cell-id-${p + 1}`).addClass(o.clsCell);
                        m.data("id", p + 1).data("side", this),
                        m.appendTo(d),
                        o.numbers === !0 && m.html(p + 1)
                    }
                });
                let s = e.find(".cube-cell");
                o.color !== null && (Farbe.Routines.isColor(o.color) ? s.css({
                    backgroundColor: o.color,
                    borderColor: o.color
                }) : s.addClass(o.color));
                let c = ["x", "y", "z"];
                r.each(c, function() {
                    let d = r("<div>").addClass(`axis ${o.axisStyle}`).addClass(`axis-${this}`).addClass(o.clsAxis);
                    this === "x" && d.addClass(o.clsAxisX),
                    this === "y" && d.addClass(o.clsAxisY),
                    this === "z" && d.addClass(o.clsAxisZ),
                    d.appendTo(e)
                }),
                o.showAxis === !1 && e.find(".axis").hide(),
                this._run()
            },
            _run: function() {
                let e = this.element
                  , o = this.options
                  , a = 0;
                clearInterval(this.interval),
                e.find(".cube-cell").removeClass("light"),
                o.custom !== t.noop ? t.utils.exec(o.custom, [e]) : (e.find(".cube-cell").removeClass("light"),
                this._start(),
                a = t.utils.isObject(this.rules) ? t.utils.objectLength(this.rules) : 0,
                this.interval = setInterval( () => {
                    this._start()
                }
                , a * o.flashInterval))
            },
            _createCssForCellSize: function() {
                let e = this.element
                  , o = this.options
                  , a = t.sheet;
                if (o.margin === 8 && o.cells === 4)
                    return;
                let i = Number.parseInt(t.utils.getStyleOne(e, "width"))
                  , s = Math.ceil((i / 2 - o.margin * o.cells * 2) / o.cells);
                t.utils.addCssRule(a, `#${e.attr("id")} .side .cube-cell`, `width: ${s}px!important; height: ${s}px!important; margin: ${o.margin}px!important;`)
            },
            _createCssForFlashColor: function() {
                let e = this.element, o = this.options, a = t.sheet, i, s, c = [], d = [], p;
                if (o.flashColor !== null) {
                    for (i = `0 0 10px ${Farbe.Routines.toRGBA(Farbe.Routines.parse(o.flashColor), 1)}`,
                    s = `0 0 10px ${Farbe.Routines.toRGBA(Farbe.Routines.parse(o.flashColor), o.attenuation)}`,
                    p = 0; p < 3; p++)
                        c.push(i),
                        d.push(s);
                    t.utils.addCssRule(a, `@keyframes pulsar-cell-${e.attr("id")}`, `0%, 100% { box-shadow: ${c.join(",")}} 50% { box-shadow: ${d.join(",")} }`),
                    t.utils.addCssRule(a, `#${e.attr("id")} .side .cube-cell.light`, `animation: pulsar-cell-${e.attr("id")} 2.5s 0s ease-out infinite; background-color: ${o.flashColor}!important; border-color: ${o.flashColor}!important;`)
                }
            },
            _createEvents: function() {
                let e = this.element
                  , o = this.options;
                r(globalThis).on(t.events.blur, () => {
                    o.stopOnBlur === !0 && this.running === !0 && this._stop()
                }
                , {
                    ns: e.attr("id")
                }),
                r(globalThis).on(t.events.focus, () => {
                    o.stopOnBlur === !0 && this.running === !1 && this._start()
                }
                , {
                    ns: e.attr("id")
                }),
                e.on(t.events.click, ".cube-cell", function() {
                    o.cellClick === !0 && r(this).toggleClass("light")
                })
            },
            _start: function() {
                this.element.find(".cube-cell").removeClass("light"),
                this.running = !0,
                r.each(this.rules, (o, a) => {
                    this._execRule(o, a)
                }
                )
            },
            _stop: function() {
                this.running = !1,
                clearInterval(this.interval),
                r.each(this.intervals, function() {
                    clearInterval(this)
                })
            },
            _tick: function(e, o) {
                let a = this.options
                  , i = o || a.flashInterval * e
                  , s = setTimeout( () => {
                    this._fireEvent("tick", {
                        index: e
                    }),
                    clearInterval(s),
                    t.utils.arrayDelete(this.intervals, s)
                }
                , i);
                this.intervals.push(s)
            },
            _toggle: function(e, o, a, i) {
                let s = i || this.options.flashInterval * a
                  , c = setTimeout( () => {
                    e[o === "on" ? "addClass" : "removeClass"]("light"),
                    clearInterval(c),
                    t.utils.arrayDelete(this.intervals, c)
                }
                , s);
                this.intervals.push(c)
            },
            start: function() {
                this._start()
            },
            stop: function() {
                this._stop()
            },
            toRule: function(e, o) {
                let a = this.element
                  , i = this.options
                  , s = this.rules;
                if (!(s == null || s[e] === void 0)) {
                    clearInterval(this.ruleInterval),
                    this.ruleInterval = !1,
                    this.stop(),
                    a.find(".cube-cell").removeClass("light");
                    for (let c = 0; c <= e; c++)
                        this._execRule(c, s[c], o);
                    t.utils.isInt(i.autoRestart) && i.autoRestart > 0 && (this.ruleInterval = setTimeout( () => {
                        this._run()
                    }
                    , i.autoRestart))
                }
            },
            _execRule: function(e, o, a) {
                let i = this
                  , s = this.element
                  , c = ["left", "right", "top"];
                this._tick(e, a),
                r.each(c, function() {
                    var g, f;
                    let d = `.${this}-side`
                      , p = (g = o.on) != null && g[this] ? o.on[this] : !1
                      , m = (f = o.off) != null && f[this] ? o.off[this] : !1;
                    p !== !1 && r.each(p, function() {
                        let u = s.find(`${d} .cell-id-${this}`);
                        i._toggle(u, "on", e, a)
                    }),
                    m !== !1 && r.each(m, function() {
                        let u = s.find(`${d} .cell-id-${this}`);
                        i._toggle(u, "off", e, a)
                    })
                })
            },
            rule: function(e) {
                if (e === void 0)
                    return this.rules;
                this._parseRules(e) === !0 && (this.options.rules = e,
                this.stop(),
                this.element.find(".cube-cell").removeClass("light"),
                this._run())
            },
            axis: function(e) {
                let o = e ? "show" : "hide";
                this.element.find(".axis")[o]()
            },
            changeRules: function() {
                let e = this.element
                  , o = this.options
                  , a = e.attr("data-rules");
                this._parseRules(a) === !0 && (this.stop(),
                e.find(".cube-cell").removeClass("light"),
                o.rules = a,
                this._run())
            },
            changeAxisVisibility: function() {
                let e = this.element
                  , a = JSON.parse(e.attr("data-show-axis")) === !0 ? "show" : "hide";
                e.find(".axis")[a]()
            },
            changeAxisStyle: function() {
                let e = this.element
                  , o = e.attr("data-axis-style");
                e.find(".axis").removeClass("arrow line no-style").addClass(o)
            },
            changeAttribute: function(e) {
                switch (e) {
                case "data-rules":
                    this.changeRules();
                    break;
                case "data-show-axis":
                    this.changeAxisVisibility();
                    break;
                case "data-axis-style":
                    this.changeAxisStyle();
                    break
                }
            },
            destroy: function() {
                let e = this.element;
                return clearInterval(this.interval),
                this.interval = null,
                r(globalThis).off(t.events.blur, {
                    ns: e.attr("id")
                }),
                r(globalThis).off(t.events.focus, {
                    ns: e.attr("id")
                }),
                e.off(t.events.click, ".cube-cell"),
                e
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            customCheckboxDeferred: 0,
            stateOn: "\u2713",
            stateOff: "\u2717",
            captionOn: "",
            captionOff: "",
            captionPosition: "right",
            clsCustomCheckbox: "",
            clsIcon: "",
            clsIconOn: "",
            clsIconOff: "",
            clsCaption: "",
            clsCaptionOn: "",
            clsCaptionOff: "",
            onCustomCheckboxCreate: t.noop
        };
        t.customCheckboxSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroCustomCheckboxSetup != "undefined" && t.customCheckboxSetup(globalThis.metroCustomCheckboxSetup),
        t.Component("custom-checkbox", {
            init: function(e, o) {
                return this._super(o, e, l),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options
                  , a = e.wrap(r("<label>").addClass("custom-checkbox").addClass(o.clsCustomCheckbox))
                  , i = r("<span>").addClass("icon").addClass(o.clsIcon).appendTo(a);
                if (e.attr("type", "checkbox"),
                e.attr("readonly") && e.on("click", s => {
                    s.preventDefault()
                }
                ),
                o.stateOn && r("<span>").addClass("state-on").addClass(o.clsIconOn).html(o.stateOn).appendTo(i),
                o.stateOff && r("<span>").addClass("state-off").addClass(o.clsIconOff).html(o.stateOff).appendTo(i),
                o.captionOn || o.captionOff) {
                    let s = r("<span>").addClass("caption").addClass(o.clsCaption).appendTo(a);
                    o.captionOn && r("<span>").addClass("caption-state-on").addClass(o.clsCaptionOn).html(o.captionOn).appendTo(s),
                    o.captionOff && r("<span>").addClass("caption-state-off").addClass(o.clsCaptionOff).html(o.captionOff).appendTo(s)
                }
                o.captionPosition === "left" && a.addClass("caption-left"),
                e[0].className = "",
                e.is(":disabled") ? this.disable() : this.enable(),
                this._fireEvent("customCheckbox-create")
            },
            disable: function() {
                this.element.data("disabled", !0),
                this.element.parent().addClass("disabled")
            },
            enable: function() {
                this.element.data("disabled", !1),
                this.element.parent().removeClass("disabled")
            },
            toggleState: function() {
                this.elem.disabled ? this.disable() : this.enable()
            },
            toggle: function(e) {
                let o = this.element;
                return t.utils.isValue(e) ? o.prop("checked", e === 1) : o.prop("checked", !t.utils.bool(o.prop("checked"))),
                this
            },
            changeAttribute: function(e) {
                switch (e) {
                case "disabled":
                    this.toggleState();
                    break
                }
            },
            destroy: function() {
                return this.element
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            label: "",
            datepickerDeferred: 0,
            gmt: 0,
            format: "YYYY-MM-DD",
            inputFormat: null,
            value: null,
            distance: 3,
            month: !0,
            day: !0,
            year: !0,
            minYear: null,
            maxYear: null,
            defaultYearDistance: 100,
            scrollSpeed: 4,
            openMode: "auto",
            clsPicker: "",
            clsPart: "",
            clsMonth: "",
            clsDay: "",
            clsYear: "",
            clsLabel: "",
            clsButton: "",
            clsOkButton: "",
            clsCancelButton: "",
            okButtonIcon: "\u2713",
            cancelButtonIcon: "\u{10102}",
            onSet: t.noop,
            onOpen: t.noop,
            onClose: t.noop,
            onScroll: t.noop,
            onDatePickerCreate: t.noop
        };
        t.datePickerSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroDatePickerSetup != "undefined" && t.datePickerSetup(globalThis.metroDatePickerSetup),
        t.Component("date-picker", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    picker: null,
                    isOpen: !1,
                    value: datetime(),
                    listTimer: {
                        day: null,
                        month: null,
                        year: null
                    }
                }),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options
                  , a = this.locale
                  , i = datetime();
                o.distance < 1 && (o.distance = 1),
                t.utils.isValue(e.val()) && (o.value = e.val()),
                t.utils.isValue(o.value) && (this.value = o.inputFormat ? Datetime.from(o.value, o.inputFormat, a) : datetime(o.value)),
                o.minYear === null && (o.minYear = i.year() - o.defaultYearDistance),
                o.maxYear === null && (o.maxYear = i.year() + o.defaultYearDistance),
                this._createStructure(),
                this._createEvents(),
                this._set(),
                this._fireEvent("datepicker-create", {
                    element: e
                })
            },
            _createStructure: function() {
                let e = this.element, o = this.options, a = this.locale, i, s, c, d, p, m, g, f;
                i = e.wrap("<div>").addClass(`wheel-picker date-picker ${e[0].className}`).addClass(o.clsPicker),
                i.attr("id") || i.attr("id", Hooks.useId(i[0])),
                this._addLabel(o.label, i, {
                    className: o.clsLabel,
                    id: i.attr("id"),
                    dir: e.attr("dir")
                }),
                g = r("<div>").addClass("date-wrapper").appendTo(i),
                o.month === !0 && (s = r("<div>").addClass("month").addClass(o.clsPart).addClass(o.clsMonth).appendTo(g)),
                o.day === !0 && (c = r("<div>").addClass("day").addClass(o.clsPart).addClass(o.clsDay).appendTo(g)),
                o.year === !0 && (d = r("<div>").addClass("year").addClass(o.clsPart).addClass(o.clsYear).appendTo(g));
                let u = r("<div>").addClass("select-wrapper").appendTo(i);
                if (f = r("<div>").addClass("select-block").appendTo(u),
                o.month === !0) {
                    for (s = r("<ul>").addClass("sel-month").appendTo(f),
                    p = 0; p < o.distance; p++)
                        r("<li>").html("&nbsp;").data("value", -1).appendTo(s);
                    for (p = 0; p < 12; p++) {
                        let b = Datetime.getLocale(a).months[p];
                        r("<li>").addClass(`js-month-${p} js-month-real-${b.toLowerCase()}`).html(b).data("value", p).appendTo(s)
                    }
                    for (p = 0; p < o.distance; p++)
                        r("<li>").html("&nbsp;").data("value", -1).appendTo(s)
                }
                if (o.day === !0) {
                    for (c = r("<ul>").addClass("sel-day").appendTo(f),
                    p = 0; p < o.distance; p++)
                        r("<li>").html("&nbsp;").data("value", -1).appendTo(c);
                    for (p = 0; p < 31; p++)
                        r("<li>").addClass(`js-day-${p} js-day-real-${p + 1}`).html(p + 1).data("value", p + 1).appendTo(c);
                    for (p = 0; p < o.distance; p++)
                        r("<li>").html("&nbsp;").data("value", -1).appendTo(c)
                }
                if (o.year === !0) {
                    for (d = r("<ul>").addClass("sel-year").appendTo(f),
                    p = 0; p < o.distance; p++)
                        r("<li>").html("&nbsp;").data("value", -1).appendTo(d);
                    for (p = o.minYear,
                    m = 0; p <= o.maxYear; p++,
                    m++)
                        r("<li>").addClass(`js-year-${m} js-year-real-${p}`).html(p).data("value", p).appendTo(d);
                    for (p = 0; p < o.distance; p++)
                        r("<li>").html("&nbsp;").data("value", -1).appendTo(d)
                }
                f.height((o.distance * 2 + 1) * 40);
                let h = r("<div>").addClass("action-block").appendTo(u);
                r("<button>").attr("type", "button").addClass("button action-today").addClass(o.clsButton).addClass(o.clsTodayButton).html(`<span class="caption">${this.strings.label_today}</span>`).appendTo(h),
                r("<button>").attr("type", "button").addClass("button action-ok").addClass(o.clsButton).addClass(o.clsOkButton).html(`<span class="icon">${o.okButtonIcon}</span>`).appendTo(h),
                r("<button>").attr("type", "button").addClass("button action-cancel").addClass(o.clsButton).addClass(o.clsCancelButton).html(`<span class="icon">${o.cancelButtonIcon}</span>`).appendTo(h),
                e[0].className = "",
                e.prop("disabled") && i.addClass("disabled"),
                this.picker = i
            },
            _createEvents: function() {
                let e = this
                  , o = this.options
                  , a = this.picker
                  , i = a.attr("id");
                a.on(t.events.startAll, ".select-block ul", function(c) {
                    if (c.changedTouches)
                        return;
                    let d = t.utils.pageXY(c).y;
                    r(document).on(t.events.moveAll, p => {
                        this.scrollTop -= o.scrollSpeed * (d > t.utils.pageXY(p).y ? -1 : 1),
                        d = t.utils.pageXY(p).y
                    }
                    , {
                        ns: i
                    }),
                    r(document).on(t.events.stopAll, () => {
                        r(document).off(t.events.move, {
                            ns: i
                        }),
                        r(document).off(t.events.stop, {
                            ns: i
                        })
                    }
                    , {
                        ns: i
                    })
                }),
                a.on(t.events.click, c => {
                    e.isOpen === !1 && e.open(),
                    c.stopPropagation()
                }
                ),
                a.on(t.events.click, ".action-ok", c => {
                    let d = a.find(".sel-month li.active")
                      , p = a.find(".sel-day li.active")
                      , m = a.find(".sel-year li.active")
                      , g = d.length === 0 ? e.value.value.getMonth() : d.data("value")
                      , f = p.length === 0 ? e.value.value.getDate() : p.data("value")
                      , u = m.length === 0 ? e.value.value.getFullYear() : m.data("value");
                    e.value = datetime(u, g, f),
                    e._set(),
                    e.close(),
                    c.preventDefault(),
                    c.stopPropagation()
                }
                ),
                a.on(t.events.click, ".action-cancel", c => {
                    e.close(),
                    c.preventDefault(),
                    c.stopPropagation()
                }
                );
                let s = 150;
                r.each(["month", "day", "year"], function() {
                    let c = a.find(`.sel-${this}`)
                      , d = Hooks.useDebounce(p => {
                        e.listTimer[this] = null;
                        let m = Math.round(Math.ceil(c.scrollTop()) / 40)
                          , g = c.find(`.js-${this}-${m}`)
                          , f = g.position().top - o.distance * 40;
                        c.find(".active").removeClass("active"),
                        c[0].scrollTop = f,
                        g.addClass("active"),
                        t.utils.exec(o.onScroll, [g, c, a], c[0])
                    }
                    , s);
                    c.on("scroll", d)
                }),
                a.on(t.events.click, "ul li", function(c) {
                    let d = r(this)
                      , p = d.closest("ul")
                      , m = d.position().top - o.distance * 40;
                    p.find(".active").removeClass("active"),
                    r.animate({
                        el: p[0],
                        draw: {
                            scrollTop: m
                        },
                        dur: 300
                    }),
                    p[0].scrollTop = m,
                    d.addClass("active"),
                    t.utils.exec(o.onScroll, [d, p, a], p[0])
                }),
                a.on(t.events.click, ".action-today", c => {
                    let d = datetime()
                      , p = d.month()
                      , m = d.day()
                      , g = d.year();
                    a.find(`.sel-month li.js-month-${p}`).click(),
                    a.find(`.sel-day li.js-day-real-${m}`).click(),
                    a.find(`.sel-year li.js-year-real-${g}`).click(),
                    c.preventDefault(),
                    c.stopPropagation()
                }
                )
            },
            _correct: function() {
                let e = this.value.month()
                  , o = this.value.day()
                  , a = this.value.year();
                this.value = datetime(a, e, o)
            },
            _set: function() {
                let e = this.element
                  , o = this.options
                  , a = this.picker
                  , i = Datetime.getLocale(this.locale).months[this.value.month()]
                  , s = this.value.day()
                  , c = this.value.year();
                o.month === !0 && a.find(".month").html(i),
                o.day === !0 && a.find(".day").html(s),
                o.year === !0 && a.find(".year").html(c),
                e.val(this.value.format(o.format, this.locale)).trigger("change"),
                this._fireEvent("set", {
                    value: this.value.val(),
                    elementValue: e.val(),
                    picker: a
                })
            },
            open: function() {
                let e = this.options
                  , o = this.picker
                  , a = this.value.month()
                  , i = this.value.day() - 1
                  , s = this.value.year()
                  , c = o.find(".select-wrapper");
                if (r.each(r(".date-picker"), function() {
                    r(this).find("input").each(function() {
                        t.getPlugin(this, "datepicker").close()
                    })
                }),
                c.show(0),
                o.find("li").removeClass("active"),
                e.openMode === "auto" ? (t.utils.inViewport(c[0]) || c.parent().addClass("drop-up-select"),
                t.utils.inViewport(c[0]) || (c.parent().removeClass("drop-up-select"),
                c.parent().addClass("drop-as-dialog"))) : e.openMode === "dialog" ? c.parent().addClass("drop-as-dialog") : e.openMode === "up" && c.parent().addClass("drop-up-select"),
                e.month === !0) {
                    let d = o.find(".sel-month");
                    d.scrollTop(0).animate({
                        draw: {
                            scrollTop: d.find(`li.js-month-${a}`).addClass("active").position().top - 40 * e.distance
                        },
                        dur: 100
                    })
                }
                if (e.day === !0) {
                    let d = o.find(".sel-day");
                    d.scrollTop(0).animate({
                        draw: {
                            scrollTop: d.find(`li.js-day-${i}`).addClass("active").position().top - 40 * e.distance
                        },
                        dur: 100
                    })
                }
                if (e.year === !0) {
                    let d = o.find(".sel-year");
                    d.scrollTop(0).animate({
                        draw: {
                            scrollTop: d.find(`li.js-year-real-${s}`).addClass("active").position().top - 40 * e.distance
                        },
                        dur: 100
                    })
                }
                this.isOpen = !0,
                this._fireEvent("open", {
                    value: this.value.val(),
                    picker: o
                })
            },
            close: function() {
                let e = this.picker
                  , o = this.options;
                e.find(".select-wrapper").hide(0),
                o.openMode === "auto" && e.find(".select-wrapper").parent().removeClass("drop-up-select drop-as-dialog"),
                this.isOpen = !1,
                this._fireEvent("close", {
                    value: this.value.val(),
                    picker: e
                })
            },
            val: function(e) {
                let o = this.options;
                if (!t.utils.isValue(e))
                    return this.element.val();
                this.value = o.inputFormat ? Datetime.from(e, o.inputFormat, this.locale) : datetime(e),
                this._set()
            },
            date: function(e, o) {
                if (e === void 0)
                    return this.value.val();
                try {
                    this.value = Datetime.from(e, o, this.locale),
                    this._set()
                } catch (a) {
                    return !1
                }
            },
            disable: function() {
                this.element.data("disabled", !0),
                this.element.parent().addClass("disabled")
            },
            enable: function() {
                this.element.data("disabled", !1),
                this.element.parent().removeClass("disabled")
            },
            toggleState: function() {
                this.elem.disabled ? this.disable() : this.enable()
            },
            changeAttribute: function(e, o) {
                switch (e) {
                case "disabled":
                    this.toggleState();
                    break;
                case "data-value":
                    this.val(o);
                    break;
                case "data-format":
                    this.options.format = o,
                    this._set();
                    break
                }
            },
            destroy: function() {
                let e = this.element
                  , o = this.picker;
                return r.each(["moth", "day", "year"], function() {
                    o.find(`.sel-${this}`).off("scroll")
                }),
                o.off(t.events.start, ".select-block ul"),
                o.off(t.events.click),
                o.off(t.events.click, ".action-ok"),
                o.off(t.events.click, ".action-cancel"),
                e
            }
        }),
        r(document).on(t.events.click, () => {
            r.each(r(".date-picker"), function() {
                r(this).find("input").each(function() {
                    t.getPlugin(this, "datepicker").close()
                })
            })
        }
        )
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let c = {
            note: `
    <svg width="800px" height="800px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M8.75 3.5V2C8.75 1.59 8.41 1.25 8 1.25C7.59 1.25 7.25 1.59 7.25 2V3.56C7.5 3.53 7.73 3.5 8 3.5H8.75Z"/>
        <path d="M16.75 3.56V2C16.75 1.59 16.41 1.25 16 1.25C15.59 1.25 15.25 1.59 15.25 2V3.5H16C16.27 3.5 16.5 3.53 16.75 3.56Z"/>
        <path d="M16.75 3.56V5C16.75 5.41 16.41 5.75 16 5.75C15.59 5.75 15.25 5.41 15.25 5V3.5H8.75V5C8.75 5.41 8.41 5.75 8 5.75C7.59 5.75 7.25 5.41 7.25 5V3.56C4.3 3.83 3 5.73 3 8.5V17C3 20 4.5 22 8 22H16C19.5 22 21 20 21 17V8.5C21 5.73 19.7 3.83 16.75 3.56ZM12 16.75H8C7.59 16.75 7.25 16.41 7.25 16C7.25 15.59 7.59 15.25 8 15.25H12C12.41 15.25 12.75 15.59 12.75 16C12.75 16.41 12.41 16.75 12 16.75ZM16 11.75H8C7.59 11.75 7.25 11.41 7.25 11C7.25 10.59 7.59 10.25 8 10.25H16C16.41 10.25 16.75 10.59 16.75 11C16.75 11.41 16.41 11.75 16 11.75Z"/>
    </svg>
    `,
            info: `
    <svg width="800px" height="800px" viewBox="-160 0 512 512" xmlns="http://www.w3.org/2000/svg">
        <path d="M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"/>
    </svg>
    `,
            warning: `
    <svg height="800px" width="800px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 294.995 294.995" xml:space="preserve">
        <path d="M291.874,248.279L165.605,26.526c-4.007-7.037-10.776-11.26-18.107-11.26s-14.101,4.202-18.107,11.239L3.121,248.238 c-3.979,6.989-4.164,15.013-0.493,21.326c3.67,6.313,10.663,10.165,18.705,10.165h252.329c8.042,0,15.035-3.852,18.705-10.165 C296.038,263.251,295.854,255.268,291.874,248.279z M146.665,86.229c9.665,0,17.5,7.835,17.5,17.5v63c0,9.665-7.835,17.5-17.5,17.5 c-9.665,0-17.5-7.835-17.5-17.5v-63C129.165,94.064,137,86.229,146.665,86.229z M147.498,204.005c9.665,0,17.5,7.835,17.5,17.5 c0,9.665-7.835,17.5-17.5,17.5c-9.665,0-17.5-7.835-17.5-17.5C129.998,211.84,137.833,204.005,147.498,204.005z"/>
    </svg>
    `,
            caution: `
    <svg height="800px" width="800px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 512 512"  xml:space="preserve">
        <path class="st0" d="M387.317,0.005H284.666h-57.332h-102.65L0,124.688v102.67v57.294v102.67l124.684,124.674h102.65h57.332
            h102.651L512,387.321v-102.67v-57.294v-102.67L387.317,0.005z M255.45,411.299c-19.082,0-34.53-15.467-34.53-34.549
            c0-19.053,15.447-34.52,34.53-34.52c19.082,0,34.53,15.467,34.53,34.52C289.98,395.832,274.532,411.299,255.45,411.299z
             M283.414,278.692c0,15.448-12.516,27.964-27.964,27.964c-15.458,0-27.964-12.516-27.964-27.964l-6.566-135.368
            c0-19.072,15.447-34.54,34.53-34.54c19.082,0,34.53,15.467,34.53,34.54L283.414,278.692z"/>
    </svg>
    `,
            tip: `
    <svg height="800px" width="800px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 256 256" xml:space="preserve">
        <path d="M216.2,92.5c-5.2-5.3-13.8-5.4-19-0.1L157.8,134l-0.3,0.3c-25.5,0.1-46.2,16.8-46.2,37.3h-5.8c0-23.6,23.1-42.8,51.6-43.1
            l-0.1-19.4c0,0-0.1-85.4-0.1-85.5c-0.7-5.8-5.6-10.3-11.7-10.3c-6.5,0-11.7,5.3-11.7,11.7c0,0.2,0,72.9,0,72.9l-5.2,0.2l-0.1-81.2
            c0-6.5-5.3-11.7-11.8-11.7s-11.7,5.3-11.7,11.8v81h-5.6l0.1-63.6c0-6.5-5.3-11.7-11.8-11.7S75.7,28,75.7,34.4V98h-5.2l0.1-34.2
            c0-6.5-5.3-11.7-11.8-11.7s-11.7,5.3-11.7,11.8c0,108.4,0,108.4,0,111c0,13.2,6.8,24.4,16.2,28.1v48.4h0.2v0.4l81.2-0.4v-51.1
            c2.5-0.9,5.1-2,7.6-3.3c15.4-7.9,26.1-20.3,29.5-32.5c2.9-4.3,36.8-56.2,36.8-56.2C221.4,103.7,220.6,96.9,216.2,92.5z"/>
    </svg>  
    `,
            success: `
        <svg width="800px" height="800px" viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg">
          <path d="M24,2A22,22,0,1,0,46,24,21.9,21.9,0,0,0,24,2ZM35.4,18.4l-14,14a1.9,1.9,0,0,1-2.8,0l-5.9-5.9a2.2,2.2,0,0,1-.4-2.7,2,2,0,0,1,3.1-.2L20,28.2,32.6,15.6a2,2,0,0,1,2.8,2.8Z"/>
        </svg>    
    `
        }
          , d = {
            directive: "note",
            showIcon: !0,
            title: "default",
            style: 1,
            onDirectiveCreate: t.noop
        };
        t.directiveSetup = p => {
            d = r.extend({}, d, p)
        }
        ,
        typeof globalThis.metroDirectiveSetup != "undefined" && t.directiveSetup(globalThis.metroDirectiveSetup),
        t.Component("directive", {
            init: function(p, m) {
                return this._super(m, p, d, {}),
                this
            },
            _create: function() {
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("directive-create")
            },
            _createStructure: function() {
                let p = this.element
                  , m = this.options
                  , g = p.wrap("<div>").addClass("directive").addClass(`directive-style-${m.style}`).addClass(`directive-${m.directive}`)
                  , f = r("<div>").addClass("directive-title").html(m.title === "default" ? this.strings[`label_${m.directive.toLowerCase()}`].toUpperCase() : m.title);
                m.showIcon && f.prepend(r("<span>").addClass("icon").html(c[m.directive])),
                g.prepend(f),
                this.component = g
            },
            _createEvents: () => {}
            ,
            changeAttribute: (p, m) => {}
            ,
            destroy: function() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            donutDeferred: 0,
            size: 100,
            hole: .8,
            value: 0,
            background: "transparent",
            color: "",
            stroke: "#d1d8e7",
            fill: "#49649f",
            fontSize: 0,
            total: 100,
            cap: "%",
            showText: !0,
            showValue: !1,
            animate: 0,
            onChange: t.noop,
            onDrawValue: e => e,
            onDonutCreate: t.noop
        };
        t.donutSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroDonutSetup != "undefined" && t.donutSetup(globalThis.metroDonutSetup),
        t.Component("donut", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    value: 0,
                    animation_change_interval: null
                }),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options;
                e.addClass("donut"),
                this._setElementSize(),
                this._draw(),
                this._addEvents(),
                this.val(o.value),
                this._fireEvent("donut-create", {
                    element: e
                })
            },
            _setElementSize: function() {
                let e = this.element
                  , o = this.options
                  , a = o.size;
                e.css({
                    width: a,
                    background: o.background
                }),
                e.css({
                    height: e.width()
                })
            },
            _draw: function() {
                let e = this.element
                  , o = this.options
                  , a = ""
                  , i = e.width() / 2
                  , s = i * (1 - (1 - o.hole) / 2)
                  , c = i * (1 - o.hole)
                  , d = `rotate(-90 ${i},${i})`
                  , p = o.fontSize === 0 ? s * o.hole * .6 : o.fontSize;
                a += "<svg>",
                a += `   <circle class='donut-back' r='${s}px' cx='${i}px' cy='${i}px' transform='${d}' fill='none' stroke='${o.stroke}' stroke-width='${c}'/>`,
                a += `   <circle class='donut-fill' r='${s}px' cx='${i}px' cy='${i}px' transform='${d}' fill='none' stroke='${o.fill}' stroke-width='${c}'/>`,
                o.showText === !0 && (a += `   <text class='donut-title' x='${i}px' y='${i}px' dy='${p / 3}px' text-anchor='middle' fill='${o.color !== "" ? o.color : o.fill}' font-size='${p}px'></text>`),
                a += "</svg>",
                e.html(a)
            },
            _addEvents: function() {
                r(globalThis).on("resize", () => {
                    this._setElementSize(),
                    this._draw(),
                    this.val(this.value)
                }
                )
            },
            _setValue: function(e) {
                let o = this.element
                  , a = this.options
                  , i = o.find(".donut-fill")
                  , s = o.find(".donut-title")
                  , d = o.width() / 2 * (1 - (1 - a.hole) / 2)
                  , p = Math.round(2 * Math.PI * d)
                  , m = a.showValue ? e : t.utils.percent(a.total, e, !0)
                  , g = Math.round(+e * p / a.total)
                  , f = i.attr("stroke-dasharray");
                typeof f == "undefined" ? f = 0 : f = +f.split(" ")[0];
                let u = g - f;
                i.animate({
                    draw: function(h, b) {
                        r(this).attr("stroke-dasharray", `${f + u * b} ${p}`)
                    },
                    dur: a.animate
                }),
                s.html(t.utils.exec(a.onDrawValue, [m + a.cap]))
            },
            val: function(e) {
                let o = this.options;
                if (e === void 0)
                    return this.value;
                if (Number.parseInt(e) < 0 || Number.parseInt(e) > o.total)
                    return !1;
                this._setValue(e),
                this.value = e,
                this._fireEvent("change", {
                    value: this.value
                })
            },
            setColor: function(e) {
                let o = ["background", "fill", "stroke", "color"];
                return r.each(e, (a, i) => {
                    o.indexOf(a) !== -1 && (this.options[a] = i)
                }
                ),
                this._draw(),
                this.val(this.value),
                this
            },
            changeValue: function() {
                this.val(this.element.attr("data-value"))
            },
            changeAttribute: function(e, o) {
                switch (e) {
                case "data-value":
                    this.changeValue();
                    break;
                case "data-background":
                    this.setColor({
                        background: o
                    });
                    break;
                case "data-fill":
                    this.setColor({
                        fill: o
                    });
                    break;
                case "data-stroke":
                    this.setColor({
                        stroke: o
                    });
                    break;
                case "data-color":
                    this.setColor({
                        color: o
                    });
                    break
                }
            },
            destroy: function() {
                return this.element
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            height: "auto",
            multiSelect: !1,
            moveRightIcon: "&rsaquo;",
            moveRightAllIcon: "&raquo;",
            moveLeftIcon: "&lsaquo;",
            moveLeftAllIcon: "&laquo;",
            clsBox: "",
            clsMoveButton: "",
            clsMoveRightButton: "",
            clsMoveRightAllButton: "",
            clsMoveLeftButton: "",
            clsMoveLeftAllButton: "",
            clsListLeft: "",
            clsListRight: "",
            onDoubleSelectBoxCreate: t.noop
        };
        t.doubleSelectBoxSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroDoubleSelectBoxSetup != "undefined" && t.doubleSelectBoxSetup(globalThis.metroDoubleSelectBoxSetup),
        t.Component("double-select-box", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    select1: null,
                    select2: null,
                    list1: null,
                    list2: null
                }),
                this
            },
            _create: function() {
                if (this.element.children("select").length !== 2)
                    throw new Error("Component DoubleSelectBox required two select elements!");
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("double-select-box-create")
            },
            _drawList: function() {
                this.list1.clear(),
                this.select1.find("option").each( (e, o) => {
                    let a = r(o)
                      , i = a.attr("data-icon")
                      , s = a.attr("data-template") ? a.attr("data-template").replace(/\$1/g, a.text()) : a.text();
                    i && (s = r("<span>").addClass("icon").append(i).outerHTML() + s),
                    this.list1.append(r("<li>").html(s).attr("data-value", o.value).data("option", o))
                }
                ),
                this.list2.clear(),
                this.select2.find("option").each( (e, o) => {
                    let a = r(o)
                      , i = a.attr("data-icon")
                      , s = a.attr("data-template") ? a.attr("data-template").replace(/\$1/g, a.text()) : a.text();
                    i && (s = r("<span>").addClass("icon").append(i).outerHTML() + s),
                    this.list2.append(r("<li>").html(s).attr("data-value", o.value).data("option", o))
                }
                )
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options
                  , a = e.children("select")
                  , i = a.eq(0)
                  , s = a.eq(1)
                  , c = r("<div>").addClass("controls").insertBefore(s);
                e.addClass("double-select-box").addClass(o.clsBox).css({
                    height: o.height
                }),
                a.prop("multiple", !0),
                c.append(r([r("<button>").attr("type", "button").addClass("button square small --move-right").addClass(o.clsMoveButton).addClass(o.clsMoveRightButton).html(`<span class="icon">${o.moveRightIcon}</span>`), r("<button>").attr("type", "button").addClass("button square small --move-right-all").addClass(o.clsMoveButton).addClass(o.clsMoveRightAllButton).html(`<span class="icon">${o.moveRightAllIcon}</span>`), r("<button>").attr("type", "button").addClass("button square small --move-left-all").addClass(o.clsMoveButton).addClass(o.clsMoveLeftAllButton).html(`<span class="icon">${o.moveLeftAllIcon}</span>`), r("<button>").attr("type", "button").addClass("button square small --move-left").addClass(o.clsMoveButton).addClass(o.clsMoveLeftButton).html(`<span class="icon">${o.moveLeftIcon}</span>`)]));
                let d = r("<ul>").addClass("--list1").addClass(o.clsListLeft).insertBefore(i)
                  , p = r("<ul>").addClass("--list2").addClass(o.clsListRight).insertBefore(s);
                this.select1 = i,
                this.select2 = s,
                this.list1 = d,
                this.list2 = p,
                this._drawList()
            },
            _moveItems: (e, o) => {
                r.each(e, function() {
                    let a = r(this)
                      , i = a.data("option");
                    r(i).appendTo(o[0]),
                    a.removeClass("active").appendTo(o[1])
                })
            }
            ,
            _move: function(e, o) {
                o === "selected" ? e === "ltr" ? this._moveItems(this.list1.find("li.active"), [this.select2, this.list2]) : this._moveItems(this.list2.find("li.active"), [this.select1, this.list1]) : e === "ltr" ? this._moveItems(this.list1.find("li"), [this.select2, this.list2]) : this._moveItems(this.list2.find("li"), [this.select1, this.list1])
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options
                  , i = o.find("li");
                i.on("click", function() {
                    let s = r(this);
                    a.multiSelect === !1 && (e.list1.find("li").removeClass("active"),
                    e.list2.find("li").removeClass("active")),
                    s.addClass("active")
                }),
                i.on("dblclick", function() {
                    let s = r(this)
                      , c = s.parent().hasClass("--list1") ? "ltr" : "rtl"
                      , d = "selected";
                    e.list1.find("li").removeClass("active"),
                    e.list2.find("li").removeClass("active"),
                    s.addClass("active"),
                    e._move(c, d)
                }),
                o.on("click", "button", function() {
                    let s = r(this);
                    if (s.hasClass("--move-right"))
                        e._move("ltr", "selected");
                    else if (s.hasClass("--move-right-all"))
                        e._move("ltr", "all");
                    else if (s.hasClass("--move-left"))
                        e._move("rtl", "selected");
                    else if (s.hasClass("--move-left-all"))
                        e._move("rtl", "all");
                    else
                        throw new Error("Pressed unregistered button!")
                })
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            doubleSliderDeferred: 0,
            roundValue: !0,
            min: 0,
            max: 100,
            accuracy: 0,
            showMinMax: !1,
            minMaxPosition: t.position.BOTTOM,
            valueMin: null,
            valueMax: null,
            hint: !1,
            hintAlways: !1,
            hintPositionMin: t.position.TOP,
            hintPositionMax: t.position.TOP,
            hintMaskMin: "$1",
            hintMaskMax: "$1",
            target: null,
            size: 0,
            clsSlider: "",
            clsBackside: "",
            clsComplete: "",
            clsMarker: "",
            clsMarkerMin: "",
            clsMarkerMax: "",
            clsHint: "",
            clsHintMin: "",
            clsHintMax: "",
            clsMinMax: "",
            clsMin: "",
            clsMax: "",
            onStart: t.noop,
            onStop: t.noop,
            onMove: t.noop,
            onChange: t.noop,
            onChangeValue: t.noop,
            onFocus: t.noop,
            onBlur: t.noop,
            onDoubleSliderCreate: t.noop
        };
        t.doubleSliderSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroDoubleSliderSetup != "undefined" && t.doubleSliderSetup(globalThis.metroDoubleSliderSetup),
        t.Component("double-slider", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    slider: null,
                    valueMin: null,
                    valueMax: null,
                    keyInterval: !1,
                    id: null
                }),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options;
                this.id = Hooks.useId(this.elem),
                this.valueMin = t.utils.isValue(o.valueMin) ? +o.valueMin : +o.min,
                this.valueMax = t.utils.isValue(o.valueMax) ? +o.valueMax : +o.max,
                this._createSlider(),
                this._createEvents(),
                this.val(this.valueMin, this.valueMax),
                this._fireEvent("double-slider-create", {
                    element: e
                })
            },
            _createSlider: function() {
                let e = this.element, o = this.options, a = r("<div>").addClass("slider-wrapper"), i = r("<div>").addClass("slider").addClass(o.clsSlider).addClass(this.elem.className), s = r("<div>").addClass("backside").addClass(o.clsBackside), c = r("<div>").addClass("complete").addClass(o.clsComplete), d = r("<button>").attr("type", "button").addClass("marker marker-min").addClass(o.clsMarker).addClass(o.clsMarkerMin), p = r("<button>").attr("type", "button").addClass("marker marker-max").addClass(o.clsMarker).addClass(o.clsMarkerMax), m = r("<div>").addClass("hint hint-min").addClass(`${o.hintPositionMin}-side`).addClass(o.clsHint).addClass(o.clsHintMin), g = r("<div>").addClass("hint hint-max").addClass(`${o.hintPositionMax}-side`).addClass(o.clsHint).addClass(o.clsHintMax), f;
                if (o.size > 0 && i.outerWidth(o.size),
                i.insertBefore(e),
                e.appendTo(i),
                a.insertBefore(i),
                i.appendTo(a),
                s.appendTo(i),
                c.appendTo(i),
                d.appendTo(i),
                p.appendTo(i),
                m.appendTo(d),
                g.appendTo(p),
                o.hintAlways === !0 && r([m, g]).css({
                    display: "block"
                }).addClass("permanent-hint"),
                o.showMinMax === !0) {
                    let u = r("<div>").addClass("slider-min-max").addClass(o.clsMinMax);
                    r("<span>").addClass("slider-text-min").addClass(o.clsMin).html(`${o.min}`).appendTo(u),
                    r("<span>").addClass("slider-text-max").addClass(o.clsMax).html(`${o.max}`).appendTo(u),
                    o.minMaxPosition === t.position.TOP ? u.insertBefore(i) : u.insertAfter(i)
                }
                if (e[0].className = "",
                o.copyInlineStyles === !0)
                    for (f = 0; f < e[0].style.length; f++)
                        i.css(e[0].style[f], e.css(e[0].style[f]));
                e.is(":disabled") ? this.disable() : this.enable(),
                this.slider = i
            },
            _createEvents: function() {
                let e = this
                  , o = this.slider
                  , a = this.options
                  , i = o.find(".marker");
                i.on(t.events.startAll, function() {
                    let s = r(this)
                      , c = s.find(".hint");
                    s.addClass("active"),
                    a.hint === !0 && a.hintAlways !== !0 && c.fadeIn(300),
                    r(document).on(t.events.moveAll, d => {
                        e._move(d),
                        e._fireEvent("move", {
                            min: e.valueMin,
                            max: e.valueMax
                        })
                    }
                    , {
                        ns: e.id
                    }),
                    r(document).on(t.events.stopAll, () => {
                        o.find(".marker").removeClass("active"),
                        r(document).off(t.events.moveAll, {
                            ns: e.id
                        }),
                        r(document).off(t.events.stopAll, {
                            ns: e.id
                        }),
                        a.hintAlways !== !0 && c.fadeOut(300),
                        e._fireEvent("stop", {
                            min: e.valueMin,
                            max: e.valueMax
                        })
                    }
                    , {
                        ns: e.id
                    }),
                    e._fireEvent("start", {
                        min: e.valueMin,
                        max: e.valueMax
                    })
                }),
                i.on(t.events.focus, () => {
                    e._fireEvent("focus", {
                        min: e.valueMin,
                        max: e.valueMax
                    })
                }
                ),
                i.on(t.events.blur, () => {
                    e._fireEvent("blur", {
                        min: e.valueMin,
                        max: e.valueMax
                    })
                }
                ),
                r(globalThis).on(t.events.resize, () => {
                    e.val(e.valueMin, e.valueMax)
                }
                , {
                    ns: e.id
                })
            },
            _convert: function(e, o) {
                let a = this.slider
                  , i = this.options
                  , s = a.outerWidth() - a.find(".marker").outerWidth();
                switch (o) {
                case "pix2prc":
                    return e * 100 / s;
                case "pix2val":
                    return this._convert(e, "pix2prc") * ((i.max - i.min) / 100) + i.min;
                case "val2prc":
                    return (e - i.min) / ((i.max - i.min) / 100);
                case "prc2pix":
                    return e / (100 / s);
                case "val2pix":
                    return this._convert(this._convert(e, "val2prc"), "prc2pix")
                }
                return 0
            },
            _correct: function(e) {
                let o = e
                  , a = this.options.accuracy
                  , i = this.options.min
                  , s = this.options.max
                  , c = d => d % 1 === 0 ? 0 : d.toString().split(".")[1].length;
                return a === 0 || Number.isNaN(a) ? o : (o = Math.round(e / a) * a,
                o < i && (o = i),
                o > s && (o = s),
                o.toFixed(c(a)))
            },
            _move: function(e) {
                let a = this.slider.find(".marker.active").hasClass("marker-min"), i = this.slider, s = i.offset(), c = i.find(".marker").outerWidth(), d = i.find(".marker-min"), p = i.find(".marker-max"), m = i.outerWidth(), g, f, u = t.utils.pageXY(e).x - s.left - c / 2;
                a ? (g = 0,
                f = Number.parseInt(p.css("left")) - c) : (g = Number.parseInt(d.css("left")) + c,
                f = m - c),
                !(u < g || u > f) && (this[a ? "valueMin" : "valueMax"] = this._correct(this._convert(u, "pix2val")),
                this._redraw())
            },
            _hint: function() {
                let e = this
                  , o = this.options;
                this.slider.find(".hint").each(function() {
                    let s = r(this)
                      , c = s.hasClass("hint-min")
                      , d = c ? o.hintMaskMin : o.hintMaskMax
                      , p = +(c ? e.valueMin : e.valueMax) || 0;
                    s.text(d.replace("$1", p.toFixed(t.utils.decCount(o.accuracy))))
                })
            },
            _value: function() {
                let e = this.element, o = this.options, a = +this.valueMin || 0, i = +this.valueMax || 0, s;
                if (o.roundValue && (a = a.toFixed(t.utils.decCount(o.accuracy)),
                i = i.toFixed(t.utils.decCount(o.accuracy))),
                s = [a, i].join(", "),
                e[0].tagName === "INPUT" && e.val(s),
                o.target !== null) {
                    let c = r(o.target);
                    c.length !== 0 && r.each(c, function() {
                        let d = r(this);
                        this.tagName === "INPUT" ? d.val(s) : d.text(s),
                        d.trigger("change")
                    })
                }
                this._fireEvent("change-value", {
                    val: s
                }),
                this._fireEvent("change", {
                    val: s
                })
            },
            _marker: function() {
                let e = this.slider
                  , o = e.find(".marker-min")
                  , a = e.find(".marker-max")
                  , i = e.find(".complete")
                  , s = Number.parseInt(t.utils.getStyleOne(o, "width"))
                  , c = t.utils.isVisible(e);
                c && r([o, a]).css({
                    "margin-top": 0,
                    "margin-left": 0
                }),
                c ? (o.css("left", this._convert(this.valueMin, "val2pix")),
                a.css("left", this._convert(this.valueMax, "val2pix"))) : (o.css({
                    left: `${this._convert(this.valueMin, "val2prc")}%`,
                    "margin-top": this._convert(this.valueMin, "val2prc") === 0 ? 0 : -1 * s / 2
                }),
                a.css({
                    left: `${this._convert(this.valueMax, "val2prc")}%`,
                    "margin-top": this._convert(this.valueMax, "val2prc") === 0 ? 0 : -1 * s / 2
                })),
                i.css({
                    left: this._convert(this.valueMin, "val2pix"),
                    width: this._convert(this.valueMax, "val2pix") - this._convert(this.valueMin, "val2pix")
                })
            },
            _redraw: function() {
                this._marker(),
                this._value(),
                this._hint()
            },
            val: function(e, o) {
                let a = this.options;
                if (!t.utils.isValue(e) && !t.utils.isValue(o))
                    return [this.valueMin, this.valueMax];
                let i = e
                  , s = o;
                typeof i != "undefined" && i < a.min && (i = a.min),
                typeof s != "undefined" && s < a.min && (s = a.min),
                typeof i != "undefined" && i > a.max && (i = a.max),
                typeof s != "undefined" && s > a.max && (s = a.max),
                typeof i != "undefined" && (this.valueMin = this._correct(i)),
                typeof s != "undefined" && (this.valueMax = this._correct(s)),
                this._redraw()
            },
            changeValue: function() {
                let e = this.element
                  , o = +e.attr("data-value-min")
                  , a = +e.attr("data-value-max");
                this.val(o, a)
            },
            disable: function() {
                let e = this.element;
                e.data("disabled", !0),
                e.parent().addClass("disabled")
            },
            enable: function() {
                let e = this.element;
                e.data("disabled", !1),
                e.parent().removeClass("disabled")
            },
            toggleState: function() {
                this.elem.disabled ? this.disable() : this.enable()
            },
            changeAttribute: function(e) {
                switch (e) {
                case "data-value-min":
                    this.changeValue();
                    break;
                case "data-value-max":
                    this.changeValue();
                    break;
                case "disabled":
                    this.toggleState();
                    break
                }
            },
            destroy: function() {
                let e = this.element
                  , o = this.slider
                  , a = o.find(".marker");
                a.off(t.events.startAll),
                a.off(t.events.focus),
                a.off(t.events.blur),
                a.off(t.events.keydown),
                a.off(t.events.keyup),
                o.off(t.events.click),
                r(globalThis).off(t.events.resize, {
                    ns: this.id
                }),
                e.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            dragItemsDeferred: 0,
            target: null,
            dragItem: "li",
            dragMarker: ".drag-item-marker",
            drawDragMarker: !1,
            clsDragItemAvatar: "",
            clsDragItem: "",
            canDrag: !0,
            onDragStartItem: t.noop,
            onDragMoveItem: t.noop,
            onDragDropItem: t.noop,
            onTarget: t.noop,
            onTargetIn: t.noop,
            onTargetOut: t.noop,
            onDragItemsCreate: t.noop
        };
        t.dragItemsSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroDragItemsSetup != "undefined" && t.dragItemsSetup(globalThis.metroDragItemsSetup),
        t.Component("drag-items", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    id: null,
                    canDrag: !1
                }),
                this
            },
            _create: function() {
                let e = this.element;
                this.id = Hooks.useId(this.elem),
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("drag-items-create", {
                    element: e
                })
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options;
                e.id() || e.id(this.id),
                e.addClass("drag-items-target"),
                o.drawDragMarker === !0 && e.find(o.dragItem).each(function() {
                    r("<span>").addClass("drag-item-marker").appendTo(this)
                }),
                o.canDrag ? this.on() : this.off()
            },
            _createEvents: function() {
                let e = this.element, o = this.options, a = r.document(), i = r.body(), s, c = {
                    top: 0,
                    left: 0
                }, d, p, m = (g, f, u) => {
                    let h = t.utils.pageXY(g).x
                      , b = t.utils.pageXY(g).y
                      , w = b - c.top
                      , Q = h - c.left;
                    f.css({
                        top: w,
                        left: Q
                    });
                    let C = document.elementsFromPoint(h, b).filter(x => r(x).hasClass("drag-items-target"));
                    if (C.length === 0)
                        return;
                    this._fireEvent("target", {
                        target: C
                    });
                    let B = document.elementsFromPoint(h, b).filter(x => {
                        let v = r(x);
                        return r.matches(x, o.dragItem) && !v.hasClass("dragged-item-avatar")
                    }
                    )[0];
                    if (!t.utils.isValue(B))
                        u.appendTo(C);
                    else {
                        let x = r(B), v = x.offset(), E = b - v.top, k = h - v.left, S, T = {
                            w: x.width(),
                            h: x.height()
                        };
                        k < T.w / 3 && (E < T.h / 2 || E > T.h / 2) ? S = "left" : k > T.w * 2 / 3 && (E < T.h / 2 || E > T.h / 2) ? S = "right" : k > T.w / 3 && k < T.w * 2 / 3 && E > T.h / 2 ? S = "bottom" : S = "top",
                        x.hasClass("dragged-item") || (S === "top" || S === "left" ? u.insertBefore(x) : u.insertAfter(x))
                    }
                }
                ;
                e.on(t.events.startAll, o.drawDragMarker ? o.dragMarker : o.dragItem, g => {
                    let f = r(g.target).closest(o.dragItem);
                    if (t.utils.isRightMouse(g) || this.canDrag !== !0)
                        return;
                    f.addClass("dragged-item").addClass(o.clsDragItem);
                    let u = r("<div>").addClass("dragged-item-avatar").addClass(o.clsDragItemAvatar);
                    s = f.offset(),
                    d = f.width(),
                    p = f.height(),
                    c.top = t.utils.pageXY(g).y - s.top,
                    c.left = t.utils.pageXY(g).x - s.left,
                    u.css({
                        top: s.top,
                        left: s.left,
                        width: d,
                        height: p
                    }).appendTo(i),
                    this._fireEvent("drag-start-item", {
                        dragItem: f[0],
                        avatar: u[0]
                    }),
                    a.on(t.events.moveAll, h => {
                        m(h, u, f),
                        this._fireEvent("drag-move-item", {
                            dragItem: f[0],
                            avatar: u[0]
                        }),
                        h.preventDefault()
                    }
                    , {
                        ns: this.id,
                        passive: !1
                    }),
                    a.on(t.events.stopAll, () => {
                        this._fireEvent("drag-drop-item", {
                            dragItem: f[0],
                            avatar: u[0]
                        }),
                        f.removeClass("dragged-item").removeClass(o.clsDragItem),
                        u.remove(),
                        a.off(t.events.moveAll, {
                            ns: this.id
                        }),
                        a.off(t.events.stopAll, {
                            ns: this.id
                        })
                    }
                    , {
                        ns: this.id
                    }),
                    o.drawDragMarker && (g.preventDefault(),
                    g.stopPropagation())
                }
                )
            },
            on: function() {
                this.canDrag = !0,
                this.element.find(".drag-item-marker").show()
            },
            off: function() {
                this.canDrag = !1,
                this.element.find(".drag-item-marker").hide()
            },
            toggle: function() {
                this.canDrag = this.canDrag ? this.off() : this.on()
            },
            changeAttribute: function(e) {
                let o = this.element
                  , a = this.options;
                e === "data-can-drag" && ( () => {
                    a.canDtag = JSON.parse(o.attr("data-can-drag")),
                    a.canDtag ? this.on() : this.off()
                }
                )()
            },
            destroy: function() {
                let e = this.element
                  , o = this.options;
                return e.off(t.events.startAll, o.drawDragMarker ? o.dragMarker : o.dragItem),
                e
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            dragContext: null,
            draggableDeferred: 0,
            dragElement: "self",
            dragArea: "parent",
            timeout: 0,
            boundaryRestriction: !0,
            onCanDrag: t.noop_true,
            onDragStart: t.noop,
            onDragStop: t.noop,
            onDragMove: t.noop,
            onDraggableCreate: t.noop
        };
        t.draggableSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroDraggableSetup != "undefined" && t.draggableSetup(globalThis.metroDraggableSetup),
        t.Component("draggable", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    drag: !1,
                    move: !1,
                    backup: {
                        cursor: "default",
                        zIndex: "0"
                    },
                    dragArea: null,
                    dragElement: null,
                    id: null
                }),
                this
            },
            _create: function() {
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("draggable-create", {
                    element: this.element
                })
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options
                  , a = e.offset()
                  , i = o.dragElement !== "self" ? e.find(o.dragElement) : e;
                e.data("canDrag", !0),
                this.dragElement = i,
                i[0].ondragstart = () => !1,
                e.css("position", "absolute"),
                (o.dragArea === "document" || o.dragArea === "window") && (o.dragArea = "body"),
                setTimeout( () => {
                    this.dragArea = o.dragArea === "parent" ? e.parent() : r(o.dragArea),
                    this.dragArea.css("position") === "static" && this.dragArea.css("position", "relative"),
                    o.dragArea !== "parent" && (e.appendTo(this.dragArea),
                    e.css({
                        top: a.top,
                        left: a.left
                    }))
                }
                ),
                e.attr("id") || e.attr("id", Hooks.useId(this.elem))
            },
            _createEvents: function() {
                let e = this.element
                  , o = this.options
                  , a = {
                    x: 0,
                    y: 0
                };
                this.dragElement.on(t.events.startAll, i => {
                    let s = e.position()
                      , c = t.utils.pageXY(i).x - s.left
                      , d = t.utils.pageXY(i).y - s.top
                      , p = m => {
                        let g = t.utils.pageXY(m).y - d
                          , f = t.utils.pageXY(m).x - c;
                        o.boundaryRestriction && (g < 0 && (g = 0),
                        f < 0 && (f = 0),
                        g > this.dragArea.outerHeight() - e.outerHeight() && (g = this.dragArea.outerHeight() - e.outerHeight()),
                        f > this.dragArea.outerWidth() - e.outerWidth() && (f = this.dragArea.outerWidth() - e.outerWidth())),
                        a.y = g,
                        a.x = f,
                        e.css({
                            left: f,
                            top: g
                        }),
                        this._fireEvent("drag-move", {
                            position: a,
                            context: o.dragContext
                        })
                    }
                    ;
                    e.data("canDrag") === !1 || t.utils.exec(o.onCanDrag, [e]) !== !0 || t.isTouchable === !1 && i.which !== 1 || (this.drag = !0,
                    e.addClass("draggable"),
                    this._fireEvent("drag-start", {
                        position: a,
                        context: o.dragContext
                    }),
                    r(document).on(t.events.moveAll, p, {
                        ns: this.id,
                        passive: !1
                    }),
                    r(document).on(t.events.stopAll, () => {
                        e.removeClass("draggable"),
                        r(document).off(t.events.moveAll, {
                            ns: this.id
                        }),
                        r(document).off(t.events.stopAll, {
                            ns: this.id
                        }),
                        this.drag = !1,
                        this.move = !1,
                        this._fireEvent("drag-stop", {
                            position: a,
                            context: o.dragContext
                        })
                    }
                    , {
                        ns: this.id
                    }))
                }
                )
            },
            off: function() {
                this.element.data("canDrag", !1)
            },
            on: function() {
                this.element.data("canDrag", !0)
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                let e = this.element;
                return this.dragElement.off(t.events.startAll),
                e
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            enabled: !0,
            logErrors: !1,
            delimiterStart: "{{",
            delimiterEnd: "}}",
            context: null,
            processChild: !0
        };
        t.evalSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroEvalSetup != "undefined" && t.evalSetup(globalThis.metroEvalSetup),
        t.Component("eval", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    origContent: null
                }),
                this
            },
            _create: function() {
                let e = this.element;
                this.origContent = e.html(),
                this.options.enabled && (this.options.processChild ? this._processNodeAndChildren(e[0]) : e.text(this.eval(e.text())))
            },
            _processNodeAndChildren: function(e) {
                if (e.nodeType === 3) {
                    e.textContent = this.eval(e.textContent);
                    return
                }
                for (let o = 0; o < e.childNodes.length; o++)
                    this._processNodeAndChildren(e.childNodes[o])
            },
            eval: function(e) {
                let o = this.options;
                if (!o.enabled)
                    return e;
                let a = new RegExp(`${this._escapeRegExp(o.delimiterStart || "{{")}(.*?)${this._escapeRegExp(o.delimiterEnd || "}}")}`,"gs");
                return e.replace(a, (i, s) => {
                    try {
                        return new Function(`return ${s}`).call(o.context)
                    } catch (c) {
                        return o.logErrors && console.error("Metro UI Eval error:", c, "in code:", s),
                        i
                    }
                }
                )
            },
            _escapeRegExp: e => e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"),
            reset: function() {
                this.origContent && this.element.html(this.origContent)
            },
            destroy: function() {
                return this.reset(),
                this._super()
            }
        }),
        t.evalText = (e, o) => {
            let i = {
                options: r.extend({}, l, o)
            };
            return t.Component("eval").prototype.eval.call(i, e)
        }
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            init: function() {
                return this
            },
            options: {
                csvDelimiter: "	",
                csvNewLine: `\r
`,
                includeHeader: !0
            },
            setup: function(e) {
                return this.options = r.extend({}, this.options, e),
                this
            },
            base64: e => globalThis.btoa(unescape(encodeURIComponent(e))),
            b64toBlob: (e, o="", a=512) => {
                let i = globalThis.atob(e), s = [], c;
                for (c = 0; c < i.length; c += a) {
                    let d = i.slice(c, c + a)
                      , p = new Array(d.length);
                    for (let g = 0; g < d.length; g = g + 1)
                        p[g] = d.charCodeAt(g);
                    let m = new globalThis.Uint8Array(p);
                    s.push(m)
                }
                return new Blob(s,{
                    type: o
                })
            }
            ,
            tableToCSV: function(e, o, a) {
                let i, s, c, d = "", p, m;
                i = r.extend({}, this.options, a);
                let g = r(e)[0];
                if (t.utils.bool(i.includeHeader)) {
                    c = g.querySelectorAll("thead")[0];
                    for (let f = 0; f < c.rows.length; f++) {
                        p = c.rows[f];
                        for (let u = 0; u < p.cells.length; u++)
                            m = p.cells[u],
                            d += (u ? i.csvDelimiter : "") + m.textContent.trim();
                        d += i.csvNewLine
                    }
                }
                s = g.querySelectorAll("tbody")[0];
                for (let f = 0; f < s.rows.length; f++) {
                    p = s.rows[f];
                    for (let u = 0; u < p.cells.length; u++)
                        m = p.cells[u],
                        d += (u ? i.csvDelimiter : "") + m.textContent.trim();
                    d += i.csvNewLine
                }
                return t.utils.isValue(o) ? this.createDownload(this.base64(`\uFEFF${d}`), "application/csv", o) : d
            },
            createDownload: function(e, o, a) {
                let i = document.createElement("a");
                i.style.display = "none",
                document.body.appendChild(i);
                let s = this.b64toBlob(e, o)
                  , c = globalThis.URL.createObjectURL(s);
                return i.href = c,
                i.download = a || Hooks.useId(i),
                i.click(),
                globalThis.URL.revokeObjectURL(c),
                document.body.removeChild(i),
                !0
            },
            arrayToCsv: function(e, o, a) {
                let i, s = "", c, d;
                for (i = r.extend({}, this.options, a),
                c = 0; c < e.length; c++)
                    d = e[c],
                    typeof d != "object" ? s += d + i.csvNewLine : (r.each(d, (p, m) => {
                        s += (p ? i.csvDelimiter : "") + m.toString()
                    }
                    ),
                    s += i.csvNewLine);
                return t.utils.isValue(o) ? this.createDownload(this.base64(`\uFEFF${s}`), "application/csv", o) : s
            }
        };
        t.export = l.init()
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            fileDeferred: 0,
            label: "",
            mode: "input",
            buttonTitle: "",
            filesSelectedTitle: "",
            dropTitle: "",
            dropIcon: "\u{1F4E5}",
            clearButtonIcon: "\u274C",
            prepend: "",
            clsComponent: "",
            clsPrepend: "",
            clsButton: "",
            clsCaption: "",
            clsLabel: "",
            onSelect: t.noop,
            onFileCreate: t.noop
        };
        t.fileSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroFileSetup != "undefined" && t.fileSetup(globalThis.metroFileSetup),
        t.Component("file", {
            init: function(e, o) {
                return this._super(o, e, l),
                this
            },
            _create: function() {
                let e = this.element;
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("file-create", {
                    element: e
                })
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options
                  , a = e.wrap("<div>").addClass((o.mode === "input" ? " file " : o.mode === "button" ? " file-button " : " drop-zone ") + e[0].className).addClass(o.clsComponent);
                a.attr("id", Hooks.useId(a[0]));
                let i = r("<span>").addClass("caption").addClass(o.clsCaption), s = r("<span>").addClass("files").addClass(o.clsCaption), c, d;
                o.mode.includes("drop") ? (c = r("<span>").addClass("icon").html(o.dropIcon).appendTo(a),
                i.html(o.dropTitle || this.strings.label_drop_file).insertAfter(c),
                s.html((o.filesSelectedTitle || this.strings.label_files_selected).replace("{n}", 0)).insertAfter(i),
                d = r("<button>").addClass("button clear-button square").html(o.clearButtonIcon).appendTo(a)) : (i.insertBefore(e),
                d = r("<button>").attr("type", "button").addClass("button select-files-button").attr("tabindex", -1).html(o.buttonTitle || this.strings.label_choose_file),
                d.appendTo(a),
                d.addClass(o.clsButton),
                a.hasClass("input-small") && d.addClass("small"),
                e.attr("dir") === "rtl" && a.addClass("rtl"),
                o.prepend !== "" && r("<div>").html(o.prepend).addClass("prepend").addClass(o.clsPrepend).appendTo(a)),
                e[0].className = "",
                this._addLabel(o.label, a, {
                    className: o.clsLabel,
                    id: a.attr("id"),
                    dir: e.attr("dir")
                }),
                e.is(":disabled") ? this.disable() : this.enable()
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options
                  , i = o.closest(".file, .drop-zone")
                  , s = o.siblings(".caption")
                  , c = o.siblings(".files")
                  , d = o.closest("form");
                d.length && d.on("reset", () => {
                    e.clear()
                }
                ),
                i.on(t.events.click, ".select-files-button", () => {
                    o[0].click()
                }
                ),
                i.on(t.events.click, ".clear-button", () => {
                    e.clear()
                }
                ),
                o.on(t.events.change, function() {
                    let p = [], m, g = Array.from(this.files);
                    for (let f of g)
                        p.push(f.name);
                    a.mode === "input" ? (m = p.join(", "),
                    s.html(m),
                    s.attr("title", m)) : c.html((a.filesSelectedTitle || e.strings.label_files_selected).replace("{n}", o[0].files.length)),
                    e._fireEvent("select", {
                        files: this.files
                    })
                }),
                o.on(t.events.focus, () => {
                    i.addClass("focused")
                }
                ),
                o.on(t.events.blur, () => {
                    i.removeClass("focused")
                }
                ),
                a.mode !== "input" && (i.on(t.events.click, () => {
                    o[0].click()
                }
                ),
                i.on("drag dragstart dragend dragover dragenter dragleave drop", p => {
                    p.preventDefault()
                }
                ),
                i.on("dragenter dragover", () => {
                    i.addClass("drop-on")
                }
                ),
                i.on("dragleave", () => {
                    i.removeClass("drop-on")
                }
                ),
                i.on("drop", p => {
                    o[0].files = p.dataTransfer.files,
                    c.html((a.filesSelectedTitle || e.strings.label_files_selected).replace("{n}", o[0].files.length)),
                    i.removeClass("drop-on"),
                    o.trigger("change")
                }
                ))
            },
            clear: function() {
                let e = this.element
                  , o = this.options;
                o.mode === "input" ? e.siblings(".caption").html("") : e.siblings(".files").html((o.filesSelectedTitle || this.strings.label_files_selected).replace("{n}", 0)),
                e[0].value = "",
                e.trigger("change")
            },
            disable: function() {
                this.element.data("disabled", !0),
                this.element.parent().addClass("disabled")
            },
            enable: function() {
                this.element.data("disabled", !1),
                this.element.parent().removeClass("disabled")
            },
            toggleState: function() {
                this.elem.disabled ? this.disable() : this.enable()
            },
            toggleDir: function() {
                this.element.attr("dir") === "rtl" ? this.element.parent().addClass("rtl") : this.element.parent().removeClass("rtl")
            },
            changeAttribute: function(e) {
                switch (e) {
                case "disabled":
                    this.toggleState();
                    break;
                case "dir":
                    this.toggleDir();
                    break
                }
            },
            destroy: function() {
                let e = this.element
                  , o = this.options
                  , a = e.parent();
                e.off(t.events.change),
                a.off(t.events.click, "button"),
                o.label && a.prev("label").remove(),
                a.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            min: 0,
            max: 100,
            value: 0,
            size: 0,
            labelMin: "",
            labelMax: "",
            label: "",
            suffix: "",
            values: 10,
            segments: 10,
            startAngle: 235,
            range: 250,
            theme: "",
            onGaugeCreate: t.noop
        };
        t.gaugeSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroGaugeSetup != "undefined" && t.gaugeSetup(globalThis.metroGaugeSetup),
        t.Component("gauge", {
            init: function(e, o) {
                return this._super(o, e, l, {}),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options;
                e[0].style.setProperty("--analog-gauge-segments", `${o.segments}`),
                e[0].style.setProperty("--analog-gauge-start-angle", `${o.startAngle}deg`),
                e[0].style.setProperty("--analog-gauge-range", `${o.range}deg`),
                this.options.range = Number.parseFloat(getComputedStyle(e[0]).getPropertyValue("--analog-gauge-range")),
                this.options.start = Number.parseFloat(getComputedStyle(e[0]).getPropertyValue("--analog-gauge-start-angle")),
                this.options.defaultMark = 90,
                this.options.defaultNeedle = 270,
                this.options.minDegree = this.options.start - this.options.defaultNeedle,
                this._createStructure(),
                this._createEvents(),
                this.update(),
                this._fireEvent("gauge-create")
            },
            _generateMarks: function() {
                let e = this.options
                  , o = `${e.values}`.trim();
                if (o === "")
                    return "";
                let a = o.toArray(","), i = [], s;
                a.length === 1 ? (i = Array.from({
                    length: +o
                }, (d, p) => Math.round(e.min + p * (e.max - e.min) / (+o - 1 || 1))),
                s = Number.parseInt(o)) : (i = [...a],
                s = a.length);
                let c = e.range / (s - 1 || 1);
                return `
                <ul class="value-marks">
                  ${i.map( (d, p) => `<li style="--_d:${e.start - e.defaultMark + p * c}deg" class="mark">${d}</li>`).join("")}
                </ul>
            `
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options;
                e.addClass("analog-gauge"),
                o.size && e.css({
                    width: o.size,
                    height: o.size
                }),
                e.html(`
                <div class="gauge"></div>
                ${this._generateMarks()} 
                <div class="needle"></div> 
                <div class="value">${o.value}</div> 
                <div class="label">${o.label}</div> 
                <div class="label-min">${o.labelMin}</div> 
                <div class="label-max">${o.labelMax}</div> 
            `),
                o.theme && e.addClass(`theme-${o.theme}`)
            },
            _createEvents: () => {}
            ,
            val: function(e) {
                if (typeof e == "undefined")
                    return this.options.value;
                this.options.value = e,
                this.update()
            },
            update: function() {
                let e = this.element
                  , o = this.elem
                  , a = this.options
                  , s = (Math.max(a.min, Math.min(a.max, a.value)) - a.min) / (a.max - a.min)
                  , c = a.minDegree + s * a.range;
                o.style.setProperty("--analog-gauge-value", `${s * a.range}deg`),
                o.style.setProperty("--_d", `${c}deg`),
                e.find(".value").html(a.value + a.suffix)
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            gradientType: "linear",
            gradientShape: "",
            gradientPosition: "",
            gradientSize: "",
            gradientColors: "#000, #fff",
            gradientRepeat: !1,
            onGradientBoxCreate: t.noop
        };
        t.gradientBoxSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroGradientBoxSetup != "undefined" && t.gradientBoxSetup(globalThis.metroGradientBoxSetup),
        t.Component("gradient-box", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    colors: [],
                    shape: "",
                    size: "",
                    position: "",
                    type: "linear",
                    func: "linear-gradient",
                    repeat: !1
                }),
                this
            },
            _create: function() {
                let e = this.options;
                this.colors = e.gradientColors.toArray(","),
                this.type = e.gradientType.toLowerCase(),
                this.shape = e.gradientShape.toLowerCase(),
                this.size = e.gradientSize.toLowerCase(),
                this.repeat = e.gradientRepeat,
                this.func = `${(this.repeat ? "repeating-" : "") + this.type}-gradient`,
                this.type === "linear" ? e.gradientPosition ? (this.position = Number.isNaN(e.gradientPosition) === !1 ? `${e.gradientPosition}deg` : e.gradientPosition,
                this.position.indexOf("deg") === -1 && this.position.indexOf("to ") === -1 && (this.position = `to ${this.position}`)) : this.position = "to bottom" : (this.position = e.gradientPosition.toLowerCase(),
                this.position && this.position.indexOf("at ") === -1 && (this.position = `at ${this.position}`)),
                this._createStructure(),
                this._setGradient(),
                this._fireEvent("gradient-box-create")
            },
            _createStructure: function() {
                this.element.addClass("gradient-box")
            },
            _setGradient: function() {
                let e = this.element
                  , o = [];
                this.type === "radial" && this.shape && o.push(this.shape),
                this.type === "radial" && this.size && o.push(this.size),
                this.position;
                let a = `${this.func}(${o.length ? `${o.join(" ")}, ` : ""}${this.colors.join(", ")})`;
                e.css({
                    background: a
                })
            },
            changeAttribute: function(e, o) {
                if (e.indexOf("data-gradient-") !== -1) {
                    switch (e) {
                    case "data-gradient-type":
                        this.type = o,
                        this.func = `${o.toLowerCase()}-gradient`;
                        break;
                    case "data-gradient-colors-css":
                        this.colors = o ? o.toArray(",") : ["#fff", "#000"];
                        break;
                    case "data-gradient-shape":
                        this.shape = o.toLowerCase();
                        break;
                    case "data-gradient-size":
                        this.size = o.toLowerCase();
                        break;
                    case "data-gradient-position":
                        this.position = o.toLowerCase();
                        break;
                    case "data-gradient-repeat":
                        this.repeat = t.utils.bool(o);
                        break
                    }
                    this._setGradient()
                }
            },
            destroy: function() {
                return this.element
            }
        })
    }
    )(Metro, Dom);
    (t => {
        "use strict";
        t.md5 = r => {
            function l(H, R) {
                return H << R | H >>> 32 - R
            }
            function e(H, R) {
                let J, K, P;
                J = H & 2147483648,
                K = R & 2147483648;
                let W = H & 1073741824
                  , at = R & 1073741824;
                return P = (H & 1073741823) + (R & 1073741823),
                W & at ? P ^ 2147483648 ^ J ^ K : W | at ? P & 1073741824 ? P ^ 3221225472 ^ J ^ K : P ^ 1073741824 ^ J ^ K : P ^ J ^ K
            }
            function o(H, R, J) {
                return H & R | ~H & J
            }
            function a(H, R, J) {
                return H & J | R & ~J
            }
            function i(H, R, J) {
                return H ^ R ^ J
            }
            function s(H, R, J) {
                return R ^ (H | ~J)
            }
            function c(H, R, J, K, P, W, at) {
                let ut = e(H, e(e(o(R, J, K), P), at));
                return e(l(ut, W), R)
            }
            function d(H, R, J, K, P, W, at) {
                let ut = e(H, e(e(a(R, J, K), P), at));
                return e(l(ut, W), R)
            }
            function p(H, R, J, K, P, W, at) {
                let ut = e(H, e(e(i(R, J, K), P), at));
                return e(l(ut, W), R)
            }
            function m(H, R, J, K, P, W, at) {
                let ut = e(H, e(e(s(R, J, K), P), at));
                return e(l(ut, W), R)
            }
            function g(H) {
                let R, J = H.length, K = J + 8, W = ((K - K % 64) / 64 + 1) * 16, at = Array(W - 1), ut = 0, Et = 0;
                for (; Et < J; )
                    R = (Et - Et % 4) / 4,
                    ut = Et % 4 * 8,
                    at[R] = at[R] | H.charCodeAt(Et) << ut,
                    Et++;
                return R = (Et - Et % 4) / 4,
                ut = Et % 4 * 8,
                at[R] = at[R] | 128 << ut,
                at[W - 2] = J << 3,
                at[W - 1] = J >>> 29,
                at
            }
            function f(H) {
                let R = "", J = "", K, P;
                for (P = 0; P <= 3; P++)
                    K = H >>> P * 8 & 255,
                    J = `0${K.toString(16)}`,
                    R = R + J.substr(J.length - 2, 2);
                return R
            }
            function u(H) {
                let R = H.replace(/\r\n/g, `
`)
                  , J = "";
                for (let K = 0; K < R.length; K++) {
                    let P = R.charCodeAt(K);
                    P < 128 ? J += String.fromCharCode(P) : P > 127 && P < 2048 ? (J += String.fromCharCode(P >> 6 | 192),
                    J += String.fromCharCode(P & 63 | 128)) : (J += String.fromCharCode(P >> 12 | 224),
                    J += String.fromCharCode(P >> 6 & 63 | 128),
                    J += String.fromCharCode(P & 63 | 128))
                }
                return J
            }
            let h = [], b, w, Q, C, B, x, v, E, k, S = 7, T = 12, $ = 17, nt = 22, Z = 5, ft = 9, xt = 14, rt = 20, jt = 4, Ct = 11, tt = 16, It = 23, zt = 6, lt = 10, kt = 15, Yt = 21, j = u(r);
            for (h = g(j),
            x = 1732584193,
            v = 4023233417,
            E = 2562383102,
            k = 271733878,
            b = 0; b < h.length; b += 16)
                w = x,
                Q = v,
                C = E,
                B = k,
                x = c(x, v, E, k, h[b], S, 3614090360),
                k = c(k, x, v, E, h[b + 1], T, 3905402710),
                E = c(E, k, x, v, h[b + 2], $, 606105819),
                v = c(v, E, k, x, h[b + 3], nt, 3250441966),
                x = c(x, v, E, k, h[b + 4], S, 4118548399),
                k = c(k, x, v, E, h[b + 5], T, 1200080426),
                E = c(E, k, x, v, h[b + 6], $, 2821735955),
                v = c(v, E, k, x, h[b + 7], nt, 4249261313),
                x = c(x, v, E, k, h[b + 8], S, 1770035416),
                k = c(k, x, v, E, h[b + 9], T, 2336552879),
                E = c(E, k, x, v, h[b + 10], $, 4294925233),
                v = c(v, E, k, x, h[b + 11], nt, 2304563134),
                x = c(x, v, E, k, h[b + 12], S, 1804603682),
                k = c(k, x, v, E, h[b + 13], T, 4254626195),
                E = c(E, k, x, v, h[b + 14], $, 2792965006),
                v = c(v, E, k, x, h[b + 15], nt, 1236535329),
                x = d(x, v, E, k, h[b + 1], Z, 4129170786),
                k = d(k, x, v, E, h[b + 6], ft, 3225465664),
                E = d(E, k, x, v, h[b + 11], xt, 643717713),
                v = d(v, E, k, x, h[b], rt, 3921069994),
                x = d(x, v, E, k, h[b + 5], Z, 3593408605),
                k = d(k, x, v, E, h[b + 10], ft, 38016083),
                E = d(E, k, x, v, h[b + 15], xt, 3634488961),
                v = d(v, E, k, x, h[b + 4], rt, 3889429448),
                x = d(x, v, E, k, h[b + 9], Z, 568446438),
                k = d(k, x, v, E, h[b + 14], ft, 3275163606),
                E = d(E, k, x, v, h[b + 3], xt, 4107603335),
                v = d(v, E, k, x, h[b + 8], rt, 1163531501),
                x = d(x, v, E, k, h[b + 13], Z, 2850285829),
                k = d(k, x, v, E, h[b + 2], ft, 4243563512),
                E = d(E, k, x, v, h[b + 7], xt, 1735328473),
                v = d(v, E, k, x, h[b + 12], rt, 2368359562),
                x = p(x, v, E, k, h[b + 5], jt, 4294588738),
                k = p(k, x, v, E, h[b + 8], Ct, 2272392833),
                E = p(E, k, x, v, h[b + 11], tt, 1839030562),
                v = p(v, E, k, x, h[b + 14], It, 4259657740),
                x = p(x, v, E, k, h[b + 1], jt, 2763975236),
                k = p(k, x, v, E, h[b + 4], Ct, 1272893353),
                E = p(E, k, x, v, h[b + 7], tt, 4139469664),
                v = p(v, E, k, x, h[b + 10], It, 3200236656),
                x = p(x, v, E, k, h[b + 13], jt, 681279174),
                k = p(k, x, v, E, h[b], Ct, 3936430074),
                E = p(E, k, x, v, h[b + 3], tt, 3572445317),
                v = p(v, E, k, x, h[b + 6], It, 76029189),
                x = p(x, v, E, k, h[b + 9], jt, 3654602809),
                k = p(k, x, v, E, h[b + 12], Ct, 3873151461),
                E = p(E, k, x, v, h[b + 15], tt, 530742520),
                v = p(v, E, k, x, h[b + 2], It, 3299628645),
                x = m(x, v, E, k, h[b], zt, 4096336452),
                k = m(k, x, v, E, h[b + 7], lt, 1126891415),
                E = m(E, k, x, v, h[b + 14], kt, 2878612391),
                v = m(v, E, k, x, h[b + 5], Yt, 4237533241),
                x = m(x, v, E, k, h[b + 12], zt, 1700485571),
                k = m(k, x, v, E, h[b + 3], lt, 2399980690),
                E = m(E, k, x, v, h[b + 10], kt, 4293915773),
                v = m(v, E, k, x, h[b + 1], Yt, 2240044497),
                x = m(x, v, E, k, h[b + 8], zt, 1873313359),
                k = m(k, x, v, E, h[b + 15], lt, 4264355552),
                E = m(E, k, x, v, h[b + 6], kt, 2734768916),
                v = m(v, E, k, x, h[b + 13], Yt, 1309151649),
                x = m(x, v, E, k, h[b + 4], zt, 4149444226),
                k = m(k, x, v, E, h[b + 11], lt, 3174756917),
                E = m(E, k, x, v, h[b + 2], kt, 718787259),
                v = m(v, E, k, x, h[b + 9], Yt, 3951481745),
                x = e(x, w),
                v = e(v, Q),
                E = e(E, C),
                k = e(k, B);
            return (f(x) + f(v) + f(E) + f(k)).toLowerCase()
        }
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            gravatarDeferred: 0,
            email: "",
            size: 80,
            default: "mp",
            onGravatarCreate: t.noop
        };
        t.gravatarSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroGravatarSetup != "undefined" && t.gravatarSetup(globalThis.metroGravatarSetup),
        t.Component("gravatar", {
            init: function(e, o) {
                return this._super(o, e, l),
                this
            },
            _create: function() {
                let e = this.element;
                this._createStructure(),
                this.get(),
                this._fireEvent("gravatar-create", {
                    element: e
                })
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options;
                e[0].tagName !== "IMG" && e.html("<img alt='' src='' />"),
                e.addClass("gravatar"),
                e.css({
                    height: o.size + "px",
                    width: o.size + "px"
                })
            },
            getImage: function(e, o, a, i) {
                let s = r("<img>").attr("alt", e);
                return s.attr("src", this.getImageSrc(e, o)),
                i === !0 ? s : s[0]
            },
            getImageSrc: (e, o=80, a="404") => e === void 0 || e.trim() === "" ? "" : `https://www.gravatar.com/avatar/${t.md5(e.toLowerCase().trim())}?size=${o}&d=${t.utils.encodeURI(a)}`,
            get: function() {
                let e = this.element
                  , o = this.options
                  , a = e[0].tagName === "IMG" ? e : e.find("img");
                if (a.length !== 0)
                    return a.attr("src", this.getImageSrc(o.email, o.size, o.default)),
                    this
            },
            resize: function(e) {
                this.options.size = e !== void 0 ? e : this.element.attr("data-size"),
                this.get()
            },
            email: function(e) {
                this.options.email = e !== void 0 ? e : this.element.attr("data-email"),
                this.get()
            },
            changeAttribute: function(e) {
                switch (e) {
                case "data-size":
                    this.resize();
                    break;
                case "data-email":
                    this.email();
                    break
                }
            },
            destroy: function() {
                return this.element
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            hintDeferred: 0,
            hintHide: 5e3,
            clsHint: "",
            hintText: "",
            hintPosition: t.position.TOP,
            hintOffset: 4,
            onHintShow: t.noop,
            onHintHide: t.noop,
            onHintCreate: t.noop
        };
        t.hintSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroHintSetup != "undefined" && t.hintSetup(globalThis.metroHintSetup),
        t.Component("hint", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    hint: null,
                    hint_size: {
                        width: 0,
                        height: 0
                    },
                    id: null
                }),
                this
            },
            _create: function() {
                this.id = Hooks.useId(this.element),
                this._createEvents(),
                this._fireEvent("hint-create", {
                    element: this.element
                })
            },
            _createEvents: function() {
                let e = this.element
                  , o = this.options
                  , a = !1;
                e.on(t.events.enter, () => {
                    a = !0,
                    setTimeout( () => {
                        a && (this.createHint(),
                        +o.hintHide > 0 && setTimeout( () => {
                            this.removeHint()
                        }
                        , o.hintHide))
                    }
                    , o.hintDeferred)
                }
                ),
                e.on(t.events.leave, () => {
                    a = !1,
                    this.removeHint()
                }
                ),
                r(globalThis).on(`${t.events.scroll} ${t.events.resize}`, () => {
                    this.hint !== null && this.setPosition()
                }
                , {
                    ns: this.id
                })
            },
            createHint: function() {
                let e = this.elem
                  , o = this.element
                  , a = this.options
                  , i = r("<div>").addClass("hint").addClass(a.clsHint).html(a.hintText);
                if (this.hint = i,
                this.hint_size = t.utils.hiddenElementSize(i),
                r(".hint:not(.permanent-hint)").remove(),
                e.tagName === "TD" || e.tagName === "TH") {
                    let s = r("<div/>").css("display", "inline-block").html(o.html());
                    o.html(s),
                    this.element = s
                }
                this.setPosition(),
                i.appendTo(r("body")),
                this._fireEvent("hint-show", {
                    hint: i[0]
                })
            },
            setPosition: function() {
                let e = this.hint
                  , o = this.hint_size
                  , a = this.options
                  , i = this.element;
                a.hintPosition === t.position.BOTTOM ? (e.addClass("bottom"),
                e.css({
                    top: i.offset().top - r(globalThis).scrollTop() + i.outerHeight() + a.hintOffset,
                    left: i.offset().left + i.outerWidth() / 2 - o.width / 2 - r(globalThis).scrollLeft()
                })) : a.hintPosition === t.position.RIGHT ? (e.addClass("right"),
                e.css({
                    top: i.offset().top + i.outerHeight() / 2 - o.height / 2 - r(globalThis).scrollTop(),
                    left: i.offset().left + i.outerWidth() - r(globalThis).scrollLeft() + a.hintOffset
                })) : a.hintPosition === t.position.LEFT ? (e.addClass("left"),
                e.css({
                    top: i.offset().top + i.outerHeight() / 2 - o.height / 2 - r(globalThis).scrollTop(),
                    left: i.offset().left - o.width - r(globalThis).scrollLeft() - a.hintOffset
                })) : (e.addClass("top"),
                e.css({
                    top: i.offset().top - r(globalThis).scrollTop() - o.height - a.hintOffset,
                    left: i.offset().left - r(globalThis).scrollLeft() + i.outerWidth() / 2 - o.width / 2
                }))
            },
            removeHint: function() {
                let e = this.hint
                  , a = this.options.onHintHide === t.noop ? 0 : 300;
                e !== null && (this._fireEvent("hint-hide", {
                    hint: e[0]
                }),
                setTimeout( () => {
                    e.hide(0, () => {
                        e.remove(),
                        this.hint = null
                    }
                    )
                }
                , a))
            },
            changeText: function() {
                this.options.hintText = this.element.attr("data-hint-text")
            },
            changeAttribute: function(e) {
                e === "data-hint-text" && this.changeText()
            },
            destroy: function() {
                let e = this.element;
                this.removeHint(),
                e.off(`${t.events.enter}-hint`),
                e.off(`${t.events.leave}-hint`),
                r(globalThis).off(`${t.events.scroll}-hint`)
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            specialKeys: {
                8: "backspace",
                9: "tab",
                13: "return",
                16: "shift",
                17: "ctrl",
                18: "alt",
                19: "pause",
                20: "capslock",
                27: "esc",
                32: "space",
                33: "pageup",
                34: "pagedown",
                35: "end",
                36: "home",
                37: "left",
                38: "up",
                39: "right",
                40: "down",
                45: "insert",
                46: "del",
                96: "0",
                97: "1",
                98: "2",
                99: "3",
                100: "4",
                101: "5",
                102: "6",
                103: "7",
                104: "8",
                105: "9",
                106: "*",
                107: "+",
                109: "-",
                110: ".",
                111: "/",
                112: "f1",
                113: "f2",
                114: "f3",
                115: "f4",
                116: "f5",
                117: "f6",
                118: "f7",
                119: "f8",
                120: "f9",
                121: "f10",
                122: "f11",
                123: "f12",
                144: "numlock",
                145: "scroll",
                188: ",",
                190: ".",
                191: "/",
                91: "meta",
                92: "meta",
                93: "meta",
                224: "meta"
            },
            shiftNums: {
                "~": "`",
                "!": "1",
                "@": "2",
                "#": "3",
                $: "4",
                "%": "5",
                "^": "6",
                "&": "7",
                "*": "8",
                "(": "9",
                ")": "0",
                _: "-",
                "+": "=",
                ":": ";",
                '"': "'",
                "<": ",",
                ">": ".",
                "?": "/",
                "|": "\\"
            },
            shiftNumsInverse: {
                "`": "~",
                1: "!",
                2: "@",
                3: "#",
                4: "$",
                5: "%",
                6: "^",
                7: "&",
                8: "*",
                9: "(",
                0: ")",
                "-": "_",
                "=": "+",
                ";": ": ",
                "'": '"',
                ",": "<",
                ".": ">",
                "/": "?",
                "\\": "|"
            },
            textAcceptingInputTypes: ["text", "password", "number", "email", "url", "range", "date", "month", "week", "time", "datetime", "datetime-local", "search", "color", "tel"],
            pendingKey: null,
            pendingTimeout: 1e3,
            pendingTimer: null,
            normalizeKey: a => {
                if (a.includes(" "))
                    return a.split(" ").map(l.normalizeKey).join(" ");
                if (!a.includes("+"))
                    return a;
                let i = a.split("+")
                  , s = i.pop()
                  , c = i.filter(d => ["alt", "ctrl", "meta", "shift"].includes(d));
                return c.sort( (d, p) => {
                    let m = {
                        alt: 1,
                        ctrl: 2,
                        meta: 3,
                        shift: 4
                    };
                    return m[d] - m[p]
                }
                ),
                c.length ? `${c.join("+")}+${s}` : s
            }
            ,
            getKey: a => {
                let i, s = a.keyCode, c = String.fromCharCode(s).toLowerCase();
                [91, 92, 93, 224].includes(s) ? i = "meta" : s === 18 ? i = "alt" : s === 17 ? i = "ctrl" : s === 16 ? i = "shift" : a.shiftKey ? i = l.shiftNums[c] ? l.shiftNums[c] : c : i = l.specialKeys[s] === void 0 ? c : l.specialKeys[s];
                let d = l.getModifier(a);
                return ["alt", "ctrl", "meta", "shift"].includes(i) && d.includes(i) ? d.join("+") : d.length ? `${d.join("+")}+${i}` : i
            }
            ,
            getModifier: a => {
                let i = [];
                return a.altKey && i.push("alt"),
                a.ctrlKey && i.push("ctrl"),
                a.metaKey && i.push("meta"),
                a.shiftKey && i.push("shift"),
                i
            }
            ,
            createChordKey: (a, i) => `${a} ${i}`,
            isPartOfChordKey: a => Object.keys(t.hotkeys).some(i => i.split(" ")[0] === a),
            executeHotkeyAction: (a, i) => {
                let s = r(a[0])
                  , c = a[1]
                  , d = `${s.attr("href")}`.trim();
                return i.repeat && !s.attr("data-repeat") ? !1 : (i.preventDefault(),
                c ? t.utils.exec(c) : s.is("a") && d && d.length > 0 && d.trim() !== "#" ? globalThis.location.href = d : s[0].click(),
                !0)
            }
            ,
            clearPending: () => {
                clearTimeout(l.pendingTimer),
                l.pendingKey = null
            }
            ,
            setPending: a => {
                l.pendingKey = a,
                clearTimeout(l.pendingTimer),
                l.pendingTimer = setTimeout(l.clearPending, l.pendingTimeout)
            }
        };
        function e(a) {
            let i = l.getKey(a)
              , s = l.normalizeKey(i);
            if (l.pendingKey !== null) {
                let d = l.createChordKey(l.pendingKey, s);
                for (let p in t.hotkeys)
                    if (l.normalizeKey(p) === d && l.executeHotkeyAction(t.hotkeys[p], a)) {
                        l.clearPending();
                        return
                    }
            }
            Object.keys(t.hotkeys).some(d => {
                let p = d.split(" ");
                return p.length > 1 && l.normalizeKey(p[0]) === s
            }
            ) && l.setPending(s);
            for (let d in t.hotkeys)
                if (!d.includes(" ") && l.normalizeKey(d) === s) {
                    l.executeHotkeyAction(t.hotkeys[d], a);
                    return
                }
        }
        function o(a, i) {
            let s = l.normalizeKey(a);
            return this.each(function() {
                let c = r(this);
                if (c.is("input, textarea") || c.attr("contenteditable") === "true") {
                    let p = (m, g) => {
                        t.utils.exec(i, [m, g, a], c[0])
                    }
                    ;
                    c.on(`${t.events.keydown}.hotkey-data-${a}`, m => {
                        let g = l.getKey(m)
                          , f = l.normalizeKey(g);
                        if (l.pendingKey !== null) {
                            let u = l.createChordKey(l.pendingKey, f);
                            if (s === u) {
                                l.clearPending(),
                                m.preventDefault(),
                                p(m, g);
                                return
                            }
                        }
                        if (s.includes(" ")) {
                            let u = s.split(" ");
                            if (f === l.normalizeKey(u[0])) {
                                l.setPending(f);
                                return
                            }
                        }
                        s === f && (m.preventDefault(),
                        p(m, g))
                    }
                    )
                } else {
                    let p = m => m.repeat && !c.attr("data-repeat") ? !1 : (m.preventDefault(),
                    l.executeHotkeyAction(s, m),
                    !0);
                    t.hotkeys || (t.hotkeys = {}),
                    t.hotkeys[a] = [c, p],
                    c.attr("data-hotkey", a)
                }
            })
        }
        r.fn.hotkey = o,
        globalThis.METRO_JQUERY && globalThis.jquery_present && (globalThis.jQuery.fn.hotkey = o),
        r(document).on(`${t.events.keydown}.hotkey-data`, e)
    }
    )(Metro, Dom);
    ( (t, r) => {
        let l = {
            onHoverBoxCreate: t.noop
        };
        t.hoverBoxSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof window.metroHoverBoxSetup != "undefined" && t.hoverBoxSetup(window.metroHoverBoxSetup),
        t.Component("hoverbox", {
            init: function(e, o) {
                return this._super(o, e, l, {}),
                this
            },
            _create: function() {
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("hover-box-create")
            },
            _createStructure: function() {
                let e = this.element;
                e.addClass("hover-box"),
                e.cssVar("size", `${e.height() / 2}px`)
            },
            _createEvents: function() {
                let e = this.element;
                e.on(t.events.move, o => {
                    let a = e[0].getBoundingClientRect()
                      , i = o.pageX - (a.left + window.scrollX)
                      , s = o.pageY - (a.top + window.scrollY);
                    e.cssVar("x", `${Math.round(i)}px`).cssVar("y", `${Math.round(s)}px`)
                }
                )
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            htmlContainerDeferred: 0,
            method: "get",
            htmlSource: null,
            requestData: null,
            requestOptions: null,
            insertMode: "default",
            onHtmlLoad: t.noop,
            onHtmlLoadFail: t.noop,
            onHtmlLoadDone: t.noop,
            onHtmlContainerCreate: t.noop
        };
        t.htmlContainerSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroHtmlContainerSetup != "undefined" && t.htmlContainerSetup(globalThis.metroHtmlContainerSetup),
        t.Component("html-container", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    data: null,
                    opt: {},
                    htmlSource: ""
                }),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options;
                typeof o.requestData == "string" && (o.requestData = JSON.parse(o.requestData)),
                t.utils.isObject(o.requestData) && (this.data = t.utils.isObject(o.requestData)),
                typeof o.requestOptions == "string" && (o.requestOptions = JSON.parse(o.requestOptions)),
                t.utils.isObject(o.requestOptions) && (this.opt = t.utils.isObject(o.requestOptions)),
                o.method = o.method.toUpperCase(),
                t.utils.isValue(o.htmlSource) && (this.htmlSource = o.htmlSource,
                this._load()),
                this._fireEvent("html-container-create", {
                    element: e
                })
            },
            _load: function() {
                let e = this.element
                  , o = this.options
                  , a = {
                    method: o.method
                };
                this.data && (a.body = this.data),
                this.opt && (a.headers = this.opt),
                fetch(this.htmlSource, a).then(t.fetch.status).then(t.fetch.text).then(i => {
                    let s = r(i);
                    switch (s.length === 0 && (s = r("<div>").html(i)),
                    o.insertMode.toLowerCase()) {
                    case "prepend":
                        e.prepend(s);
                        break;
                    case "append":
                        e.append(s);
                        break;
                    case "replace":
                        s.insertBefore(e).script(),
                        e.remove();
                        break;
                    default:
                        e.html(s)
                    }
                    this._fireEvent("html-load", {
                        data: i,
                        source: o.htmlSource,
                        requestData: this.data,
                        requestOptions: this.opt
                    })
                }
                ).catch(i => {
                    this._fireEvent("html-load-fail", {
                        error: i
                    })
                }
                )
            },
            load: function(e, o, a) {
                e && (this.htmlSource = e),
                o && (this.data = t.utils.isObject(o)),
                a && (this.opt = t.utils.isObject(a)),
                this._load()
            },
            changeAttribute: function(e) {
                let o = this.element
                  , a = this.options
                  , i = () => {
                    let d = o.attr("data-html-source");
                    t.utils.isNull(d) || (d.trim() === "" && o.html(""),
                    a.htmlSource = d,
                    this._load())
                }
                  , s = () => {
                    let d = o.attr("data-insert-mode");
                    t.utils.isValue(d) && (a.insertMode = d)
                }
                  , c = () => {
                    let d = o.attr("data-request-data");
                    this.load(a.htmlSource, d)
                }
                ;
                switch (e) {
                case "data-html-source":
                    i();
                    break;
                case "data-insert-mode":
                    s();
                    break;
                case "data-request-data":
                    c();
                    break
                }
            },
            destroy: () => {}
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            image: null,
            size: "cover",
            repeat: !1,
            color: "transparent",
            attachment: "scroll",
            origin: "border",
            onImageBoxCreate: t.noop
        };
        t.imageBoxSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroImageBoxSetup != "undefined" && t.imageBoxSetup(globalThis.metroImageBoxSetup),
        t.Component("image-box", {
            init: function(e, o) {
                return this._super(o, e, l, {}),
                this
            },
            _create: function() {
                this._createStructure(),
                this._fireEvent("image-box-create")
            },
            _createStructure: function() {
                this.element.addClass("image-box"),
                this._drawImage()
            },
            _drawImage: function() {
                let e = this.element, o = this.options, a = new Image, i;
                e.attr("data-original") || e.attr("data-original", o.image),
                e.css({
                    backgroundImage: `url(${o.image})`,
                    backgroundSize: o.size,
                    backgroundRepeat: o.repeat ? "repeat" : "no-repeat",
                    backgroundColor: o.color,
                    backgroundAttachment: o.attachment,
                    backgroundOrigin: o.origin
                }),
                a.src = o.image,
                a.onload = function() {
                    i = this.height >= this.width,
                    e.removeClass("image-box__portrait image-box__landscape").addClass(`image-box__${i ? "portrait" : "landscape"}`)
                }
            },
            changeAttribute: function(e, o) {
                let a = e.replace("data-", "");
                ["image", "size", "repeat", "color", "attachment", "origin"].indexOf(a) > -1 && (this.options[a] = o,
                this._drawImage())
            },
            destroy: function() {
                return this.element
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            imageCompareDeferred: 0,
            width: "100%",
            height: "auto",
            onSliderMove: t.noop,
            onImageCompareCreate: t.noop
        };
        t.imageCompareSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroImageCompareSetup != "undefined" && t.imageCompareSetup(globalThis.metroImageCompareSetup),
        t.Component("image-compare", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    id: null
                }),
                this
            },
            _create: function() {
                let e = this.element;
                this.id = Hooks.useId(this.elem),
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("image-compare-create", {
                    element: e
                })
            },
            _createStructure: function() {
                let e = this.element, o = this.options, a, i;
                switch (t.utils.isValue(e.attr("id")) || e.attr("id", this.id),
                e.addClass("image-compare").css({
                    width: o.width
                }),
                a = e.width(),
                o.height) {
                case "16/9":
                    i = t.utils.aspectRatioH(a, o.height);
                    break;
                case "21/9":
                    i = t.utils.aspectRatioH(a, o.height);
                    break;
                case "4/3":
                    i = t.utils.aspectRatioH(a, o.height);
                    break;
                case "auto":
                    i = t.utils.aspectRatioH(a, "16/9");
                    break;
                default:
                    i = o.height
                }
                e.css({
                    height: i
                });
                let s = r("<div>").addClass("image-container").appendTo(e)
                  , c = r("<div>").addClass("image-container-overlay").appendTo(e).css({
                    width: a / 2
                })
                  , d = r("<div>").addClass("image-slider").appendTo(e);
                d.css({
                    top: i / 2 - d.height() / 2,
                    left: a / 2 - d.width() / 2
                });
                let p = e.find("img");
                r.each(p, function(m) {
                    let g = r("<div>").addClass("image-wrapper");
                    g.css({
                        width: a,
                        height: i,
                        backgroundImage: `url(${this.src})`
                    }),
                    g.appendTo(m === 0 ? s : c)
                })
            },
            _createEvents: function() {
                let e = this.element
                  , o = this.options
                  , a = e.find(".image-container-overlay")
                  , i = e.find(".image-slider");
                i.on(t.events.startAll, () => {
                    let s = e.width();
                    r(document).on(t.events.moveAll, c => {
                        let d = t.utils.getCursorPositionX(e[0], c);
                        d < 0 && (d = 0),
                        d > s && (d = s),
                        a.css({
                            width: d
                        });
                        let p = d - i.width() / 2;
                        i.css({
                            left: p
                        }),
                        this._fireEvent("slider-move", {
                            x: d,
                            l: p
                        })
                    }
                    , {
                        ns: this.id
                    }),
                    r(document).on(t.events.stopAll, () => {
                        r(document).off(t.events.moveAll, {
                            ns: this.id
                        }),
                        r(document).off(t.events.stopAll, {
                            ns: this.id
                        })
                    }
                    , {
                        ns: this.id
                    })
                }
                ),
                r(globalThis).on(t.events.resize, () => {
                    let s = e.width(), c;
                    if (o.width === "100%") {
                        switch (o.height) {
                        case "16/9":
                            c = t.utils.aspectRatioH(s, o.height);
                            break;
                        case "21/9":
                            c = t.utils.aspectRatioH(s, o.height);
                            break;
                        case "4/3":
                            c = t.utils.aspectRatioH(s, o.height);
                            break;
                        case "auto":
                            c = t.utils.aspectRatioH(s, "16/9");
                            break;
                        default:
                            c = o.height
                        }
                        e.css({
                            height: c
                        }),
                        r.each(e.find(".image-wrapper"), function() {
                            r(this).css({
                                width: s,
                                height: c
                            })
                        }),
                        e.find(".image-container-overlay").css({
                            width: s / 2
                        }),
                        i.css({
                            top: c / 2 - i.height() / 2,
                            left: s / 2 - i.width() / 2
                        })
                    }
                }
                , {
                    ns: this.id
                })
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                let e = this.element;
                e.off(t.events.start),
                r(globalThis).off(t.events.resize, {
                    ns: this.id
                }),
                e.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            useBackground: !1,
            backgroundSize: "cover",
            backgroundPosition: "top left",
            clsImageGrid: "",
            clsImageGridItem: "",
            clsImageGridImage: "",
            onItemClick: t.noop,
            onDrawItem: t.noop,
            onImageGridCreate: t.noop
        };
        t.imageGridSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroImageGridSetup != "undefined" && t.imageGridSetup(globalThis.metroImageGridSetup),
        t.Component("image-grid", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    items: []
                }),
                this
            },
            _create: function() {
                this.items = this.element.children("img"),
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("image-grid-create")
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options;
                e.addClass("image-grid").addClass(o.clsImageGrid),
                this._createItems()
            },
            _createEvents: function() {
                let e = this;
                this.element.on(t.events.click, ".image-grid__item", function() {
                    e._fireEvent("item-click", {
                        item: this
                    })
                })
            },
            _createItems: function() {
                let e = this
                  , o = this.element
                  , a = this.options
                  , i = this.items;
                o.clear(),
                i.each(function() {
                    let s = r(this)
                      , c = this.src
                      , d = r("<div>").addClass("image-grid__item").addClass(a.clsImageGridItem).appendTo(o)
                      , p = new Image;
                    p.src = c,
                    p.onload = function() {
                        let m = this.height >= this.width;
                        d.addClass(m ? "image-grid__item-portrait" : "image-grid__item-landscape"),
                        s.addClass(a.clsImageGridImage).appendTo(d),
                        a.useBackground && (d.css({
                            background: `url(${c})`,
                            backgroundRepeat: "no-repeat",
                            backgroundSize: a.backgroundSize,
                            backgroundPosition: a.backgroundPosition
                        }).attr("data-original", s.attr("data-original") || c).attr("data-title", s.attr("alt") || s.attr("data-title") || ""),
                        s.visible(!1)),
                        e._fireEvent("draw-item", {
                            item: d[0],
                            image: s[0]
                        })
                    }
                })
            },
            changeAttribute: function(e, o) {
                let a = this.options;
                e === "data-use-background" && (a.useBackground = t.utils.bool(o),
                this._createItems()),
                e === "data-background-size" && (a.backgroundSize = o,
                this._createItems()),
                e === "data-background-position" && (a.backgroundPosition = o,
                this._createItems())
            },
            destroy: function() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            imageMagnifierDeferred: 0,
            width: "100%",
            height: "auto",
            lensSize: 100,
            lensType: "square",
            magnifierZoom: 2,
            magnifierMode: "glass",
            magnifierZoomElement: null,
            clsMagnifier: "",
            clsLens: "",
            clsZoom: "",
            onMagnifierMove: t.noop,
            onImageMagnifierCreate: t.noop
        };
        t.imageMagnifierSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroImageMagnifierSetup != "undefined" && t.imageMagnifierSetup(globalThis.metroImageMagnifierSetup),
        t.Component("image-magnifier", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    zoomElement: null,
                    id: null
                }),
                this
            },
            _create: function() {
                let e = this.element;
                this.id = Hooks.useId(this.elem),
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("image-magnifier-create", {
                    element: e
                })
            },
            _createStructure: function() {
                let e = this.element, o = this.options, a, i, s, c = e.find("img");
                if (c.length === 0)
                    throw new Error("Image not defined");
                switch (t.utils.isValue(e.attr("id")) || e.attr("id", this.id),
                e.addClass("image-magnifier").css({
                    width: o.width
                }).addClass(o.clsMagnifier),
                i = e.width(),
                o.height) {
                case "16/9":
                    s = t.utils.aspectRatioH(i, o.height);
                    break;
                case "21/9":
                    s = t.utils.aspectRatioH(i, o.height);
                    break;
                case "4/3":
                    s = t.utils.aspectRatioH(i, o.height);
                    break;
                case "auto":
                    s = t.utils.aspectRatioH(i, "16/9");
                    break;
                default:
                    s = o.height
                }
                e.css({
                    height: s
                });
                let d = i / 2 - o.lensSize / 2
                  , p = s / 2 - o.lensSize / 2;
                if (o.magnifierMode === "glass")
                    a = r("<div>").addClass("image-magnifier-glass").appendTo(e),
                    a.css({
                        width: o.lensSize,
                        height: o.lensSize,
                        borderRadius: o.lensType !== "circle" ? 0 : "50%",
                        top: p,
                        left: d,
                        backgroundImage: `url(${c[0].src})`,
                        backgroundRepeat: "no-repeat",
                        backgroundPosition: `-${d * o.magnifierZoom - o.lensSize / 4 + 4}px -${p * o.magnifierZoom - o.lensSize / 4 + 4}px`,
                        backgroundSize: `${c[0].width * o.magnifierZoom}px ${c[0].height * o.magnifierZoom}px`
                    }).addClass(o.clsLens);
                else {
                    a = r("<div>").addClass("image-magnifier-glass").appendTo(e),
                    a.css({
                        width: o.lensSize,
                        height: o.lensSize,
                        borderRadius: 0,
                        borderWidth: 1,
                        top: p,
                        left: d
                    }).addClass(o.clsLens),
                    !t.utils.isValue(o.magnifierZoomElement) || r(o.magnifierZoomElement).length === 0 ? this.zoomElement = r("<div>").insertAfter(e) : this.zoomElement = r(o.magnifierZoomElement);
                    let m = a[0].offsetWidth * o.magnifierZoom
                      , g = a[0].offsetHeight * o.magnifierZoom
                      , f = m / o.lensSize
                      , u = g / o.lensSize;
                    this.zoomElement.css({
                        width: m,
                        height: g,
                        backgroundImage: `url(${c[0].src})`,
                        backgroundRepeat: "no-repeat",
                        backgroundPosition: `-${d * f}px -${p * u}px`,
                        backgroundSize: `${c[0].width * f}px ${c[0].height * u}px`
                    }).addClass(o.clsZoom)
                }
            },
            _createEvents: function() {
                let e = this.element, o = this.options, a = e.find(".image-magnifier-glass"), i = a[0].offsetWidth / 2, s = e.find("img")[0], c = this.zoomElement, d, p;
                r(globalThis).on(t.events.resize, () => {
                    let g = e.width() / 2 - o.lensSize / 2
                      , f = e.height() / 2 - o.lensSize / 2;
                    o.magnifierMode === "glass" && a.css({
                        backgroundPosition: `-${g * o.magnifierZoom - o.lensSize / 4 + 4}px -${f * o.magnifierZoom - o.lensSize / 4 + 4}px`,
                        backgroundSize: `${s.width * o.magnifierZoom}px ${s.height * o.magnifierZoom}px`
                    })
                }
                , {
                    ns: this.id
                }),
                o.magnifierMode !== "glass" && (d = c[0].offsetWidth / i / 2,
                p = c[0].offsetHeight / i / 2,
                c.css({
                    backgroundSize: `${s.width * d}px ${s.height * p}px`
                }));
                let m = g => {
                    let f, u, b = Number.parseInt(o.magnifierZoom);
                    o.magnifierMode === "glass" ? (f = g.x,
                    u = g.y,
                    f > s.width - i / b && (f = s.width - i / b),
                    f < i / b && (f = i / b),
                    u > s.height - i / b && (u = s.height - i / b),
                    u < i / b && (u = i / b),
                    a.css({
                        top: u - i,
                        left: f - i,
                        backgroundPosition: `-${f * b - i + 4}px -${u * b - i + 4}px`
                    })) : (f = g.x - i,
                    u = g.y - i,
                    f > s.width - i * 2 && (f = s.width - i * 2),
                    f < 0 && (f = 0),
                    u > s.height - i * 2 && (u = s.height - i * 2),
                    u < 0 && (u = 0),
                    a.css({
                        top: u,
                        left: f
                    }),
                    c.css({
                        backgroundPosition: `-${f * d}px -${u * p}px`
                    }))
                }
                ;
                e.on(t.events.move, g => {
                    let f = t.utils.getCursorPosition(s, g);
                    m(f),
                    this._fireEvent("magnifier-move", {
                        pos: f,
                        glass: a[0],
                        zoomElement: c ? c[0] : void 0
                    }),
                    g.preventDefault()
                }
                ),
                e.on(t.events.leave, () => {
                    let g = e.width() / 2 - o.lensSize / 2
                      , f = e.height() / 2 - o.lensSize / 2;
                    a.animate({
                        draw: {
                            top: f,
                            left: g
                        }
                    }),
                    m({
                        x: g + o.lensSize / 2,
                        y: f + o.lensSize / 2
                    })
                }
                )
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                let e = this.element;
                e.off(t.events.move),
                e.off(t.events.leave),
                e.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            size: "100x100",
            width: null,
            height: null,
            color: "#f8f8f8",
            textColor: "#292929",
            font: "12px sans-serif",
            text: "",
            showText: !0,
            onImagePlaceholderCreate: t.noop
        };
        t.imagePlaceholderSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroImagePlaceholderSetup != "undefined" && t.imagePlaceholderSetup(globalThis.metroImagePlaceholderSetup),
        t.Component("image-placeholder", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    width: 0,
                    height: 0
                }),
                this
            },
            _create: function() {
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("image-placeholder-create")
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options
                  , a = o.size.toArray("x");
                this.width = o.width ? o.width : a[0],
                this.height = o.height ? o.height : a[1],
                e.attr("src", this._createPlaceholder())
            },
            _createEvents: () => {}
            ,
            _createPlaceholder: function() {
                let e = this.options
                  , o = document.createElement("canvas")
                  , a = o.getContext("2d")
                  , i = this.width
                  , s = this.height;
                return o.width = Number.parseInt(i),
                o.height = Number.parseInt(s),
                a.clearRect(0, 0, i, s),
                a.fillStyle = e.color,
                a.fillRect(0, 0, i, s),
                a.fillStyle = e.textColor,
                a.font = e.font,
                a.translate(i / 2, s / 2),
                a.textAlign = "center",
                a.textBaseline = "middle",
                e.showText && a.fillText(e.text ? e.text : `${i} \xD7 ${s}`, 0, 0),
                o.toDataURL()
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            infoboxDeferred: 0,
            type: "",
            width: 480,
            height: "auto",
            overlay: !0,
            overlayColor: "#000000",
            overlayAlpha: .5,
            overlayClickClose: !1,
            autoHide: 0,
            removeOnClose: !1,
            closeButton: !0,
            clsBox: "",
            clsBoxContent: "",
            clsOverlay: "",
            onOpen: t.noop,
            onClose: t.noop,
            onInfoBoxCreate: t.noop
        };
        t.infoBoxSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroInfoBoxSetup != "undefined" && t.infoBoxSetup(globalThis.metroInfoBoxSetup),
        t.Component("info-box", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    overlay: null,
                    id: null
                }),
                this
            },
            _create: function() {
                let e = this.element;
                this.id = Hooks.useId(this.elem),
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("info-box-create", {
                    element: e
                })
            },
            _overlay: function() {
                let e = this.options
                  , o = r("<div>");
                return o.addClass("overlay").addClass(e.clsOverlay),
                e.overlayColor === "transparent" ? o.addClass("transparent") : o.css({
                    background: Farbe.Routines.toRGBA(Farbe.Routines.parse(e.overlayColor), e.overlayAlpha)
                }),
                o
            },
            _createStructure: function() {
                let e = this.element, o = this.options, a;
                o.overlay === !0 && (this.overlay = this._overlay()),
                e.addClass("info-box").addClass(o.type).addClass(o.clsBox),
                a = e.find("closer"),
                a.length === 0 && (a = r("<span>").addClass("button square closer"),
                a.appendTo(e)),
                o.closeButton !== !0 && a.hide();
                let i = e.find(".info-box-content");
                i.length > 0 && i.addClass(o.clsBoxContent),
                e.css({
                    width: o.width,
                    height: o.height,
                    visibility: "hidden",
                    top: "100%",
                    left: (r(globalThis).width() - e.outerWidth()) / 2
                }),
                e.appendTo(r("body"))
            },
            _createEvents: function() {
                let e = this.element;
                e.on(t.events.click, ".closer", () => {
                    this.close()
                }
                ),
                e.on(t.events.click, ".js-dialog-close", () => {
                    this.close()
                }
                ),
                r(globalThis).on(t.events.resize, () => {
                    this.reposition()
                }
                , {
                    ns: this.id
                })
            },
            _setPosition: function() {
                let e = this.element;
                e.css({
                    top: (r(globalThis).height() - e.outerHeight()) / 2,
                    left: (r(globalThis).width() - e.outerWidth()) / 2
                })
            },
            reposition: function() {
                this._setPosition()
            },
            setContent: function(e) {
                let a = this.element.find(".info-box-content");
                a.length !== 0 && (a.html(e),
                this.reposition())
            },
            setType: function(e) {
                this.element.removeClass("success info alert warning").addClass(e)
            },
            open: function() {
                let e = this.element
                  , o = this.options;
                o.overlay === !0 && r(".overlay").length === 0 && (this.overlay.appendTo(r("body")),
                o.overlayClickClose === !0 && this.overlay.on(t.events.click, () => {
                    this.close()
                }
                )),
                this._setPosition(),
                e.css({
                    visibility: "visible"
                }),
                this._fireEvent("open"),
                e.data("open", !0),
                Number.parseInt(o.autoHide) > 0 && setTimeout( () => {
                    this.close()
                }
                , Number.parseInt(o.autoHide))
            },
            close: function() {
                let e = this.element
                  , o = this.options;
                o.overlay === !0 && r("body").find(".overlay").remove(),
                e.css({
                    visibility: "hidden",
                    top: "100%"
                }),
                this._fireEvent("close"),
                e.data("open", !1),
                o.removeOnClose === !0 && (this.destroy(),
                e.remove())
            },
            isOpen: function() {
                return this.element.data("open") === !0
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                let e = this.element;
                e.off("all"),
                r(globalThis).off(t.events.resize, {
                    ns: this.id
                }),
                e.remove()
            }
        }),
        t.infobox = {
            isInfoBox: e => t.utils.isMetroObject(e, "infobox"),
            open: function(e, o, a) {
                if (!this.isInfoBox(e))
                    return !1;
                let i = t.getPlugin(e, "infobox");
                o !== void 0 && i.setContent(o),
                a !== void 0 && i.setType(a),
                i.open()
            },
            close: function(e) {
                if (!this.isInfoBox(e))
                    return !1;
                t.getPlugin(e, "infobox").close()
            },
            setContent: function(e, o="") {
                if (!this.isInfoBox(e))
                    return !1;
                let a = t.getPlugin(e, "infobox");
                a.setContent(o),
                a.reposition()
            },
            setType: function(e, o) {
                if (!this.isInfoBox(e))
                    return !1;
                let a = t.getPlugin(e, "infobox");
                a.setType(o),
                a.reposition()
            },
            isOpen: function(e) {
                return this.isInfoBox(e) ? t.getPlugin(e, "infobox").isOpen() : !1
            },
            create: (e, o, a, i) => {
                let s = t.utils.$(), c, d = o !== void 0 ? o : "", p = s("<div>").appendTo(s("body"));
                s("<div>").addClass("info-box-content").appendTo(p);
                let m = s.extend({}, {
                    removeOnClose: !0,
                    type: d
                }, a !== void 0 ? a : {});
                return m._runtime = !0,
                p.infobox(m),
                c = t.getPlugin(p, "infobox"),
                c.setContent(e),
                i !== !1 && c.open(),
                p
            }
        }
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            maskPattern: ".",
            mask: null,
            maskPlaceholder: "_",
            maskEditableStart: 0,
            thresholdInterval: 300,
            onChar: t.noop,
            onInputMaskCreate: t.noop
        };
        t.inputMaskSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroInputMaskSetup != "undefined" && t.inputMaskSetup(globalThis.metroInputMaskSetup),
        t.Component("input-mask", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    pattern: null,
                    mask: "",
                    maskArray: [],
                    placeholder: "",
                    length: 0,
                    thresholdTimer: null,
                    id: null
                }),
                this
            },
            _create: function() {
                this.id = Hooks.useId(this.elem),
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("input-mask-create")
            },
            _createStructure: function() {
                let e = this.options;
                if (!e.mask)
                    throw new Error("You must provide a pattern for masked input.");
                if (typeof e.maskPlaceholder != "string" || e.maskPlaceholder.length > 1)
                    throw new Error("Mask placeholder should be a single character or an empty string.");
                this.placeholder = e.maskPlaceholder,
                this.mask = `${e.mask}`,
                this.maskArray = this.mask.split(""),
                this.pattern = new RegExp(`^${e.maskPattern}+$`),
                this.length = this.mask.length,
                this._showValue()
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options
                  , i = a.maskEditableStart
                  , s = this.id
                  , c = f => f < i ? (m(i),
                !1) : !0
                  , d = f => f < e.mask.length && e.mask.charAt(f) === e.placeholder
                  , p = f => {
                    let u, h = e.maskArray;
                    for (u = f; u <= h.length; u++)
                        if (h[u] === e.placeholder)
                            return u;
                    return f
                }
                  , m = f => {
                    e.elem.setSelectionRange(f, f)
                }
                  , g = () => {
                    clearInterval(e.thresholdTimer),
                    e.thresholdTimer = null
                }
                ;
                o.on("change", function() {
                    this.value === "" && (this.value = e.mask,
                    m(i))
                }, {
                    ns: s
                }),
                o.on("focus click", function() {
                    c(this.selectionStart),
                    m(p(this.selectionStart))
                }, {
                    ns: s
                }),
                o.on("keydown", function(f) {
                    let u = this.selectionStart
                      , h = this.value
                      , b = f.code
                      , w = f.key;
                    if (b === "ArrowRight" || b === "End")
                        return !0;
                    u >= e.length && ["Backspace", "Home", "ArrowLeft", "ArrowUp"].indexOf(b) === -1 ? f.preventDefault() : b === "Home" || b === "ArrowUp" ? (f.preventDefault(),
                    m(i)) : b === "ArrowLeft" ? u - 1 < i && f.preventDefault() : b === "Backspace" ? (f.preventDefault(),
                    u - 1 >= i && (d(u - 1) && this.value.charAt(u - 1) !== e.placeholder && (this.value = h.substr(0, u - 1) + e.placeholder + h.substr(u)),
                    m(u - 1))) : b === "Space" ? (f.preventDefault(),
                    m(u + 1)) : e.pattern.test(w) ? (f.preventDefault(),
                    d(u) && (this.value = h.substr(0, u) + (a.onChar === t.noop ? w : t.utils.exec(a.onChar, [w], this)) + h.substr(u + 1),
                    m(p(u + 1)))) : f.preventDefault()
                }, {
                    ns: s
                }),
                o.on("keyup", function() {
                    g(),
                    e.thresholdTimer = setInterval( () => {
                        g(),
                        m(p(this.selectionStart))
                    }
                    , a.thresholdInterval)
                }, {
                    ns: s
                })
            },
            _showValue: function() {
                let e = this.elem, o = new Array(this.length), a;
                e.value ? (a = e.value,
                r.each(this.maskArray, (i, s) => {
                    a[i] !== s && !this.pattern.test(a[i]) ? o[i] = this.placeholder : o[i] = a[i]
                }
                ),
                this.elem.value = o.join("")) : e.value = this.mask
            },
            destroy: function() {
                let e = this.element
                  , o = this.id;
                return e.off("change", {
                    ns: o
                }),
                e.off("focus", {
                    ns: o
                }),
                e.off("click", {
                    ns: o
                }),
                e.off("keydown", {
                    ns: o
                }),
                e.off("keyup", {
                    ns: o
                }),
                e
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            materialInputDeferred: 0,
            label: "",
            informer: "",
            icon: "",
            permanentLabel: !1,
            searchButton: !1,
            clearButton: !0,
            revealButton: !0,
            clearButtonIcon: "\u274C",
            revealButtonIcon: "\u{1F440}",
            searchButtonIcon: "\u{1F50D}",
            customButtons: [],
            searchButtonClick: "submit",
            clsComponent: "",
            clsInput: "",
            clsLabel: "",
            clsInformer: "",
            clsIcon: "",
            clsLine: "",
            onInputCreate: t.noop
        };
        t.materialInputSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroMaterialInputSetup != "undefined" && t.materialInputSetup(globalThis.metroMaterialInputSetup),
        t.Component("material-input", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    history: [],
                    historyIndex: -1
                }),
                this
            },
            _create: function() {
                let e = this.element;
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("input-create", {
                    element: e
                })
            },
            _createStructure: function() {
                let e = this.element, o = this.options, a, i;
                e[0].className = "",
                e.attr("autocomplete", "nope"),
                e.attr("type") === void 0 && e.attr("type", "text"),
                a = e.wrap("<div>").addClass(`input-material ${e[0].className}`),
                i = r("<div>").addClass("buttons").appendTo(a),
                o.label && r("<span>").html(o.label).addClass("label").addClass(o.clsLabel).insertAfter(e),
                t.utils.isValue(o.informer) && r("<span>").html(o.informer).addClass("informer").addClass(o.clsInformer).insertAfter(e),
                t.utils.isValue(o.icon) && (a.addClass("with-icon"),
                r("<span>").html(o.icon).addClass("icon").addClass(o.clsIcon).insertAfter(e)),
                o.clearButton === !0 && !e[0].readOnly && r("<button>").addClass("button input-clear-button").addClass(o.clsClearButton).attr("tabindex", -1).attr("type", "button").html(o.clearButtonIcon).appendTo(i),
                e.attr("type") === "password" && o.revealButton === !0 && r("<button>").addClass("button input-reveal-button").addClass(o.clsRevealButton).attr("tabindex", -1).attr("type", "button").html(o.revealButtonIcon).appendTo(i),
                o.searchButton === !0 && r("<button>").addClass("button input-search-button").addClass(o.clsSearchButton).attr("tabindex", -1).attr("type", o.searchButtonClick === "submit" ? "submit" : "button").html(o.searchButtonIcon).appendTo(i);
                let s = t.utils.isObject(o.customButtons);
                Array.isArray(s) && r.each(s, function() {
                    let c = r("<button>");
                    c.addClass("button input-custom-button").addClass(o.clsCustomButton).addClass(this.cls).attr("tabindex", -1).attr("type", "button").html(this.text),
                    this.attr && typeof this.attr == "object" && r.each(this.attr, (d, p) => {
                        c.attr(Str.dashedName(d), p)
                    }
                    ),
                    this.onclick && c.on("click", () => {
                        this.onclick.apply(c, [e.valueOf(), e])
                    }
                    ),
                    c.appendTo(i)
                }),
                a.append(r("<hr>").addClass(o.clsLine)),
                o.permanentLabel === !0 && a.addClass("permanent-label"),
                a.addClass(o.clsComponent),
                e.addClass(o.clsInput),
                e.is(":disabled") ? this.disable() : this.enable(),
                this.component = a
            },
            _createEvents: function() {
                let e = this
                  , o = this.options
                  , a = this.element;
                this.component.on(t.events.click, ".input-clear-button", () => {
                    let i = a.val();
                    a.val("").fire("clear").fire("change").fire("keyup").focus(),
                    e._fireEvent("clear-click", {
                        prev: i
                    })
                }
                ),
                this.component.on(t.events.click, ".input-reveal-button", () => {
                    a.attr("type") === "password" ? a.attr("type", "text") : a.attr("type", "password"),
                    e._fireEvent("reveal-click", {
                        val: a.val()
                    })
                }
                ),
                this.component.on(t.events.click, ".input-search-button", function() {
                    o.searchButtonClick !== "submit" ? e._fireEvent("search-button-click", {
                        val: a.val(),
                        button: this
                    }) : this.form && this.form.submit()
                }),
                a.on(t.events.keydown, i => {
                    i.keyCode === t.keyCode.ENTER && e._fireEvent("enter-click", {
                        val: a.val()
                    })
                }
                )
            },
            clear: function() {
                this.element.val("")
            },
            disable: function() {
                this.element.data("disabled", !0),
                this.element.parent().addClass("disabled")
            },
            enable: function() {
                this.element.data("disabled", !1),
                this.element.parent().removeClass("disabled")
            },
            toggleState: function() {
                this.elem.disabled ? this.disable() : this.enable()
            },
            changeAttribute: function(e) {
                e === "disabled" && this.toggleState()
            },
            destroy: function() {
                return this.element
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            keypadDeferred: 0,
            label: "",
            keySize: 36,
            keys: "1, 2, 3, 4, 5, 6, 7, 8, 9, 0",
            exceptKeys: "",
            keySeparator: "",
            trimSeparator: !1,
            keyDelimiter: ",",
            copyInlineStyles: !1,
            target: null,
            keyLength: 0,
            shuffle: !1,
            shuffleCount: 3,
            serviceButtons: !0,
            showValue: !0,
            open: !1,
            useElementSizeForKeys: !1,
            openMode: "auto",
            clsKeypad: "",
            clsInput: "",
            clsKeys: "",
            clsKey: "",
            clsServiceKey: "",
            clsBackspace: "",
            clsClear: "",
            clsLabel: "",
            onChange: t.noop,
            onClear: t.noop,
            onBackspace: t.noop,
            onShuffle: t.noop,
            onKey: t.noop,
            onKeypadCreate: t.noop
        };
        t.keypadSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroKeypadSetup != "undefined" && t.keypadSetup(globalThis.metroKeypadSetup),
        t.Component("keypad", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    value: o.tagName === "INPUT" ? o.value : o.innerText,
                    positions: ["top-left", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left"],
                    keypad: null,
                    keys: [],
                    keys_to_work: [],
                    exceptKeys: []
                }),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options;
                this.options.position = "bottom-left",
                this.keys = o.keys.toArray(o.keyDelimiter),
                this.keys_to_work = this.keys,
                this.exceptKeys = o.exceptKeys.toArray(o.keyDelimiter),
                this._createKeypad(),
                o.shuffle === !0 && this.shuffle(),
                this._createKeys(),
                this._createEvents(),
                this._fireEvent("keypad-create", {
                    element: e
                })
            },
            _createKeypad: function() {
                let e = this.element, o = this.options, a, i = e.wrap("<div>").addClass("input keypad").addClass(e[0].className).addClass(o.clsKeypad);
                if (e.attr("type") === void 0 && e.attr("type", "text"),
                e.attr("readonly", !0),
                a = r("<div>").addClass("keys").addClass(o.clsKeys),
                a.appendTo(i),
                this._setKeysPosition(),
                o.open === !0 && a.addClass("open keep-open"),
                e[0].className = "",
                o.copyInlineStyles === !0) {
                    let d = 0
                      , p = e[0].style.length;
                    for (; d < p; d++)
                        i.css(e[0].style[d], e.css(e[0].style[d]))
                }
                e.addClass(o.clsInput),
                i.addClass(o.clsKeypad),
                e.on(t.events.blur, () => {
                    i.removeClass("focused")
                }
                ),
                e.on(t.events.focus, () => {
                    i.addClass("focused")
                }
                );
                let s = r("<div>").addClass("button-group").appendTo(i);
                if (r("<button>").addClass("button input-kbd-button").addClass(o.clsKbdButton).attr("tabindex", -1).attr("type", "button").html("\u2328").appendTo(s),
                o.label) {
                    let d = r("<label>").addClass("label-for-input").addClass(o.clsLabel).html(o.label).insertBefore(i);
                    if (e.attr("id"))
                        d.attr("for", e.attr("id"));
                    else {
                        let p = Hooks.useId(e[0]);
                        e.id(p),
                        d.attr("for", p)
                    }
                    e.attr("dir") === "rtl" && d.addClass("rtl")
                }
                o.disabled === !0 || e.is(":disabled") ? this.disable() : this.enable(),
                this.keypad = i
            },
            _setKeysPosition: function() {
                let e = this.element
                  , o = this.options;
                e.parent().find(".keys").removeClass(this.positions.join(" ")).addClass(o.position)
            },
            _createKeys: function() {
                let e = this.element, o = this.options, a = e.parent(), i, s = a.find(".keys"), c = Math.round(Math.sqrt(this.keys.length + 2)), d = o.keySize, p;
                if (s.html(""),
                r.each(this.keys_to_work, function() {
                    i = r("<span>").addClass("key").addClass(o.clsKey).html(this),
                    i.data("key", this),
                    i.css({
                        width: o.keySize,
                        height: o.keySize,
                        lineHeight: o.keySize - 4
                    }).appendTo(s)
                }),
                o.serviceButtons === !0) {
                    let m = ["&larr;", "&times;"];
                    r.each(m, function() {
                        i = r("<span>").addClass("key service-key").addClass(o.clsKey).addClass(o.clsServiceKey).html(this),
                        this === "&larr;" && i.addClass(o.clsBackspace),
                        this === "&times;" && i.addClass(o.clsClear),
                        i.data("key", this),
                        i.css({
                            width: o.keySize,
                            height: o.keySize,
                            lineHeight: o.keySize - 4
                        }).appendTo(s)
                    })
                }
                o.useElementSizeForKeys === !0 ? s.outerWidth(e.outerWidth()) : (p = c * (d + 2) - 6,
                s.outerWidth(p))
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options
                  , i = o.parent()
                  , s = i.find(".keys");
                s.on(t.events.click, ".key", function(c) {
                    let d = r(this), p = d.data("key"), m;
                    if (d.data("key") !== "&larr;" && d.data("key") !== "&times;") {
                        if (a.keyLength > 0 && `${e.value}`.length === a.keyLength)
                            return !1;
                        e.exceptKeys.indexOf(p) === -1 && (e.value = e.value + (e.value !== "" ? a.keySeparator : "") + p),
                        a.shuffle === !0 && (e.shuffle(),
                        e._createKeys()),
                        a.dynamicPosition === !0 && (a.position = e.positions[r.random(0, e.positions.length - 1)],
                        e._setKeysPosition()),
                        e._fireEvent("key", {
                            key: d.data("key"),
                            val: e.value
                        })
                    } else
                        d.data("key") === "&times;" && (e.value = "",
                        e._fireEvent("clear")),
                        d.data("key") === "&larr;" && (m = a.keySeparator && e.value[e.value.length - 1] !== a.keySeparator ? 2 : 1,
                        e.value = e.value.substring(0, e.value.length - m),
                        e._fireEvent("backspace", {
                            val: e.value
                        }));
                    a.showValue === !0 && (o[0].tagName === "INPUT" ? o.val(e.value) : o.text(e.value)),
                    e._fireEvent("change", {
                        val: e.val
                    }),
                    c.preventDefault(),
                    c.stopPropagation()
                }),
                i.on(t.events.click, c => {
                    a.open !== !0 && (s.hasClass("open") === !0 ? s.removeClass("open").removeClass("top-left") : (s.addClass("open"),
                    a.openMode === "auto" ? t.utils.inViewport(s[0]) === !1 && s.addClass("top-left") : a.openMode === "up" && s.addClass("top-left")),
                    c.preventDefault(),
                    c.stopPropagation())
                }
                ),
                a.target !== null && o.on(t.events.change, () => {
                    let c = r(a.target);
                    c.length !== 0 && (c[0].tagName === "INPUT" ? c.val(e.value) : c.text(e.value))
                }
                )
            },
            shuffle: function() {
                let e = this.options;
                for (let o = 0; o < e.shuffleCount; o++)
                    this.keys_to_work = this.keys_to_work.shuffle();
                this._fireEvent("shuffle", {
                    keysToWork: this.keys_to_work,
                    keys: this.keys
                })
            },
            shuffleKeys: function(e=3) {
                for (let o = 0; o < e; o++)
                    this.keys_to_work = this.keys_to_work.shuffle();
                this._createKeys()
            },
            val: function(e) {
                let o = this.element
                  , a = this.options;
                return typeof e == "undefined" ? a.trimSeparator ? this.value.replace(new RegExp(a.keySeparator,"g")) : this.value : (this.value = `${e}`,
                o[0].tagName === "INPUT" ? o.val(e) : o.text(e),
                this)
            },
            open: function() {
                let e = this.element
                  , o = this.options
                  , i = e.parent().find(".keys");
                i.addClass("open"),
                o.openMode === "auto" ? t.utils.inViewport(i[0]) === !1 && i.addClass("top-left") : o.openMode === "up" && i.addClass("top-left")
            },
            close: function() {
                this.element.parent().find(".keys").removeClass("open").removeClass("top-left")
            },
            disable: function() {
                this.element.data("disabled", !0),
                this.element.parent().addClass("disabled")
            },
            enable: function() {
                this.element.data("disabled", !1),
                this.element.parent().removeClass("disabled")
            },
            toggleState: function() {
                this.elem.disabled ? this.disable() : this.enable()
            },
            setPosition: function(e) {
                let o = e !== void 0 ? e : this.element.attr("data-position");
                this.positions.indexOf(o) !== -1 && (this.options.position = o,
                this._setKeysPosition())
            },
            changeAttribute: function(e) {
                switch (e) {
                case "disabled":
                    this.toggleState();
                    break;
                case "data-position":
                    this.setPosition();
                    break
                }
            },
            destroy: function() {
                let e = this.element
                  , o = this.options
                  , a = this.keypad
                  , i = a.find(".keys");
                a.off(t.events.click),
                i.off(t.events.click, ".key"),
                e.off(t.events.change),
                o.label && a.prev("label").remove(),
                a.remove()
            }
        }),
        r(document).on(t.events.click, () => {
            let e = r(".keypad .keys");
            r.each(e, function() {
                r(this).hasClass("keep-open") || r(this).removeClass("open")
            })
        }
        )
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            loop: !0,
            source: "img",
            iconClose: "\u274C",
            iconPrev: "\u{1F850}",
            iconNext: "\u{1F852}",
            clsNext: "",
            clsPrev: "",
            clsClose: "",
            clsImage: "",
            clsImageContainer: "",
            clsImageWrapper: "",
            clsLightbox: "",
            onDrawImage: t.noop,
            onLightboxCreate: t.noop
        };
        t.lightboxSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroLightboxSetup != "undefined" && t.lightboxSetup(globalThis.metroLightboxSetup),
        t.Component("lightbox", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    overlay: null,
                    lightbox: null,
                    current: null,
                    items: []
                }),
                this
            },
            _create: function() {
                let e = this.options;
                e.source || (e.source = "img"),
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("lightbox-create")
            },
            _createStructure: function() {
                let e = this.options, o;
                o = r(".lightbox-overlay"),
                o.length === 0 && (o = r("<div>").addClass("lightbox-overlay").appendTo("body").hide());
                let a = r("<div>").addClass("lightbox").addClass(e.clsLightbox).appendTo("body").hide();
                r("<span>").addClass("lightbox__prev").addClass(e.clsPrev).html(e.iconPrev).appendTo(a),
                r("<span>").addClass("lightbox__next").addClass(e.clsNext).html(e.iconNext).appendTo(a),
                r("<span>").addClass("lightbox__closer").addClass(e.clsClose).html(e.iconClose).appendTo(a),
                r("<div>").addClass("lightbox__image").addClass(e.clsImageContainer).appendTo(a),
                this.component = a[0],
                this.lightbox = a,
                this.overlay = o
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options
                  , i = r(this.component);
                o.on(t.events.click, a.source, function() {
                    e.open(this)
                }),
                i.on(t.events.click, ".lightbox__closer", () => {
                    e.close()
                }
                ),
                i.on(t.events.click, ".lightbox__prev", () => {
                    e.prev()
                }
                ),
                i.on(t.events.click, ".lightbox__next", () => {
                    e.next()
                }
                )
            },
            _setupItems: function() {
                let e = this.element
                  , o = this.options
                  , a = e.find(o.source);
                a.length !== 0 && (this.items = a)
            },
            _goto: function(e) {
                let o = this, a = this.options, i = r(e), s = r("<img>"), c, d = this.lightbox.find(".lightbox__image");
                d.find(".lightbox__image-wrapper").remove();
                let p = r("<div>").addClass("lightbox__image-wrapper").addClass(a.clsImageWrapper).attr("data-title", i.attr("alt") || i.attr("data-title") || "").appendTo(d)
                  , m = r("<div>").appendTo(p);
                t.makePlugin(m, "activity", {
                    type: "cycle",
                    style: "color"
                }),
                this.current = e,
                (e.tagName === "IMG" || e.tagName === "DIV") && (c = i.attr("data-original") || i.attr("src"),
                s.attr("src", c),
                s[0].onload = function() {
                    let g = this.height > this.width;
                    s.addClass(g ? "lightbox__image-portrait" : "lightbox__image-landscape").addClass(a.clsImage),
                    s.attr("alt", i.attr("alt")),
                    s.appendTo(p),
                    m.remove(),
                    o._fireEvent("draw-image", {
                        image: s[0],
                        item: p[0]
                    })
                }
                )
            },
            _index: function(e) {
                let o = -1;
                return this.items.each(function(a) {
                    this === e && (o = a)
                }),
                o
            },
            next: function() {
                let e, o = this.current;
                if (e = this._index(o),
                e + 1 >= this.items.length)
                    if (this.options.loop)
                        e = -1;
                    else
                        return;
                this._goto(this.items[e + 1])
            },
            prev: function() {
                let e, o = this.current;
                if (e = this._index(o),
                e - 1 < 0)
                    if (this.options.loop)
                        e = this.items.length;
                    else
                        return;
                this._goto(this.items[e - 1])
            },
            open: function(e) {
                return this._setupItems(),
                this._goto(e),
                this.overlay.show(),
                this.lightbox.show(),
                this
            },
            close: function() {
                this.overlay.hide(),
                this.lightbox.hide()
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            listDeferred: 0,
            templateBeginToken: "<%",
            templateEndToken: "%>",
            paginationDistance: 5,
            paginationShortMode: !0,
            thousandSeparator: ",",
            decimalSeparator: ",",
            itemTag: "li",
            defaultTemplateTag: "div",
            sortClass: null,
            sortDir: "asc",
            sortInitial: !0,
            filterClass: null,
            filter: null,
            filterString: "",
            filters: null,
            source: null,
            showItemsSteps: !1,
            showSearch: !1,
            showListInfo: !1,
            showPagination: !1,
            showActivity: !0,
            muteList: !0,
            items: -1,
            itemsSteps: "all, 10,25,50,100",
            itemsAllTitle: "Show all",
            listItemsCountTitle: "Show entries:",
            listSearchTitle: "Search:",
            listInfoTitle: "Showing $1 to $2 of $3 entries",
            paginationPrevTitle: "Prev",
            paginationNextTitle: "Next",
            activityType: "cycle",
            activityStyle: "color",
            activityTimeout: 100,
            searchWrapper: null,
            rowsWrapper: null,
            infoWrapper: null,
            paginationWrapper: null,
            searchThreshold: 500,
            clsComponent: "",
            clsList: "",
            clsListItem: "",
            clsListTop: "",
            clsItemsCount: "",
            clsSearch: "",
            clsListBottom: "",
            clsListInfo: "",
            clsListPagination: "",
            clsPagination: "",
            clsTemplateTag: "",
            onDraw: t.noop,
            onDrawItem: t.noop,
            onSortStart: t.noop,
            onSortStop: t.noop,
            onSortItemSwitch: t.noop,
            onSearch: t.noop,
            onRowsCountChange: t.noop,
            onDataLoad: t.noop,
            onDataLoaded: t.noop,
            onDataLoadError: t.noop,
            onFilterItemAccepted: t.noop,
            onFilterItemDeclined: t.noop,
            onListCreate: t.noop
        };
        t.listSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroListSetup != "undefined" && t.listSetup(globalThis.metroListSetup),
        t.Component("list", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    currentPage: 1,
                    pagesCount: 1,
                    filterString: "",
                    data: null,
                    activity: null,
                    busy: !1,
                    filters: [],
                    wrapperInfo: null,
                    wrapperSearch: null,
                    wrapperRows: null,
                    wrapperPagination: null,
                    filterIndex: null,
                    filtersIndexes: [],
                    itemTemplate: null,
                    sort: {
                        dir: "asc",
                        colIndex: 0
                    },
                    header: null,
                    items: []
                }),
                this
            },
            _create: function() {
                let e = this.options;
                e.source ? (this._fireEvent("data-load", {
                    source: e.source
                }),
                fetch(e.source).then(t.fetch.status).then(t.fetch.json).then(o => {
                    this._fireEvent("data-loaded", {
                        source: e.source,
                        data: o
                    }),
                    this._build(o)
                }
                ).catch(o => {
                    this._fireEvent("data-load-error", {
                        source: e.source,
                        error: o
                    })
                }
                )) : this._build()
            },
            _build: function(e) {
                t.utils.isValue(e) ? this._createItemsFromJSON(e) : this._createItemsFromHTML(),
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("list-create")
            },
            _createItemsFromHTML: function() {
                let e = this
                  , o = this.element
                  , a = this.options
                  , i = `${a.clsTemplateTag}`.toArray(",");
                this.items = [],
                r.each(o.children(a.itemTag), function() {
                    let s = r(this).children("*");
                    i.length && (i.length === 1 ? s.addClass(i[0]) : s.each( (c, d) => {
                        r(d).addClass(i[c] ? i[c] : i[i.length - 1])
                    }
                    )),
                    e.items.push(this)
                })
            },
            _createItemsFromJSON: function(e) {
                let o = this
                  , a = this.options
                  , i = `${a.clsTemplateTag}`.toArray(",");
                this.items = [],
                t.utils.isValue(e.template) && (this.itemTemplate = e.template),
                t.utils.isValue(e.header) && (this.header = e.header),
                t.utils.isValue(e.data) && r.each(e.data, function() {
                    let s = "", c = document.createElement(a.itemTag), d = o.itemTemplate, p;
                    if (t.utils.isValue(d))
                        s = t.template(d, this, {
                            beginToken: a.templateBeginToken,
                            endToken: a.templateEndToken
                        });
                    else
                        for (let m in this)
                            s += `<${a.defaultTemplateTag}>${this[m]}</${a.defaultTemplateTag}>`;
                    c.innerHTML = s,
                    p = r(c).children("*"),
                    i.length && (i.length === 1 ? p.addClass(i[0]) : p.each( (m, g) => {
                        r(g).addClass(i[m] ? i[m] : i[i.length - 1])
                    }
                    )),
                    o.items.push(c)
                })
            },
            _createTopBlock: function() {
                let e = this.element, o = this.options, a = r("<div>").addClass("list-top").addClass(o.clsListTop).insertBefore(e), i, s;
                i = t.utils.isValue(this.wrapperSearch) ? this.wrapperSearch : r("<div>").addClass("list-search-block").addClass(o.clsSearch).appendTo(a);
                let c = r("<input>").attr("type", "text").appendTo(i);
                t.makePlugin(c, "input", {
                    prepend: o.listSearchTitle
                }),
                o.showSearch !== !0 && i.hide(),
                s = t.utils.isValue(this.wrapperRows) ? this.wrapperRows : r("<div>").addClass("list-rows-block").addClass(o.clsItemsCount).appendTo(a);
                let d = r("<select>").appendTo(s);
                return r.each(o.itemsSteps.toArray(), function() {
                    let p = r("<option>").attr("value", this === "all" ? -1 : this).text(this === "all" ? o.itemsAllTitle : this).appendTo(d);
                    +this == +o.items && p.attr("selected", "selected")
                }),
                d.select({
                    filter: !1,
                    prepend: o.listItemsCountTitle,
                    onChange: p => {
                        +p != +o.items && (o.items = Number.parseInt(p),
                        this.currentPage = 1,
                        this._draw(),
                        this._fireEvent("rows-count-change", {
                            val: p
                        }))
                    }
                }),
                o.showItemsSteps !== !0 && s.hide(),
                a
            },
            _createBottomBlock: function() {
                let e = this.element, o = this.options, a = r("<div>").addClass("list-bottom").addClass(o.clsListBottom).insertAfter(e), i, s;
                return i = r("<div>").addClass("list-info").addClass(o.clsListInfo).appendTo(a),
                o.showListInfo !== !0 && i.hide(),
                s = r("<div>").addClass("list-pagination").addClass(o.clsListPagination).appendTo(a),
                o.showPagination !== !0 && s.hide(),
                a
            },
            _createStructure: function() {
                let e = this, o = this.element, a = this.options, i, s = r(a.searchWrapper), c = r(a.infoWrapper), d = r(a.rowsWrapper), p = r(a.paginationWrapper);
                s.length > 0 && (this.wrapperSearch = s),
                c.length > 0 && (this.wrapperInfo = c),
                d.length > 0 && (this.wrapperRows = d),
                p.length > 0 && (this.wrapperPagination = p),
                o.parent().hasClass("list-component") ? i = o.parent() : (i = r("<div>").addClass("list-component").insertBefore(o),
                o.appendTo(i)),
                i.addClass(a.clsComponent),
                this.activity = r("<div>").addClass("list-progress").appendTo(i),
                r("<div>").activity({
                    type: a.activityType,
                    style: a.activityStyle
                }).appendTo(this.activity),
                a.showActivity !== !0 && this.activity.css({
                    visibility: "hidden"
                }),
                o.addClass(a.clsList),
                this._createTopBlock(),
                this._createBottomBlock(),
                t.utils.isValue(a.filterString) && (this.filterString = a.filterString);
                let m;
                t.utils.isValue(a.filter) && (m = t.utils.isFunc(a.filter),
                m === !1 && (m = t.utils.func(a.filter)),
                e.filterIndex = e.addFilter(m)),
                t.utils.isValue(a.filters) && typeof a.filters == "string" && r.each(a.filters.toArray(), function() {
                    m = t.utils.isFunc(this),
                    m !== !1 && e.filtersIndexes.push(e.addFilter(m))
                }),
                this.currentPage = 1,
                a.sortInitial !== !1 ? this.sorting(a.sortClass, a.sortDir, !0) : this.draw()
            },
            _createEvents: function() {
                let e = this, o = this.element, a = this.options, i = o.parent(), s = i.find(".list-search-block input"), c, d = function() {
                    e.filterString = this.value.trim().toLowerCase(),
                    e.filterString[e.filterString.length - 1] !== ":" && (e.currentPage = 1,
                    e._draw())
                };
                d = Hooks.useDebounce(d, a.searchThreshold),
                s.on(t.events.inputchange, d),
                t.utils.isValue(this.wrapperSearch) && (c = this.wrapperSearch.find("input"),
                c.length > 0 && c.on(t.events.inputchange, d));
                function p(m) {
                    let g = r(m)
                      , f = g.parent();
                    f.hasClass("active") || (f.hasClass("service") ? g.data("page") === "prev" ? (e.currentPage--,
                    e.currentPage === 0 && (e.currentPage = 1)) : (e.currentPage++,
                    e.currentPage > e.pagesCount && (e.currentPage = e.pagesCount)) : e.currentPage = g.data("page"),
                    e._draw())
                }
                i.on(t.events.click, ".pagination .page-link", function() {
                    p(this)
                }),
                t.utils.isValue(this.wrapperPagination) && this.wrapperPagination.on(t.events.click, ".pagination .page-link", function() {
                    p(this)
                })
            },
            _info: function(e, o, a) {
                let i = this.element, s = this.options, c = i.parent(), d = t.utils.isValue(this.wrapperInfo) ? this.wrapperInfo : c.find(".list-info"), p, m = o, g = e, f = a;
                d.length !== 0 && (m > a && (m = a),
                this.items.length === 0 && (g = m = f = 0),
                p = s.listInfoTitle,
                p = p.replace("$1", g),
                p = p.replace("$2", m),
                p = p.replace("$3", f),
                d.html(p))
            },
            _paging: function(e) {
                let o = this.element
                  , a = this.options
                  , i = o.parent();
                this.pagesCount = Math.ceil(e / a.items),
                t.pagination({
                    length: e,
                    rows: a.items,
                    current: this.currentPage,
                    target: t.utils.isValue(this.wrapperPagination) ? this.wrapperPagination : i.find(".list-pagination"),
                    claPagination: a.clsPagination,
                    prevTitle: a.paginationPrevTitle,
                    nextTitle: a.paginationNextTitle,
                    distance: a.paginationShortMode === !0 ? a.paginationDistance : 0
                })
            },
            _filter: function() {
                let e = this.options, o, a, i, s, c, d;
                return t.utils.isValue(this.filterString) || this.filters.length > 0 ? (o = this.items.filter(p => {
                    if (i = "",
                    t.utils.isValue(e.filterClass)) {
                        if (s = p.getElementsByClassName(e.filterClass),
                        s.length > 0)
                            for (a = 0; a < s.length; a++)
                                i += s[a].textContent
                    } else
                        i = p.textContent;
                    if (c = i.replace(/[\n\r]+|[\s]{2,}/g, " ").trim().toLowerCase(),
                    d = t.utils.isValue(this.filterString) ? c.indexOf(this.filterString) > -1 : !0,
                    d === !0 && this.filters.length > 0) {
                        for (a = 0; a < this.filters.length; a++)
                            if (t.utils.exec(this.filters[a], [p]) !== !0) {
                                d = !1;
                                break
                            }
                    }
                    return d ? this._fireEvent("filter-item-accepted", {
                        item: p
                    }) : this._fireEvent("filter-item-declined", {
                        item: p
                    }),
                    d
                }
                ),
                this._fireEvent("search", {
                    search: this.filterString,
                    items: o
                })) : o = this.items,
                o
            },
            _draw: function(e) {
                let o = this.element, a = this.options, i, s = a.items === -1 ? 0 : a.items * (this.currentPage - 1), c = a.items === -1 ? this.items.length - 1 : s + a.items - 1, d;
                for (d = this._filter(),
                o.children(a.itemTag).remove(),
                i = s; i <= c; i++)
                    t.utils.isValue(d[i]) && r(d[i]).addClass(a.clsListItem).appendTo(o),
                    this._fireEvent("draw-item", {
                        item: d[i]
                    });
                this._info(s + 1, c + 1, d.length),
                this._paging(d.length),
                this.activity.hide(),
                this._fireEvent("draw"),
                e && t.utils.exec(e, [o], o[0])
            },
            _getItemContent: function(e) {
                let o = this.locale, a = this.options, i = r(e), s, c, d, p, m = t.utils.isValue(i.data("formatMask")) ? i.data("formatMask") : null;
                if (t.utils.isValue(a.sortClass)) {
                    if (d = "",
                    c = r(e).find(`.${a.sortClass}`),
                    c.length > 0)
                        for (s = 0; s < c.length; s++)
                            d += c[s].textContent;
                    p = c.length > 0 ? c[0].getAttribute("data-format") : ""
                } else
                    d = e.textContent,
                    p = e.getAttribute("data-format");
                if (d = `${d}`.toLowerCase().replace(/[\n\r]+|[\s]{2,}/g, " ").trim(),
                t.utils.isValue(p))
                    switch (["number", "int", "integer", "float", "money"].indexOf(p) !== -1 && (a.thousandSeparator !== "," || a.decimalSeparator !== ".") && (d = t.utils.parseNumber(d, a.thousandSeparator, a.decimalSeparator)),
                    p) {
                    case "date":
                        d = m ? Datetime.from(d, m, o) : datetime(d);
                        break;
                    case "number":
                        d = Number(d);
                        break;
                    case "int":
                    case "integer":
                        d = Number.parseInt(d);
                        break;
                    case "float":
                        d = Number.parseFloat(d);
                        break;
                    case "money":
                        d = t.utils.parseMoney(d);
                        break;
                    case "card":
                        d = t.utils.parseCard(d);
                        break;
                    case "phone":
                        d = t.utils.parsePhone(d);
                        break
                    }
                return d
            },
            deleteItem: function(e) {
                let o, a = [], i, s = t.utils.isFunc(e);
                for (o = 0; o < this.items.length; o++)
                    i = this.items[o],
                    s ? t.utils.exec(e, [i]) && a.push(o) : i.textContent.includes(e) && a.push(o);
                return this.items = t.utils.arrayDeleteByMultipleKeys(this.items, a),
                this
            },
            draw: function() {
                return this._draw()
            },
            sorting: function(e, o, a) {
                let i = this.options;
                return t.utils.isValue(e) && (i.sortClass = e),
                t.utils.isValue(o) && ["asc", "desc"].indexOf(o) > -1 && (i.sortDir = o),
                this._fireEvent("sort-start", {
                    items: this.items
                }),
                this.items.sort( (s, c) => {
                    let d = this._getItemContent(s)
                      , p = this._getItemContent(c)
                      , m = 0;
                    return d < p && (m = i.sortDir === "asc" ? -1 : 1),
                    d > p && (m = i.sortDir === "asc" ? 1 : -1),
                    m !== 0 && this._fireEvent("sort-item-switch", {
                        a: s,
                        b: c,
                        result: m
                    }),
                    m
                }
                ),
                this._fireEvent("sort-stop", {
                    items: this.items
                }),
                a === !0 && this._draw(),
                this
            },
            filter: function(e) {
                this.filterString = e.trim().toLowerCase(),
                this.currentPage = 1,
                this._draw()
            },
            setData: function(e) {
                let o = this
                  , a = this.element
                  , i = this.options;
                if (t.utils.isValue(e) !== !0)
                    return;
                o._createItemsFromJSON(e),
                a.html(""),
                t.utils.isValue(i.filterString) && (o.filterString = i.filterString);
                let s;
                t.utils.isValue(i.filter) && (s = t.utils.isFunc(i.filter),
                s === !1 && (s = t.utils.func(i.filter)),
                o.filterIndex = o.addFilter(s)),
                t.utils.isValue(i.filters) && typeof i.filters == "string" && r.each(i.filters.toArray(), function() {
                    s = t.utils.isFunc(this),
                    s !== !1 && o.filtersIndexes.push(o.addFilter(s))
                }),
                o.currentPage = 1,
                o.sorting(i.sortClass, i.sortDir, !0)
            },
            loadData: function(e) {
                let o = this.options;
                t.utils.isValue(e) === !0 && (o.source = e,
                this._fireEvent("data-load", {
                    source: o.source
                }),
                fetch(o.source).then(t.fetch.status).then(t.fetch.json).then(a => {
                    this._fireEvent("data-loaded", {
                        source: o.source,
                        data: a
                    }),
                    this.setData(a)
                }
                ).catch(a => {
                    this._fireEvent("data-load-error", {
                        source: o.source,
                        error: a
                    })
                }
                ))
            },
            next: function() {
                if (this.items.length !== 0) {
                    if (this.currentPage++,
                    this.currentPage > this.pagesCount) {
                        this.currentPage = this.pagesCount;
                        return
                    }
                    this._draw()
                }
            },
            prev: function() {
                if (this.items.length !== 0) {
                    if (this.currentPage--,
                    this.currentPage === 0) {
                        this.currentPage = 1;
                        return
                    }
                    this._draw()
                }
            },
            first: function() {
                this.items.length !== 0 && (this.currentPage = 1,
                this._draw())
            },
            last: function() {
                this.items.length !== 0 && (this.currentPage = this.pagesCount,
                this._draw())
            },
            page: function(e) {
                let o = Number.parseInt(e);
                o <= 0 && (o = 1),
                o > this.pagesCount && (o = this.pagesCount),
                this.currentPage = o,
                this._draw()
            },
            addFilter: function(e, o) {
                let a = t.utils.isFunc(e);
                if (a !== !1)
                    return this.filters.push(a),
                    o === !0 && (this.currentPage = 1,
                    this.draw()),
                    this.filters.length - 1
            },
            removeFilter: function(e, o) {
                return t.utils.arrayDeleteByKey(this.filters, e),
                o === !0 && (this.currentPage = 1,
                this.draw()),
                this
            },
            removeFilters: function(e) {
                this.filters = [],
                e === !0 && (this.currentPage = 1,
                this.draw())
            },
            getFilters: function() {
                return this.filters
            },
            getFilterIndex: function() {
                return this.filterIndex
            },
            getFiltersIndexes: function() {
                return this.filtersIndexes
            },
            changeAttribute: function(e) {
                let o = this.element
                  , a = this.options
                  , i = () => {
                    let d = o.attr("data-sort-dir");
                    t.utils.isValue(d) && (a.sortDir = d,
                    this.sorting(a.sortClass, a.sortDir, !0))
                }
                  , s = () => {
                    let d = o.attr("data-sort-source");
                    t.utils.isValue(d) && (a.sortClass = d,
                    this.sorting(a.sortClass, a.sortDir, !0))
                }
                  , c = () => {
                    let d = o.attr("data-filter-string");
                    t.utils.isValue(d) && (a.filterString = d,
                    this.filter(a.filterString))
                }
                ;
                switch (e) {
                case "data-sort-dir":
                    i();
                    break;
                case "data-sort-source":
                    s();
                    break;
                case "data-filter-string":
                    c();
                    break
                }
            },
            destroy: function() {
                let e = this.element, o = e.parent(), a = o.find(".list-search-block input"), i;
                return a.off(t.events.inputchange),
                t.utils.isValue(this.wrapperSearch) && (i = this.wrapperSearch.find("input"),
                i.length > 0 && i.off(t.events.inputchange)),
                o.off(t.events.click, ".pagination .page-link"),
                t.utils.isValue(this.wrapperPagination) && this.wrapperPagination.off(t.events.click, ".pagination .page-link"),
                e
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = `
    <svg width="800px" height="800px" fill="none" viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg">
        <path class="a" d="M39.5,15.5h-9a2,2,0,0,1-2-2v-9h-18a2,2,0,0,0-2,2v35a2,2,0,0,0,2,2h27a2,2,0,0,0,2-2Z"/>
        <line class="a" x1="28.5" y1="4.5" x2="39.5" y2="15.5"/>
    </svg>`
          , e = '<svg aria-hidden="true" width="16" height="16" viewBox="0 0 24 24"><path d="m14.83 11.29-4.24-4.24a1 1 0 1 0-1.42 1.41L12.71 12l-3.54 3.54a1 1 0 0 0 0 1.41 1 1 0 0 0 .71.29 1 1 0 0 0 .71-.29l4.24-4.24a1.002 1.002 0 0 0 0-1.42Z"></path></svg>'
          , o = {
            listviewDeferred: 0,
            selectable: !1,
            duration: 100,
            view: t.listView.LIST,
            selectCurrent: !0,
            defaultIcon: l,
            onNodeInsert: t.noop,
            onNodeDelete: t.noop,
            onNodeClean: t.noop,
            onCollapseNode: t.noop,
            onExpandNode: t.noop,
            onGroupNodeClick: t.noop,
            onNodeClick: t.noop,
            onNodeDblclick: t.noop,
            onListViewCreate: t.noop
        };
        t.listViewSetup = a => {
            o = r.extend({}, o, a)
        }
        ,
        typeof globalThis.metroListViewSetup != "undefined" && t.listViewSetup(globalThis.metroListViewSetup),
        t.Component("listview", {
            init: function(a, i) {
                return this._super(i, a, o),
                this
            },
            _create: function() {
                let a = this.element;
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("listview-create", {
                    element: a
                })
            },
            _createIcon: a => r("<div>").addClass("icon").html(a),
            _createCaption: (a="") => r("<div>").addClass("caption").html(a),
            _createContent: (a="") => r("<div>").addClass("content").html(a),
            _createDesc: (a="") => r("<div>").addClass("desc").html(a),
            _createDate: (a="") => r("<div>").addClass("date").html(a),
            _createToggle: () => r("<span>").addClass("node-toggle").html(e),
            _createNode: function(a) {
                var c;
                let i = this.options
                  , s = r("<li>");
                return s.append(r("<input type='checkbox' data-role='checkbox'>").data("node", s)),
                s.append(this._createIcon((c = a.icon) != null ? c : i.defaultIcon)),
                s.append(this._createCaption(a.caption)),
                s.append(this._createDesc(a.desc)),
                s.append(this._createDate(a.date)),
                s.append(this._createContent(a.content)),
                s
            },
            _createStructure: function() {
                let a = this
                  , i = this.element
                  , s = this.options
                  , c = i.find("li");
                i.addClass("listview"),
                i.find("ul").addClass("listview"),
                s.selectable && i.addClass("selectable"),
                r.each(c, function(d) {
                    var f, u, h;
                    let p = r(this)
                      , m = p.html()
                      , g = `Item_${d + 1}`;
                    p.children("ul").length > 0 ? (p.prepend(a._createCaption((f = p.data("caption")) != null ? f : g)),
                    p.addClass("node-group"),
                    p.append(a._createToggle()),
                    p.data("collapsed") !== !0 && p.addClass("expanded")) : (p.clear().addClass("node"),
                    p.append(r("<input type='checkbox' data-role='checkbox'>").data("node", p)),
                    p.append(a._createIcon((u = p.data("icon")) != null ? u : s.defaultIcon)),
                    p.append(a._createCaption((h = p.data("caption")) != null ? h : g)),
                    p.append(a._createDesc(p.data("desc"))),
                    p.append(a._createDate(p.data("date"))),
                    p.append(a._createContent(m)))
                }),
                s.selectable && i.addClass("selectable"),
                this.view(s.view)
            },
            _createEvents: function() {
                let a = this
                  , i = this.element
                  , s = this.options;
                i.on(t.events.dblclick, ".node", function() {
                    let c = r(this);
                    a._fireEvent("node-dblclick", {
                        node: c
                    })
                }),
                i.on(t.events.click, ".node", function() {
                    let c = r(this)
                      , d = r(this).attr("href");
                    if (d) {
                        globalThis.location.href = d;
                        return
                    }
                    let p = c.hasClass("current");
                    i.find(".node").removeClass("current"),
                    p || c.addClass("current"),
                    s.selectCurrent === !0 && (i.find(".node").removeClass("current-select"),
                    p || c.addClass("current-select")),
                    a._fireEvent("node-click", {
                        node: c
                    })
                }),
                i.on(t.events.click, ".node-toggle", function() {
                    let c = r(this).closest("li");
                    a.toggleNode(c)
                }),
                i.on(t.events.click, ".node-group > .caption", function() {
                    let c = r(this).closest("li");
                    i.find(".node-group").removeClass("current-group"),
                    c.addClass("current-group"),
                    a._fireEvent("group-node-click", {
                        node: c
                    })
                }),
                i.on(t.events.dblclick, ".node-group > .caption", function() {
                    let c = r(this).closest("li");
                    a.toggleNode(c),
                    a._fireEvent("node-dbl-click", {
                        node: c
                    })
                })
            },
            view: function(a) {
                let i = this.element
                  , s = this.options;
                if (a === void 0)
                    return s.view;
                s.view = a,
                r.each(t.listView, (c, d) => {
                    i.removeClass(`view-${d}`),
                    i.find("ul").removeClass(`view-${d}`)
                }
                ),
                i.addClass(`view-${s.view}`),
                i.find("ul").addClass(`view-${s.view}`)
            },
            toggleNode: function(a) {
                let i = this.options
                  , s = r(a);
                if (!s.hasClass("node-group"))
                    return;
                s.toggleClass("expanded");
                let c = s.hasClass("expanded") !== !0 ? "slideUp" : "slideDown";
                this._fireEvent("collapse-node", {
                    node: s
                }),
                s.children("ul")[c](i.duration)
            },
            toggleSelectable: function() {
                let a = this.element
                  , i = this.options;
                i.selectable = !i.selectable;
                let s = i.selectable === !0 ? "addClass" : "removeClass";
                console.log(s),
                a[s]("selectable"),
                a.find("ul")[s]("selectable")
            },
            add: function(a, i=null) {
                let s = this.element, c = this.options, d, p, m;
                if (i === null)
                    d = s;
                else {
                    if (m = r(i),
                    !m.hasClass("node-group"))
                        return;
                    d = m.children("ul"),
                    d.length === 0 && (d = r("<ul>").addClass("listview").addClass(`view-${c.view}`).appendTo(m),
                    p = this._createToggle(),
                    p.appendTo(m),
                    m.addClass("expanded"))
                }
                let g = this._createNode(a);
                g.addClass("node").appendTo(d);
                let f = r("<input type='checkbox'>");
                return f.data("node", g),
                g.prepend(f),
                t.makePlugin(f, "checkbox", {}),
                this._fireEvent("node-insert", {
                    newNode: g,
                    parentNode: i,
                    list: d
                }),
                g
            },
            addGroup: function(a) {
                let i = this.element
                  , s = this.options;
                a.icon && delete a.icon;
                let c = this._createNode(a);
                return c.addClass("node-group").appendTo(i),
                c.append(this._createToggle()),
                c.addClass("expanded"),
                c.append(r("<ul>").addClass("listview").addClass(`view-${s.view}`)),
                this._fireEvent("node-insert", {
                    newNode: c,
                    parentNode: null,
                    list: i
                }),
                c
            },
            insertBefore: function(a, i) {
                let s = r(i);
                if (!s.length)
                    return;
                let c = this._createNode(a);
                c.addClass("node").insertBefore(s);
                let d = c.closest(".node")
                  , p = c.closest("ul");
                return this._fireEvent("node-insert", {
                    newNode: c,
                    parentNode: d,
                    list: p
                }),
                c
            },
            insertAfter: function(a, i) {
                let s = r(i);
                if (!s.length)
                    return;
                let c = this._createNode(a);
                c.addClass("node").insertAfter(s);
                let d = c.closest(".node")
                  , p = c.closest("ul");
                return this._fireEvent("node-insert", {
                    newNode: c,
                    parentNode: d,
                    list: p
                }),
                c
            },
            del: function(a) {
                let i = this.element
                  , s = r(a);
                if (!s.length)
                    return;
                let c = s.closest("ul")
                  , d = c.closest("li");
                s.remove(),
                c.children().length === 0 && !c.is(i) && (c.remove(),
                d.removeClass("expanded"),
                d.children(".node-toggle").remove()),
                this._fireEvent("node-delete", {
                    node: s
                })
            },
            clean: function(a) {
                let i = r(a);
                i.length && (i.children("ul").remove(),
                i.removeClass("expanded"),
                i.children(".node-toggle").remove(),
                this._fireEvent("node-clean", {
                    node: i
                }))
            },
            getSelected: function() {
                let a = this.element
                  , i = [];
                return r.each(a.find(":checked"), function() {
                    let s = r(this);
                    i.push(s.closest(".node")[0])
                }),
                i
            },
            clearSelected: function() {
                this.element.find(":checked").prop("checked", !1),
                this.element.trigger("change")
            },
            selectAll: function(a=!0) {
                this.element.find(".checkbox input").prop("checked", a),
                this.element.trigger("change")
            },
            selectByAttribute: function(a, i, s=!0) {
                this.element.find(`li[${a}="${i}"] > .checkbox input`).prop("checked", s),
                this.element.trigger("change")
            },
            changeAttribute: function(a) {
                let i = this.element
                  , s = this.options
                  , c = () => {
                    let p = `view-${i.attr("data-view")}`;
                    this.view(p)
                }
                  , d = () => {
                    s.selectable = JSON.parse(i.attr("data-selectable")) === !0,
                    this.toggleSelectable()
                }
                ;
                switch (a) {
                case "data-view":
                    c();
                    break;
                case "data-selectable":
                    d();
                    break
                }
            },
            destroy: function() {
                let a = this.element;
                a.off(t.events.click, ".node"),
                a.off(t.events.click, ".node-toggle"),
                a.off(t.events.click, ".node-group > .caption"),
                a.off(t.events.dblclick, ".node-group > .caption"),
                a.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            items: null,
            loop: !0,
            height: "auto",
            width: "100%",
            duration: 1e4,
            direction: "left",
            ease: "linear",
            mode: "default",
            accentPause: 2e3,
            firstPause: 1e3,
            stopOnHover: !0,
            splitBy: `
`,
            clsMarquee: "",
            clsMarqueeItem: "",
            onMarqueeItem: t.noop,
            onMarqueeItemComplete: t.noop,
            onMarqueeComplete: t.noop,
            onMarqueeCreate: t.noop
        };
        t.marqueeSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroMarqueeSetup != "undefined" && t.marqueeSetup(globalThis.metroMarqueeSetup),
        t.Component("marquee", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    origin: null,
                    items: [],
                    running: !1,
                    current: -1,
                    chain: []
                }),
                this
            },
            _create: function() {
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("marquee-create")
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options;
                e.addClass("marquee").addClass(o.clsMarquee),
                e.css({
                    height: o.height,
                    width: o.width
                });
                let a = e.html().split(o.splitBy).map(s => s.trim()).filter(s => s.length)
                  , i = t.utils.isObject(o.items) || [];
                this.origin = [...a, ...i],
                this.setItems(this.origin, !0),
                this.items.length && (this.current = 0,
                this.createChain(),
                console.log(this.chain),
                this.start())
            },
            setItems: function(e, o=!0) {
                let a = this.element
                  , i = this.options
                  , s = i.direction.toLowerCase();
                if (o && (this.items.length = 0),
                a.clear(),
                this.items = e.map(c => r("<div>").html(c).addClass("marquee__item").addClass(i.clsMarqueeItem).appendTo(a)[0]),
                r(this.items).addClass(s === "left" || s === "right" ? "moveLeftRight" : "moveUpDown"),
                i.height === "auto") {
                    let c = 0;
                    r(this.items).each(function() {
                        let p = +r(this).outerHeight(!0);
                        p > c && (c = p)
                    }),
                    a.height(c)
                }
                return this
            },
            setItem: function(e, o) {
                let a = r(this.items[e]), i, s = this.options, c = this.element;
                if (a.length)
                    return a.html(o),
                    i = a.outerHeight(!0),
                    s.height === "auto" && c.height() < i && c.height(i),
                    this
            },
            addItem: function(e, o=-1) {
                let a = this.element, i = this.options, s, c = r(e), d, p;
                return s = c.length ? c : r("<div>").html(e),
                o < 0 ? a.append(s) : (d = this.items[o],
                d ? s.insertBefore(d) : a.append(s)),
                p = s.outerHeight(!0),
                i.height === "auto" && a.height() < p && a.height(p),
                this
            },
            createChain: function() {
                let e = this.element
                  , o = this.options
                  , a = 20
                  , i = o.direction
                  , s = o.ease
                  , c = +o.duration
                  , d = 0
                  , p = e[0].getBoundingClientRect();
                if (this.chain.length = 0,
                o.mode === "default")
                    for (let m of this.items) {
                        let g = r(m), f = m.getBoundingClientRect(), u = (p.width - f.width) / 2, h;
                        g.attr("data-direction") && (i = g.attr("data-direction")),
                        g.attr("data-duration") && (c = +g.attr("data-duration")),
                        g.attr("data-ease") ? s = g.attr("data-ease") : s = o.ease,
                        ["left", "right"].indexOf(i) > -1 ? h = {
                            left: i === "left" ? [p.width, -f.width - a] : [-f.width - a, p.width]
                        } : h = {
                            top: i === "up" ? [p.height, -f.height - a] : [-f.height - a, p.height]
                        },
                        this.chain.push({
                            el: g[0],
                            draw: h,
                            dur: c,
                            ease: s,
                            defer: d === 0 ? +o.firstPause : 0
                        }),
                        d++
                    }
                else
                    for (let m of this.items) {
                        let g = r(m), f = m.getBoundingClientRect(), u = (p.width - f.width) / 2, h = (p.height - f.height) / 2, b, w;
                        c = o.duration / 2,
                        g.attr("data-direction") && (i = g.attr("data-direction").toLowerCase()),
                        g.attr("data-duration") && (c = +g.attr("data-duration") / 2);
                        let Q = s ? s.split(" ") : ["linear"];
                        g.attr("data-ease") && (Q = g.attr("data-ease").split(" ")),
                        ["left", "right"].includes(i) ? (b = {
                            left: i === "left" ? [p.width, u] : [-f.width - a, u]
                        },
                        w = {
                            left: i === "left" ? [u, -f.width - a] : [u, p.width + a]
                        }) : (b = {
                            top: i === "up" ? [p.height, h] : [-f.height - a, h]
                        },
                        w = {
                            top: i === "up" ? [h, -f.height - a] : [h, p.height + a]
                        }),
                        this.chain.push({
                            el: g[0],
                            draw: b,
                            dur: c,
                            ease: Q[0] || "linear",
                            defer: d === 0 ? +o.firstPause : 0
                        }),
                        this.chain.push({
                            el: g[0],
                            draw: w,
                            dur: c,
                            ease: Q[1] ? Q[1] : Q[0] ? Q[0] : "linear",
                            defer: +o.accentPause
                        }),
                        d++
                    }
            },
            _createEvents: function() {
                let e = this.element
                  , o = this.options;
                e.on(t.events.enter, () => {
                    o.stopOnHover && r.pauseAll(this.items)
                }
                ),
                e.on(t.events.leave, () => {
                    o.stopOnHover && r.resumeAll(this.items)
                }
                );
                let a = Hooks.useDebounce(i => {
                    this.stop(),
                    this.setItems(this.items, !0),
                    this.createChain(),
                    this.start()
                }
                , 1e3);
                r(window).on(t.events.resize, a)
            },
            start: function() {
                let e = this.options;
                return this.running = !0,
                r.chain(this.chain, {
                    loop: e.loop,
                    onChainItem: t.utils.isFunc(e.onMarqueeItem),
                    onChainItemComplete: t.utils.isFunc(e.onMarqueeItemComplete),
                    onChainComplete: t.utils.isFunc(e.onMarqueeComplete)
                }),
                this
            },
            stop: function() {
                return this.running = !1,
                r.stopAll(!1),
                this
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            masterDeferred: 0,
            effect: "slide",
            effectFunc: "linear",
            duration: 200,
            controlPrev: "\u2190",
            controlNext: "\u2192",
            controlTitle: "Master, page $1 of $2",
            backgroundImage: "",
            clsMaster: "",
            clsControls: "",
            clsControlPrev: "",
            clsControlNext: "",
            clsControlTitle: "",
            clsPages: "",
            clsPage: "",
            onBeforePage: t.noop_true,
            onBeforeNext: t.noop_true,
            onBeforePrev: t.noop_true,
            onNextPage: t.noop,
            onPrevPage: t.noop,
            onMasterCreate: t.noop
        };
        t.masterSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroMasterSetup != "undefined" && t.masterSetup(globalThis.metroMasterSetup),
        t.Component("master", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    pages: [],
                    currentIndex: 0,
                    isAnimate: !1,
                    id: null
                }),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options;
                this.id = Hooks.useId(this.elem),
                e.addClass("master").addClass(o.clsMaster),
                e.css({
                    backgroundImage: `url(${o.backgroundImage})`
                }),
                this._createControls(),
                this._createPages(),
                this._createEvents(),
                this._fireEvent("master-create", {
                    element: e
                })
            },
            _createControls: function() {
                let e = this.element, o = this.options, a = ["top", "bottom"], i, s, c = e.find(".page");
                s = String(o.controlTitle).replace("$1", "1"),
                s = String(s).replace("$2", c.length),
                r.each(a, function() {
                    i = r("<div>").addClass(`controls controls-${this}`).addClass(o.clsControls).appendTo(e),
                    r("<span>").addClass("prev").addClass(o.clsControlPrev).html(o.controlPrev).appendTo(i),
                    r("<span>").addClass("next").addClass(o.clsControlNext).html(o.controlNext).appendTo(i),
                    r("<span>").addClass("title").addClass(o.clsControlTitle).html(s).appendTo(i)
                }),
                this._enableControl("prev", !1)
            },
            _enableControl: function(e, o) {
                let a = this.element.find(`.controls .${e}`);
                o === !0 ? a.removeClass("disabled") : a.addClass("disabled")
            },
            _setTitle: function() {
                let e = this.element.find(".controls .title")
                  , o = this.options.controlTitle.replace("$1", this.currentIndex + 1);
                o = o.replace("$2", String(this.pages.length)),
                e.html(o)
            },
            _createPages: function() {
                let e = this
                  , o = this.element
                  , a = this.options
                  , i = o.find(".pages")
                  , s = o.find(".page");
                i.length === 0 && (i = r("<div>").addClass("pages").appendTo(o)),
                i.addClass(a.clsPages),
                r.each(s, function() {
                    let c = r(this);
                    c.data("cover") ? o.css({
                        backgroundImage: `url(${c.data("cover")})`
                    }) : o.css({
                        backgroundImage: `url(${a.backgroundImage})`
                    }),
                    c.css({
                        left: "100%"
                    }),
                    c.addClass(a.clsPage).hide(0),
                    e.pages.push(c)
                }),
                s.appendTo(i),
                this.currentIndex = 0,
                this.pages[this.currentIndex] !== void 0 && (this.pages[this.currentIndex].data("cover") !== void 0 && o.css({
                    backgroundImage: `url(${this.pages[this.currentIndex].data("cover")})`
                }),
                this.pages[this.currentIndex].css("left", "0").show(0),
                setTimeout( () => {
                    i.css({
                        height: e.pages[0].outerHeight(!0) + 2
                    })
                }
                , 0))
            },
            _createEvents: function() {
                let e = this.element
                  , o = this.options;
                e.on(t.events.click, ".controls .prev", () => {
                    this.isAnimate !== !0 && t.utils.exec(o.onBeforePrev, [this.currentIndex, this.pages[this.currentIndex], e]) === !0 && t.utils.exec(o.onBeforePage, ["prev", this.currentIndex, this.pages[this.currentIndex], e]) === !0 && this.prev()
                }
                ),
                e.on(t.events.click, ".controls .next", () => {
                    this.isAnimate !== !0 && t.utils.exec(o.onBeforeNext, [this.currentIndex, this.pages[this.currentIndex], e]) === !0 && t.utils.exec(o.onBeforePage, ["next", this.currentIndex, this.pages[this.currentIndex], e]) === !0 && this.next()
                }
                ),
                r(globalThis).on(t.events.resize, () => {
                    e.find(".pages").height(this.pages[this.currentIndex].outerHeight(!0) + 2)
                }
                , {
                    ns: this.id
                })
            },
            _slideToPage: function(e) {
                if (this.pages[e] === void 0 || this.currentIndex === e)
                    return;
                let o = e > this.currentIndex ? "next" : "prev"
                  , a = this.pages[this.currentIndex]
                  , i = this.pages[e];
                this.currentIndex = e,
                this._effect(a, i, o)
            },
            _slideTo: function(e) {
                let o = e.toLowerCase() === "next"
                  , a = this.pages[this.currentIndex];
                if (o) {
                    if (this.currentIndex + 1 >= this.pages.length)
                        return;
                    this.currentIndex++
                } else {
                    if (this.currentIndex - 1 < 0)
                        return;
                    this.currentIndex--
                }
                let i = this.pages[this.currentIndex];
                this._fireEvent(o ? "next-page" : "prev-page", {
                    current: a,
                    next: i,
                    forward: o
                }),
                this._effect(a, i, e)
            },
            _effect: function(e, o, a) {
                let i = this
                  , s = this.element
                  , c = this.options
                  , d = s.width()
                  , p = s.find(".pages");
                this._setTitle(),
                this.currentIndex === this.pages.length - 1 ? this._enableControl("next", !1) : this._enableControl("next", !0),
                this.currentIndex === 0 ? this._enableControl("prev", !1) : this._enableControl("prev", !0),
                setTimeout( () => {
                    i.isAnimate = !0,
                    p.animate({
                        draw: {
                            height: o.outerHeight(!0) + 2
                        },
                        onDone: () => {
                            m()
                        }
                    })
                }
                , 0),
                p.css("overflow", "hidden");
                function m() {
                    o.data("cover") !== void 0 ? s.css({
                        backgroundImage: `url(${o.data("cover")})`
                    }) : s.css({
                        backgroundImage: `url(${c.backgroundImage})`
                    }),
                    p.css("overflow", "initial"),
                    i.isAnimate = !1
                }
                function g() {
                    e.stop(!0).animate({
                        draw: {
                            left: a === "next" ? -d : d
                        },
                        dur: c.duration,
                        ease: c.effectFunc,
                        onDone: () => {
                            e.hide(0)
                        }
                    }),
                    o.stop(!0).css({
                        left: a === "next" ? d : -d
                    }).show(0).animate({
                        draw: {
                            left: 0
                        },
                        dur: c.duration,
                        ease: c.effectFunc,
                        onDone: () => {
                            m()
                        }
                    })
                }
                function f() {
                    e.hide(),
                    o.css({
                        top: 0,
                        left: 0,
                        opacity: 0
                    }).show( () => {
                        m()
                    }
                    )
                }
                function u() {
                    e.fadeOut(c.duration),
                    o.css({
                        top: 0,
                        left: 0,
                        opacity: 0
                    }).fadeIn(c.duration, "linear", () => {
                        m()
                    }
                    )
                }
                switch (c.effect) {
                case "fade":
                    u();
                    break;
                case "switch":
                    f();
                    break;
                default:
                    g()
                }
            },
            toPage: function(e) {
                this._slideToPage(e)
            },
            next: function() {
                this._slideTo("next")
            },
            prev: function() {
                this._slideTo("prev")
            },
            changeEffect: function() {
                this.options.effect = this.element.attr("data-effect")
            },
            changeEffectFunc: function() {
                this.options.effectFunc = this.element.attr("data-effect-func")
            },
            changeEffectDuration: function() {
                this.options.duration = this.element.attr("data-duration")
            },
            changeAttribute: function(e) {
                switch (e) {
                case "data-effect":
                    this.changeEffect();
                    break;
                case "data-effect-func":
                    this.changeEffectFunc();
                    break;
                case "data-duration":
                    this.changeEffectDuration();
                    break
                }
            },
            destroy: function() {
                let e = this.element;
                e.off(t.events.click, ".controls .prev"),
                e.off(t.events.click, ".controls .next"),
                r(globalThis).off(t.events.resize, {
                    ns: this.id
                }),
                e.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            navViewDeferred: 0,
            expandPoint: null,
            toggle: null,
            animate: !0,
            activeState: !0,
            initialView: "expand",
            onMenuItemClick: t.noop,
            onPaneClose: t.noop,
            onBeforePaneClose: t.noop,
            onPaneOpen: t.noop,
            onBeforePaneOpen: t.noop,
            onNavviewCreate: t.noop
        };
        t.navViewSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroNavViewSetup != "undefined" && t.navViewSetup(globalThis.metroNavViewSetup),
        t.Component("nav-view", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    pane: null,
                    content: null,
                    paneToggle: null,
                    id: null,
                    menuScrollDistance: 0,
                    menuScrollStep: 0
                }),
                this
            },
            _create: function() {
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("navview-create")
            },
            _calcMenuHeight: function() {
                let e = this.element
                  , o = 0
                  , a = e.children(".navview-pane");
                if (a.length === 0)
                    return;
                let i = a.children(".navview-menu-container");
                i.length !== 0 && (r.each(i.prevAll(), function() {
                    o += r(this).outerHeight(!0)
                }),
                r.each(i.nextAll(), function() {
                    o += r(this).outerHeight(!0)
                }),
                i.css({
                    height: `calc(100% - ${o}px)`
                }),
                this.menuScrollStep = 48,
                this.menuScrollDistance = t.utils.nearest(i[0].scrollHeight - i.height(), 48))
            },
            _recalc: function() {
                setTimeout( () => {
                    this._calcMenuHeight()
                }
                , 200)
            },
            _createStructure: function() {
                let e = this.element, o = this.options, a;
                e.addClass("navview"),
                e.attr("id") === void 0 && e.attr("id", Hooks.useId(this.elem)),
                this.id = e.attr("id"),
                o.initialView !== "compact" && t.utils.mediaExist(o.expandPoint) ? e.addClass("expanded") : e.addClass("compacted handmade"),
                t.storage.getItem("navview:compacted") === !0 && (e.removeClass("expanded"),
                e.addClass("compacted handmade"));
                let s = e.children(".navview-pane")
                  , c = e.children(".navview-content")
                  , d = r(o.toggle);
                a = s.children(".navview-menu"),
                a.length && (a.prevAll().reverse().wrapAll(r("<div>").addClass("navview-container")),
                a.wrap(r("<div>").addClass("navview-menu-container")),
                a.find("a").each(function() {
                    let p = r(this)
                      , m = p.children(".icon")
                      , g = p.children(".caption");
                    if (!m.length) {
                        let f = (g.text() || "A B").split(" ");
                        p.prepend(r("<span>").addClass("icon icon-replacer").html(`${f[0][0]}${f[1] ? f[1][0] : ""}`))
                    }
                })),
                this.pane = s.length > 0 ? s : null,
                this.content = c.length > 0 ? c : null,
                this.paneToggle = d.length > 0 ? d : null,
                o.animate && e.addClass("animate-panes"),
                this._recalc()
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options
                  , i = o.find(".navview-menu-container")
                  , s = i.children(".navview-menu");
                i.on("mousewheel", c => {
                    let d = o.find(".navview-pane").width()
                      , p = c.deltaY > 0 ? -1 : 1
                      , m = e.menuScrollStep
                      , g = e.menuScrollDistance
                      , f = Number.parseInt(s.css("top"));
                    if (d > 50)
                        return !1;
                    p === -1 && Math.abs(f) <= g && s.css("top", Number.parseInt(s.css("top")) + m * p),
                    p === 1 && f <= -m && s.css("top", Number.parseInt(s.css("top")) + m * p)
                }
                , {
                    passive: !0
                }),
                o.on(t.events.click, ".pull-button", function() {
                    e._pullClick(this, "pull")
                }),
                o.on(t.events.click, ".holder", function() {
                    e._pullClick(this, "holder")
                }),
                o.on(t.events.click, ".navview-menu li", function() {
                    a.activeState === !0 && (o.find(".navview-menu li.active").removeClass("active"),
                    r(this).toggleClass("active"))
                }),
                o.on(t.events.click, ".navview-menu li > a", function() {
                    e._fireEvent("menu-item-click", {
                        item: this
                    })
                }),
                this.paneToggle !== null && this.paneToggle.on(t.events.click, () => {}
                ),
                s.find("a").on(t.events.enter, function() {
                    if (!o.hasClass("compacted"))
                        return;
                    let c = r(this)
                      , d = t.utils.rect(this);
                    c.children(".caption").css({
                        position: "fixed",
                        top: d.top,
                        left: d.left + i.width(),
                        borderRadius: 4,
                        paddingLeft: 10,
                        boxShadow: "0 0 5px 0 var(--shadow-color)"
                    })
                }),
                s.find("a").on(t.events.leave, function() {
                    if (!o.hasClass("compacted"))
                        return;
                    let d = r(this).children(".caption");
                    d[0].style = ""
                }),
                r(globalThis).on(t.events.resize, () => {
                    this._recalc(),
                    o.hasClass("handmade") || (t.utils.isValue(a.expandPoint) && t.utils.mediaExist(a.expandPoint) ? (o.removeClass("compacted"),
                    o.addClass("expanded")) : (o.removeClass("expanded"),
                    o.addClass("compacted")))
                }
                , {
                    ns: this.id
                })
            },
            _togglePaneMode: function(e=!1) {
                let o = this.element
                  , a = this.options;
                o.toggleClass("expanded"),
                o.toggleClass("compacted"),
                o.toggleClass("handmade"),
                o.hasClass("compacted") ? (t.storage.setItem("navview:compacted", !0),
                t.utils.exec(a.onPaneClose, null, this)) : (t.storage.setItem("navview:compacted", !1),
                t.utils.exec(a.onPaneOpen, null, this))
            },
            _pullClick: function(e, o) {
                let a, i = r(e);
                return i != null && i.hasClass("holder") && (a = i.parent().find("input"),
                setTimeout( () => {
                    a.focus()
                }
                , 200)),
                this._togglePaneMode(o === "pull"),
                this._recalc(),
                !0
            },
            toggle: function() {
                this._togglePaneMode()
            },
            compact: function() {
                let e = this.element;
                e.addClass("compacted handmade"),
                e.removeClass("expanded"),
                this._recalc()
            },
            expand: function() {
                let e = this.element;
                e.addClass("expanded"),
                e.removeClass("compacted handmade"),
                this._recalc()
            },
            state() {
                return this.element.hasClass("expanded") ? "expand" : "compact"
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                let e = this.element;
                e.off(t.events.click, ".pull-button, .holder"),
                e.off(t.events.click, ".navview-menu li"),
                e.off(t.events.click, ".navview-menu li > a"),
                this.paneToggle !== null && this.paneToggle.off(t.events.click),
                r(globalThis).off(t.events.resize, {
                    ns: this.id
                }),
                e.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let a = {
            container: null,
            width: 220,
            timeout: 3e3,
            duration: 200,
            distance: "max",
            animation: "linear",
            clsNotify: "",
            onClick: t.noop,
            onClose: t.noop,
            onShow: t.noop,
            onAppend: t.noop,
            onNotifyCreate: t.noop
        };
        t.notifySetup = s => {
            a = r.extend({}, a, s)
        }
        ,
        typeof globalThis.metroNotifySetup != "undefined" && t.notifySetup(globalThis.metroNotifySetup);
        let i = {
            container: null,
            options: {},
            notifies: [],
            setup: function(s) {
                return this.options = r.extend({}, a, s),
                this
            },
            reset: function() {
                let s = {
                    width: 220,
                    timeout: 3e3,
                    duration: 200,
                    distance: "max",
                    animation: "linear"
                };
                this.options = r.extend({}, a, s)
            },
            _createContainer: () => {
                let s = r("<div>").addClass("notify-container");
                return r("body").prepend(s),
                s
            }
            ,
            create: function(s, c, d={}) {
                let p = this, m = this.options, g, f, u = t.utils.elementId("notify");
                if (!s)
                    return !1;
                g = r("<div>").addClass("notify").addClass(m.clsNotify).attr("id", u),
                g.css({
                    width: m.width
                }),
                c && (f = r("<div>").addClass("notify-title").html(c),
                g.prepend(f)),
                r("<div>").addClass("notify-message").html(s).appendTo(g),
                d.clsNotify && g.addClass(d.clsNotify),
                d.width !== void 0 && g.css({
                    width: d.width
                }),
                g.on(t.events.click, function() {
                    t.utils.exec(t.utils.isValue(d.onClick) ? d.onClick : m.onClick, null, this),
                    p.kill(r(this).closest(".notify"), t.utils.isValue(d.onClose) ? d.onClose : m.onClose)
                }),
                i.container === null && (i.container = i._createContainer()),
                g.appendTo(i.container),
                g.hide( () => {
                    t.utils.exec(t.utils.isValue(d.onAppend) ? d.onAppend : m.onAppend, null, g[0]);
                    let b = t.utils.isValue(d.duration) ? d.duration : m.duration
                      , w = t.utils.isValue(d.animation) ? d.animation : m.animation
                      , Q = t.utils.isValue(d.distance) ? d.distance : m.distance;
                    (Q === "max" || Number.isNaN(Q)) && (Q = r(globalThis).height()),
                    g.show().animate({
                        draw: {
                            marginTop: [Q, 4],
                            opacity: [0, 1]
                        },
                        dur: b,
                        ease: w,
                        onDone: function() {
                            t.utils.exec(m.onNotifyCreate, null, this),
                            d !== void 0 && d.keepOpen === !0 || setTimeout( () => {
                                p.kill(g, t.utils.isValue(d.onClose) ? d.onClose : m.onClose)
                            }
                            , m.timeout),
                            t.utils.exec(t.utils.isValue(d.onShow) ? d.onShow : m.onShow, null, g[0])
                        }
                    })
                }
                )
            },
            kill: function(s, c) {
                s.off(t.events.click),
                s.zoomOut(300, "linear", () => {
                    t.utils.exec(c || this.options.onClose, null, s[0]),
                    s.remove()
                }
                )
            },
            killAll: function() {
                let s = this
                  , c = r(".notify");
                r.each(c, function() {
                    s.kill(r(this))
                })
            }
        };
        t.notify = i.setup()
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            tabsDeferred: 0,
            expand: !1,
            expandPoint: null,
            type: "default",
            updateUri: !1,
            position: "top",
            align: "left",
            link: "",
            clsTabs: "",
            clsTabsList: "",
            clsTabsListItem: "",
            clsTabsListItemActive: "",
            onTab: t.noop,
            onTabOpen: t.noop,
            onTabClose: t.noop,
            onBeforeTab: t.noop_true,
            onTabsCreate: t.noop
        };
        t.tabsSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroTabsSetup != "undefined" && t.tabsSetup(globalThis.metroTabsSetup),
        t.Component("tabs", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    _targets: [],
                    id: null
                }),
                this
            },
            _create: function() {
                let e = this.element
                  , o = e.find(".active")[0];
                this.id = e.attr("id") || Hooks.useId(this.elem),
                this._createStructure(),
                this._createEvents(),
                this._open(o),
                this._fireEvent("tabs-create", {
                    element: e
                })
            },
            _createStructure: function() {
                let e = this.element, o = this.options, a = e.wrap("<div>").addClass("tabs"), i;
                a.addClass(`tabs-${o.position}`),
                e.addClass("tabs-list"),
                e.addClass(`tabs-${o.type}`),
                e.addClass(`align-${o.align}`),
                e.data("expanded", !1);
                let s = r("<div>").addClass("expand-title");
                if (a.prepend(s),
                i = a.find(".hamburger"),
                i.length === 0) {
                    i = r("<button>").attr("type", "button").addClass("hamburger menu-down").appendTo(a);
                    for (let c = 0; c < 3; c++)
                        r("<span>").addClass("line").appendTo(i)
                }
                a.addClass(o.clsTabs),
                e.addClass(o.clsTabsList),
                e.children("li").addClass(o.clsTabsListItem),
                o.expand === !0 ? ["left", "right"].includes(o.position) || a.addClass("tabs-expand") : t.utils.isValue(o.expandPoint) && t.utils.mediaExist(o.expandPoint) && !["left", "right"].includes(o.position) && a.addClass("tabs-expand"),
                ["left", "right"].includes(o.position) && a.addClass("tabs-expand")
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options
                  , i = o.parent();
                r(globalThis).on(t.events.resize, () => {
                    ["left", "right"].includes(a.position) || (a.expand === !0 ? ["left", "right"].includes(a.position) || i.addClass("tabs-expand") : t.utils.isValue(a.expandPoint) && t.utils.mediaExist(a.expandPoint) && !["left", "right"].includes(a.position) ? i.hasClass("tabs-expand") || i.addClass("tabs-expand") : i.hasClass("tabs-expand") && i.removeClass("tabs-expand"))
                }
                , {
                    ns: this.id
                }),
                i.on(t.events.click, ".hamburger, .expand-title", () => {
                    o.data("expanded") === !1 ? (o.addClass("expand"),
                    o.data("expanded", !0),
                    i.find(".hamburger").addClass("active")) : (o.removeClass("expand"),
                    o.data("expanded", !1),
                    i.find(".hamburger").removeClass("active"))
                }
                ),
                o.on(t.events.click, "li", function(s) {
                    let c = r(this).children("a")
                      , d = c.attr("href").trim()
                      , p = c.parent("li");
                    if (e._fireEvent("tab", {
                        tab: p[0],
                        target: p.children("a").href()
                    }),
                    p.hasClass("active"),
                    o.data("expanded") === !0 && (o.removeClass("expand"),
                    o.data("expanded", !1),
                    i.find(".hamburger").removeClass("active")),
                    t.utils.exec(a.onBeforeTab, [p, o], p[0]) !== !0)
                        return !1;
                    d && (d.startsWith("#") ? (e._open(p),
                    s.preventDefault()) : globalThis.location.href = d)
                }),
                r(globalThis).on("hashchange", () => {
                    let s, c;
                    a.updateUri && (s = globalThis.location.hash,
                    c = e._findTabByTarget(s),
                    e._open(r(c)))
                }
                )
            },
            _findTabByTarget: function(e) {
                let a = this.element.find("li"), i;
                return a.each( (s, c) => {
                    !i && r(c).children("a").attr("href") === e && (i = c)
                }
                ),
                i
            },
            _collectTargets: function() {
                let e = this
                  , a = this.element.find("li");
                this._targets = [],
                r.each(a, function() {
                    let i = r(this);
                    if (i.hasClass("divider"))
                        return;
                    let s = i.find("a").attr("href").trim();
                    s.length > 1 && s[0] === "#" && e._targets.push(s)
                })
            },
            _open: function(e) {
                let o = this.element
                  , a = this.options
                  , i = o.find("li")
                  , s = o.siblings(".expand-title")
                  , c = o.find("li.active");
                if (i.length === 0)
                    return;
                this._collectTargets();
                let d = r(typeof e == "undefined" ? i[0] : e)
                  , p = d.find("a").attr("href")
                  , m = d.index();
                p !== void 0 && (i.removeClass("active").removeClass(a.clsTabsListItemActive),
                d.parent().hasClass("d-menu") ? d.parent().parent().addClass("active") : d.addClass("active"),
                a.link && r(`[data-link=${a.link}]`).each( (g, f) => {
                    if (f === this.elem)
                        return;
                    let u = r(f).find("li");
                    u.length && u[m] && u[m].click()
                }
                ),
                r.each(this._targets, function() {
                    let g = r(this);
                    g.length > 0 && g.hide()
                }),
                p !== "#" && p[0] === "#" && (a.updateUri && (globalThis.location.hash = p),
                r(p).show()),
                s.html(d.find("a").html()),
                d.addClass(a.clsTabsListItemActive),
                c.is(d) || (this._fireEvent("tab-open", {
                    tab: d[0],
                    target: d.children("a").attr("href")
                }),
                this._fireEvent("tab-close", {
                    tab: c[0],
                    target: c.children("a").attr("href")
                })))
            },
            next: function() {
                let e = this.element, o;
                o = e.find("li.active").next("li"),
                o.length > 0 && this._open(o)
            },
            prev: function() {
                let e = this.element, o;
                o = e.find("li.active").prev("li"),
                o.length > 0 && this._open(o)
            },
            openByTarget: function(e) {
                let o = this._findTabByTarget(e);
                o && this._open(r(o))
            },
            openByIndex: function(e) {
                let a = this.element.find("li");
                t.utils.isValue(a[e]) && this._open(r(a[e]))
            },
            open: function(e=1) {
                typeof e == "number" ? this.openByIndex(e - 1) : this.openByTarget(e)
            },
            changeAttribute: () => {}
            ,
            destroy: function() {
                let e = this.element
                  , o = e.parent();
                r(globalThis).off(t.events.resize, {
                    ns: this.id
                }),
                o.off(t.events.click, ".hamburger, .expand-title"),
                e.off(t.events.click, "a"),
                e.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = `<svg width="800px" height="800px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path fill-rule="evenodd" clip-rule="evenodd" d="M21 8C21 6.34315 19.6569 5 18 5H10C8.34315 5 7 6.34315 7 8V20C7 21.6569 8.34315 23 10 23H18C19.6569 23 21 21.6569 21 20V8ZM19 8C19 7.44772 18.5523 7 18 7H10C9.44772 7 9 7.44772 9 8V20C9 20.5523 9.44772 21 10 21H18C18.5523 21 19 20.5523 19 20V8Z"/>
        <path d="M6 3H16C16.5523 3 17 2.55228 17 2C17 1.44772 16.5523 1 16 1H6C4.34315 1 3 2.34315 3 4V18C3 18.5523 3.44772 19 4 19C4.55228 19 5 18.5523 5 18V4C5 3.44772 5.44772 3 6 3Z"/>
    </svg>`
          , e = `<svg width="800px" height="800px" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
        <path d="M0 9.781v10.667h8.885v1.771h7.115v-1.771h16v-10.667zM8.885 18.661h-1.771v-5.333h-1.781v5.333h-3.552v-7.104h7.104zM14.219 18.661v1.787h-3.552v-8.891h7.115v7.109h-3.563zM30.224 18.661h-1.776v-5.333h-1.781v5.333h-1.781v-5.333h-1.771v5.333h-3.563v-7.104h10.672zM14.219 13.333h1.781v3.557h-1.781z"/>
    </svg>`
          , o = `<svg width="800px" height="800px" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
        <path d="M30,10.75H21.251V2H30Z" />
        <path d="M20.374,10.75h-8.75V2h8.75Z" />
        <path d="M10.749,10.75H2V2h8.749Z" />
        <path d="M30,20.375H21.251v-8.75H30Z" />
        <path d="M20.374,20.375h-8.75v-8.75h8.75Z"/>
        <path d="M20.374,30h-8.75V21.25h8.75Z"/>
        <path d="M30,30H21.251V21.25H30Z" />
        <path d="M10.749,30H2V21.25h8.749Z" />
    </svg>`
          , a = `<svg width="800px" height="800px" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
        <path d="M28.208,24.409a10.493,10.493,0,0,0-3.959,1.822,23.743,23.743,0,0,1-5.835,2.642,1.632,1.632,0,0,1-.983.55A62.228,62.228,0,0,1,10.984,30c-1.163.009-1.876-.3-2.074-.776a1.573,1.573,0,0,1,.866-2.074,3.759,3.759,0,0,1-.514-.379c-.171-.171-.352-.514-.406-.388-.225.55-.343,1.894-.947,2.5-.83.839-2.4.559-3.328.072-1.019-.541.072-1.813.072-1.813a.73.73,0,0,1-.992-.343,4.847,4.847,0,0,1-.667-2.949,5.374,5.374,0,0,1,1.749-2.895,9.334,9.334,0,0,1,.658-4.4,10.445,10.445,0,0,1,3.165-3.661S6.628,10.747,7.35,8.817c.469-1.262.658-1.253.812-1.308a3.633,3.633,0,0,0,1.452-.857,5.265,5.265,0,0,1,4.41-1.7S15.2,1.4,16.277,2.09a18.349,18.349,0,0,1,1.533,2.886s1.281-.748,1.425-.469a11.334,11.334,0,0,1,.523,6.132,14.01,14.01,0,0,1-2.6,5.411c-.135.225,1.551.938,2.615,3.887.983,2.7.108,4.96.262,5.212.027.045.036.063.036.063s1.127.09,3.391-1.308A8.5,8.5,0,0,1,27.739,22.3a1.081,1.081,0,0,1,.469,2.11Z"/>
    </svg>`
          , i = `<svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path d="M11.966 22.566c6.609 0 11.966-4.326 11.966-9.661 0-3.308-2.051-6.23-5.204-7.963-1.283-.713-2.291-1.353-3.13-1.885-1.58-1.004-2.555-1.623-3.632-1.623-1.094 0-2.327.783-3.955 1.816a49.78 49.78 0 0 1-2.808 1.692C2.051 6.675 0 9.597 0 12.905c0 5.335 5.357 9.66 11.966 9.66Zm-1.397-17.83a5.885 5.885 0 0 0 .497-2.403c0-.144.201-.186.229-.028.656 2.775-.9 4.15-2.051 4.61-.124.048-.199-.12-.103-.208a5.748 5.748 0 0 0 1.428-1.971Zm2.052-.102a5.795 5.795 0 0 0-.78-2.3v-.015c-.068-.123.086-.263.185-.172 1.956 2.105 1.303 4.055.554 5.037-.082.102-.229-.003-.188-.126a5.837 5.837 0 0 0 .229-2.424Zm1.771-.559a5.708 5.708 0 0 0-1.607-1.801V2.26c-.112-.085-.024-.274.113-.218 2.588 1.084 2.766 3.171 2.452 4.395a.116.116 0 0 1-.048.071.11.11 0 0 1-.153-.026.118.118 0 0 1-.022-.083 5.864 5.864 0 0 0-.735-2.324Zm-5.072.559c-.616.544-1.279.758-2.058.997-.116 0-.194-.078-.155-.18 1.747-.907 2.369-1.645 2.99-2.771 0 0 .155-.117.188.085 0 .303-.348 1.325-.965 1.869Zm4.931 11.205a2.949 2.949 0 0 1-.935 1.549 2.16 2.16 0 0 1-1.282.618 2.167 2.167 0 0 1-1.323-.618 2.95 2.95 0 0 1-.923-1.549.243.243 0 0 1 .064-.197.23.23 0 0 1 .192-.069h3.954a.226.226 0 0 1 .19.07.239.239 0 0 1 .063.196Zm-5.443-2.17a1.85 1.85 0 0 1-2.377-.244 1.969 1.969 0 0 1-.233-2.44c.207-.318.502-.565.846-.711a1.84 1.84 0 0 1 1.089-.11c.365.075.701.26.964.53.264.27.443.616.515.99a1.98 1.98 0 0 1-.108 1.118 1.923 1.923 0 0 1-.696.866Zm8.471.005a1.849 1.849 0 0 1-2.374-.252 1.956 1.956 0 0 1-.546-1.362c0-.383.11-.758.319-1.076.207-.318.502-.566.847-.711a1.84 1.84 0 0 1 1.09-.108c.366.076.702.261.965.533s.44.617.512.993a1.98 1.98 0 0 1-.113 1.118 1.922 1.922 0 0 1-.7.865Z"/>
    </svg>`
          , s = {
            link: "package-manager",
            default: "npm",
            deps: "",
            package: "",
            onPackageManagerCreate: t.noop
        };
        t.packageManagerSetup = c => {
            s = r.extend({}, s, c)
        }
        ,
        typeof globalThis.metroPackageManagerSetup != "undefined" && t.packageManagerSetup(globalThis.metroPackageManagerSetup),
        t.Component("package-manager", {
            init: function(c, d) {
                return this._super(d, c, s, {}),
                this
            },
            _create: function() {
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("component-create")
            },
            _createStructure: function() {
                let c = this.element
                  , d = this.options
                  , p = new Date().getTime()
                  , m = Hooks.useId(`pm-npm-${p}`)
                  , g = Hooks.useId(`pm-pnpm-${p}`)
                  , f = Hooks.useId(`pm-yarn-${p}`)
                  , u = Hooks.useId(`pm-bun-${p}`);
                c.addClass("package-manager"),
                c.html(`
                <ul data-role="tabs" data-expand="true" data-link="${d.link}">
                    <li class="${d.default === "npm" ? "active" : ""}"><a href="#${m}">${e} npm</a></li>
                    <li class="${d.default === "pnpm" ? "active" : ""}"><a href="#${g}">${o} pnpm</a></li>
                    <li class="${d.default === "yarn" ? "active" : ""}"><a href="#${f}">${a} yarn</a></li>
                    <li class="${d.default === "bun" ? "active" : ""}"><a href="#${u}">${i} bun</a></li>
                </ul>
                <div>
                    <div class="pm-command" id="${m}">
                        <button class="small square"><span class="icon">${l}</span></button>
                        <code>npm i ${d.deps === "" ? "" : d.deps === "dev" ? "-D" : ""} ${d.package}</code>
                    </div>
                    <div class="pm-command" id="${g}">
                        <button class="small square"><span class="icon">${l}</span></button>
                        <code>pnpm add ${d.deps === "" ? "" : d.deps === "dev" ? "-D" : "--save-peer"} ${d.package}</code>
                    </div>
                    <div class="pm-command" id="${f}">
                        <button class="small square"><span class="icon">${l}</span></button>
                        <code>yarn add ${d.deps === "" ? "" : d.deps === "dev" ? "-D" : "-P"} ${d.package}</code>
                    </div>
                    <div class="pm-command" id="${u}">
                        <button class="small square"><span class="icon">${l}</span></button>
                        <code>bun add ${d.deps === "" ? "" : d.deps === "dev" ? "-D" : "--peer"} ${d.package}</code>
                    </div>
                </div>
            `)
            },
            _createEvents: function() {
                let c = this.element
                  , d = this.options;
                c.on("click", ".pm-command button", function() {
                    let p = r(this).parent().find("code").text();
                    t.utils.copy2clipboard(p)
                })
            },
            changeAttribute: (c, d) => {}
            ,
            destroy: function() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            appendButton: !0,
            tabsPosition: "left",
            customButtons: null,
            activateNewTab: !0,
            defaultNewTabTitle: "New File",
            defaultNewCanClose: !0,
            defaultNewTabIcon: "",
            defaultNewTabImage: "",
            defaultNewTabPosition: "before",
            appendActions: null,
            tabsActions: null,
            tabActions: null,
            refControl: !1,
            onAppendButtonClick: t.noop,
            onTabCreate: t.noop_arg,
            onTabActivate: t.noop,
            onTabDeactivate: t.noop,
            onTabBeforeClose: t.noop_true,
            onTabClose: t.noop,
            onTabRename: t.noop,
            onTabPropChange: t.noop,
            onTabOrganized: t.noop
        };
        t.pageControlSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroPageControlSetup != "undefined" && t.pageControlSetup(globalThis.metroPageControlSetup),
        t.Component("page-control", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    newFileIndex: 1,
                    invisibleTabsHolderToggle: null,
                    invisibleTabsHolder: null
                }),
                this
            },
            _create: function() {
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("page-control-create")
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options;
                this.component = r("<div>").addClass("page-control").insertBefore(e),
                e.addClass("page-control__tabs").appendTo(this.component),
                e.addClass(`tabs-position-${o.tabsPosition}`);
                let a = e.children("li:not(.page-control__tab-custom)")
                  , i = !1;
                if (a.each( (d, p) => {
                    let m = r(p)
                      , g = m.html()
                      , f = m.hasClass("active")
                      , u = this.createTab({
                        caption: g,
                        icon: m.attr("data-icon"),
                        image: m.attr("data-image"),
                        canClose: m.attr("data-close") !== "false",
                        data: m.attr("data-data"),
                        ref: m.attr("data-ref")
                    });
                    f && !i && (i = !0,
                    u.addClass("active"),
                    this._fireEvent("tab-activate", {
                        tab: u[0]
                    })),
                    e.append(u),
                    m.remove()
                }
                ),
                !i) {
                    let d = this.element.children(".page-control__tab").first();
                    d.addClass("active"),
                    this._fireEvent("tab-activate", {
                        tab: d[0]
                    })
                }
                if (o.refControl && this._updateRefs(),
                o.appendButton) {
                    let d = r("<li>").addClass("page-control__tab__append").html('<span class="toggle">+</span>');
                    if (o.appendActions) {
                        let p = t.utils.exec(o.appendActions, null, this);
                        if (!Array.isArray(p))
                            throw "PageControl Error! Prop appendActions must be a function that returns an array.";
                        let m = r("<ul data-role='dropdown' class='d-menu context'>");
                        p.map(g => m.append(this._renderMenuItem(g))),
                        d.append(m)
                    }
                    e.append(d)
                }
                let s = r("<li>").addClass("page-control__tab__service").addClass("invisible-tabs").appendTo(e);
                s.append(r("<div>").addClass("page-control__service-button").html(`
                    <span class="toggle">\u21A7</span>
                    <ul class="d-menu place-right context page-control__invisible_tabs_holder"></ul>
                `)),
                this.invisibleTabsHolderToggle = s.find(".page-control__tab__service.invisible-tabs > .page-control__service-button"),
                this.invisibleTabsHolder = t.makePlugin(s.find(".page-control__invisible_tabs_holder"), "dropdown", {
                    onClick: d => {
                        let p = r(d.target.parentNode);
                        p.hasClass("page-control__tab__closer") ? this.closeButtonClick(d) : this.activateTab(p[0]),
                        d.preventDefault(),
                        d.stopPropagation()
                    }
                }),
                this.invisibleTabsHolderToggle.hide(),
                this.organizeTabs();
                let c = r("<li>").addClass("page-control__tab__service").addClass("tabs-menu").appendTo(e);
                if (c.append(r("<div>").addClass("page-control__service-button").html(`
                    <span class="toggle">\uFE19</span>
                    <ul class="d-menu place-right context" data-role="dropdown"></ul>
                `)),
                !o.tabsActions)
                    c.hide();
                else {
                    let d = c.find("ul");
                    t.utils.exec(o.tabsActions, null, this).map(m => d.append(this._renderMenuItem(m)))
                }
            },
            _updateRefs: function() {
                let e = this.element.find(".page-control__tab")
                  , o = this.element.find(".page-control__tab.active");
                e.each( (a, i) => r(r(i).data("ref")).hide()),
                r(o.data("ref")).show()
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options;
                o.on("click", ".page-control__tab__closer", this.closeButtonClick.bind(this)),
                o.on("click", ".page-control__tab__menu > li > a", function(i) {
                    let s = r(this).attr("data-action")
                      , c = t.getPlugin(r(this).closest("ul"), "dropdown")
                      , d = r(this).closest(".page-control__tab")[0];
                    switch (c.close(),
                    s) {
                    case "close":
                        {
                            e.closeTab(d);
                            break
                        }
                    case "close-all":
                        {
                            e.closeAll();
                            break
                        }
                    case "close-other":
                        {
                            e.closeOtherTabs(d);
                            break
                        }
                    case "close-inactive":
                        {
                            e.closeInactiveTabs();
                            break
                        }
                    case "close-left":
                        {
                            e.closeTabsOnTheLeft(d);
                            break
                        }
                    case "close-right":
                        {
                            e.closeTabsOnTheRight(d);
                            break
                        }
                    case "rename":
                        {
                            e.renameTab(d);
                            break
                        }
                    }
                    i.preventDefault(),
                    i.stopPropagation()
                }),
                o.on("click", ".page-control__tab", function() {
                    r(this).hasClass("active") || e.activateTab(this)
                }),
                o.on("click", ".page-control__tab__append > span", i => {
                    i.preventDefault(),
                    i.stopPropagation();
                    let s = e.createTab({
                        caption: `${a.defaultNewTabTitle} ${e.newFileIndex++}`,
                        canClose: a.defaultNewCanClose,
                        icon: a.defaultNewTabIcon,
                        image: a.defaultNewTabImage,
                        data: null
                    });
                    e._fireEvent("tab-append", {
                        tab: s
                    }),
                    e.activateTab(s),
                    e.organizeTabs(),
                    e._fireEvent("append-button-click", {
                        tab: s
                    })
                }
                ),
                r(globalThis).on("resize", () => {
                    this.organizeTabs()
                }
                )
            },
            _renderMenuItem: e => {
                let o = r("<li>")
                  , a = r("<a>");
                return (e.icon || e.image) && a.append(e.icon ? r("<span class='icon'>").addClass(e.icon) : r("<img class='icon'>").attr("src", e.image).attr("alt", "")),
                e.title && a.append(r("<span>").addClass("caption").text(e.title)),
                a.data("data", e.data),
                e.onclick && a.on("click", i => e.onclick(i)),
                o.append(a),
                o
            }
            ,
            createTab: function({caption: e, icon: o, image: a, canClose: i=!0, hasMenu: s=!0, data: c, ref: d}) {
                let p = this.element
                  , m = this.options
                  , g = r("<li>").addClass("page-control__tab").appendTo(p);
                if (s && (g.append(r("<div>").addClass("page-control__tab__menu__holder").html(`
                        <span class="">\uFE19</span>
                        <ul class="d-menu context page-control__tab__menu" data-role="dropdown">
                            <li><a data-action="rename">${this.strings.label_rename_tab}</a></li>
                            <li class="divider"></li>
                            <li><a data-action="close">${this.strings.label_close_tab}</a></li>
                            <li><a data-action="close-other">${this.strings.label_close_other_tabs}</a></li>
                            <li><a data-action="close-left">${this.strings.label_close_tabs_left}</a></li>
                            <li><a data-action="close-right">${this.strings.label_close_tabs_right}</a></li>
                            <li><a data-action="close-all">${this.strings.label_close_all_tabs}</a></li>
                            <li><a data-action="close-inactive">${this.strings.label_close_inactive_tabs}</a></li>
                        </ul>
                    `)),
                m.tabActions)) {
                    let f = g.find("ul")
                      , u = t.utils.exec(m.tabActions);
                    if (!Array.isArray(u))
                        throw "PageControl Error! Prop tabActions must be a function that returns an array.";
                    f.append(r("<li class='divider'>")),
                    u.map(h => f.append(this._renderMenuItem(h)))
                }
                return (o || a) && g.append(r("<span>").addClass("page-control__tab__icon").html(o ? `<span class="${o}">` : `<img src="${a}" alt=""/>`)),
                g.append(r("<span>").addClass("page-control__tab__caption").html(e)),
                i && g.append(r("<span>").addClass("page-control__tab__closer").html("<span>\u2715</span>")),
                g.data("data", c),
                g.data("ref", d),
                this._fireEvent("tab-create", {
                    tab: g[0]
                }),
                p[m.defaultNewTabPosition === "before" ? "prepend" : "append"](g),
                g[0]
            },
            closeButtonClick: function(e) {
                let o = this.options
                  , a = r(e.target).closest(".page-control__tab")
                  , i = a.closest("ul");
                o.onTabBeforeClose(a[0]) && (this.closeTab(a[0]),
                i.hasClass("page-control__invisible_tabs_holder") && i.children(".page-control__tab").length === 0 && (t.getPlugin(this.invisibleTabsHolder, "dropdown").close(),
                this.invisibleTabsHolderToggle.hide()),
                e.preventDefault(),
                e.stopPropagation())
            },
            closeTab: function(e, o=!0) {
                let a = r(e);
                if (a.hasClass("active")) {
                    let i = a.prev(".page-control__tab")
                      , s = a.next(".page-control__tab");
                    i.length ? this.activateTab(i[0]) : s.length ? this.activateTab(s[0]) : a.parent().hasClass("page-control__invisible_tabs_holder") && parent.children(".page-control__tab").length === 1 && element.children(".page-control__tab").length && this.activateTab(element.children(".page-control__tab").last()[0])
                }
                return this._fireEvent("tab-close", {
                    tab: e
                }),
                this.options.refControl && r(a.data("ref")).remove(),
                a.remove(),
                o && this.organizeTabs(),
                this
            },
            activateTab: function(e) {
                let o = this.element
                  , a = this.options;
                return o.find(".page-control__tab").each( (i, s) => {
                    let c = r(s);
                    c.hasClass("active") && (this._fireEvent("tab-deactivate", {
                        tab: s
                    }),
                    c.removeClass("active"))
                }
                ),
                r(e).addClass("active"),
                a.refControl && this._updateRefs(),
                this._fireEvent("tab-activate", {
                    tab: e
                }),
                r(e).parent().hasClass("page-control__invisible_tabs_holder") && (o.prepend(e),
                this.organizeTabs()),
                this
            },
            organizeTabs: function() {
                let e = this.element
                  , o = this.elem.getBoundingClientRect().width
                  , a = this.invisibleTabsHolder
                  , i = e.find(".page-control__tab__append");
                a.children(".page-control__tab").each( (d, p) => {
                    let m = r(p);
                    i.length ? m.insertBefore(i) : m.appendTo(e)
                }
                );
                let s = e.children(".page-control__tab")
                  , c = 0;
                for (let d of s) {
                    let p = d.getBoundingClientRect();
                    if (c + p.width + 50 > o) {
                        r(d).nextAll(".page-control__tab").appendTo(a),
                        r(d).appendTo(a);
                        break
                    }
                    c += p.width
                }
                a.children().length ? this.invisibleTabsHolderToggle.show(function() {
                    r(this).css({
                        display: "flex"
                    })
                }) : this.invisibleTabsHolderToggle.hide(),
                this._fireEvent("tab-organized", null)
            },
            addTab: function({caption: e, icon: o, image: a, canClose: i=!0, hasMenu: s=!0, data: c, ref: d}, p="before") {
                let m = this.options
                  , g = this.createTab({
                    caption: e,
                    icon: o,
                    image: a,
                    canClose: i,
                    hasMenu: s,
                    data: c,
                    ref: d
                });
                return m.activateNewTab && this.activateTab(g),
                this.element[p === "before" ? "prepend" : "append"](g),
                this.organizeTabs(),
                g
            },
            getActiveTab: function() {
                return this.component.find(".page-control__tab.active")[0]
            },
            getActiveTabIndex: function() {
                return this.component.find(".page-control__tab").index(".active", !1)
            },
            getTabByIndex: function(e) {
                return this.component.find(".page-control__tab").get(e)
            },
            getTabByTitle: function(e) {
                if (!e)
                    return;
                let o = this.component.find(".page-control__tab");
                for (let a of o)
                    if (r(a).find(".caption").text() === e)
                        return a
            },
            closeAll: function() {
                return this.component.find(".page-control__tab").each( (e, o) => {
                    this.closeTab(o, !1)
                }
                ),
                this.organizeTabs(),
                this
            },
            closeInactiveTabs: function() {
                return this.component.find(".page-control__tab").each( (e, o) => {
                    r(o).hasClass("active") || this.closeTab(o, !1)
                }
                ),
                this.organizeTabs(),
                this
            },
            closeOtherTabs: function(e) {
                let o = typeof e == "number" ? this.getTabByIndex(e) : r(e);
                return this.component.find(".page-control__tab").each( (a, i) => {
                    o[0] !== i && this.closeTab(i, !1)
                }
                ),
                this.activateTab(e),
                this.organizeTabs(),
                this
            },
            closeTabsOnTheLeft: function(e) {
                let a = this.component.find(".page-control__tab").indexOf(r(e));
                return this.component.find(".page-control__tab").each( (i, s) => {
                    i < a && this.closeTab(s, !1)
                }
                ),
                this.organizeTabs(),
                this
            },
            closeTabsOnTheRight: function(e) {
                let a = this.component.find(".page-control__tab").indexOf(r(e));
                return this.component.find(".page-control__tab").each( (i, s) => {
                    i > a && this.closeTab(s, !1)
                }
                ),
                this.organizeTabs(),
                this
            },
            setupTab: function(e, o, a) {
                let i = r(e);
                switch (o) {
                case "caption":
                    {
                        i.find(".page-control__tab__caption").text(a);
                        break
                    }
                case "icon":
                    {
                        i.find(".page-control__tab__icon")[0].className = a;
                        break
                    }
                case "image":
                    {
                        i.find(".page-control__tab__image").attr("src", a);
                        break
                    }
                case "data":
                    {
                        i.data("data", a);
                        break
                    }
                case "ref":
                    {
                        i.data("ref", a);
                        break
                    }
                }
                this._fireEvent("tab-prop-change", {
                    tab: e
                }),
                this.organizeTabs()
            },
            renameTab: function(e) {
                let o = r(e).find(".page-control__tab__caption");
                t.dialog.create({
                    title: this.strings.label_rename_tab,
                    content: `
                    <form style="width: 100%">
                        <input type="text" data-role="input" value="${o.text()}">
                    </form>
                `,
                    defaultActions: !1,
                    customButtons: [{
                        text: this.strings.label_ok,
                        cls: "js-dialog-close info",
                        onclick: a => {
                            this.setupTab(e, "caption", a.find("input").val())
                        }
                    }, {
                        text: this.strings.label_cancel,
                        cls: "js-dialog-close"
                    }]
                })
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                this.component.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        t.pagination = l => {
            let e = {
                length: 0,
                rows: 0,
                current: 0,
                target: "body",
                clsPagination: "",
                prevTitle: "",
                nextTitle: "",
                distance: 5,
                islandSize: 3,
                shortTrack: 10,
                lang: void 0
            }, o, a, i, s = r.extend({}, e, l), c = Number.parseInt(s.distance), d = Number.parseInt(s.shortTrack), p = Number.parseInt(s.islandSize), m = Number.parseInt(s.length), g = Number.parseInt(s.rows), f = Math.ceil(m / g), u = Number.parseInt(s.current), h = r(s.target).html(""), b = r("<ul>").addClass("pagination").addClass(s.clsPagination).appendTo(h), w = s.lang || h.closest("[lang]").attr("lang") || "en";
            t.locales[w] === void 0 && (w = "en");
            let Q = t.locales[w];
            if (m === 0 || g === -1)
                return;
            let C = (B, x, v) => {
                let E = r("<li>").addClass("page-item").addClass(x)
                  , k = r("<a>").addClass("page-link").html(B);
                return k.data("page", v),
                k.appendTo(E),
                E
            }
            ;
            if (a = C(s.prevTitle || Q.label_prev, "service prev-page", "prev"),
            b.append(a),
            b.append(C(1, u === 1 ? "active" : "", 1)),
            c === 0 || f <= d)
                for (o = 2; o < f; o++)
                    b.append(C(o, o === u ? "active" : "", o));
            else if (u < c) {
                for (o = 2; o <= c; o++)
                    b.append(C(o, o === u ? "active" : "", o));
                f > c && b.append(C("...", "no-link", null))
            } else if (u <= f && u > f - c + 1)
                for (f > c && b.append(C("...", "no-link", null)),
                o = f - c + 1; o < f; o++)
                    b.append(C(o, o === u ? "active" : "", o));
            else {
                b.append(C("...", "no-link", null));
                for (let B = p; B > 0; B--)
                    b.append(C(u - B, "", u - B));
                b.append(C(u, "active", u));
                for (let B = 1; B <= p; B++)
                    b.append(C(u + B, "", u + B));
                b.append(C("...", "no-link", null))
            }
            return (f > 1 || u < f) && b.append(C(f, u === f ? "active" : "", f)),
            i = C(s.nextTitle || Q.label_next, "service next-page", "next"),
            b.append(i),
            u === 1 && a.addClass("disabled"),
            u === f && i.addClass("disabled"),
            m === 0 && (b.addClass("disabled"),
            b.children().addClass("disabled")),
            b
        }
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = '<svg aria-hidden="true" width="16" height="16" viewBox="0 0 24 24"><path d="m14.83 11.29-4.24-4.24a1 1 0 1 0-1.42 1.41L12.71 12l-3.54 3.54a1 1 0 0 0 0 1.41 1 1 0 0 0 .71.29 1 1 0 0 0 .71-.29l4.24-4.24a1.002 1.002 0 0 0 0-1.42Z"></path></svg>'
          , e = {
            panelDeferred: 0,
            id: null,
            titleCaption: "",
            titleIcon: "",
            collapsible: !1,
            collapsed: !1,
            collapseDuration: 100,
            width: "auto",
            height: "auto",
            draggable: !1,
            customButtons: null,
            clsCustomButton: "",
            clsPanel: "",
            clsTitle: "",
            clsTitleCaption: "",
            clsTitleIcon: "",
            clsContent: "",
            clsCollapseToggle: "",
            onCollapse: t.noop,
            onExpand: t.noop,
            onDragStart: t.noop,
            onDragStop: t.noop,
            onDragMove: t.noop,
            onPanelCreate: t.noop
        };
        t.panelSetup = o => {
            e = r.extend({}, e, o)
        }
        ,
        typeof globalThis.metroPanelSetup != "undefined" && t.panelSetup(globalThis.metroPanelSetup),
        t.Component("panel", {
            init: function(o, a) {
                return this._super(a, o, e),
                this
            },
            _addCustomButtons: function(o) {
                let a = this.element, i = this.options, s = a.closest(".panel").find(".panel-title"), c, d = [];
                if (d = t.utils.isObject(o),
                !d) {
                    console.warn("Unknown format for custom buttons", o);
                    return
                }
                if (s.length === 0) {
                    console.warn("No place for custom buttons");
                    return
                }
                return c = s.find(".custom-buttons"),
                c.length === 0 ? c = r("<div>").addClass("custom-buttons").appendTo(s) : (c.find(".btn-custom").off(t.events.click),
                c.html("")),
                r.each(d, function() {
                    let p = r("<span>");
                    p.addClass("button btn-custom").addClass(i.clsCustomButton).addClass(this.cls).attr("tabindex", -1).html(this.html),
                    this.attr && typeof this.attr == "object" && r.each(this.attr, (m, g) => {
                        p.attr(Str.dashedName(m), g)
                    }
                    ),
                    p.data("action", this.onclick),
                    c.prepend(p)
                }),
                s.on(t.events.click, ".btn-custom", function(p) {
                    if (t.utils.isRightMouse(p))
                        return;
                    let m = r(this)
                      , g = m.data("action");
                    t.utils.exec(g, [m], this)
                }),
                this
            },
            _create: function() {
                let o = this.element, a = this.options, i = r("<div>").addClass("panel").addClass(a.clsPanel), s = a.id ? a.id : Hooks.useId(this.elem), c = o[0].className, d;
                if (i.attr("id", s).addClass(c),
                i.insertBefore(o),
                o.appendTo(i),
                o[0].className = "",
                o.addClass("panel-content").addClass(a.clsContent).appendTo(i),
                a.titleCaption !== "" || a.titleIcon !== "" || a.collapsible === !0) {
                    if (d = r("<div>").addClass("panel-title").addClass(a.clsTitle),
                    a.titleCaption !== "" && r("<span>").addClass("caption").addClass(a.clsTitleCaption).html(a.titleCaption).appendTo(d),
                    a.titleIcon !== "" && r(a.titleIcon).addClass("icon").addClass(a.clsTitleIcon).appendTo(d),
                    a.collapsible === !0) {
                        let p = r("<span>").addClass("dropdown-toggle marker-center active-toggle").addClass(a.clsCollapseToggle).appendTo(d);
                        p.append(l),
                        t.makePlugin(o, "collapse", {
                            toggleElement: p,
                            duration: a.collapseDuration,
                            onCollapse: a.onCollapse,
                            onExpand: a.onExpand
                        }),
                        a.collapsed === !0 && this.collapse()
                    }
                    d.appendTo(i)
                }
                if (d && t.utils.isValue(a.customButtons) && this._addCustomButtons(a.customButtons),
                a.draggable === !0) {
                    let p;
                    d ? p = d.find(".caption, .icon") : p = i,
                    t.makePlugin(i, "draggable", {
                        dragContext: i[0],
                        dragElement: p,
                        onDragStart: a.onDragStart,
                        onDragStop: a.onDragStop,
                        onDragMove: a.onDragMove
                    })
                }
                a.width !== "auto" && Number.parseInt(a.width) >= 0 && i.outerWidth(Number.parseInt(a.width)),
                a.height !== "auto" && Number.parseInt(a.height) >= 0 && (i.outerHeight(Number.parseInt(a.height)),
                o.css({
                    overflow: "auto"
                })),
                this.panel = i,
                this._fireEvent("panel-create", {
                    element: o,
                    panel: i
                })
            },
            customButtons: function(o) {
                return this._addCustomButtons(o)
            },
            collapse: function() {
                let o = this.element;
                t.utils.isMetroObject(o, "collapse") !== !1 && t.getPlugin(o, "collapse").collapse()
            },
            open: function() {
                this.expand()
            },
            close: function() {
                this.collapse()
            },
            expand: function() {
                let o = this.element;
                t.utils.isMetroObject(o, "collapse") !== !1 && t.getPlugin(o, "collapse").expand()
            },
            changeAttribute: (o, a) => {}
            ,
            destroy: function() {
                let o = this.element
                  , a = this.options;
                return a.collapsible === !0 && t.getPlugin(o, "collapse").destroy(),
                a.draggable === !0 && t.getPlugin(o, "draggable").destroy(),
                o
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            popoverDeferred: 0,
            popoverText: "",
            popoverHide: 3e3,
            popoverTimeout: 10,
            popoverOffset: 10,
            popoverTrigger: t.popoverEvents.HOVER,
            popoverPosition: t.position.TOP,
            hideOnLeave: !1,
            closeButton: !0,
            clsPopover: "",
            clsPopoverContent: "",
            onPopoverShow: t.noop,
            onPopoverHide: t.noop,
            onPopoverCreate: t.noop
        };
        t.popoverSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroPopoverSetup != "undefined" && t.popoverSetup(globalThis.metroPopoverSetup),
        t.Component("popover", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    popover: null,
                    popovered: !1,
                    size: {
                        width: 0,
                        height: 0
                    },
                    id: null
                }),
                this
            },
            _create: function() {
                this.id = Hooks.useId(this.elem),
                this._createEvents(),
                this._fireEvent("popover-create", {
                    element: this.element
                })
            },
            _createEvents: function() {
                let e = this.element, o = this.options, a;
                switch (o.popoverTrigger) {
                case t.popoverEvents.CLICK:
                    a = t.events.click;
                    break;
                case t.popoverEvents.FOCUS:
                    a = t.events.focus;
                    break;
                default:
                    a = t.events.enter
                }
                e.on(a, () => {
                    this.popover !== null || this.popovered === !0 || setTimeout( () => {
                        this.createPopover(),
                        this._fireEvent("popover-show", {
                            popover: this.popover
                        }),
                        o.popoverHide > 0 && setTimeout( () => {
                            this.removePopover()
                        }
                        , o.popoverHide)
                    }
                    , o.popoverTimeout)
                }
                ),
                o.hideOnLeave === !0 && e.on(t.events.leave, () => {
                    this.removePopover()
                }
                ),
                r(globalThis).on(t.events.scroll, () => {
                    this.popover !== null && this.setPosition()
                }
                , {
                    ns: this.id
                })
            },
            setPosition: function() {
                let e = this.popover
                  , o = this.size
                  , a = this.options
                  , i = this.element;
                a.popoverPosition === t.position.BOTTOM ? (e.addClass("bottom"),
                e.css({
                    top: i.offset().top - r(globalThis).scrollTop() + i.outerHeight() + a.popoverOffset,
                    left: i.offset().left + i.outerWidth() / 2 - o.width / 2 - r(globalThis).scrollLeft()
                })) : a.popoverPosition === t.position.RIGHT ? (e.addClass("right"),
                e.css({
                    top: i.offset().top + i.outerHeight() / 2 - o.height / 2 - r(globalThis).scrollTop(),
                    left: i.offset().left + i.outerWidth() - r(globalThis).scrollLeft() + a.popoverOffset
                })) : a.popoverPosition === t.position.LEFT ? (e.addClass("left"),
                e.css({
                    top: i.offset().top + i.outerHeight() / 2 - o.height / 2 - r(globalThis).scrollTop(),
                    left: i.offset().left - o.width - r(globalThis).scrollLeft() - a.popoverOffset
                })) : (e.addClass("top"),
                e.css({
                    top: i.offset().top - r(globalThis).scrollTop() - o.height - a.popoverOffset,
                    left: i.offset().left + i.outerWidth() / 2 - o.width / 2 - r(globalThis).scrollLeft()
                }))
            },
            createPopover: function() {
                let e = this.elem, o = this.element, a = this.options, i, s, c = this.id, d;
                if (!this.popovered) {
                    switch (i = r("<div>").addClass("popover neb").addClass(a.clsPopover),
                    i.attr("id", c),
                    r("<div>").addClass("popover-content").addClass(a.clsPopoverContent).html(a.popoverText).appendTo(i),
                    a.popoverHide === 0 && a.closeButton === !0 && (d = r("<button>").addClass("square small popover-close-button").html("&times;").appendTo(i),
                    d.on(t.events.click, () => {
                        this.removePopover()
                    }
                    )),
                    a.popoverPosition) {
                    case t.position.TOP:
                        s = "neb-s";
                        break;
                    case t.position.BOTTOM:
                        s = "neb-n";
                        break;
                    case t.position.RIGHT:
                        s = "neb-w";
                        break;
                    case t.position.LEFT:
                        s = "neb-e";
                        break
                    }
                    if (i.addClass(s),
                    a.closeButton !== !0 && i.on(t.events.click, () => {
                        this.removePopover()
                    }
                    ),
                    this.popover = i,
                    this.size = t.utils.hiddenElementSize(i),
                    e.tagName === "TD" || e.tagName === "TH") {
                        let p = r("<div/>").css("display", "inline-block").html(o.html());
                        o.html(p),
                        o = p
                    }
                    this.setPosition(),
                    i.appendTo(r("body")),
                    this.popovered = !0,
                    this._fireEvent("popover-create", {
                        popover: i
                    })
                }
            },
            removePopover: function() {
                let e = this.options.onPopoverHide === t.noop ? 0 : 300
                  , o = this.popover;
                this.popovered && (this._fireEvent("popover-hide", {
                    popover: o
                }),
                setTimeout( () => {
                    o.hide(0, () => {
                        o.remove(),
                        this.popover = null,
                        this.popovered = !1
                    }
                    )
                }
                , e))
            },
            show: function() {
                let e = this.options;
                this.popovered !== !0 && setTimeout( () => {
                    this.createPopover(),
                    this._fireEvent("popover-show", {
                        popover: this.popover
                    }),
                    e.popoverHide > 0 && setTimeout( () => {
                        this.removePopover()
                    }
                    , e.popoverHide)
                }
                , e.popoverTimeout)
            },
            hide: function() {
                this.removePopover()
            },
            changeAttribute: function(e) {
                let o = this.element
                  , a = this.options
                  , i = () => {
                    a.popoverText = o.attr("data-popover-text"),
                    this.popover && (this.popover.find(".popover-content").html(a.popoverText),
                    this.setPosition())
                }
                  , s = () => {
                    a.popoverPosition = o.attr("data-popover-position"),
                    this.setPosition()
                }
                ;
                switch (e) {
                case "data-popover-text":
                    i();
                    break;
                case "data-popover-position":
                    s();
                    break
                }
            },
            destroy: function() {
                let e = this.element, o = this.options, a;
                switch (o.popoverTrigger) {
                case t.popoverEvents.CLICK:
                    a = t.events.click;
                    break;
                case t.popoverEvents.FOCUS:
                    a = t.events.focus;
                    break;
                default:
                    a = t.events.enter
                }
                return e.off(a),
                o.hideOnLeave === !0 && e.off(t.events.leave),
                r(globalThis).off(t.events.scroll, {
                    ns: this.id
                }),
                e
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            progressDeferred: 0,
            showValue: !1,
            showLabel: !1,
            label: "Progress:",
            value: 0,
            buffer: 0,
            type: "bar",
            small: !1,
            segmentSize: 10,
            clsProgress: "",
            clsBack: "",
            clsBar: "",
            clsBuffer: "",
            clsValue: "",
            clsLabel: "",
            clsData: "",
            onValueChange: t.noop,
            onBufferChange: t.noop,
            onComplete: t.noop,
            onBuffered: t.noop,
            onProgressCreate: t.noop
        };
        t.progressSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroProgressSetup != "undefined" && t.progressSetup(globalThis.metroProgressSetup),
        t.Component("progress", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    value: 0,
                    buffer: 0
                }),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.elem
                  , a = this.options;
                typeof a.type == "string" && (a.type = a.type.toLowerCase()),
                e.html("").addClass("progress"),
                this.component = e.wrap("<div>").addClass("progress-component").addClass(a.clsProgress);
                function i() {
                    o.innerHTML = '<div class="bar"></div>'
                }
                function s() {
                    o.innerHTML = `
                    <div class="bar"></div>
                    <div class="buffer"></div>
                `
                }
                function c() {
                    e.addClass("with-load"),
                    o.innerHTML = `
                    <div class="bar"></div>
                    <div class="buffer"></div>
                    <div class="load"></div>
                `
                }
                function d() {
                    e.addClass("line")
                }
                function p() {
                    e.addClass("segments"),
                    e.append('<div class="bar"></div>');
                    let u = e.width()
                      , h = Math.ceil(u / (a.segmentSize || 10));
                    for (let b = 0; b < h; b++)
                        o.innerHTML += `<div class="segment" style="width: ${a.segmentSize}px"></div>`
                }
                switch (a.type) {
                case "buffer":
                    s();
                    break;
                case "load":
                    c();
                    break;
                case "line":
                    d();
                    break;
                case "segment":
                    p();
                    break;
                default:
                    i()
                }
                a.small === !0 && e.addClass("small"),
                e.addClass(a.clsBack),
                e.find(".bar").addClass(a.clsBar),
                e.find(".buffer").addClass(a.clsBuffer);
                let m = r("<div>").addClass("progress-data").addClass(a.clsData).insertBefore(e)
                  , g = r("<div>").addClass("progress-label").addClass(a.clsLabel).html(a.label).appendTo(m)
                  , f = r("<div>").addClass("progress-value").addClass(a.clsLabel).html(a.value).appendTo(m);
                a.showLabel === !1 && g.hide(),
                a.showValue === !1 && f.hide(),
                this.val(a.value),
                this.buff(a.buffer),
                this._fireEvent("progress-create", {
                    element: e
                })
            },
            val: function(e) {
                let o = this.element
                  , a = this.component.find(".progress-value");
                if (e === void 0)
                    return this.value;
                let i = o.find(".bar");
                if (i.length === 0)
                    return !1;
                this.value = Number.parseInt(e, 10),
                i.css("width", `${this.value}%`),
                a.html(`${this.value}%`),
                this._fireEvent("value-change", {
                    val: this.value
                }),
                this.value === 100 && this._fireEvent("complete", {
                    val: this.value
                })
            },
            buff: function(e) {
                let o = this.element;
                if (e === void 0)
                    return this.buffer;
                let a = o.find(".buffer");
                if (a.length === 0)
                    return !1;
                this.buffer = Number.parseInt(e, 10),
                a.css("width", `${this.buffer}%`),
                this._fireEvent("buffer-change", {
                    val: this.buffer
                }),
                this.buffer === 100 && this._fireEvent("buffered", {
                    val: this.buffer
                })
            },
            changeValue: function() {
                this.val(this.element.attr("data-value"))
            },
            changeBuffer: function() {
                this.buff(this.element.attr("data-buffer"))
            },
            changeAttribute: function(e) {
                switch (e) {
                case "data-value":
                    this.changeValue();
                    break;
                case "data-buffer":
                    this.changeBuffer();
                    break
                }
            },
            destroy: function() {
                this.component.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            ratingDeferred: 0,
            label: "",
            static: !1,
            title: null,
            value: 0,
            values: null,
            message: "",
            stars: 5,
            onColor: null,
            offColor: null,
            roundFunc: "round",
            half: !0,
            symbol: "\u2605",
            clsRating: "",
            clsTitle: "",
            clsStars: "",
            clsResult: "",
            clsLabel: "",
            onStarClick: t.noop,
            onRatingCreate: t.noop
        };
        t.ratingSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroRatingSetup != "undefined" && t.ratingSetup(globalThis.metroRatingSetup),
        t.Component("rating", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    value: 0,
                    originValue: 0,
                    values: [],
                    rate: 0,
                    rating: null
                }),
                this
            },
            _create: function() {
                let e = this.element, o = this.options, a;
                if (Number.isNaN(o.value) ? o.value = 0 : o.value = Number.parseFloat(o.value).toFixed(1),
                o.values !== null)
                    Array.isArray(o.values) ? this.values = o.values : typeof o.values == "string" && (this.values = o.values.toArray());
                else
                    for (a = 1; a <= o.stars; a++)
                        this.values.push(a);
                this.originValue = o.value,
                this.value = o.value > 0 && o.roundFunc !== "none" ? Math[o.roundFunc](o.value) : Math.abs(o.value),
                this._createRating(),
                this._createEvents(),
                this._fireEvent("rating-create", {
                    element: e
                })
            },
            _createRating: function() {
                let e = this.element, o = this.options, a, i, s, c = t.sheet, d = o.static ? Math.floor(this.originValue) : this.value, p = e.wrap("<div>").addClass(`rating ${e[0].className}`).addClass(o.clsRating), m = Hooks.useId(p[0]);
                for (e.val(this.value),
                p.attr("id", e.id() ? `rating--${e.id()}` : m),
                i = r("<ul>").addClass("stars").addClass(o.clsStars).appendTo(p),
                a = 1; a <= o.stars; a++)
                    s = r("<li>").attr("data-symbol", o.symbol).data("value", this.values[a - 1]).appendTo(i),
                    a <= d && s.addClass("on");
                if (r("<span>").addClass("result").addClass(o.clsResult).appendTo(p).html(o.message),
                o.offColor !== null && (o.offColor.includes("var(") || Farbe.Routines.isColor(o.offColor)),
                o.onColor !== null && (o.onColor.includes("var(") || Farbe.Routines.isColor(o.onColor)) && (t.utils.addCssRule(c, `#${m} .stars:hover li`, `color: ${o.onColor};`),
                t.utils.addCssRule(c, `#${m} .stars li.on`, `color: ${o.onColor};`),
                t.utils.addCssRule(c, `#${m} .stars li.half::after`, `color: ${o.onColor};`)),
                o.title !== null) {
                    let f = r("<span>").addClass("title").addClass(o.clsTitle).html(o.title);
                    p.prepend(f)
                }
                if (o.static === !0 && (p.addClass("static"),
                o.half === !0)) {
                    let f = Math.round(this.originValue % 1 * 10);
                    f > 0 && f <= 9 && p.find(".stars li.on").last().next("li").addClass(`half half-${f * 10}`)
                }
                if (e[0].className = "",
                o.label) {
                    let f = r("<label>").addClass("label-for-input").addClass(o.clsLabel).html(o.label).insertBefore(p);
                    if (e.attr("id"))
                        f.attr("for", e.attr("id"));
                    else {
                        let u = Hooks.useId(e[0]);
                        f.attr("for", u),
                        e.attr("id", u)
                    }
                    e.attr("dir") === "rtl" && f.addClass("rtl")
                }
                e.is(":disabled") ? this.disable() : this.enable(),
                this.rating = p
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options;
                this.rating.on(t.events.click, ".stars li", function() {
                    if (a.static === !0)
                        return;
                    let s = r(this)
                      , c = s.data("value");
                    s.addClass("scale"),
                    setTimeout( () => {
                        s.removeClass("scale")
                    }
                    , 300),
                    o.val(c).trigger("change"),
                    s.addClass("on"),
                    s.prevAll().addClass("on"),
                    s.nextAll().removeClass("on"),
                    e._fireEvent("star-click", {
                        value: c,
                        star: s[0]
                    })
                })
            },
            val: function(e) {
                let o = this
                  , a = this.element
                  , i = this.options
                  , s = this.rating;
                if (e === void 0)
                    return this.value;
                this.value = e > 0 ? Math[i.roundFunc](e) : 0,
                a.val(this.value).trigger("change");
                let c = s.find(".stars li").removeClass("on");
                return r.each(c, function() {
                    let d = r(this);
                    d.data("value") <= o.value && d.addClass("on")
                }),
                this
            },
            msg: function(e) {
                let o = this.rating;
                if (e !== void 0)
                    return o.find(".result").html(e),
                    this
            },
            static: function(e) {
                let o = this.options
                  , a = this.rating;
                o.static = e,
                e === !0 ? a.addClass("static") : a.removeClass("static")
            },
            changeAttributeStatic: function() {
                let e = this.element
                  , o = JSON.parse(e.attr("data-static")) === !0;
                this.static(o)
            },
            disable: function() {
                this.element.data("disabled", !0),
                this.element.parent().addClass("disabled")
            },
            enable: function() {
                this.element.data("disabled", !1),
                this.element.parent().removeClass("disabled")
            },
            toggleState: function() {
                this.elem.disabled ? this.disable() : this.enable()
            },
            changeAttribute: function(e, o) {
                switch (e) {
                case "value":
                case "data-value":
                    this.val(o);
                    break;
                case "disabled":
                    this.toggleState();
                    break;
                case "data-message":
                    this.msg(o);
                    break;
                case "data-static":
                    this.changeAttributeStatic();
                    break
                }
            },
            destroy: function() {
                let e = this.options
                  , o = this.rating;
                o.off(t.events.click, ".stars li"),
                e.label && o.prev("label").remove(),
                o.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            caption: "",
            url: "",
            searchUrl: "",
            method: "GET",
            limit: 10,
            offset: 0,
            sort: "",
            limitKey: "limit",
            offsetKey: "offset",
            searchKey: "query",
            totalKey: "total",
            dataKey: "data",
            sortKey: "sortBy",
            orderKey: "order",
            shortPagination: !1,
            rows: 10,
            rowsSteps: "10,25,50,100",
            sortRules: "",
            showSearch: !0,
            showOrder: !0,
            showRowsCount: !0,
            template: "",
            clsBody: "",
            clsItem: "",
            clsPagination: "",
            clsSearchBlock: "",
            clsOrderBlock: "",
            clsRowsCountBlock: "",
            onLoad: e => e,
            onDrawRow: t.noop,
            onDrawCell: t.noop,
            onDatasetCreate: t.noop
        };
        t.remoteDatasetSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroRemoteDatasetSetup != "undefined" && t.remoteDatasetSetup(globalThis.metroRemoteDatasetSetup),
        t.Component("remote-dataset", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    data: null,
                    total: 0
                }),
                this
            },
            _create: function() {
                let e = this.options;
                this.offset = e.offset,
                this.rowSteps = e.rowsSteps.toArray(","),
                this.limit = +e.rows,
                this.url = e.url,
                this.search = "";
                let[o,a] = e.sort.toArray(":");
                this.sortField = o,
                this.sortOrder = a,
                this.template = t.utils.exec(e.template),
                this.sortRules = e.sortRules.toArray(",").filter(i => i).map(i => i.toArray(":")),
                this._createStructure(),
                this._createEvents(),
                this._loadData().then( () => {}
                ),
                this._fireEvent("dataset-create")
            },
            _loadData: function(e=!1) {
                return L(this, null, function*() {
                    let o = this.options;
                    if (!this.url)
                        return;
                    let a = `${this.url}?${o.limitKey}=${this.limit}&${o.offsetKey}=${this.offset}`;
                    this.sortField && (a += `&${o.sortKey}=${this.sortField}&${o.orderKey}=${this.sortOrder}`),
                    this.search && (a += `&${o.searchKey}=${this.search}`);
                    let i = yield fetch(a, {
                        method: o.method
                    });
                    i.ok !== !1 && (this.data = t.utils.exec(o.onLoad, [yield i.json()], this),
                    this._createEntries(e))
                })
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options
                  , a = r("<div>").addClass("dataset-entry");
                e.addClass("remote-dataset"),
                e.append(a),
                a.html(`
                <div class="service-block">
                    <div class="search-block ${o.clsSearchBlock} ${o.showSearch ? "" : "hide-block"}">
                        <input name="search" type="text" data-role="input" 
                            data-prepend="${this.strings.label_search}" 
                            data-search-button="true" 
                            />
                    </div>
                   
                    <div class="order-block ${o.clsOrderBlock} ${this.sortRules.length === 0 || o.showOrder === !1 ? "hide-block" : ""}">
                        <select name="sort-order" data-role="select" data-filter="false">
                            ${this.sortRules.map(i => `
                                <option value="${i[0]}:${i[1]}" 
                                        ${i[0] === this.sortField && i[1] === this.sortOrder ? "selected" : ""}
                                        data-icon="${i[3] ? i[3] : ""}"
                                >
                                    ${i[2]}
                                </option>
                            `).join("")}
                        </select>
                    </div>
                   
                    <div class="count-block ${o.clsRowsCountBlock} ${o.showRowsCount ? "" : "hide-block"}">
                        <select name="rows-count" data-role="select" data-prepend="${this.strings.label_rows_count}" data-filter="false">
                            ${this.rowSteps.map(i => `
                                <option value="${i}" ${+i === this.rowsCount ? "selected" : ""}>
                                    ${i}
                                </option>
                            `).join("")}
                        </select>
                    </div>
                </div>
                <div class="dataset-body"></div>
            `),
                this.body = a.find(".dataset-body").addClass(o.clsBody),
                this.loadMore = r("<div>").addClass("dataset-load-more"),
                this.loadMore.html(`
                <button class="button large cycle link load-more-button">
                    <span class="icon">\u27F3</span>
                    ${this.strings.label_load_more}
                </button>
            `).appendTo(e),
                this.pagination = r("<div>").addClass("dataset-pagination"),
                e.append(this.pagination)
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options;
                o.on("click", ".page-link", function() {
                    let s = r(this).parent();
                    if (s.hasClass("service")) {
                        s.hasClass("prev-page") ? (e.offset -= e.limit,
                        e.offset < 0 && (e.offset = 0)) : e.offset += e.limit,
                        e._loadData().then( () => {}
                        );
                        return
                    }
                    e.offset = r(this).data("page") * e.limit - e.limit,
                    e._loadData().then( () => {}
                    )
                });
                let i = Hooks.useDebounce( () => {
                    let s = o.find("input[name=search]").val().trim();
                    if (s === "") {
                        this.search = "",
                        this.url = a.url,
                        this._loadData().then( () => {}
                        );
                        return
                    }
                    s.length < 3 || (this.search = s,
                    this.url = a.searchUrl,
                    this._loadData().then( () => {}
                    ))
                }
                , 300);
                o.on(t.events.inputchange, "input[name=search]", i),
                o.on("change", "select[name=rows-count]", function() {
                    e.limit = +r(this).val(),
                    e.offset = 0,
                    e._loadData().then( () => {}
                    )
                }),
                o.on("change", "select[name=sort-order]", function() {
                    let[s,c] = r(this).val().split(":");
                    e.url = a.url,
                    e.sortField = s,
                    e.sortOrder = c,
                    e.offset = 0,
                    e._loadData().then( () => {}
                    )
                }),
                o.on("click", ".load-more-button", () => {
                    e.offset += e.limit,
                    e._loadData(!0).then( () => {}
                    )
                }
                )
            },
            _createEntries: function(e=!1) {
                let o = this.options;
                if (!this.data)
                    return;
                let a = t.utils.isValue(this.data[o.totalKey]);
                this.entries = this.data[o.dataKey],
                this.total = this.data[o.totalKey],
                e === !1 && this.body.clear(),
                this.entries.forEach( (i, s) => {
                    let c = r("<div>").addClass("dataset-item").addClass(o.clsItem).addClass(s % 2 === 0 ? "even" : "odd")
                      , d = t.utils.exec(o.template, [i], i);
                    c.html(d).appendTo(this.body)
                }
                ),
                a && !o.shortPagination ? t.pagination({
                    length: this.total,
                    rows: this.limit,
                    current: this.offset === 0 ? 1 : Math.round(this.offset / this.limit) + 1,
                    target: this.pagination,
                    clsPagination: o.clsPagination
                }) : this.pagination.html(`
                    <div class="short-pagination">
                        <div class="button service prev-page"><a href="javascript:void(0)" class="page-link">${this.strings.label_prev}</a></div>
                        <div class="button service next-page"><a href="javascript:void(0)" class="page-link">${this.strings.label_next}</a></div>
                    </div>
                `)
            },
            setup: e => {}
            ,
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            caption: "",
            url: "",
            searchUrl: "",
            method: "GET",
            limit: 10,
            offset: 0,
            fields: "",
            sortableFields: "",
            colSize: "",
            sort: "",
            sortOrder: "asc",
            captions: null,
            limitKey: "limit",
            offsetKey: "offset",
            searchKey: "query",
            totalKey: "total",
            dataKey: "data",
            sortKey: "sortBy",
            orderKey: "order",
            shortPagination: !1,
            rows: 10,
            rowsSteps: "10,25,50,100",
            clsTable: "",
            clsPagination: "",
            onLoad: e => e,
            onDrawRow: t.noop,
            onDrawCell: t.noop,
            onDrawHeadCell: t.noop,
            onTableCreate: t.noop
        };
        t.remoteTableSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroRemoteTableSetup != "undefined" && t.remoteTableSetup(globalThis.metroRemoteTableSetup),
        t.Component("remote-table", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    data: null,
                    total: 0
                }),
                this
            },
            _create: function() {
                let e = this.options;
                this.offset = e.offset,
                this.fields = e.fields.toArray(","),
                this.captions = e.captions ? e.captions.toArray(",") : null,
                this.rowSteps = e.rowsSteps.toArray(","),
                this.colSize = e.colSize.toArray(","),
                this.limit = +e.rows,
                this.url = e.url,
                this.search = "",
                this.sortField = e.sort,
                this.sortOrder = e.sortOrder,
                this._createStructure(),
                this._createEvents(),
                this._loadData().then( () => {}
                ),
                this._fireEvent("table-create")
            },
            _loadData: function() {
                return L(this, null, function*() {
                    let e = this.options;
                    if (!this.url)
                        return;
                    let o = `${this.url}?${e.limitKey}=${this.limit}&${e.offsetKey}=${this.offset}`;
                    this.sortField && (o += `&${e.sortKey}=${this.sortField}&${e.orderKey}=${this.sortOrder}`),
                    this.search && (o += `&${e.searchKey}=${this.search}`);
                    let a = yield fetch(o, {
                        method: e.method
                    });
                    a.ok !== !1 && (this.data = t.utils.exec(e.onLoad, [yield a.json()], this),
                    this._createEntries())
                })
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options
                  , a = r("<div>").addClass("table-entry");
                e.addClass("table-component remote-table"),
                e.append(a),
                a.html(`
                <div class="search-block row">
                    <div class="cell-sm-10">
                        <input name="search" type="text" data-role="input" 
                            data-prepend="${this.strings.label_search}" 
                            data-search-button="true" 
                            />
                    </div>
                    <div class="cell-sm-2">
                        <select name="rows-count" data-role="select" data-prepend="${this.strings.label_rows_count}" data-filter="false">
                            ${this.rowSteps.map(i => `<option value="${i}" ${+i === this.rowsCount ? "selected" : ""}>${i}</option>`).join("")}
                        </select>
                    </div>
                </div>
                <table class="table ${o.clsTable}">
                    <caption>${o.caption}</caption>
                    <thead></thead>
                    <tbody></tbody>
                </table>
            `),
                this.header = a.find("thead"),
                this.body = a.find("tbody"),
                this.pagination = r("<div>").addClass("table-pagination"),
                e.append(this.pagination)
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options;
                o.on("click", ".page-link", function() {
                    let s = r(this).parent();
                    if (s.hasClass("service")) {
                        s.hasClass("prev-page") ? (e.offset -= e.limit,
                        e.offset < 0 && (e.offset = 0)) : e.offset += e.limit,
                        e._loadData().then( () => {}
                        );
                        return
                    }
                    e.offset = r(this).data("page") * e.limit - e.limit,
                    e._loadData().then( () => {}
                    )
                });
                let i = Hooks.useDebounce( () => {
                    let s = o.find("input[name=search]").val().trim();
                    if (s === "") {
                        this.search = "",
                        this.url = a.url,
                        this._loadData().then( () => {}
                        );
                        return
                    }
                    s.length < 3 || (this.search = s,
                    this.url = a.searchUrl,
                    this._loadData().then( () => {}
                    ))
                }
                , 300);
                o.on(t.events.inputchange, "input[name=search]", i),
                o.on("change", "select[name=rows-count]", function() {
                    e.limit = +r(this).val(),
                    e.offset = 0,
                    e._loadData().then( () => {}
                    )
                }),
                o.on("click", ".sortable-column", function() {
                    let s = r(this).attr("data-field");
                    e.sortField === s ? e.sortOrder = e.sortOrder === "asc" ? "desc" : "asc" : (e.sortField = s,
                    e.sortOrder = "asc"),
                    e._loadData().then( () => {}
                    )
                })
            },
            _createEntries: function() {
                var s;
                let e = this.options;
                if (!this.data)
                    return;
                let o = t.utils.isValue(this.data[e.totalKey]);
                this.entries = this.data[e.dataKey],
                this.total = this.data[e.totalKey],
                this.header.clear(),
                this.body.clear();
                let a = r("<tr>").addClass("table-header").appendTo(this.header)
                  , i = 0;
                for (let c of Object.keys(this.entries[0])) {
                    if (this.fields.length && !this.fields.includes(c))
                        continue;
                    let d = this.captions ? this.captions[i] : c
                      , p = r("<th>").html(d).attr("data-field", c);
                    (s = e.sortableFields) != null && s.includes(c) && (p.addClass("sortable-column"),
                    this.sortField === c && p.addClass(`sort-${this.sortOrder}`)),
                    p.appendTo(a).addClass(`head-cell-${c}`),
                    this.colSize[i] && p.css("width", this.colSize[i]),
                    t.utils.exec(e.onDrawHeadCell, [p[0], d, c, i, e.sortableFields.includes(c), this.sortField === c, this.sortOrder], this),
                    i++
                }
                this.entries.forEach( (c, d) => {
                    let p = r("<tr>").addClass("table-row");
                    this.body.append(p),
                    t.utils.exec(e.onDrawRow, [p, c, d], this);
                    let m = 0;
                    for (let g in c) {
                        if (this.fields.length && !this.fields.includes(g))
                            continue;
                        let f = r("<td>").attr("data-label", this.captions ? this.captions[m] : g).addClass(`data-cell-${g}`).html(c[g]);
                        p.append(f),
                        t.utils.exec(e.onDrawCell, [f[0], c[g], g, c, d], this),
                        m++
                    }
                }
                ),
                o && !e.shortPagination ? t.pagination({
                    length: this.total,
                    rows: this.limit,
                    current: this.offset === 0 ? 1 : Math.round(this.offset / this.limit) + 1,
                    target: this.pagination,
                    clsPagination: e.clsPagination
                }) : this.pagination.html(`
                    <div class="short-pagination">
                        <div class="button service prev-page"><a href="javascript:void(0)" class="page-link">${this.strings.label_prev}</a></div>
                        <div class="button service next-page"><a href="javascript:void(0)" class="page-link">${this.strings.label_next}</a></div>
                    </div>
                `)
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            resizableDeferred: 0,
            canResize: !0,
            resizeElement: ".resize-element",
            minWidth: 0,
            minHeight: 0,
            maxWidth: 0,
            maxHeight: 0,
            preserveRatio: !1,
            onResizeStart: t.noop,
            onResizeStop: t.noop,
            onResize: t.noop,
            onResizableCreate: t.noop
        };
        t.resizableSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroResizableSetup != "undefined" && t.resizableSetup(globalThis.metroResizableSetup),
        t.Component("resizable", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    resizer: null,
                    id: null
                }),
                this
            },
            _create: function() {
                this.id = Hooks.useId(this.elem),
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("resizable-create")
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options;
                e.data("canResize", !0),
                e.addClass("resizable-element"),
                t.utils.isValue(o.resizeElement) && e.find(o.resizeElement).length > 0 ? this.resizer = e.find(o.resizeElement) : this.resizer = r("<span>").addClass("resize-element").appendTo(e),
                e.data("canResize", o.canResize)
            },
            _createEvents: function() {
                let e = this.element
                  , o = this.options;
                this.resizer.on(t.events.start, a => {
                    if (e.data("canResize") === !1)
                        return;
                    let i = t.utils.pageXY(a)
                      , s = Number.parseInt(e.outerWidth())
                      , c = Number.parseInt(e.outerHeight())
                      , d = {
                        width: s,
                        height: c
                    };
                    e.addClass("stop-pointer"),
                    this._fireEvent("resize-start", {
                        size: d
                    }),
                    r(document).on(t.events.move, p => {
                        let m = t.utils.pageXY(p)
                          , g = {
                            width: s + m.x - i.x,
                            height: c + m.y - i.y
                        };
                        if (o.maxWidth > 0 && g.width > o.maxWidth || o.minWidth > 0 && g.width < o.minWidth || o.maxHeight > 0 && g.height > o.maxHeight || o.minHeight > 0 && g.height < o.minHeight)
                            return !0;
                        e.css(g),
                        this._fireEvent("resize", {
                            size: g
                        })
                    }
                    , {
                        ns: this.id
                    }),
                    r(document).on(t.events.stop, () => {
                        e.removeClass("stop-pointer"),
                        r(document).off(t.events.move, {
                            ns: this.id
                        }),
                        r(document).off(t.events.stop, {
                            ns: this.id
                        });
                        let p = {
                            width: Number.parseInt(e.outerWidth()),
                            height: Number.parseInt(e.outerHeight())
                        };
                        this._fireEvent("resize-stop", {
                            size: p
                        })
                    }
                    , {
                        ns: this.id
                    }),
                    a.preventDefault(),
                    a.stopPropagation()
                }
                )
            },
            off: function() {
                this.element.data("canResize", !1)
            },
            on: function() {
                this.element.data("canResize", !0)
            },
            changeAttribute: function(e) {
                let o = this.element
                  , a = this.options
                  , i = () => {
                    a.canResize = JSON.parse(o.attr("data-can-resize")) === !0
                }
                ;
                switch (e) {
                case "data-can-resize":
                    i();
                    break
                }
            },
            destroy: function() {
                return this.resizer.off(t.events.start),
                this.element
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            resizerDeferred: 0,
            onMediaPoint: t.noop,
            onMediaPointEnter: t.noop,
            onMediaPointLeave: t.noop,
            onWindowResize: t.noop,
            onElementResize: t.noop,
            onResizerCreate: t.noop
        };
        t.resizerSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroResizerSetup != "undefined" && t.resizerSetup(globalThis.metroResizerSetup),
        t.Component("resizer", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    size: {
                        width: 0,
                        height: 0
                    },
                    media: globalThis.METRO_MEDIA,
                    id: null
                }),
                this
            },
            _create: function() {
                let e = this.element;
                this.id = Hooks.useId(this.elem),
                this.size = {
                    width: e.width(),
                    height: e.height()
                },
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("resizer-create", {
                    element: e
                })
            },
            _createStructure: () => {}
            ,
            _createEvents: function() {
                let e = this.element
                  , o = r.window();
                o.on("resize", () => {
                    let a = o.width(), i = o.height(), s = e.width(), c = e.height(), d = this.size, p;
                    this._fireEvent("window-resize", {
                        width: a,
                        height: i,
                        media: globalThis.METRO_MEDIA
                    }),
                    (this.size.width !== s || this.size.height !== c) && (this.size = {
                        width: s,
                        height: c
                    },
                    this._fireEvent("element-resize", {
                        width: s,
                        height: c,
                        oldSize: d,
                        media: globalThis.METRO_MEDIA
                    })),
                    this.media.length !== globalThis.METRO_MEDIA.length && (this.media.length > globalThis.METRO_MEDIA.length ? (p = this.media.filter(m => !globalThis.METRO_MEDIA.includes(m)),
                    this._fireEvent("media-point-leave", {
                        point: p,
                        media: globalThis.METRO_MEDIA
                    })) : (p = globalThis.METRO_MEDIA.filter(m => !this.media.includes(m)),
                    this._fireEvent("media-point-enter", {
                        point: p,
                        media: globalThis.METRO_MEDIA
                    })),
                    this.media = globalThis.METRO_MEDIA,
                    this._fireEvent("media-point", {
                        point: p,
                        media: globalThis.METRO_MEDIA
                    }))
                }
                , {
                    ns: this.id
                })
            },
            changeAttribute: () => {}
            ,
            destroy: function() {
                r(globalThis).off("resize", {
                    ns: this.id
                })
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            ribbonMenuDeferred: 0,
            onStatic: t.noop,
            onBeforeTab: t.noop_true,
            onTab: t.noop,
            onRibbonMenuCreate: t.noop
        };
        t.ribbonMenuSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroRibbonMenuSetup != "undefined" && t.ribbonMenuSetup(globalThis.metroRibbonMenuSetup),
        t.Component("ribbon-menu", {
            init: function(e, o) {
                return this._super(o, e, l),
                this
            },
            _create: function() {
                let e = this.element;
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("ribbon-menu-create", {
                    element: e
                })
            },
            _createStructure: function() {
                let e = this.element;
                e.addClass("ribbon-menu");
                let o = e.find(".ribbon-toggle-group");
                r.each(o, function() {
                    let s = r(this);
                    s.buttongroup({
                        clsActive: "active"
                    });
                    let c = 0
                      , d = s.find(".ribbon-icon-button");
                    r.each(d, function() {
                        let m = r(this).outerWidth(!0);
                        m > c && (c = m)
                    }),
                    s.css("width", c * Math.ceil(d.length / 3) + 4)
                }),
                e.find(".section").addClass("non-active");
                let a = e.find(".tabs-holder li:not(.static)")
                  , i = e.find(".tabs-holder li.active");
                i.length > 0 ? this.open(r(i[0])) : a.length > 0 && this.open(r(a[0])),
                setTimeout( () => {
                    r(window).trigger("resize")
                }
                )
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options
                  , i = o.find(".content-holder").get(0);
                o.on(t.events.click, ".tabs-holder li a", function(s) {
                    let c = r(this)
                      , d = r(this).parent("li");
                    d.hasClass("static") ? a.onStatic === t.noop && c.attr("href") !== void 0 ? document.location.href = c.attr("href") : e._fireEvent("static", {
                        tab: d[0]
                    }) : t.utils.exec(a.onBeforeTab, [d[0]], o[0]) === !0 && e.open(d[0]),
                    r(window).trigger("resize"),
                    s.preventDefault()
                }),
                window.addEventListener("resize", () => {
                    i.clientWidth < i.scrollWidth ? r(i).addClass("scrollable") : r(i).removeClass("scrollable")
                }
                )
            },
            open: function(e) {
                let o = this.element
                  , a = r(e)
                  , i = o.find(".tabs-holder li")
                  , s = o.find(".content-holder .section")
                  , c = a.children("a").attr("href")
                  , d = c !== "#" ? o.find(c) : null;
                s.addClass("non-active"),
                i.removeClass("active"),
                a.addClass("active"),
                s.removeClass("active"),
                d && d.addClass("active").removeClass("non-active"),
                this._fireEvent("tab", {
                    tab: a[0]
                })
            },
            changeAttribute: () => {}
            ,
            destroy: function() {
                let e = this.element;
                e.off(t.events.click, ".tabs-holder li a"),
                e.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            rippleDeferred: 0,
            rippleColor: "#fff",
            rippleAlpha: .4,
            rippleTarget: "default",
            onRippleCreate: t.noop
        };
        t.rippleSetup = o => {
            l = r.extend({}, l, o)
        }
        ,
        typeof globalThis.metroRippleSetup != "undefined" && t.rippleSetup(globalThis.metroRippleSetup);
        let e = (o, a="#fff", i=.4, s=!1) => {
            let c = r(o), d = t.utils.rect(c[0]), p, m;
            if (c.length === 0)
                return;
            c.css("position") === "static" && c.css("position", "relative"),
            c.css({
                overflow: "hidden"
            }),
            r(".ripple").remove();
            let g = Math.max(c.outerWidth(), c.outerHeight())
              , f = r("<span class='ripple'></span>").css({
                width: g,
                height: g
            });
            c.prepend(f),
            s ? (p = s.pageX - c.offset().left - f.width() / 2,
            m = s.pageY - c.offset().top - f.height() / 2) : (p = d.width / 2 - f.width() / 2,
            m = d.height / 2 - f.height() / 2),
            f.css({
                background: Farbe.Routines.toRGBA(Farbe.Routines.parse(a), i),
                width: g,
                height: g,
                top: `${m}px`,
                left: `${p}px`
            }).addClass("rippleEffect"),
            setTimeout( () => {
                f.remove()
            }
            , 400)
        }
        ;
        t.Component("ripple", {
            init: function(o, a) {
                return this._super(a, o, l),
                this
            },
            _create: function() {
                let o = this.element
                  , a = this.options
                  , i = a.rippleTarget === "default" ? null : a.rippleTarget;
                o.on(t.events.click, i, function(s) {
                    e(this, a.rippleColor, a.rippleAlpha, s)
                }),
                this._fireEvent("riopple-create", {
                    element: o
                })
            },
            changeAttribute: function(o) {
                let a = this.element
                  , i = this.options;
                function s() {
                    let d = a.attr("data-ripple-color");
                    Farbe.Routines.isColor(d) && (i.rippleColor = d)
                }
                function c() {
                    let d = +a.attr("data-ripple-alpha");
                    Number.isNaN(d) || (i.rippleColor = d)
                }
                switch (o) {
                case "data-ripple-color":
                    s();
                    break;
                case "data-ripple-alpha":
                    c();
                    break
                }
            },
            destroy: function() {
                let o = this.element
                  , a = this.options
                  , i = a.rippleTarget === "default" ? null : a.rippleTarget;
                o.off(t.events.click, i)
            }
        }),
        t.ripple = e
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            menuScrollbar: !1,
            sidebarDeferred: 0,
            position: "left",
            shift: null,
            staticShift: null,
            toggle: null,
            duration: 300,
            static: null,
            closeOutside: !0,
            onOpen: t.noop,
            onClose: t.noop,
            onToggle: t.noop,
            onStaticSet: t.noop,
            onStaticLoss: t.noop,
            onSidebarCreate: t.noop
        };
        t.sidebarSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroSidebarSetup != "undefined" && t.sidebarSetup(globalThis.metroSidebarSetup),
        t.Component("sidebar", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    toggle_element: null,
                    id: null,
                    shiftedContent: null
                }),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options;
                this.id = e.attr("id") || Hooks.useId(this.elem),
                o.shift && (this.shiftedContent = r(o.shift),
                this.shiftedContent.length !== 0 && t.utils.getStyleOne(this.shiftedContent[0], "position") === "static" && this.shiftedContent.css({
                    position: "relative"
                })),
                this._createStructure(),
                this._createEvents(),
                r(globalThis).resize(),
                this._checkStatic(),
                this._fireEvent("sidebar-create", {
                    element: e
                })
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options
                  , a = e.find(".sidebar-header")
                  , i = t.sheet
                  , s = e.find(".sidebar-menu")
                  , c = e.outerWidth();
                e.addClass("sidebar").addClass(`on-${o.position}`),
                o.menuScrollbar === !1 && s.addClass("hide-scroll"),
                o.toggle !== null && r(o.toggle).length > 0 && (this.toggle_element = r(o.toggle)),
                a.length > 0 && a.data("image") && a.css({
                    backgroundImage: `url(${a.data("image")})`
                }),
                o.static !== null && o.staticShift !== null && (o.position === "left" ? t.utils.addCssRule(i, `@media screen and ${t.media_queries[o.static.toUpperCase()]}`, `${o.staticShift}{margin-left: ${c}px; width: calc(100% - ${c}px);}`) : t.utils.addCssRule(i, `@media screen and ${t.media_queries[o.static.toUpperCase()]}`, `${o.staticShift}{margin-right: ${c}px; width: calc(100% - ${c}px);}`))
            },
            _createEvents: function() {
                let e = this.element
                  , o = this.options
                  , a = this.toggle_element;
                a !== null ? a.on(t.events.click, i => {
                    this.toggle(),
                    i.stopPropagation()
                }
                ) : o.toggle && r.document().on("click", o.toggle, i => {
                    this.toggle(),
                    i.stopPropagation()
                }
                ),
                o.static !== null && t.media_modes.includes(o.static) && r(globalThis).on(t.events.resize, () => {
                    this._checkStatic()
                }
                , {
                    ns: this.id
                }),
                e.on(t.events.click, ".sidebar-menu .js-sidebar-close", i => {
                    this.close(),
                    i.stopPropagation()
                }
                ),
                e.on(t.events.click, i => {
                    i.stopPropagation()
                }
                ),
                r(document).on(t.events.click, () => {
                    o.closeOutside === !0 && this.isOpen() && this.close()
                }
                )
            },
            _checkStatic: function() {
                let e = this.element
                  , o = this.options;
                t.utils.mediaExist(o.static) && !e.hasClass("static") && (e.addClass("static"),
                e.data("opened", !1).removeClass("open"),
                o.shift !== null && r.each(o.shift.split(","), function() {
                    r(this).animate({
                        draw: {
                            left: 0
                        },
                        dur: o.duration
                    })
                }),
                this._fireEvent("static-set")),
                t.utils.mediaExist(o.static) || (e.removeClass("static"),
                this._fireEvent("static-loss"))
            },
            isOpen: function() {
                return this.element.data("opened") === !0
            },
            open: function() {
                let e = this.element
                  , o = this.options;
                e.hasClass("static") || (e.data("opened", !0).addClass("open"),
                o.shift && r(o.shift).animate({
                    draw: {
                        left: [0, e.outerWidth()]
                    },
                    dur: o.duration
                }),
                this._fireEvent("open"))
            },
            close: function() {
                let e = this.element
                  , o = this.options;
                e.hasClass("static") || (e.data("opened", !1).removeClass("open"),
                o.shift !== null && r(o.shift).animate({
                    draw: {
                        left: 0
                    },
                    dur: o.duration
                }),
                this._fireEvent("close"))
            },
            toggle: function() {
                this.isOpen() ? this.close() : this.open(),
                this._fireEvent("toggle")
            },
            changeAttribute: () => {}
            ,
            destroy: function() {
                let e = this.element
                  , o = this.options
                  , a = this.toggle_element;
                return a !== null && a.off(t.events.click),
                o.static !== null && t.media_modes.includes(o.static) && r(globalThis).off(t.events.resize, {
                    ns: this.id
                }),
                e.off(t.events.click, ".js-sidebar-close"),
                e
            }
        }),
        t.sidebar = {
            isSidebar: e => t.utils.isMetroObject(e, "sidebar"),
            open: function(e) {
                this.isSidebar(e) && t.getPlugin(e, "sidebar").open()
            },
            close: function(e) {
                this.isSidebar(e) && t.getPlugin(e, "sidebar").close()
            },
            toggle: function(e) {
                this.isSidebar(e) && t.getPlugin(e, "sidebar").toggle()
            },
            isOpen: function(e) {
                if (this.isSidebar(e))
                    return t.getPlugin(e, "sidebar").isOpen()
            }
        }
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            compacted: !1,
            toggle: null,
            expandPoint: "fs",
            onMenuItemClick: t.noop,
            onCollapse: t.noop,
            onExpand: t.noop,
            onSidenavCreate: t.noop
        };
        t.sidenavCounterSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroSidenavCounterSetup != "undefined" && t.sidenavCounterSetup(globalThis.metroSidenavCounterSetup),
        t.Component("sidenav-counter", {
            init: function(e, o) {
                return this._super(o, e, l, {}),
                this
            },
            _create: function() {
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("sidenav-create")
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options;
                e.addClass("sidenav-counter"),
                t.utils.mediaExist(o.expandPoint) && e.addClass("expanded"),
                t.storage.getItem("sidenav-counter:compacted") === !0 && (e.removeClass("expanded"),
                e.addClass("handmade")),
                e.find("li").each( (s, c) => {
                    let d = r(c);
                    d.title(d.find(".title").text())
                }
                )
            },
            _createEvents: function() {
                let e = this.element
                  , o = this.options;
                o.toggle && r(o.toggle).on("click", () => {
                    e.toggleClass("expanded"),
                    e.toggleClass("handmade"),
                    t.storage.setItem("sidenav-counter:compacted", !e.hasClass("expanded"))
                }
                ),
                r(globalThis).on(t.events.resize, () => {
                    e.hasClass("handmade") || (t.utils.mediaExist(o.expandPoint) ? e.addClass("expanded") : e.removeClass("expanded"))
                }
                , {
                    ns: this.id
                })
            },
            setValue: function(e, o=0) {
                this.element.find("li").eq(e).find(".counter").text(o)
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            compacted: !1,
            toggle: null,
            expandPoint: "fs",
            onMenuItemClick: t.noop,
            onCollapse: t.noop,
            onExpand: t.noop,
            onSidenavCreate: t.noop
        };
        t.sidenavSimpleSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroSidenavSimpleSetup != "undefined" && t.sidenavSimpleSetup(globalThis.metroSidenavSimpleSetup),
        t.Component("sidenav-simple", {
            init: function(e, o) {
                return this._super(o, e, l, {}),
                this
            },
            _create: function() {
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("sidenav-create")
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options;
                e.addClass("sidenav-simple"),
                t.utils.mediaExist(o.expandPoint) && e.addClass("expanded"),
                t.storage.getItem("sidenav-simple:compacted") === !0 && (e.removeClass("expanded"),
                e.addClass("handmade")),
                e.find("li").each( (s, c) => {
                    let d = r(c);
                    d.title(d.find(".title").text())
                }
                )
            },
            _createEvents: function() {
                let e = this.element
                  , o = this.options;
                o.toggle && r(o.toggle).on("click", () => {
                    e.toggleClass("expanded"),
                    e.toggleClass("handmade"),
                    t.storage.setItem("sidenav-simple:compacted", !e.hasClass("expanded"))
                }
                ),
                r(globalThis).on(t.events.resize, () => {
                    e.hasClass("handmade") || (t.utils.mediaExist(o.expandPoint) ? e.addClass("expanded") : e.removeClass("expanded"))
                }
                , {
                    ns: this.id
                })
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            sorterDeferred: 0,
            thousandSeparator: ",",
            decimalSeparator: ",",
            sortTarget: null,
            sortSource: null,
            sortDir: "asc",
            sortStart: !0,
            saveInitial: !0,
            onSortStart: t.noop,
            onSortStop: t.noop,
            onSortItemSwitch: t.noop,
            onSorterCreate: t.noop
        };
        t.sorterSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroSorterSetup != "undefined" && t.sorterSetup(globalThis.metroSorterSetup),
        t.Component("sorter", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    initial: []
                }),
                this
            },
            _create: function() {
                let e = this.element;
                this._createStructure(),
                this._fireEvent("sorter-create", {
                    element: e
                })
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options;
                o.sortTarget === null && (o.sortTarget = e.children()[0].tagName),
                this.initial = e.find(o.sortTarget).get(),
                o.sortStart === !0 && this.sort(o.sortDir)
            },
            _getItemContent: function(e) {
                let o = this.options, a, i, s, c;
                if (t.utils.isValue(o.sortSource)) {
                    if (a = "",
                    i = e.getElementsByClassName(o.sortSource),
                    i.length > 0)
                        for (s = 0; s < i.length; s++)
                            a += i[s].textContent;
                    c = i[0].dataset.format
                } else
                    a = e.textContent,
                    c = e.dataset.format;
                if (a = `${a}`.toLowerCase().replace(/[\n\r]+|[\s]{2,}/g, " ").trim(),
                t.utils.isValue(c))
                    switch (["number", "int", "float", "money"].indexOf(c) !== -1 && (o.thousandSeparator !== "," || o.decimalSeparator !== ".") && (a = t.utils.parseNumber(a, o.thousandSeparator, o.decimalSeparator)),
                    c) {
                    case "date":
                        a = t.utils.isDate(a) ? new Date(a) : "";
                        break;
                    case "number":
                        a = Number(a);
                        break;
                    case "int":
                        a = Number.parseInt(a);
                        break;
                    case "float":
                        a = Number.parseFloat(a);
                        break;
                    case "money":
                        a = t.utils.parseMoney(a);
                        break;
                    case "card":
                        a = t.utils.parseCard(a);
                        break;
                    case "phone":
                        a = t.utils.parsePhone(a);
                        break
                    }
                return a
            },
            sort: function(e) {
                let o = this.element, a = this.options, i, s = t.utils.elementId("temp"), c;
                e && (a.sortDir = e),
                i = o.find(a.sortTarget).get(),
                i.length !== 0 && (c = r("<div>").attr("id", s).insertBefore(r(o.find(a.sortTarget)[0])),
                this._fireEvent("sort-start", {
                    items: i
                }),
                i.sort( (d, p) => {
                    let m = this._getItemContent(d)
                      , g = this._getItemContent(p)
                      , f = 0;
                    return m < g && (f = -1),
                    m > g && (f = 1),
                    f !== 0 && this._fireEvent("sort-item-switch", {
                        a: d,
                        b: p,
                        result: f
                    }),
                    f
                }
                ),
                a.sortDir === "desc" && i.reverse(),
                o.find(a.sortTarget).remove(),
                r.each(i, function() {
                    let d = r(this);
                    d.insertAfter(c),
                    c = d
                }),
                r(`#${s}`).remove(),
                this._fireEvent("sort-stop", {
                    items: i
                }))
            },
            reset: function() {
                let e = this.element, o = this.options, a = t.utils.elementId("sorter"), i, s = this.initial;
                s.length !== 0 && (i = r("<div>").attr("id", a).insertBefore(r(e.find(o.sortTarget)[0])),
                e.find(o.sortTarget).remove(),
                r.each(s, function() {
                    let c = r(this);
                    c.insertAfter(i),
                    i = c
                }),
                r(`#${a}`).remove())
            },
            changeAttribute: function(e) {
                let o = this.element
                  , a = this.options
                  , i = () => {
                    let c = o.attr("data-sort-dir").trim();
                    c !== "" && (a.sortDir = c,
                    this.sort())
                }
                  , s = () => {
                    let c = o.attr("data-sort-content").trim();
                    c !== "" && (a.sortContent = c,
                    this.sort())
                }
                ;
                switch (e) {
                case "data-sort-dir":
                    i();
                    break;
                case "data-sort-content":
                    s();
                    break
                }
            },
            destroy: function() {
                return this.element
            }
        }),
        t.sorter = {
            create: (e, o) => t.utils.$()(e).sorter(o),
            isSorter: e => t.utils.isMetroObject(e, "sorter"),
            sort: function(e, o="asc") {
                if (!this.isSorter(e))
                    return !1;
                t.getPlugin(e, "sorter").sort(o)
            },
            reset: function(e) {
                if (!this.isSorter(e))
                    return !1;
                t.getPlugin(e, "sorter").reset()
            }
        }
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = e => new l.init(e);
        l.prototype = {
            setKey: function(e) {
                this.key = e
            },
            getKey: function() {
                return this.key
            },
            setItem: function(e, o) {
                this.storage.setItem(`${this.key}:${e}`, JSON.stringify(o))
            },
            getItem: function(e, o, a) {
                let i, s;
                s = this.storage.getItem(`${this.key}:${e}`);
                try {
                    i = JSON.parse(s, a)
                } catch (c) {
                    i = null
                }
                return t.utils.nvl(i, o)
            },
            getItemPart: function(e, o, a, i) {
                let s, c = this.getItem(e, a, i), d = o.split("->");
                for (s = 0; s < d.length; s++)
                    c = c[d[s]];
                return c
            },
            delItem: function(e) {
                this.storage.removeItem(`${this.key}:${e}`)
            },
            size: function(e) {
                let o;
                switch (e) {
                case "m":
                case "M":
                    {
                        o = 1024 * 1024;
                        break
                    }
                case "k":
                case "K":
                    {
                        o = 1024;
                        break
                    }
                default:
                    o = 1
                }
                return JSON.stringify(this.storage).length / o
            }
        },
        l.init = function(e) {
            return this.key = "",
            this.storage = e || globalThis.localStorage,
            this
        }
        ,
        l.init.prototype = l.prototype,
        t.storage = l(globalThis.localStorage),
        t.session = l(globalThis.sessionStorage)
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            VERTICAL: "vertical",
            HORIZONTAL: "horizontal"
        }
          , e = t.storage
          , o = {
            splitterDeferred: 0,
            split: l.VERTICAL,
            splitSizes: null,
            gutterSize: 5,
            gutterStyle: "default",
            minSizes: null,
            children: "*",
            gutterClick: "expand",
            saveState: !1,
            noResize: !1,
            onResizeStart: t.noop,
            onResizeStop: t.noop,
            onResizeSplit: t.noop,
            onResizeWindow: t.noop,
            onSplitterCreate: t.noop
        };
        t.splitterSetup = a => {
            o = r.extend({}, o, a)
        }
        ,
        typeof globalThis.metroSplitterSetup != "undefined" && t.splitterSetup(globalThis.metroSplitterSetup),
        t.Component("splitter", {
            init: function(a, i) {
                return this._super(i, a, o, {
                    storage: t.storage,
                    storageKey: "SPLITTER:",
                    id: null
                }),
                this
            },
            _create: function() {
                let a = this.element;
                this.id = Hooks.useId(this.elem),
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("splitter-create", {
                    element: a
                })
            },
            _createStructure: function() {
                let a = this.element, i = this.options, s = a.children(i.children).addClass("split-block"), c, d = [], p = i.split === l.HORIZONTAL ? "height" : "width";
                for (a.addClass("splitter"),
                a.addClass(i.split.toLowerCase() === l.VERTICAL ? "vertical" : "horizontal"),
                i.gutterStyle !== "default" && a.addClass(`gutter-style-${i.gutterStyle}`),
                i.noResize === !0 && a.addClass("static-size"),
                c = 0; c < s.length - 1; c++)
                    r("<div>").addClass("gutter").css(p, i.gutterSize).insertAfter(r(s[c]));
                if (this._setSize(),
                t.utils.isValue(i.minSizes))
                    if (`${i.minSizes}`.includes(","))
                        for (d = i.minSizes.toArray(),
                        c = 0; c < d.length; c++)
                            r(s[c]).data("min-size", d[c]),
                            s[c].style.setProperty(`min-${p}`, `${d[c]}`.includes("%") ? d[c] : `${`${d[c]}`.replace("px", "")}px`, "important");
                    else
                        r.each(s, function() {
                            this.style.setProperty(`min-${p}`, `${i.minSizes}`.includes("%") ? i.minSizes : `${`${i.minSizes}`.replace("px", "")}px`, "important")
                        });
                i.saveState && this.storage !== null && this._getSize()
            },
            _setSize: function() {
                let a = this.element, i = this.options, s, c, d = a.children(".split-block"), p = a.width();
                if (s = a.children(".gutter"),
                !t.utils.isValue(i.splitSizes))
                    d.css({
                        flexBasis: `calc(${100 / d.length}% - ${s.length * i.gutterSize}px)`
                    });
                else {
                    c = `${i.splitSizes}`.toArray();
                    let m = 100
                      , g = 0;
                    for (; g < c.length; g++) {
                        let f = c[g];
                        f.includes("%") ? f = Number.parseInt(f) : f = +f * 100 / p,
                        m -= f,
                        r(d[g]).css({
                            flexBasis: `calc(${f}% - ${s.length * i.gutterSize}px)`
                        })
                    }
                    for (; g < d.length; g++)
                        r(d[g]).css({
                            flexBasis: `calc(${m / (d.length - g)}% - ${s.length * i.gutterSize}px)`
                        })
                }
            },
            _createEvents: function() {
                let a = this
                  , i = this.element
                  , s = this.options
                  , c = i.children(".gutter");
                c.on(t.events.startAll, function(d) {
                    if (s.noResize === !0)
                        return !1;
                    let p = s.split === l.VERTICAL ? i.width() : i.height()
                      , m = r(this)
                      , g = m.prev(".split-block")
                      , f = m.next(".split-block")
                      , u = 100 * (s.split === l.VERTICAL ? g.outerWidth(!0) : g.outerHeight(!0)) / p
                      , h = 100 * (s.split === l.VERTICAL ? f.outerWidth(!0) : f.outerHeight(!0)) / p
                      , b = t.utils.getCursorPosition(i[0], d);
                    m.addClass("active"),
                    g.addClass("stop-pointer"),
                    f.addClass("stop-pointer"),
                    a._fireEvent("resize-start", {
                        pos: b,
                        gutter: m[0],
                        prevBlock: g[0],
                        nextBlock: f[0]
                    }),
                    r(globalThis).on(t.events.moveAll, w => {
                        let Q = t.utils.getCursorPosition(i[0], w), C;
                        s.split === l.VERTICAL ? C = Q.x * 100 / p - b.x * 100 / p : C = Q.y * 100 / p - b.y * 100 / p,
                        g.css("flex-basis", `calc(${u + C}% - ${c.length * s.gutterSize}px)`),
                        f.css("flex-basis", `calc(${h - C}% - ${c.length * s.gutterSize}px)`),
                        a._fireEvent("resize-split", {
                            pos: Q,
                            gutter: m[0],
                            prevBlock: g[0],
                            nextBlock: f[0]
                        })
                    }
                    , {
                        ns: a.id
                    }),
                    r(globalThis).on(t.events.stopAll, w => {
                        g.removeClass("stop-pointer"),
                        f.removeClass("stop-pointer"),
                        a._saveSize(),
                        m.removeClass("active"),
                        r(globalThis).off(t.events.moveAll, {
                            ns: a.id
                        }),
                        r(globalThis).off(t.events.stopAll, {
                            ns: a.id
                        });
                        let Q = t.utils.getCursorPosition(i[0], w);
                        a._fireEvent("resize-stop", {
                            pos: Q,
                            gutter: m[0],
                            prevBlock: g[0],
                            nextBlock: f[0]
                        })
                    }
                    , {
                        ns: a.id
                    })
                }, {
                    passive: !0
                }),
                r(globalThis).on(t.events.resize, () => {
                    let d = i.children(".gutter")
                      , p = d.prev(".split-block")
                      , m = d.next(".split-block");
                    a._fireEvent("resize-window", {
                        prevBlock: p[0],
                        nextBlock: m[0]
                    })
                }
                , {
                    ns: a.id
                })
            },
            _saveSize: function() {
                let a = this.element
                  , i = this.options
                  , s = this.storage
                  , c = []
                  , d = a.attr("id") || this.id;
                console.log(s),
                i.saveState === !0 && s !== null && (r.each(a.children(".split-block"), function() {
                    let p = r(this);
                    c.push(p.css("flex-basis"))
                }),
                s && s.setItem(this.storageKey + d, c))
            },
            _getSize: function() {
                let a = this.element
                  , i = this.options
                  , s = this.storage
                  , c = []
                  , d = a.attr("id") || this.id;
                i.saveState === !0 && s !== null && (c = s.getItem(this.storageKey + d),
                r.each(a.children(".split-block"), (p, m) => {
                    let g = r(m);
                    t.utils.isValue(c) && t.utils.isValue(c[p]) && g.css("flex-basis", c[p])
                }
                ))
            },
            size: function(a) {
                let i = this.options;
                return t.utils.isValue(a) && (i.splitSizes = a,
                this._setSize()),
                this
            },
            changeAttribute: function(a) {
                let i = this
                  , s = this.element;
                function c() {
                    let d = s.attr("data-split-sizes");
                    i.size(d)
                }
                a === "data-split-sizes" && c()
            },
            destroy: function() {
                let a = this.element;
                return a.children(".gutter").off(t.events.start),
                a.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            stepperDeferred: 0,
            view: t.stepperView.SQUARE,
            steps: 3,
            step: 1,
            stepClick: !1,
            clsStepper: "",
            clsStep: "",
            clsComplete: "",
            clsCurrent: "",
            onStep: t.noop,
            onStepClick: t.noop,
            onStepperCreate: t.noop
        };
        t.stepperSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroStepperSetup != "undefined" && t.stepperSetup(globalThis.metroStepperSetup),
        t.Component("stepper", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    current: 0
                }),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options;
                o.step <= 0 && (o.step = 1),
                this._createStepper(),
                this._createEvents(),
                this._fireEvent("stepper-create", {
                    element: e
                })
            },
            _createStepper: function() {
                let e = this.element, o = this.options, a;
                for (e.addClass("stepper").addClass(o.view).addClass(o.clsStepper),
                a = 1; a <= o.steps; a++)
                    r("<span>").addClass("step").addClass(o.clsStep).data("step", a).html(`<span>${a}</span>`).appendTo(e);
                this.current = 1,
                this.toStep(o.step)
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options;
                o.on(t.events.click, ".step", function() {
                    let i = r(this).data("step");
                    a.stepClick === !0 && (e.toStep(i),
                    e._fireEvent("step-click", {
                        step: i
                    }))
                })
            },
            next: function() {
                let o = this.element.find(".step");
                this.current + 1 > o.length || (this.current++,
                this.toStep(this.current))
            },
            prev: function() {
                this.current - 1 !== 0 && (this.current--,
                this.toStep(this.current))
            },
            last: function() {
                let e = this.element;
                this.toStep(e.find(".step").length)
            },
            first: function() {
                this.toStep(1)
            },
            toStep: function(e) {
                let o = this.element
                  , a = this.options
                  , i = r(o.find(".step").get(e - 1))
                  , s = this.current;
                i.length !== 0 && (this.current = e,
                o.find(".step").removeClass("complete current").removeClass(a.clsCurrent).removeClass(a.clsComplete),
                i.addClass("current").addClass(a.clsCurrent),
                i.prevAll().addClass("complete").addClass(a.clsComplete),
                this._fireEvent("step", {
                    step: this.current,
                    prev: s
                }))
            },
            changeAttribute: () => {}
            ,
            destroy: function() {
                let e = this.element;
                e.off(t.events.click, ".step"),
                e.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            streamerDeferred: 0,
            wheel: !0,
            wheelStep: 20,
            duration: 200,
            defaultClosedIcon: "",
            defaultOpenIcon: "",
            changeUri: !0,
            encodeLink: !0,
            closed: !1,
            chromeNotice: !1,
            startFrom: null,
            slideToStart: !0,
            startSlideSleep: 1e3,
            source: null,
            data: null,
            eventClick: "select",
            selectGlobal: !0,
            streamSelect: !1,
            excludeSelectElement: null,
            excludeClickElement: null,
            excludeElement: null,
            excludeSelectClass: "",
            excludeClickClass: "",
            excludeClass: "",
            onDataLoad: t.noop,
            onDataLoaded: t.noop,
            onDataLoadError: t.noop,
            onDrawEvent: t.noop,
            onDrawGlobalEvent: t.noop,
            onDrawStream: t.noop,
            onStreamClick: t.noop,
            onStreamSelect: t.noop,
            onEventClick: t.noop,
            onEventSelect: t.noop,
            onEventsScroll: t.noop,
            onStreamerCreate: t.noop
        };
        t.streamerSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroStreamerSetup != "undefined" && t.streamerSetup(globalThis.metroStreamerSetup),
        t.Component("streamer", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    data: null,
                    scroll: 0,
                    scrollDir: "left",
                    events: null
                }),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options;
                if (e.addClass("streamer"),
                e.attr("id") === void 0 && e.attr("id", Hooks.useId(this.elem)),
                o.source === null && o.data === null)
                    return !1;
                r("<div>").addClass("streams").appendTo(e),
                r("<div>").addClass("events-area").appendTo(e),
                o.source !== null ? (this._fireEvent("data-load", {
                    source: o.source
                }),
                this._loadSource()) : (this.data = o.data,
                this.build())
            },
            _loadSource: function() {
                let e = this.options;
                fetch(e.source).then(t.fetch.status).then(t.fetch.json).then(o => {
                    this._fireEvent("data-loaded", {
                        source: e.source,
                        data: o
                    }),
                    this.data = o,
                    this.build()
                }
                ).catch(o => {
                    this._fireEvent("data-load-error", {
                        source: e.source,
                        error: o
                    })
                }
                )
            },
            build: function() {
                let e = this, o = this.element, a = this.options, i = this.data, s = o.find(".streams").html(""), c = o.find(".events-area").html(""), d, p = r("<ul>").addClass("streamer-timeline").html("").appendTo(c), m = r("<div>").addClass("streamer-events").appendTo(c), g = r("<div>").addClass("event-group").appendTo(m), f = t.utils.getURIParameter(null, "StreamerIDS");
                f !== null && a.encodeLink === !0 && (f = atob(f));
                let u = f ? f.split("|")[0] : null
                  , h = f ? f.split("|")[1].split(",") : [];
                if (i.actions !== void 0) {
                    let xt = r("<div>").addClass("streamer-actions").appendTo(s);
                    r.each(i.actions, function() {
                        let rt = r("<button>").addClass("streamer-action").addClass(this.cls).html(this.html);
                        this.onclick && rt.on(t.events.click, () => {
                            t.utils.exec(this.onclick, [o])
                        }
                        ),
                        rt.appendTo(xt)
                    })
                }
                p.html(""),
                i.timeline === void 0 && (i.timeline = {
                    start: "09:00",
                    stop: "18:00",
                    step: 20
                });
                let b = new Date
                  , w = new Date
                  , Q = i.timeline.start ? i.timeline.start.split(":") : [9, 0]
                  , C = i.timeline.stop ? i.timeline.stop.split(":") : [18, 0]
                  , B = i.timeline.step ? Number.parseInt(i.timeline.step) * 60 : 1200;
                b.setHours(Q[0]),
                b.setMinutes(Q[1]),
                b.setSeconds(0),
                w.setHours(C[0]),
                w.setMinutes(C[1]),
                w.setSeconds(0);
                let x, v, E, k, S, T, $, nt, Z, ft;
                for (x = b.getTime() / 1e3; x <= w.getTime() / 1e3; x += B)
                    for (v = new Date(x * 1e3),
                    E = v.getHours(),
                    S = v.getMinutes(),
                    k = `${Str.lpad(E, "0", 2)}:${Str.lpad(S, "0", 2)}`,
                    nt = r("<li>").data("time", k).addClass(`js-time-point-${k.replace(":", "-")}`).html(`<em>${k}</em>`).appendTo(p),
                    ft = nt.width() / Number.parseInt(i.timeline.step),
                    d = r("<ul>").addClass("streamer-fake-timeline").html("").appendTo(nt),
                    T = 0; T < Number.parseInt(i.timeline.step); T++)
                        $ = S + T,
                        k = `${Str.lpad(E, "0", 2)}:${Str.lpad($, "0", 2)}`,
                        Z = r("<li>").data("time", k).addClass(`js-fake-time-point-${k.replace(":", "-")}`).html("|").appendTo(d),
                        Z.css({
                            width: ft
                        });
                if (i.streams !== void 0 && r.each(i.streams, function(xt, rt) {
                    let Ct = 0
                      , tt = r("<div>").addClass("stream").addClass(this.cls).appendTo(s);
                    tt.addClass(rt.cls).data("one", !1).data("data", rt.data),
                    r("<div>").addClass("stream-title").html(rt.title).appendTo(tt),
                    r("<div>").addClass("stream-secondary").html(rt.secondary).appendTo(tt),
                    r(rt.icon).addClass("stream-icon").appendTo(tt);
                    let It = Farbe.Routines.toHEX(t.utils.getStyleOne(tt, "background-color"))
                      , zt = Farbe.Routines.toHEX(t.utils.getStyleOne(tt, "color"))
                      , lt = r("<div>").addClass("stream-events").data("background-color", It).data("text-color", zt).appendTo(g);
                    if (rt.events !== void 0) {
                        r.each(rt.events, function(Yt, j) {
                            let je = j.row === void 0 ? 1 : Number.parseInt(j.row), H, R = `${xt}:${Yt}`, J = j.custom !== void 0 ? j.custom : "", K = j.custom_open !== void 0 ? j.custom_open : "", P = j.custom_close !== void 0 ? j.custom_close : "", W;
                            if (j.skip !== void 0 && t.utils.bool(j.skip))
                                return;
                            W = r("<div>").data("origin", j).data("sid", R).data("data", j.data).data("time", j.time).data("target", j.target).addClass("stream-event").addClass(`size-${j.size}${["half", "one-third"].includes(j.size) ? "" : "x"}`).addClass(j.cls).appendTo(lt);
                            let ut = p.find(`.js-fake-time-point-${this.time.replace(":", "-")}`).offset().left - lt.offset().left
                              , Et = 75 * (je - 1);
                            if (je > Ct && (Ct = je),
                            W.css({
                                position: "absolute",
                                left: ut,
                                top: Et
                            }),
                            t.utils.isNull(j.html)) {
                                let Re = r("<div>").addClass("stream-event-slide").appendTo(W)
                                  , oo = r("<div>").addClass("slide-logo").appendTo(Re)
                                  , ro = r("<div>").addClass("slide-data").appendTo(Re);
                                j.icon !== void 0 && (t.utils.isTag(j.icon) ? r(j.icon).addClass("icon").appendTo(oo) : r("<img>").addClass("icon").attr("src", j.icon).attr("alt", "").appendTo(oo)),
                                r("<span>").addClass("time").css({
                                    backgroundColor: It,
                                    color: zt
                                }).html(j.time).appendTo(oo),
                                r("<div>").addClass("title").html(j.title).appendTo(ro),
                                r("<div>").addClass("subtitle").html(j.subtitle).appendTo(ro),
                                r("<div>").addClass("desc").html(j.desc).appendTo(ro),
                                (a.closed === !1 && o.attr("id") === u && h.indexOf(R) !== -1 || j.selected === !0 || Number.parseInt(j.selected) === 1) && W.addClass("selected"),
                                a.closed === !0 || j.closed === !0 || Number.parseInt(j.closed) === 1 ? (H = j.closedIcon !== void 0 ? t.utils.isTag(j.closedIcon) ? j.closedIcon : `<span>${j.closedIcon}</span>` : t.utils.isTag(a.defaultClosedIcon) ? a.defaultClosedIcon : `<span>${a.defaultClosedIcon}</span>`,
                                r(H).addClass("state-icon").addClass(j.clsClosedIcon).appendTo(Re),
                                W.data("closed", !0).data("target", j.target),
                                W.append(K)) : (H = j.openIcon !== void 0 ? t.utils.isTag(j.openIcon) ? j.openIcon : `<span>${j.openIcon}</span>` : t.utils.isTag(a.defaultOpenIcon) ? a.defaultOpenIcon : `<span>${a.defaultOpenIcon}</span>`,
                                r(H).addClass("state-icon").addClass(j.clsOpenIcon).appendTo(Re),
                                W.data("closed", !1),
                                W.append(P)),
                                W.append(J)
                            } else
                                W.html(j.html);
                            e._fireEvent("draw-event", {
                                event: W[0]
                            })
                        });
                        let kt = lt.find(".stream-event").last();
                        kt.length > 0 && lt.outerWidth(kt[0].offsetLeft + kt.outerWidth())
                    }
                    lt.css({
                        height: 75 * Ct
                    }),
                    o.find(".stream").eq(lt.index()).css({
                        height: 75 * Ct
                    }),
                    e._fireEvent("draw-stream", {
                        stream: tt[0]
                    })
                }),
                i.global !== void 0) {
                    let xt = m.offset().left;
                    r.each(["before", "after"], (rt, jt) => {
                        i.global[jt] !== void 0 && r.each(i.global[jt], function(Ct, tt) {
                            let It = r("<div>").addClass("event-group").addClass(`size-${tt.size}${["half", "one-third"].includes(tt.size) ? "" : "x"}`)
                              , zt = r("<div>").addClass("stream-events global-stream").appendTo(It)
                              , lt = r("<div>").addClass("stream-event").appendTo(zt);
                            lt.addClass("global-event").addClass(tt.cls).data("time", tt.time).data("origin", tt).data("data", tt.data),
                            r("<div>").addClass("event-title").html(tt.title).appendTo(lt),
                            r("<div>").addClass("event-subtitle").html(tt.subtitle).appendTo(lt),
                            r("<div>").addClass("event-html").html(tt.html).appendTo(lt);
                            let kt, Yt = p.find(`.js-fake-time-point-${this.time.replace(":", "-")}`);
                            Yt.length > 0 && (kt = Yt.offset().left - xt),
                            It.css({
                                position: "absolute",
                                left: kt,
                                height: "100%"
                            }).appendTo(m),
                            e._fireEvent("draw-global-event", {
                                event: lt[0]
                            })
                        })
                    }
                    )
                }
                o.data("stream", -1),
                o.find(".events-area").scrollLeft(0),
                this.events = o.find(".stream-event"),
                this._createEvents(),
                a.startFrom !== null && a.slideToStart === !0 && setTimeout( () => {
                    e.slideTo(a.startFrom)
                }
                , a.startSlideSleep),
                this._fireEvent("streamer-create"),
                this._fireScroll()
            },
            _fireScroll: function() {
                let o = this.element.find(".events-area")
                  , a = this.scroll;
                o.length !== 0 && (this.scrollDir = this.scroll < o[0].scrollLeft ? "left" : "right",
                this.scroll = o[0].scrollLeft,
                this._fireEvent("events-scroll", {
                    scrollLeft: o[0].scrollLeft,
                    oldScroll: a,
                    scrollDir: this.scrollDir,
                    events: r.toArray(this.events)
                }))
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options;
                function i() {
                    let c = globalThis.pageYOffset || document.documentElement.scrollTop
                      , d = globalThis.pageXOffset || document.documentElement.scrollLeft;
                    globalThis.onscroll = () => {
                        globalThis.scrollTo(d, c)
                    }
                }
                function s() {
                    globalThis.onscroll = () => {}
                }
                o.off(t.events.click, ".stream-event").on(t.events.click, ".stream-event", function(c) {
                    let d = r(this);
                    if (!(a.excludeClass !== "" && d.hasClass(a.excludeClass)) && !(a.excludeElement !== null && r(c.target).is(a.excludeElement))) {
                        if (a.closed === !1 && d.data("closed") !== !0 && a.eventClick === "select")
                            a.excludeSelectClass !== "" && d.hasClass(a.excludeSelectClass) || a.excludeSelectElement !== null && r(c.target).is(a.excludeSelectElement) || (d.hasClass("global-event") ? a.selectGlobal === !0 && d.toggleClass("selected") : d.toggleClass("selected"),
                            a.changeUri === !0 && e._changeURI(),
                            e._fireEvent("event-select", {
                                event: d[0],
                                selected: d.hasClass("selected")
                            }));
                        else if (!(a.excludeClickClass !== "" && d.hasClass(a.excludeClickClass))) {
                            if (!(a.excludeClickElement !== null && r(c.target).is(a.excludeClickElement))) {
                                if (e._fireEvent("event-click", {
                                    event: d[0]
                                }),
                                a.closed === !0 || d.data("closed") === !0) {
                                    let p = d.data("target");
                                    p && (globalThis.location.href = p)
                                }
                            }
                        }
                    }
                }),
                o.off(t.events.click, ".stream").on(t.events.click, ".stream", function() {
                    let c = r(this)
                      , d = c.index();
                    a.streamSelect !== !1 && (o.data("stream") === d ? (o.find(".stream-event").removeClass("disabled"),
                    o.data("stream", -1)) : (o.data("stream", d),
                    o.find(".stream-event").addClass("disabled"),
                    e.enableStream(c),
                    e._fireEvent("stream-select", {
                        stream: c
                    })),
                    e._fireEvent("stream-click", {
                        stream: c
                    }))
                }),
                a.wheel === !0 && (o.find(".events-area").off(t.events.mousewheel).on(t.events.mousewheel, function(c) {
                    if (c.deltaY === void 0)
                        return;
                    let d = r(this)
                      , p = c.deltaY > 0 ? -1 : 1
                      , m = a.wheelStep
                      , g = d.scrollLeft() - p * m;
                    d.scrollLeft(g)
                }, {
                    passive: !0
                }),
                o.find(".events-area").off("mouseenter").on("mouseenter", () => {
                    i()
                }
                ),
                o.find(".events-area").off("mouseleave").on("mouseleave", () => {
                    s()
                }
                )),
                o.find(".events-area").last().off("scroll").on("scroll", () => {
                    e._fireScroll()
                }
                ),
                r.touchable === !0 && o.off(t.events.click, ".stream").on(t.events.click, ".stream", function() {
                    let c = r(this);
                    c.toggleClass("focused"),
                    r.each(o.find(".stream"), function() {
                        r(this).is(c) || r(this).removeClass("focused")
                    })
                })
            },
            _changeURI: function() {
                let e = this.getLink();
                history.pushState({}, document.title, e)
            },
            slideTo: function(e) {
                let o = this.element, a = this.options, i;
                e === void 0 ? i = r(o.find(".streamer-timeline li")[0]) : i = r(o.find(`.streamer-timeline .js-time-point-${e.replace(":", "-")}`)[0]),
                o.find(".events-area").animate({
                    draw: {
                        scrollLeft: i[0].offsetLeft - o.find(".streams .stream").outerWidth()
                    },
                    dur: a.duration
                })
            },
            enableStream: function(e) {
                let o = this.element
                  , a = e.index() - 1;
                e.removeClass("disabled").data("streamDisabled", !1),
                o.find(".stream-events").eq(a).find(".stream-event").removeClass("disabled")
            },
            disableStream: function(e) {
                let o = this.element
                  , a = e.index() - 1;
                e.addClass("disabled").data("streamDisabled", !0),
                o.find(".stream-events").eq(a).find(".stream-event").addClass("disabled")
            },
            toggleStream: function(e) {
                e.data("streamDisabled") === !0 ? this.enableStream(e) : this.disableStream(e)
            },
            getLink: function() {
                let e = this.element, o = this.options, a = e.find(".stream-event"), i = [], s, c = globalThis.location.href;
                return r.each(a, function() {
                    let d = r(this);
                    d.data("sid") === void 0 || !d.hasClass("selected") || i.push(d.data("sid"))
                }),
                s = `${e.attr("id")}|${i.join(",")}`,
                o.encodeLink === !0 && (s = btoa(s)),
                t.utils.updateURIParameter(c, "StreamerIDS", s)
            },
            getTimes: function() {
                let o = this.element.find(".streamer-timeline > li")
                  , a = [];
                return r.each(o, function() {
                    a.push(r(this).data("time"))
                }),
                a
            },
            getEvents: function(e, o) {
                let a = this.element, i, s = [];
                switch (e) {
                case "selected":
                    i = a.find(".stream-event.selected");
                    break;
                case "non-selected":
                    i = a.find(".stream-event:not(.selected)");
                    break;
                default:
                    i = a.find(".stream-event")
                }
                return r.each(i, function() {
                    let c = r(this);
                    if (o !== !0 && c.parent().hasClass("global-stream"))
                        return;
                    let d = c.data("origin");
                    s.push(d)
                }),
                s
            },
            source: function(e) {
                let o = this.element;
                if (e === void 0)
                    return this.options.source;
                o.attr("data-source", e),
                this.options.source = e,
                this.changeSource()
            },
            dataSet: function(e) {
                if (e === void 0)
                    return this.options.data;
                this.options.data = e,
                this.changeData(e)
            },
            getStreamerData: function() {
                return this.data
            },
            toggleEvent: function(e) {
                let o = this.options
                  , a = r(e);
                a.hasClass("global-event") && o.selectGlobal !== !0 || (a.hasClass("selected") ? this.selectEvent(e, !1) : this.selectEvent(e, !0))
            },
            selectEvent: function(e, o=!0) {
                let a = this.options
                  , i = r(e);
                i.hasClass("global-event") && a.selectGlobal !== !0 || (o === !0 ? i.addClass("selected") : i.removeClass("selected"),
                a.changeUri === !0 && this._changeURI(),
                this._fireEvent("event-select", {
                    event: i[0],
                    selected: o
                }))
            },
            changeSource: function() {
                let e = this.element
                  , o = this.options
                  , a = e.attr("data-source");
                String(a).trim() !== "" && (o.source = a,
                this._fireEvent("data-load", {
                    source: o.source
                }),
                this._loadSource(),
                this._fireEvent("source-change"))
            },
            changeData: function(e) {
                let o = this.element
                  , a = this.options
                  , i = this.data;
                a.data = typeof e == "object" ? e : JSON.parse(o.attr("data-data")),
                this.data = a.data,
                this.build(),
                this._fireEvent("data-change", {
                    oldData: i,
                    newData: a.data
                })
            },
            changeStreamSelectOption: function() {
                let e = this.element
                  , o = this.options;
                o.streamSelect = e.attr("data-stream-select").toLowerCase() === "true"
            },
            changeAttribute: function(e) {
                switch (e) {
                case "data-source":
                    this.changeSource();
                    break;
                case "data-data":
                    this.changeData();
                    break;
                case "data-stream-select":
                    this.changeStreamSelectOption();
                    break
                }
            },
            destroy: function() {
                let e = this.element;
                e.off(t.events.click, ".stream-event"),
                e.off(t.events.click, ".stream"),
                e.find(".events-area").off(t.events.mousewheel),
                e.find(".events-area").last().off("scroll"),
                e.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            swipeThreshold: 32,
            onSwipe: t.noop,
            onSwipeRight: t.noop,
            onSwipeLeft: t.noop,
            onSwipeUp: t.noop,
            onSwipeDown: t.noop,
            onSwipeCreate: t.noop
        };
        t.swipeSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroSwipeSetup != "undefined" && t.swipeSetup(globalThis.metroSwipeSetup),
        t.Component("swipe", {
            init: function(e, o) {
                return this._super(o, e, l, {}),
                this
            },
            _create: function() {
                this.element.css({
                    userSelect: "none"
                }),
                this._createEvents(),
                this._fireEvent("swipe-create")
            },
            _createEvents: function() {
                let e = this.element
                  , o = this.options;
                e.on("touchstart mousedown", a => {
                    let i = t.utils.pageXY(a)
                      , s = {
                        x: 0,
                        y: 0
                    };
                    e.on("touchmove mousemove", c => {
                        let d = t.utils.pageXY(c);
                        s.x = d.x - i.x,
                        s.y = d.y - i.y
                    }
                    ),
                    e.on("touchend mouseup", c => {
                        let d = "";
                        (Math.abs(s.x) > o.swipeThreshold || Math.abs(s.y) > o.swipeThreshold) && (Math.abs(s.x) > Math.abs(s.y) ? s.x > 0 ? (d = "right",
                        this._fireEvent("swipe-right", {
                            start: i,
                            swipe: s
                        })) : (d = "left",
                        this._fireEvent("swipe-left", {
                            start: i,
                            swipe: s
                        })) : s.y > 0 ? (d = "down",
                        this._fireEvent("swipe-down", {
                            start: i,
                            swipe: s
                        })) : (d = "up",
                        this._fireEvent("swipe-up", {
                            start: i,
                            swipe: s
                        })),
                        this._fireEvent("swipe", {
                            start: i,
                            swipe: s,
                            direction: d
                        })),
                        e.off("touchmove mousemove"),
                        e.off("touchend mouseup")
                    }
                    )
                }
                )
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            switchDeferred: 0,
            material: !1,
            prepend: "",
            append: "",
            clsSwitch: "",
            clsCheck: "",
            clsCaption: "",
            onoff: !1,
            on: "",
            off: "",
            showOnOff: !1,
            onSwitchCreate: t.noop
        };
        t.switchSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroSwitchSetup != "undefined" && t.switchSetup(globalThis.metroSwitchSetup),
        t.Component("switch", {
            init: function(e, o) {
                return this._super(o, e, l, {}),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options
                  , a = this.strings
                  , i = e.wrap("<label>").addClass("switch").addClass(e[0].className).addClass(o.clsSwitch);
                e.attr("type", "checkbox"),
                e.attr("readonly") && e.on("click", s => {
                    s.preventDefault()
                }
                ),
                this.component = i,
                e[0].className = "",
                o.prepend && i.prepend(r("<span>").addClass("caption-prepend").addClass(o.clsPrepend).addClass(o.clsCaption).html(o.prepend)),
                o.append && i.append(r("<span>").addClass("caption-append").addClass(o.clsAppend).addClass(o.clsCaption).html(o.append)),
                o.onoff === !0 ? (e.attr("data-on", o.on || a.label_on),
                e.attr("data-off", o.off || a.label_off)) : (e.removeAttr("data-on"),
                e.removeAttr("data-off")),
                o.material === !0 && i.addClass("material"),
                this._fireEvent("switch-create")
            },
            toggle: function(e) {
                let o = this.element;
                return o.is(":disabled") ? this : (t.utils.isValue(e) ? o.prop("checked", e === 1) : o.prop("checked", !t.utils.bool(o.prop("checked"))),
                this)
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                return this.element
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            splitter: ",",
            variance: 0,
            delay: 100,
            blinkDelay: 400,
            deleteDelay: 800,
            loop: !0,
            cursor: "_",
            colors: "",
            onType: t.noop,
            onTyperCreate: t.noop
        };
        t.typerSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroTyperSetup != "undefined" && t.typerSetup(globalThis.metroTyperSetup),
        t.Component("typer", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    original: null,
                    lines: null,
                    text: null,
                    cursor: null,
                    on: !0,
                    interval: null,
                    colors: null,
                    colorIndex: 0
                }),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options;
                e.addClass("typer"),
                this.original = e.text(),
                this.words = this.original.split(o.splitter).pack(),
                this.colors = o.colors.split(",").pack(),
                this.cursor = r("<span>").addClass("typer-cursor").html(o.cursor).insertAfter(e),
                this.interval = setInterval( () => this._blink(), +o.blinkDelay),
                this.progress = {
                    word: 0,
                    char: 0,
                    building: !0,
                    looped: 0
                },
                e.clear(),
                this.start()
            },
            _blink: function() {
                this.on ? (this.cursor[0].style.opacity = 0,
                this.on = !1) : (this.cursor[0].style.opacity = 1,
                this.on = !0)
            },
            doTyping: function() {
                let e = this.element, o = this.elem, a = this.options, i, s = this.progress, c = s.word, d = s.char, p = [...this.words[c]].slice(0, d).join(""), m = (2 * Math.random() - 1) * a.variance + a.delay;
                this.cursor[0].style.opacity = "1",
                this.on = !0,
                clearInterval(this.interval),
                this.interval = setInterval( () => this._blink(), +a.blinkDelay),
                e.html(p),
                s.building ? (i = s.char === this.words[c].length,
                i ? s.building = !1 : s.char += 1) : s.char === 0 ? (s.building = !0,
                s.word = (s.word + 1) % this.words.length,
                this.colors.length && (this.colorIndex = (this.colorIndex + 1) % this.colors.length,
                o.style.color = this.colors[this.colorIndex])) : s.char -= 1,
                s.word === this.words.length - 1 && (s.looped += 1),
                !s.building && this.loop <= s.looped && (this.typing = !1),
                setTimeout( () => {
                    this.typing && this.doTyping()
                }
                , i ? a.deleteDelay : m)
            },
            start: function() {
                this.typing || (this.typing = !0,
                this.doTyping())
            },
            stop: function() {
                this.typing = !1
            },
            destroy: function() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    var Xn = {
        title: void 0,
        format: void 0,
        formatMask: void 0,
        name: void 0,
        colspan: null,
        size: void 0,
        sortable: !1,
        sortDir: void 0,
        clsColumn: void 0,
        cls: void 0,
        show: !0,
        required: !0,
        field: void 0,
        fieldType: void 0,
        validator: void 0,
        template: void 0,
        type: "data"
    };
    ( (t, r) => {
        "use strict";
        let l = {
            caption: "",
            cardMode: "",
            useCurrentSlice: !1,
            showInspectorButton: !1,
            inspectorButtonIcon: "\u{1F527}",
            tableDeferred: 0,
            templateBeginToken: "<%",
            templateEndToken: "%>",
            paginationDistance: 5,
            paginationIslandSize: 3,
            paginationShortTrack: 10,
            horizontalScroll: !1,
            horizontalScrollStop: null,
            check: !1,
            checkType: "checkbox",
            checkColIndex: 0,
            checkName: null,
            checkStoreKey: "TABLE:$1:KEYS",
            rownum: !1,
            rownumTitle: "#",
            filters: null,
            filtersOperator: "and",
            head: null,
            body: null,
            source: null,
            static: !1,
            searchMinLength: 1,
            searchThreshold: 500,
            searchFields: null,
            showRowsSteps: !0,
            showSearch: !0,
            showTableInfo: !0,
            showPagination: !0,
            paginationShortMode: !0,
            showActivity: !0,
            muteTable: !0,
            showSkip: !1,
            rows: 10,
            rowsSteps: "10,25,50,100",
            staticView: !1,
            viewSaveMode: "client",
            viewSavePath: "TABLE:$1:OPTIONS",
            sortDir: "asc",
            decimalSeparator: ".",
            thousandSeparator: ",",
            tableRowsCountTitle: null,
            tableSearchTitle: null,
            tableSearchPlaceholder: "",
            tableInfoTitle: null,
            paginationPrevTitle: null,
            paginationNextTitle: null,
            allRecordsTitle: null,
            inspectorTitle: null,
            tableSkipTitle: null,
            emptyTableTitle: null,
            activityType: "atom",
            activityStyle: "color",
            activityTimeout: 100,
            searchWrapper: null,
            rowsWrapper: null,
            infoWrapper: null,
            paginationWrapper: null,
            skipWrapper: null,
            cellWrapper: !0,
            clsComponent: "",
            clsTableContainer: "",
            clsTable: "",
            clsHead: "",
            clsHeadRow: "",
            clsHeadCell: "",
            clsBody: "",
            clsBodyRow: "",
            clsBodyCell: "",
            clsCellWrapper: "",
            clsFooter: "",
            clsFooterRow: "",
            clsFooterCell: "",
            clsTableTop: "",
            clsRowsCount: "",
            clsSearch: "",
            clsTableBottom: "",
            clsTableInfo: "",
            clsTablePagination: "",
            clsPagination: "",
            clsTableSkip: "",
            clsTableSkipInput: "",
            clsTableSkipButton: "",
            clsEvenRow: "",
            clsOddRow: "",
            clsRow: "",
            clsEmptyTableTitle: "",
            onDraw: t.noop,
            onDrawRow: t.noop,
            onDrawCell: t.noop,
            onAppendRow: t.noop,
            onAppendCell: t.noop,
            onSortStart: t.noop,
            onSortStop: t.noop,
            onSortItemSwitch: t.noop,
            onSearch: t.noop,
            onRowsCountChange: t.noop,
            onDataLoad: t.noop,
            onDataLoadError: t.noop,
            onDataLoaded: t.noop,
            onDataLoadEnd: t.noop,
            onDataSaveError: t.noop,
            onFilterRowAccepted: t.noop,
            onFilterRowDeclined: t.noop,
            onCheckClick: t.noop,
            onCheckClickAll: t.noop,
            onCheckDraw: t.noop,
            onViewSave: t.noop,
            onViewGet: t.noop,
            onViewCreated: t.noop,
            onTableCreate: t.noop,
            onSkip: t.noop,
            onDrawHead: t.noop,
            onDrawFoot: t.noop,
            onDrawBody: t.noop,
            onInspectorOpen: t.noop,
            onInspectorClose: t.noop,
            onFieldShow: t.noop,
            onFieldHide: t.noop,
            onFieldToggle: t.noop,
            onFieldMove: t.noop,
            onSort: t.noop,
            onPageChange: t.noop,
            onRowClick: t.noop,
            onRowDblClick: t.noop,
            onCellClick: t.noop,
            onCellDblClick: t.noop
        };
        t.tableSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroTableSetup != "undefined" && t.tableSetup(globalThis.metroTableSetup),
        t.Component("table", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    currentPage: 1,
                    pagesCount: 1,
                    searchString: "",
                    data: null,
                    activity: null,
                    loadActivity: null,
                    busy: !1,
                    filters: [],
                    wrapperInfo: null,
                    wrapperSearch: null,
                    wrapperRows: null,
                    wrapperPagination: null,
                    wrapperSkip: null,
                    filterIndex: null,
                    filtersIndexes: [],
                    component: null,
                    inspector: null,
                    view: {},
                    viewDefault: {},
                    input_interval: null,
                    searchFields: [],
                    id: null,
                    sort: {
                        dir: "asc",
                        colIndex: 0
                    },
                    service: [],
                    heads: [],
                    items: [],
                    foots: [],
                    filteredItems: [],
                    currentSlice: [],
                    index: {}
                }),
                this
            },
            _create: function() {
                let e = this.element, o = this.options, a = Hooks.useId(this.elem), i;
                if (e.id() || (console.warn("To use all table component features, please set an ID for the table element!"),
                e.id(a)),
                t.utils.isValue(o.searchFields) && (this.searchFields = o.searchFields.toArray()),
                t.utils.isValue(o.head)) {
                    let d = o.head;
                    o.head = t.utils.isObject(o.head),
                    o.head || (console.warn(`Head ${d} defined but not exists!`),
                    o.head = null)
                }
                if (t.utils.isValue(o.body)) {
                    let d = o.body;
                    o.body = t.utils.isObject(o.body),
                    o.body || (console.warn(`Body ${d} defined but not exists!`),
                    o.body = null)
                }
                o.static === !0 && (o.showPagination = !1,
                o.showRowsSteps = !1,
                o.showSearch = !1,
                o.showTableInfo = !1,
                o.showSkip = !1,
                o.rows = -1);
                let s = r("<div>").addClass("table-component");
                s.insertBefore(e),
                i = r("<div>").addClass("table-container").addClass(o.clsTableContainer).appendTo(s),
                e.appendTo(i),
                o.horizontalScroll === !0 && i.addClass("horizontal-scroll"),
                !t.utils.isNull(o.horizontalScrollStop) && t.utils.mediaExist(o.horizontalScrollStop) && i.removeClass("horizontal-scroll"),
                s.addClass(o.clsComponent),
                this.activity = r("<div>").addClass("table-progress").appendTo(s);
                let c = r("<div>").appendTo(this.activity);
                if (t.makePlugin(c, "activity", {
                    type: o.activityType,
                    style: o.activityStyle
                }),
                o.showActivity !== !0 && this.activity.css({
                    visibility: "hidden"
                }),
                this.component = s[0],
                o.source !== null) {
                    this._fireEvent("data-load", {
                        source: o.source
                    });
                    let d = t.utils.isObject(o.source);
                    d !== !1 && r.isPlainObject(d) ? this._build(d) : this.activity.show( () => {
                        fetch(o.source).then(t.fetch.status).then(t.fetch.json).then(p => {
                            if (this.activity.hide(),
                            typeof p != "object")
                                throw new Error("Data for table is not a object");
                            this._fireEvent("data-loaded", {
                                source: o.source,
                                data: p
                            }),
                            this._build(p)
                        }
                        ).catch(p => {
                            this.activity.hide(),
                            this._fireEvent("data-load-error", {
                                source: o.source,
                                error: p
                            })
                        }
                        )
                    }
                    )
                } else
                    this._build()
            },
            _createIndex: function() {
                let e = this.options.checkColIndex;
                setImmediate( () => {
                    this.items.forEach( (o, a) => {
                        this.index[o[e]] = a
                    }
                    )
                }
                )
            },
            _build: function(e) {
                let o = this.element, a = this.options, i, s = o.attr("id"), c;
                a.rows = +a.rows,
                this.items = [],
                this.heads = [],
                this.foots = [],
                Array.isArray(a.head) && (this.heads = a.head),
                Array.isArray(a.body) && (this.items = a.body),
                t.utils.isValue(e) ? this._createItemsFromJSON(e) : this._createItemsFromHTML(),
                this._createIndex(),
                this.view = this._createView(),
                this.viewDefault = t.utils.objectClone(this.view),
                c = a.viewSavePath.replace("$1", s),
                a.viewSaveMode.toLowerCase() === "client" ? (i = t.storage.getItem(c),
                t.utils.isValue(i) && t.utils.objectLength(i) === t.utils.objectLength(this.view) && (this.view = i,
                this._fireEvent("view-get", {
                    source: "client",
                    view: i
                })),
                this._final()) : fetch(c).then(t.fetch.status).then(t.fetch.json).then(d => {
                    t.utils.isValue(d) && t.utils.objectLength(d) === t.utils.objectLength(this.view) && (this.view = d,
                    this._fireEvent("view-get", {
                        source: "server",
                        view: d
                    })),
                    this._final()
                }
                ).catch(d => {
                    this._final(),
                    console.warn(`Warning! Error loading view for table ${o.attr("id")}: ${d}`)
                }
                )
            },
            _final: function() {
                let e = this.element
                  , o = this.options
                  , a = e.attr("id");
                this._service(),
                this._createStructure(),
                this._createInspector(),
                this._createEvents(),
                this._fireEvent("table-create", {
                    element: e
                })
            },
            _service: function() {
                let e = this.options;
                this.service = [st(V({}, Xn), {
                    title: e.rownumTitle,
                    clsColumn: `rownum-cell ${e.rownum !== !0 ? "d-none" : ""}`,
                    cls: `rownum-cell ${e.rownum !== !0 ? "d-none" : ""}`,
                    type: "rownum"
                }), st(V({}, Xn), {
                    title: e.checkType === "checkbox" ? `<input type='checkbox' data-role='checkbox' class='table-service-check-all' data-style='${e.checkStyle}'>` : "",
                    clsColumn: `check-cell ${e.check !== !0 ? "d-none" : ""}`,
                    cls: `check-cell ${e.check !== !0 ? "d-none" : ""}`,
                    type: "rowcheck"
                })]
            },
            _createView: function() {
                let e = {};
                return r.each(this.heads, function(o) {
                    t.utils.isValue(this.cls) && (this.cls = this.cls.replace("hidden", "")),
                    t.utils.isValue(this.clsColumn) && (this.clsColumn = this.clsColumn.replace("hidden", "")),
                    e[o] = {
                        index: o,
                        "index-view": o,
                        show: t.utils.isValue(this.show) ? this.show : !0,
                        size: t.utils.isValue(this.size) ? this.size : ""
                    }
                }),
                this._fireEvent("view-created", {
                    view: e
                }),
                e
            },
            _createInspectorItems: function(e) {
                let o = this, a = this.options, i, s = [], c, d = this.heads;
                for (e.html(""),
                i = 0; i < d.length; i++)
                    s[i] = null;
                for (r.each(d, function(p) {
                    c = r("<tr>"),
                    c.data("index", p),
                    c.data("index-view", p),
                    r("<td>").html(`<input type='checkbox' data-style='${a.checkStyle}' data-role='checkbox' name='column_show_check[]' value='${p}' ${t.utils.bool(o.view[p].show) ? "checked" : ""}>`).appendTo(c),
                    r("<td>").html(`<div>${this.title}</div>`).appendTo(c),
                    r("<td>").html(`<input type='number' data-role='spinner' name='column_size' value='${o.view[p].size}' data-index='${p}'>`).appendTo(c),
                    r("<td>").html("<button class='button square js-table-inspector-field-up' type='button'>\u2191</button><button class='button square js-table-inspector-field-down' type='button'>\u2193</button>").appendTo(c),
                    s[o.view[p]["index-view"]] = c
                }),
                i = 0; i < d.length; i++)
                    s[i].appendTo(e)
            },
            _createInspector: function() {
                let e = this.options
                  , o = this.strings
                  , a = r("<div data-role='draggable' data-drag-element='.table-inspector-header' data-drag-area='body'>").addClass("table-inspector");
                a.attr("for", this.element.attr("id")),
                r(`<div class='table-inspector-header'>${e.inspectorTitle || o.label_inspector}</div>`).appendTo(a);
                let i = r("<div>").addClass("table-wrap").appendTo(a)
                  , s = r("<table>").addClass("table subcompact")
                  , c = r("<tbody>").appendTo(s);
                s.appendTo(i),
                this._createInspectorItems(c);
                let d = r("<div class='table-inspector-actions'>").appendTo(a);
                r("<button class='button primary js-table-inspector-save' type='button'>").html(o.label_save).appendTo(d),
                r("<button class='button secondary js-table-inspector-reset ml-2 mr-2' type='button'>").html(o.label_reset).appendTo(d),
                r("<button class='button link js-table-inspector-cancel place-right' type='button'>").html(o.label_cancel).appendTo(d),
                a.data("open", !1),
                this.inspector = a,
                r("body").append(a),
                this._createInspectorEvents()
            },
            _resetInspector: function() {
                let o = this.inspector.find("table tbody");
                this._createInspectorItems(o),
                this._createInspectorEvents()
            },
            _createHeadsFromHTML: function() {
                let e = this
                  , a = this.element.find("thead");
                a.length > 0 && r.each(a.find("tr > *"), function() {
                    let i = r(this), s, c;
                    if (i.hasClass("rownum-cell") || i.hasClass("check-cell"))
                        return;
                    t.utils.isValue(i.data("sort-dir")) ? s = i.data("sort-dir") : i.hasClass("sort-asc") ? s = "asc" : i.hasClass("sort-desc") ? s = "desc" : s = void 0,
                    c = i[0].className.replace("sortable-column", ""),
                    c = c.replace("sort-asc", ""),
                    c = c.replace("sort-desc", ""),
                    c = c.replace("hidden", "");
                    let d = {
                        type: "data",
                        title: i.html(),
                        name: t.utils.isValue(i.data("name")) ? i.data("name") : i.text().replace(" ", "_"),
                        sortable: i.hasClass("sortable-column") || t.utils.isValue(i.data("sortable")) && JSON.parse(i.data("sortable")) === !0,
                        sortDir: s,
                        format: t.utils.isValue(i.data("format")) ? i.data("format") : "string",
                        formatMask: t.utils.isValue(i.data("format-mask")) ? i.data("format-mask") : null,
                        clsColumn: t.utils.isValue(i.data("cls-column")) ? i.data("cls-column") : "",
                        cls: c,
                        colspan: i.attr("colspan"),
                        size: t.utils.isValue(i.data("size")) ? i.data("size") : "",
                        show: !(i.hasClass("hidden") || t.utils.isValue(i.data("show")) && JSON.parse(i.data("show")) === !1),
                        required: t.utils.isValue(i.data("required")) ? JSON.parse(i.data("required")) === !0 : !1,
                        field: t.utils.isValue(i.data("field")) ? i.data("field") : "input",
                        fieldType: t.utils.isValue(i.data("field-type")) ? i.data("field-type") : "text",
                        validator: t.utils.isValue(i.data("validator")) ? i.data("validator") : null,
                        template: t.utils.isValue(i.data("template")) ? i.data("template") : null
                    };
                    e.heads.push(d)
                })
            },
            _createFootsFromHTML: function() {
                let e = this
                  , a = this.element.find("tfoot");
                a.length > 0 && r.each(a.find("tr > *"), function() {
                    let i = r(this)
                      , s = {
                        title: i.html(),
                        name: t.utils.isValue(i.data("name")) ? i.data("name") : !1,
                        cls: i[0].className,
                        colspan: i.attr("colspan")
                    };
                    e.foots.push(s)
                })
            },
            _createItemsFromHTML: function() {
                let e = this
                  , a = this.element.find("tbody");
                a.length > 0 && r.each(a.find("tr"), function() {
                    let i = r(this)
                      , s = [];
                    r.each(i.children("td"), function() {
                        let c = r(this);
                        s.push(c.html())
                    }),
                    e.items.push(s)
                }),
                this._createHeadsFromHTML(),
                this._createFootsFromHTML()
            },
            _createItemsFromJSON: function(e) {
                let o = this
                  , a = typeof e == "string" ? JSON.parse(e) : e;
                a.header !== void 0 ? o.heads = a.header : this._createHeadsFromHTML(),
                a.data !== void 0 && r.each(a.data, function() {
                    let i = [];
                    r.each(this, function() {
                        i.push(this)
                    }),
                    o.items.push(i)
                }),
                a.footer !== void 0 ? this.foots = a.footer : this._createFootsFromHTML()
            },
            _createTableHeader: function() {
                let e = this.element, o = this.options, a = e.find("thead"), i, s, c = [], d, p, m = o.staticView ? this._createView() : this.view;
                if (a.length === 0 && (a = r("<thead>"),
                e.prepend(a)),
                a.clear().addClass(o.clsHead),
                o.caption && a.prev("caption").length === 0 && r("<caption>").html(o.caption).insertBefore(a),
                this.heads.length === 0)
                    return a;
                for (i = r("<tr>").addClass(o.clsHeadRow).appendTo(a),
                r.each(this.service, function() {
                    let g = []
                      , f = r("<th>");
                    t.utils.isValue(this.title) && f.html(this.title),
                    t.utils.isValue(this.size) && f.css({
                        width: this.size
                    }),
                    t.utils.isValue(this.cls) && g.push(this.cls),
                    g.push(o.clsHeadCell),
                    f.addClass(g.join(" ")),
                    i.append(f)
                }),
                p = this.heads,
                d = 0; d < p.length; d++)
                    c[d] = null;
                for (r.each(p, function(g) {
                    let f = []
                      , u = r("<th>");
                    u.data("index", g),
                    t.utils.isValue(this.title) && u.html(this.title),
                    t.utils.isValue(this.format) && u.attr("data-format", this.format),
                    t.utils.isValue(this.formatMask) && u.attr("data-format-mask", this.formatMask),
                    t.utils.isValue(this.name) && u.attr("data-name", this.name),
                    t.utils.isValue(this.colspan) && u.attr("colspan", this.colspan),
                    t.utils.isValue(this.size) && u.attr("data-size", this.size),
                    t.utils.isValue(this.sortable) && u.attr("data-sortable", this.sortable),
                    t.utils.isValue(this.sortDir) && u.attr("data-sort-dir", this.sortDir),
                    t.utils.isValue(this.clsColumn) && u.attr("data-cls-column", this.clsColumn),
                    t.utils.isValue(this.cls) && u.attr("data-cls", this.cls),
                    t.utils.isValue(this.show) && u.attr("data-show", this.show),
                    t.utils.isValue(this.required) && u.attr("data-required", this.required),
                    t.utils.isValue(this.field) && u.attr("data-field", this.field),
                    t.utils.isValue(this.fieldType) && u.attr("data-field-type", this.fieldType),
                    t.utils.isValue(this.validator) && u.attr("data-validator", this.validator),
                    t.utils.isValue(this.template) && u.attr("data-template", this.template),
                    t.utils.isValue(m[g].size) && u.css({
                        width: m[g].size
                    }),
                    this.sortable === !0 && (f.push("sortable-column"),
                    t.utils.isValue(this.sortDir) && f.push(`sort-${this.sortDir}`)),
                    t.utils.isValue(this.cls) && r.each(this.cls.toArray(), function() {
                        f.push(this)
                    }),
                    t.utils.bool(m[g].show) === !1 && f.indexOf("hidden") === -1 && f.push("hidden"),
                    f.push(o.clsHeadCell),
                    t.utils.bool(m[g].show) && t.utils.arrayDelete(f, "hidden"),
                    u.addClass(f.join(" ")),
                    c[m[g]["index-view"]] = u
                }),
                d = 0; d < p.length; d++)
                    c[d].appendTo(i);
                this._fireEvent("draw-head", {
                    head: a
                })
            },
            _createTableBody: function() {
                let e, o, a = this.element;
                o = a.find("thead"),
                e = a.find("tbody"),
                e.length === 0 && (e = r("<tbody>").addClass(this.options.clsBody),
                o.length !== 0 ? e.insertAfter(o) : a.append(e)),
                e.clear()
            },
            _createTableFooter: function() {
                let e = this.element, o = this.options, a = e.find("tfoot"), i;
                if (a.length === 0 && (a = r("<tfoot>").appendTo(e)),
                a.clear().addClass(o.clsFooter),
                this.foots.length === 0)
                    return;
                let s = r("<tr>").addClass(o.clsHeadRow).appendTo(a);
                r.each(this.foots, function() {
                    i = r("<th>").appendTo(s),
                    this.title && i.html(this.title),
                    this.name && i.addClass(`foot-column-name-${this.name}`),
                    this.cls && i.addClass(this.cls),
                    t.utils.isValue(this.colspan) && i.attr("colspan", this.colspan),
                    i.appendTo(s)
                }),
                this._fireEvent("draw-foot", {
                    foot: a
                })
            },
            _createTopBlock: function() {
                let e = this.element, o = this.options, a = this.strings, i = r("<div>").addClass("table-top").addClass(o.clsTableTop).insertBefore(e.parent()), s, c;
                s = t.utils.isValue(this.wrapperSearch) ? this.wrapperSearch : r("<div>").addClass("table-search-block").addClass(o.clsSearch).appendTo(i),
                s.addClass(o.clsSearch);
                let d = r("<input>").attr("type", "text").attr("placeholder", o.tableSearchPlaceholder).appendTo(s);
                t.makePlugin(d, "input", {
                    prepend: o.tableSearchTitle || a.label_search
                }),
                o.showSearch !== !0 && s.hide(),
                c = t.utils.isValue(this.wrapperRows) ? this.wrapperRows : r("<div>").addClass("table-rows-block").appendTo(i),
                c.addClass(o.clsRowsCount);
                let p = r("<select>").appendTo(c);
                return r.each(o.rowsSteps.toArray(), function() {
                    let m = Number.parseInt(this)
                      , g = r("<option>").attr("value", m).text(m === -1 ? o.allRecordsTitle || a.label_all : m).appendTo(p);
                    m === Number.parseInt(o.rows) && g.attr("selected", "selected")
                }),
                t.makePlugin(p, "select", {
                    filter: !1,
                    prepend: o.tableRowsCountTitle || a.label_rows_count,
                    onChange: m => {
                        Number.parseInt(m) !== o.rows && (o.rows = m,
                        this.currentPage = 1,
                        this._draw(),
                        this._fireEvent("rows-count-change", {
                            val: m
                        }))
                    }
                }),
                o.showInspectorButton && r("<button>").addClass("button inspector-button").attr("type", "button").html(o.inspectorButtonIcon).insertAfter(c),
                o.showRowsSteps !== !0 && c.hide(),
                i
            },
            _createBottomBlock: function() {
                let e = this.element, o = this.options, a = this.strings, i = r("<div>").addClass("table-bottom").addClass(o.clsTableBottom).insertAfter(e.parent()), s, c, d;
                return s = t.utils.isValue(this.wrapperInfo) ? this.wrapperInfo : r("<div>").addClass("table-info").appendTo(i),
                s.addClass(o.clsTableInfo),
                o.showTableInfo !== !0 && s.hide(),
                c = t.utils.isValue(this.wrapperPagination) ? this.wrapperPagination : r("<div>").addClass("table-pagination").appendTo(i),
                c.addClass(o.clsTablePagination),
                o.showPagination !== !0 && c.hide(),
                d = t.utils.isValue(this.wrapperSkip) ? this.wrapperSkip : r("<div>").appendTo(i),
                d.addClass("table-skip").addClass(o.clsTableSkip),
                r(`<input type='text' data-role='input' placeholder="${a.label_enter_page}">`).addClass("table-skip-input").addClass(o.clsTableSkipInput).appendTo(d),
                r("<button>").addClass("button table-skip-button").addClass(o.clsTableSkipButton).html(o.tableSkipTitle || a.label_goto_page).appendTo(d),
                o.showSkip !== !0 && d.hide(),
                i
            },
            _createStructure: function() {
                let e = this, o = this.element, a = this.options, i, s = r(a.searchWrapper), c = r(a.infoWrapper), d = r(a.rowsWrapper), p = r(a.paginationWrapper), m = r(a.skipWrapper);
                s.length > 0 && (this.wrapperSearch = s),
                c.length > 0 && (this.wrapperInfo = c),
                d.length > 0 && (this.wrapperRows = d),
                p.length > 0 && (this.wrapperPagination = p),
                m.length > 0 && (this.wrapperSkip = m),
                o.addClass(a.clsTable),
                this._createTableHeader(),
                this._createTableBody(),
                this._createTableFooter(),
                this._createTopBlock(),
                this._createBottomBlock();
                let g = !1;
                this.heads.length > 0 && r.each(this.heads, function(u) {
                    !g && ["asc", "desc"].indexOf(this.sortDir) > -1 && (g = !0,
                    e.sort.colIndex = u,
                    e.sort.dir = this.sortDir)
                }),
                g && (i = o.find("thead th"),
                this._resetSortClass(i),
                r(i.get(this.sort.colIndex + e.service.length)).addClass(`sort-${this.sort.dir}`),
                this.sorting());
                let f;
                t.utils.isValue(a.filters) && typeof a.filters == "string" && r.each(a.filters.toArray(), function() {
                    f = t.utils.isFunc(this),
                    f !== !1 && e.filtersIndexes.push(e.addFilter(f))
                }),
                this.currentPage = 1,
                this._draw()
            },
            _resetSortClass: e => {
                r(e).removeClass("sort-asc sort-desc")
            }
            ,
            _createEvents: function() {
                let e = this, o = this.element, a = this.options, i = o.closest(".table-component"), s = i.find(".table-container"), c = i.find(".table-search-block input"), d = a.skipWrapper ? r(a.skipWrapper).find(".table-skip-button") : i.find(".table-skip-button"), p = a.skipWrapper ? r(a.skipWrapper).find(".table-skip-input") : i.find(".table-skip-input"), m, g = o.attr("id");
                i.find(".inspector-button").on(t.events.click, () => {
                    e.toggleInspector()
                }
                ),
                d.on(t.events.click, () => {
                    let b = Number.parseInt(p.val().trim());
                    if (Number.isNaN(b) || b <= 0 || b > e.pagesCount)
                        return p.val(""),
                        !1;
                    p.val(""),
                    e._fireEvent("skip", {
                        skipTo: b,
                        skipFrom: e.currentPage
                    }),
                    e.page(b)
                }
                ),
                r(globalThis).on(t.events.resize, () => {
                    a.horizontalScroll === !0 && (!t.utils.isNull(a.horizontalScrollStop) && t.utils.mediaExist(a.horizontalScrollStop) ? s.removeClass("horizontal-scroll") : s.addClass("horizontal-scroll"))
                }
                , {
                    ns: this.id
                }),
                o.on(t.events.click, ".sortable-column", function() {
                    if (a.muteTable === !0 && o.addClass("disabled"),
                    e.busy)
                        return !1;
                    e.busy = !0;
                    let b = r(this);
                    e.activity.show( () => {
                        setImmediate( () => {
                            e.currentPage = 1,
                            e.sort.colIndex = b.data("index"),
                            !b.hasClass("sort-asc") && !b.hasClass("sort-desc") ? e.sort.dir = a.sortDir : b.hasClass("sort-asc") ? e.sort.dir = "desc" : e.sort.dir = "asc",
                            e._resetSortClass(o.find(".sortable-column")),
                            b.addClass(`sort-${e.sort.dir}`),
                            e.sorting(),
                            e._draw( () => {
                                e.busy = !1,
                                a.muteTable === !0 && o.removeClass("disabled")
                            }
                            ),
                            e._fireEvent("sort", {
                                col: b[0],
                                dir: e.sort.dir
                            })
                        }
                        )
                    }
                    )
                }),
                o.on(t.events.click, ".table-service-check", function() {
                    let b = r(this)
                      , w = b.is(":checked")
                      , Q = `${b.val()}`
                      , C = a.checkStoreKey.replace("$1", g)
                      , B = t.storage
                      , x = B.getItem(C);
                    b.attr("type") === "radio" && (x = []),
                    w ? t.utils.isValue(x) ? Array(x).indexOf(Q) === -1 && x.push(Q) : x = [Q] : t.utils.isValue(x) ? t.utils.arrayDelete(x, Q) : x = [],
                    B.setItem(C, x),
                    e._fireEvent("check-click", {
                        check: this,
                        status: w,
                        data: x
                    })
                }),
                o.on(t.events.click, ".table-service-check-all", function() {
                    let b = r(this).is(":checked"), w = a.checkStoreKey.replace("$1", g), Q = t.storage, C = [], B;
                    a.useCurrentSlice === !0 ? (B = Q.getItem(w, []),
                    b ? r.each(e.currentSlice, function() {
                        B.indexOf(`${this[a.checkColIndex]}`) === -1 && B.push(`${this[a.checkColIndex]}`)
                    }) : r.each(e.currentSlice, function() {
                        let x = `${this[a.checkColIndex]}`;
                        B.indexOf(x) !== -1 && t.utils.arrayDelete(B, x)
                    }),
                    C = B) : b ? r.each(e.filteredItems, function() {
                        C.indexOf(this[a.checkColIndex]) === -1 && C.push(`${this[a.checkColIndex]}`)
                    }) : C = [],
                    Q.setItem(w, C),
                    e._draw(),
                    e._fireEvent("check-click-all", {
                        check: this,
                        status: b,
                        data: C
                    })
                }),
                o.on(t.events.click, "tbody > tr > td", function() {
                    e._fireEvent("cell-click", {
                        cell: this
                    }, !1, !1, this)
                }),
                o.on(t.events.dblclick, "tbody > tr > td", function() {
                    e._fireEvent("cell-dbl-click", {
                        cell: this
                    }, !1, !1, this)
                }),
                o.on(t.events.click, "tbody > tr", function() {
                    e._fireEvent("row-click", {
                        row: this
                    }, !1, !1, this)
                }),
                o.on(t.events.dblclick, "tbody > tr", function() {
                    e._fireEvent("row-dbl-click", {
                        row: this
                    }, !1, !1, this)
                });
                let u = function() {
                    e.searchString = this.value.trim().toLowerCase(),
                    e.currentPage = 1,
                    e._draw()
                };
                u = Hooks.useDebounce(u, a.searchThreshold),
                c.on(t.events.inputchange, u),
                t.utils.isValue(this.wrapperSearch) && (m = this.wrapperSearch.find("input"),
                m.length > 0 && m.on(t.events.inputchange, u));
                function h(b) {
                    let w = r(b)
                      , Q = w.parent();
                    e.filteredItems.length !== 0 && (Q.hasClass("active") || (Q.hasClass("service") ? w.data("page") === "prev" ? (e.currentPage--,
                    e.currentPage === 0 && (e.currentPage = 1)) : (e.currentPage++,
                    e.currentPage > e.pagesCount && (e.currentPage = e.pagesCount)) : e.currentPage = +w.data("page"),
                    e._draw(),
                    e._fireEvent("page-change", {
                        page: e.currentPage
                    })))
                }
                i.on(t.events.click, ".pagination .page-link", function() {
                    h(this)
                }),
                t.utils.isValue(this.wrapperPagination) && this.wrapperPagination.on(t.events.click, ".pagination .page-link", function() {
                    h(this)
                }),
                this._createInspectorEvents(),
                o.on(t.events.click, ".js-table-crud-button", () => {}
                )
            },
            _createInspectorEvents: function() {
                let e = this
                  , o = this.inspector;
                this._removeInspectorEvents(),
                o.on(t.events.click, ".js-table-inspector-field-up", function() {
                    let i = r(this).closest("tr"), s = i.prev("tr"), c = i.data("index"), d;
                    s.length !== 0 && (i.insertBefore(s),
                    i.addClass("flash"),
                    setTimeout( () => {
                        i.removeClass("flash")
                    }
                    , 1e3),
                    d = i.index(),
                    i.data("index-view", d),
                    e.view[c]["index-view"] = d,
                    r.each(i.nextAll(), function() {
                        let p = r(this);
                        d++,
                        p.data("index-view", d),
                        e.view[p.data("index")]["index-view"] = d
                    }),
                    e._fireEvent("field-move", {
                        field: e.heads[c],
                        index: c,
                        direction: "up"
                    }),
                    e._createTableHeader(),
                    e._draw())
                }),
                o.on(t.events.click, ".js-table-inspector-field-down", function() {
                    let i = r(this).closest("tr"), s = i.next("tr"), c = i.data("index"), d;
                    s.length !== 0 && (i.insertAfter(s),
                    i.addClass("flash"),
                    setTimeout( () => {
                        i.removeClass("flash")
                    }
                    , 1e3),
                    d = i.index(),
                    i.data("index-view", d),
                    e.view[c]["index-view"] = d,
                    r.each(i.prevAll(), function() {
                        let p = r(this);
                        d--,
                        p.data("index-view", d),
                        e.view[p.data("index")]["index-view"] = d
                    }),
                    e._fireEvent("field-move", {
                        field: e.heads[c],
                        index: c,
                        direction: "down"
                    }),
                    e._createTableHeader(),
                    e._draw())
                }),
                o.on(t.events.click, "input[type=checkbox]", function() {
                    let a = r(this)
                      , i = a.is(":checked")
                      , s = a.val()
                      , c = ["cls", "clsColumn"];
                    i ? (r.each(c, function() {
                        let d = t.utils.isValue(e.heads[s][this]) ? e.heads[s][this].toArray(" ") : [];
                        t.utils.arrayDelete(d, "hidden"),
                        e.heads[s][this] = d.join(" "),
                        e.view[s].show = !0
                    }),
                    e._fireEvent("field-show", {
                        field: e.heads[s],
                        index: s
                    })) : (r.each(c, function() {
                        let d = t.utils.isValue(e.heads[s][this]) ? e.heads[s][this].toArray(" ") : [];
                        d.indexOf("hidden") === -1 && d.push("hidden"),
                        e.heads[s][this] = d.join(" "),
                        e.view[s].show = !1
                    }),
                    e._fireEvent("field-hide", {
                        field: e.heads[s],
                        index: s
                    })),
                    e._fireEvent("field-toggle", {
                        field: e.heads[s],
                        index: s,
                        status: i
                    }),
                    e._createTableHeader(),
                    e._draw()
                }),
                o.find("input[type=number]").on(t.events.inputchange, function() {
                    let a = r(this)
                      , i = a.attr("data-index")
                      , s = Number.parseInt(a.val());
                    e.view[i].size = s === 0 ? "" : s,
                    e._createTableHeader()
                }),
                o.on(t.events.click, ".js-table-inspector-save", () => {
                    e._saveTableView(),
                    e.openInspector(!1)
                }
                ),
                o.on(t.events.click, ".js-table-inspector-cancel", () => {
                    e.openInspector(!1)
                }
                ),
                o.on(t.events.click, ".js-table-inspector-reset", () => {
                    e.resetView()
                }
                )
            },
            _removeInspectorEvents: function() {
                let e = this.inspector;
                e.off(t.events.click, ".js-table-inspector-field-up"),
                e.off(t.events.click, ".js-table-inspector-field-down"),
                e.off(t.events.click, "input[type=checkbox]"),
                e.off(t.events.click, ".js-table-inspector-save"),
                e.off(t.events.click, ".js-table-inspector-cancel"),
                e.off(t.events.click, ".js-table-inspector-reset"),
                e.off(t.events.inputchange, "input[type=number]")
            },
            _saveTableView: function() {
                let e = this.element
                  , o = this.options
                  , a = this.view
                  , i = e.attr("id")
                  , s = o.viewSavePath.replace("$1", i)
                  , c = t.storage;
                if (o.viewSaveMode.toLowerCase() === "client")
                    c.setItem(s, a),
                    this._fireEvent("view-save", {
                        target: "client",
                        path: o.viewSavePath,
                        view: a
                    });
                else {
                    let d = {
                        id: e.attr("id"),
                        view: a
                    };
                    fetch(s, {
                        method: "POST",
                        body: JSON.stringify(d),
                        header: {
                            "Content-type": "application/json;charset=utf-8"
                        }
                    }).then(t.fetch.status).then(t.fetch.text).then(p => {
                        this._fireEvent("view-save", {
                            target: "server",
                            path: o.viewSavePath,
                            view: a,
                            post_data: d,
                            response: p
                        })
                    }
                    ).catch(p => {
                        this._fireEvent("data-save-error", {
                            source: o.viewSavePath,
                            error: p,
                            post_data: d
                        })
                    }
                    )
                }
            },
            _info: function(e, o, a) {
                let i = this.element, s = this.options, c = this.strings, d = i.closest(".table-component"), p = t.utils.isValue(this.wrapperInfo) ? this.wrapperInfo : d.find(".table-info"), m, g = e, f = o, u = a;
                p.length !== 0 && (f > u && (f = u),
                this.items.length === 0 && (g = f = u = 0),
                m = s.tableInfoTitle || c.label_table_info,
                m = m.replace("$1", g),
                m = m.replace("$2", f),
                m = m.replace("$3", u),
                p.html(m))
            },
            _paging: function(e) {
                let o = this.element
                  , a = this.options
                  , i = this.strings
                  , s = o.closest(".table-component");
                this.pagesCount = Math.ceil(e / a.rows),
                t.pagination({
                    length: e,
                    rows: a.rows,
                    current: this.currentPage,
                    target: t.utils.isValue(this.wrapperPagination) ? this.wrapperPagination : s.find(".table-pagination"),
                    claPagination: a.clsPagination,
                    prevTitle: a.paginationPrevTitle || i.label_prev,
                    nextTitle: a.paginationNextTitle || i.label_next,
                    distance: a.paginationDistance,
                    islandSize: a.paginationIslandSize,
                    shortTrack: a.paginationShortTrack
                })
            },
            _filter: function() {
                let e = this.options, o;
                return t.utils.isValue(this.searchString) && this.searchString.length >= e.searchMinLength || this.filters.length > 0 ? o = this.items.filter(a => {
                    let i = "", s, c, d = 0;
                    if (this.filters.length > 0) {
                        for (s = e.filtersOperator.toLowerCase() === "and",
                        c = 0; c < this.filters.length; c++)
                            t.utils.isNull(this.filters[c]) || (d++,
                            s = e.filtersOperator.toLowerCase() === "and" ? s && t.utils.exec(this.filters[c], [a, this.heads]) : s || t.utils.exec(this.filters[c], [a, this.heads]));
                        d === 0 && (s = !0)
                    } else
                        s = !0;
                    this.searchFields.length > 0 ? r.each(this.heads, (m, g) => {
                        this.searchFields.indexOf(g.name) > -1 && (i += `\u2022${a[m]}`)
                    }
                    ) : i = a.join("\u2022"),
                    i = i.replace(/[\n\r]+|[\s]{2,}/g, " ").trim().toLowerCase();
                    let p = t.utils.isValue(this.searchString) && this.searchString.length >= e.searchMinLength ? ~i.indexOf(this.searchString) : !0;
                    return s = s && p,
                    s ? this._fireEvent("filter-row-accepted", {
                        row: a
                    }) : this._fireEvent("filter-row-declined", {
                        row: a
                    }),
                    s
                }
                ) : o = this.items,
                this._fireEvent("search", {
                    search: this.searchString,
                    items: o
                }),
                this.filteredItems = o,
                o
            },
            _draw: function(e) {
                let o = this, a = this.element, i = this.options, s = this.strings, c = a.find("tbody"), d, p, m, g, f, u, h, b, w = Number.parseInt(i.rows), Q = w === -1 ? 0 : w * (+this.currentPage - 1), C = w === -1 ? this.items.length - 1 : +Q + w - 1, B, x = [], v = t.storage.getItem(i.checkStoreKey.replace("$1", a.attr("id"))), E = i.staticView ? this.viewDefault : this.view;
                if (c.html(""),
                !this.heads.length) {
                    console.warn(`Heads is not defined for table ID ${a.attr("id")}`);
                    return
                }
                if (B = this._filter(),
                this.currentSlice = B.slice(Q, C + 1),
                x = [],
                B.length > 0) {
                    for (d = Q; d <= C; d++)
                        if (u = B[d],
                        h = [],
                        !!t.utils.isValue(u)) {
                            for (m = r("<tr>").addClass(i.clsBodyRow),
                            m.data("original", u),
                            b = d % 2 === 0,
                            g = r("<td>").attr("data-label", "#").attr("aria-label", "#").html(d + 1),
                            o.service[0].clsColumn !== void 0 && g.addClass(o.service[0].clsColumn),
                            g.appendTo(m),
                            g = r("<td>").attr("data-label", "CHK").attr("aria-label", "CHK"),
                            i.checkType === "checkbox" ? f = r(`<input type='checkbox' data-style='${i.checkStyle}' data-role='checkbox' name='${t.utils.isValue(i.checkName) ? i.checkName : "table_row_check"}[]' value='${B[d][i.checkColIndex]}'>`) : f = r(`<input type='radio' data-style='${i.checkStyle}' data-role='radio' name='${t.utils.isValue(i.checkName) ? i.checkName : "table_row_check"}' value='${B[d][i.checkColIndex]}'>`),
                            t.utils.isValue(v) && Array.isArray(v) && v.indexOf(`${B[d][i.checkColIndex]}`) > -1 && (f.prop("checked", !0),
                            x.push(u)),
                            f.addClass("table-service-check"),
                            this._fireEvent("check-draw", {
                                check: f
                            }),
                            f.appendTo(g),
                            o.service[1].clsColumn !== void 0 && g.addClass(o.service[1].clsColumn),
                            g.appendTo(m),
                            p = 0; p < u.length; p++)
                                h[p] = null;
                            for (r.each(u, function(k) {
                                let S = this
                                  , T = r("<td>").attr("data-label", o.heads[k].title).attr("aria-label", o.heads[k].title);
                                t.utils.isValue(o.heads[k].template) && (S = o.heads[k].template.replace(/%VAL%/g, S)),
                                T.html(S),
                                T.addClass(i.clsBodyCell),
                                t.utils.isValue(o.heads[k].clsColumn) && T.addClass(o.heads[k].clsColumn),
                                t.utils.bool(E[k].show) === !1 && T.addClass("hidden"),
                                t.utils.bool(E[k].show) && T.removeClass("hidden"),
                                T.data("original", this),
                                h[E[k]["index-view"]] = T,
                                o._fireEvent("draw-cell", {
                                    td: T,
                                    val: S,
                                    cellIndex: k,
                                    head: o.heads[k],
                                    items: u
                                }),
                                i.cellWrapper === !0 && (S = r("<div>").addClass("data-wrapper").addClass(i.clsCellWrapper).html(T.html()),
                                T.html("").append(S))
                            }),
                            p = 0; p < u.length; p++)
                                h[p].appendTo(m),
                                o._fireEvent("append-cell", {
                                    td: h[p],
                                    tr: m,
                                    index: p
                                });
                            o._fireEvent("draw-row", {
                                tr: m,
                                view: o.view,
                                heads: o.heads,
                                items: u
                            }),
                            m.addClass(i.clsRow).addClass(b ? i.clsEvenRow : i.clsOddRow).appendTo(c),
                            o._fireEvent("append-row", {
                                tr: m
                            })
                        }
                    r(this.component).find(".table-service-check-all input").prop("checked", x.length)
                } else
                    p = 0,
                    r.each(E, function() {
                        this.show && p++
                    }),
                    i.check === !0 && p++,
                    i.rownum === !0 && p++,
                    m = r("<tr>").addClass(i.clsBodyRow).appendTo(c),
                    g = r("<td>").attr("colspan", p).addClass("text-center").html(r("<span>").addClass(i.clsEmptyTableTitle).html(i.emptyTableTitle || s.label_empty)),
                    g.appendTo(m);
                this._info(Q + 1, C + 1, B.length),
                this._paging(B.length),
                this.activity && this.activity.hide(),
                this._fireEvent("draw"),
                e !== void 0 && t.utils.exec(e, null, a[0]),
                this._fireEvent("draw-body", {
                    body: c
                })
            },
            _getItemContent: function(e) {
                var g, f;
                let o = this.options, a = this.locale, i, s = e[this.sort.colIndex], c = this.heads[this.sort.colIndex].format, d = !t.utils.isNull(this.heads) && !t.utils.isNull(this.heads[this.sort.colIndex]) && t.utils.isValue(this.heads[this.sort.colIndex].formatMask) ? this.heads[this.sort.colIndex].formatMask : "%Y-%m-%d", p = (g = this.heads) != null && g[this.sort.colIndex] && this.heads[this.sort.colIndex].thousandSeparator ? this.heads[this.sort.colIndex].thousandSeparator : o.thousandSeparator, m = (f = this.heads) != null && f[this.sort.colIndex] && this.heads[this.sort.colIndex].decimalSeparator ? this.heads[this.sort.colIndex].decimalSeparator : o.decimalSeparator;
                if (i = `${s}`.toLowerCase().replace(/[\n\r]+|[\s]{2,}/g, " ").trim(),
                t.utils.isValue(i) && t.utils.isValue(c))
                    switch (["number", "int", "float", "money"].indexOf(c) !== -1 && (i = t.utils.parseNumber(i, p, m)),
                    c) {
                    case "date":
                        i = d ? Datetime.from(i, d, a) : datetime(i);
                        break;
                    case "number":
                        i = +i;
                        break;
                    case "int":
                        i = Number.parseInt(i);
                        break;
                    case "float":
                        i = Number.parseFloat(i);
                        break;
                    case "money":
                        i = t.utils.parseMoney(i);
                        break;
                    case "card":
                        i = t.utils.parseCard(i);
                        break;
                    case "phone":
                        i = t.utils.parsePhone(i);
                        break
                    }
                return i
            },
            addItem: function(e, o) {
                if (!Array.isArray(e))
                    return console.warn("Item is not an array and can't be added"),
                    this;
                this.items.push(e),
                o !== !1 && this.draw()
            },
            addItems: function(e, o) {
                if (!Array.isArray(e))
                    return console.warn("Items is not an array and can't be added"),
                    this;
                for (let a of e)
                    Array.isArray(a) && this.items.push(a, !1);
                this.draw(),
                o !== !1 && this.draw()
            },
            updateItem: function(e, o, a) {
                let i = this.items[this.index[e]]
                  , s = null;
                return t.utils.isNull(i) ? (console.warn("Item is undefined for update"),
                this) : (Number.isNaN(o) && this.heads.forEach( (c, d) => {
                    c.name === o && (s = d)
                }
                ),
                t.utils.isNull(s) ? (console.warn(`Item is undefined for update. Field ${o} not found in data structure`),
                this) : (i[s] = a,
                this.items[this.index[e]] = i,
                this))
            },
            getItem: function(e) {
                return this.items[this.index[e]]
            },
            deleteItem: function(e, o) {
                let a, i = [], s = t.utils.isFunc(o);
                for (a = 0; a < this.items.length; a++)
                    s ? t.utils.exec(o, [this.items[a][e]]) && i.push(a) : this.items[a][e] === o && i.push(a);
                return this.items = t.utils.arrayDeleteByMultipleKeys(this.items, i),
                this
            },
            deleteItemByName: function(e, o) {
                let a, i, s = [], c = t.utils.isFunc(o);
                for (a = 0; a < this.heads.length; a++)
                    if (this.heads[a].name === e) {
                        i = a;
                        break
                    }
                for (a = 0; a < this.items.length; a++)
                    c ? t.utils.exec(o, [this.items[a][i]]) && s.push(a) : this.items[a][i] === o && s.push(a);
                return this.items = t.utils.arrayDeleteByMultipleKeys(this.items, s),
                this
            },
            draw: function() {
                return this._draw(),
                this
            },
            sorting: function(e) {
                return t.utils.isValue(e) && (this.sort.dir = e),
                this._fireEvent("sort-start", {
                    items: this.items
                }),
                this.items.sort( (o, a) => {
                    let i = this._getItemContent(o)
                      , s = this._getItemContent(a)
                      , c = 0;
                    return i < s && (c = this.sort.dir === "asc" ? -1 : 1),
                    i > s && (c = this.sort.dir === "asc" ? 1 : -1),
                    c !== 0 && this._fireEvent("sort-item-switch", {
                        a: o,
                        b: a,
                        result: c
                    }),
                    c
                }
                ),
                this._fireEvent("sort-stop", {
                    items: this.items
                }),
                this
            },
            search: function(e) {
                return this.searchString = e.trim().toLowerCase(),
                this.currentPage = 1,
                this._draw(),
                this
            },
            _rebuild: function(e) {
                let o = this, a = this.element, i = !1, s;
                this._createIndex(),
                e === !0 && (this.view = this._createView()),
                this._createTableHeader(),
                this._createTableBody(),
                this._createTableFooter(),
                this.heads.length > 0 && r.each(this.heads, function(c) {
                    !i && ["asc", "desc"].indexOf(this.sortDir) > -1 && (i = !0,
                    o.sort.colIndex = c,
                    o.sort.dir = this.sortDir)
                }),
                i && (s = a.find(".sortable-column"),
                this._resetSortClass(s),
                r(s.get(o.sort.colIndex)).addClass(`sort-${o.sort.dir}`),
                this.sorting()),
                o.currentPage = 1,
                o._draw()
            },
            setHeads: function(e) {
                return this.heads = e,
                this
            },
            setHeadItem: function(e, o) {
                let a, i;
                for (a = 0; a < this.heads.length; a++)
                    if (this.heads[a].name === e) {
                        i = a;
                        break
                    }
                return this.heads[i] = o,
                this
            },
            setItems: function(e) {
                return this.items = e,
                this
            },
            setData: function(e) {
                let o = this.options;
                return this.activity.show( () => {
                    this.items = [],
                    this.heads = [],
                    this.foots = [],
                    Array.isArray(o.head) && (this.heads = o.head),
                    Array.isArray(o.body) && (this.items = o.body),
                    this._createItemsFromJSON(e),
                    this._rebuild(!0),
                    this.activity.hide()
                }
                ),
                this
            },
            loadData: function(e, o=!0) {
                let a = this.element
                  , i = this.options;
                a.html(""),
                t.utils.isValue(e) ? (i.source = e,
                this._fireEvent("data-load", {
                    source: i.source
                }),
                this.activity.show( () => {
                    fetch(i.source).then(t.fetch.status).then(t.fetch.json).then(s => {
                        this.activity.hide(),
                        this.items = [],
                        this.heads = [],
                        this.foots = [],
                        this._fireEvent("data-loaded", {
                            source: i.source,
                            data: s
                        }),
                        Array.isArray(i.head) && (this.heads = i.head),
                        Array.isArray(i.body) && (this.items = i.body),
                        this._createItemsFromJSON(s),
                        this._rebuild(o),
                        this._resetInspector(),
                        this._fireEvent("data-load-end", {
                            source: i.source,
                            data: s
                        })
                    }
                    ).catch(s => {
                        this.activity.hide(),
                        this._fireEvent("data-load-error", {
                            source: i.source,
                            error: s
                        })
                    }
                    )
                }
                )) : this._rebuild(o)
            },
            reload: function(e) {
                this.loadData(this.options.source, e)
            },
            clear: function() {
                return this.items = [],
                this.draw()
            },
            next: function() {
                if (this.items.length !== 0) {
                    if (this.currentPage++,
                    this.currentPage > this.pagesCount) {
                        this.currentPage = this.pagesCount;
                        return
                    }
                    return this._draw(),
                    this
                }
            },
            prev: function() {
                if (this.items.length !== 0) {
                    if (this.currentPage--,
                    this.currentPage === 0) {
                        this.currentPage = 1;
                        return
                    }
                    return this._draw(),
                    this
                }
            },
            first: function() {
                if (this.items.length !== 0)
                    return this.currentPage = 1,
                    this._draw(),
                    this
            },
            last: function() {
                if (this.items.length !== 0)
                    return this.currentPage = this.pagesCount,
                    this._draw(),
                    this
            },
            page: function(e) {
                let o = e;
                return o <= 0 && (o = 1),
                o > this.pagesCount && (o = this.pagesCount),
                this.currentPage = o,
                this._draw(),
                this
            },
            addFilter: function(e, o) {
                let a = null, i, s = t.utils.isFunc(e);
                if (s !== !1) {
                    for (i = 0; i < this.filters.length; i++)
                        if (t.utils.isNull(this.filters[i])) {
                            a = i,
                            this.filters[i] = s;
                            break
                        }
                    return t.utils.isNull(a) && (this.filters.push(s),
                    a = this.filters.length - 1),
                    o === !0 && (this.currentPage = 1,
                    this.draw()),
                    a
                }
            },
            removeFilter: function(e, o) {
                return this.filters[e] = null,
                o === !0 && (this.currentPage = 1,
                this.draw()),
                this
            },
            removeFilters: function(e) {
                return this.filters = [],
                e === !0 && (this.currentPage = 1,
                this.draw()),
                this
            },
            getItems: function() {
                return this.items
            },
            getHeads: function() {
                return this.heads
            },
            getView: function() {
                return this.view
            },
            getFilteredItems: function() {
                return this.filteredItems.length > 0 ? this.filteredItems : this.items
            },
            getSelectedItems: function() {
                let e = this.element
                  , o = this.options
                  , a = t.storage.getItem(o.checkStoreKey.replace("$1", e.attr("id")))
                  , i = [];
                return t.utils.isValue(a) ? (r.each(this.items, function() {
                    a.indexOf(`${this[o.checkColIndex]}`) !== -1 && i.push(this)
                }),
                i) : []
            },
            getStoredKeys: function() {
                let e = this.element
                  , o = this.options;
                return t.storage.getItem(o.checkStoreKey.replace("$1", e.attr("id")), [])
            },
            clearSelected: function(e) {
                let o = this.element
                  , a = this.options;
                t.storage.setItem(a.checkStoreKey.replace("$1", o.attr("id")), []),
                o.find("table-service-check-all input").prop("checked", !1),
                e === !0 && this._draw()
            },
            getFilters: function() {
                return this.filters
            },
            getFiltersIndexes: function() {
                return this.filtersIndexes
            },
            openInspector: function(e) {
                let o = this.inspector;
                e ? (o.show(0, () => {
                    o.css({
                        top: (r(globalThis).height() - o.outerHeight(!0)) / 2 + pageYOffset,
                        left: (r(globalThis).width() - o.outerWidth(!0)) / 2 + pageXOffset
                    }).data("open", !0)
                }
                ),
                this._fireEvent("inspector-open", {
                    target: o
                })) : (o.hide().data("open", !1),
                this._fireEvent("inspector-close", {
                    target: o
                }))
            },
            closeInspector: function() {
                this.openInspector(!1)
            },
            toggleInspector: function() {
                this.openInspector(!this.inspector.data("open"))
            },
            resetView: function() {
                this.view = this._createView(),
                this._createTableHeader(),
                this._createTableFooter(),
                this._draw(),
                this._resetInspector(),
                this._saveTableView()
            },
            rebuildIndex: function() {
                this._createIndex()
            },
            getIndex: function() {
                return this.index
            },
            export: function(e, o, a, i) {
                let s = t.export, c = this, d = this.options, p = document.createElement("table"), m = r("<thead>").appendTo(p), g = r("<tbody>").appendTo(p), f, u, h, b = [], w, Q, C, B, x;
                if (typeof s.tableToCSV != "function")
                    return;
                let v = t.utils.isValue(o) ? o.toLowerCase() : "all-filtered"
                  , E = t.utils.isValue(a) ? a : `${element.id() || Hooks.useId()}-export.csv`;
                for (Q = r("<tr>"),
                h = this.heads,
                u = 0; u < h.length; u++)
                    b[u] = null;
                for (r.each(h, function(k) {
                    t.utils.bool(c.view[k].show) !== !1 && (C = r("<th>"),
                    t.utils.isValue(this.title) && C.html(this.title),
                    b[c.view[k]["index-view"]] = C)
                }),
                u = 0; u < h.length; u++)
                    t.utils.isValue(b[u]) && b[u].appendTo(Q);
                switch (Q.appendTo(m),
                v) {
                case "checked":
                    {
                        w = this.getSelectedItems(),
                        B = 0,
                        x = w.length - 1;
                        break
                    }
                case "view":
                    {
                        w = this._filter(),
                        B = Number.parseInt(d.rows) === -1 ? 0 : d.rows * (this.currentPage - 1),
                        x = Number.parseInt(d.rows) === -1 ? w.length - 1 : B + d.rows - 1;
                        break
                    }
                case "all":
                    {
                        w = this.items,
                        B = 0,
                        x = w.length - 1;
                        break
                    }
                default:
                    w = this._filter(),
                    B = 0,
                    x = w.length - 1
                }
                for (f = B; f <= x; f++)
                    if (t.utils.isValue(w[f])) {
                        for (Q = r("<tr>"),
                        h = w[f],
                        u = 0; u < h.length; u++)
                            b[u] = null;
                        for (r.each(h, function(k) {
                            t.utils.bool(c.view[k].show) !== !1 && (C = r("<td>").html(this),
                            b[c.view[k]["index-view"]] = C)
                        }),
                        u = 0; u < h.length; u++)
                            t.utils.isValue(b[u]) && b[u].appendTo(Q);
                        Q.appendTo(g)
                    }
                s.tableToCSV(p, E, i),
                p.remove()
            },
            changeAttribute: function(e) {
                let o = this
                  , a = this.element
                  , i = this.options;
                function s() {
                    i.check = t.utils.bool(a.attr("data-check")),
                    o._service(),
                    o._createTableHeader(),
                    o._draw()
                }
                function c() {
                    i.rownum = t.utils.bool(a.attr("data-rownum")),
                    o._service(),
                    o._createTableHeader(),
                    o._draw()
                }
                switch (e) {
                case "data-check":
                    s();
                    break;
                case "data-rownum":
                    c();
                    break
                }
            },
            destroy: function() {
                let e = this.element
                  , o = e.closest(".table-component")
                  , a = o.find("input")
                  , i = o.find("select");
                if (a.data("input").destroy(),
                i.data("select").destroy(),
                r(globalThis).off(t.events.resize, {
                    ns: this.id
                }),
                e.off(t.events.click, ".sortable-column"),
                e.off(t.events.click, ".table-service-check input"),
                e.off(t.events.click, ".table-service-check-all input"),
                a.off(t.events.inputchange),
                t.utils.isValue(this.wrapperSearch)) {
                    let s = this.wrapperSearch.find("input");
                    s.length > 0 && s.off(t.events.inputchange)
                }
                o.off(t.events.click, ".pagination .page-link"),
                t.utils.isValue(this.wrapperPagination) && this.wrapperPagination.off(t.events.click, ".pagination .page-link"),
                e.off(t.events.click, ".js-table-crud-button"),
                this._removeInspectorEvents(),
                e.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            wheelStep: 20,
            materialTabsDeferred: 0,
            deep: !1,
            fixedTabs: !1,
            duration: 300,
            appBar: !1,
            clsComponent: "",
            clsTabs: "",
            clsTab: "",
            clsTabActive: "",
            clsMarker: "",
            onBeforeTabOpen: t.noop_true,
            onTabOpen: t.noop,
            onTabsScroll: t.noop,
            onTabsCreate: t.noop
        };
        t.materialTabsSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroMaterialTabsSetup != "undefined" && t.materialTabsSetup(globalThis.metroMaterialTabsSetup),
        t.Component("material-tabs", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    marker: null,
                    scroll: 0,
                    scrollDir: "left"
                }),
                this
            },
            _create: function() {
                let e = this.element;
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("tabs-create", {
                    element: e
                })
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options
                  , a = e.find("li")
                  , i = e.find("li.active")
                  , s = r("<div>").addClass("tabs-material-wrapper").addClass(o.clsComponent).insertBefore(e);
                o.appBar === !0 && s.addClass("app-bar-present"),
                o.appBar === "more" && s.addClass("app-bar-present-more"),
                e.appendTo(s),
                e.addClass("tabs-material").addClass(o.clsTabs),
                a.addClass(o.clsTab),
                o.deep === !0 && e.addClass("deep"),
                o.fixedTabs === !0 && e.addClass("fixed-tabs"),
                this.marker = e.find(".tab-marker"),
                this.marker.length === 0 && (this.marker = r("<span>").addClass("tab-marker").addClass(o.clsMarker).appendTo(e)),
                this.openTab(i.length === 0 ? a[0] : i[0])
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options;
                o.on(t.events.click, "li", function(i) {
                    let s = r(this)
                      , c = o.find("li.active")
                      , d = s.index() > c.index()
                      , p = s.children("a").attr("href");
                    if (i.preventDefault(),
                    t.utils.isValue(p) && p[0] === "#") {
                        if (s.hasClass("active") || s.hasClass("disabled") || t.utils.exec(a.onBeforeTabOpen, [s, p, d], this) === !1)
                            return;
                        e.openTab(s, d)
                    }
                }),
                o.on(t.events.scroll, () => {
                    let i = e.scroll;
                    e.scrollDir = e.scroll < o[0].scrollLeft ? "left" : "right",
                    e.scroll = o[0].scrollLeft,
                    e._fireEvent("tabs-scroll", {
                        scrollLeft: o[0].scrollLeft,
                        oldScroll: i,
                        scrollDir: e.scrollDir
                    })
                }
                ),
                o.on(t.events.mousewheel, function(i) {
                    if (i.deltaY === void 0)
                        return;
                    let s = r(this)
                      , c = i.deltaY > 0 ? -1 : 1
                      , d = a.wheelStep
                      , p = s.scrollLeft() - c * d;
                    s.scrollLeft(p)
                }, {
                    passive: !0
                })
            },
            openTab: function(e, o) {
                let a = this.element, i = this.options, s = a.find("li"), c = 52, d, p, m, g, f = r(e);
                r.each(s, function() {
                    let w = r(this).find("a").attr("href");
                    t.utils.isValue(w) && w[0] === "#" && w.length > 1 && r(w).hide()
                });
                let u = a.width();
                m = a.scrollLeft(),
                p = f.position().left;
                let h = f.width()
                  , b = p + h;
                s.removeClass("active").removeClass(i.clsTabActive),
                f.addClass("active").addClass(i.clsTabActive),
                b + c > u + m ? g = m + c * 2 : p < m ? g = p - c * 2 : g = m,
                a.animate({
                    draw: {
                        scrollLeft: g
                    },
                    dur: i.duration
                }),
                this.marker.animate({
                    draw: {
                        left: p,
                        width: h
                    },
                    dur: i.duration
                }),
                d = f.find("a").attr("href"),
                t.utils.isValue(d) && d[0] === "#" && d.length > 1 && r(d).show(),
                this._fireEvent("tab-open", {
                    tab: f[0],
                    target: d,
                    tab_next: o
                })
            },
            open: function(e) {
                let o = this.element
                  , a = o.find("li")
                  , i = o.find("li.active")
                  , s = a.eq(e - 1)
                  , c = a.index(s) > a.index(i);
                this.openTab(s, c)
            },
            changeAttribute: () => {}
            ,
            destroy: function() {
                let e = this.element;
                e.off(t.events.click, "li"),
                e.off(t.events.scroll),
                e.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            autocomplete: null,
            autocompleteUnique: !0,
            autocompleteUrl: null,
            autocompleteUrlMethod: "GET",
            autocompleteUrlKey: null,
            autocompleteDivider: ",",
            autocompleteListHeight: 200,
            label: "",
            size: "normal",
            tagInputDeferred: 0,
            static: !1,
            clearButton: !0,
            clearButtonIcon: "\u274C",
            randomColor: !1,
            maxTags: 0,
            tagSeparator: ",",
            tagTrigger: "Enter, Space, Comma",
            backspace: !0,
            clsComponent: "",
            clsInput: "",
            clsClearButton: "",
            clsTag: "",
            clsTagTitle: "",
            clsTagAction: "",
            clsLabel: "",
            onBeforeTagAdd: t.noop_true,
            onTagAdd: t.noop,
            onBeforeTagRemove: t.noop_true,
            onTagRemove: t.noop,
            onTag: t.noop,
            onClear: t.noop,
            onTagTrigger: t.noop,
            onTagInputCreate: t.noop
        };
        t.tagInputSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroTagInputSetup != "undefined" && t.tagInputSetup(globalThis.metroTagInputSetup),
        t.Component("tag-input", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    values: [],
                    triggers: [],
                    autocomplete: []
                }),
                this
            },
            _create: function() {
                this.triggers = `${this.options.tagTrigger}`.toArray(","),
                (this.triggers.includes("Space") || this.triggers.includes("Spacebar")) && (this.triggers.push(" "),
                this.triggers.push("Spacebar")),
                this.triggers.includes("Comma") && this.triggers.push(","),
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("tag-input-create", {
                    element: this.element
                })
            },
            _createStructure: function() {
                let e = this, o = this.element, a = this.options, i, s, c = o.val().trim();
                if (i = o.wrap("<div>").addClass(`tag-input ${o[0].className}`).addClass(a.clsComponent),
                i.attr("id", Hooks.useId(i[0])),
                o[0].className = "",
                o.addClass("original-input"),
                r("<input type='text'>").addClass("input-wrapper").addClass(a.clsInput).attr("size", 1).appendTo(i),
                a.clearButton !== !1 && !o[0].readOnly && (i.addClass("padding-for-clear"),
                s = r("<button>").addClass("button input-clear-button").attr("tabindex", -1).attr("type", "button").html(a.clearButtonIcon),
                s.appendTo(i)),
                t.utils.isValue(c) && r.each(c.toArray(a.tagSeparator), function() {
                    e._addTag(this)
                }),
                this._addLabel(a.label, i, {
                    className: a.clsLabel,
                    id: i.attr("id"),
                    dir: o.attr("dir")
                }),
                o.is(":disabled") ? this.disable() : this.enable(),
                (a.static === !0 || o.attr("readonly") !== void 0) && i.addClass("static-mode"),
                (!a.autocomplete || !a.autocompleteUrl) && r("<div>").addClass("autocomplete-list").css({
                    maxHeight: a.autocompleteListHeight,
                    display: "none"
                }).appendTo(i),
                a.autocomplete) {
                    let p = t.utils.isObject(a.autocomplete);
                    p !== !1 ? this.autocomplete = p : this.autocomplete = a.autocomplete.toArray(a.autocompleteDivider)
                }
                a.autocompleteUrl && fetch(a.autocompleteUrl, {
                    method: a.autocompleteUrlMethod
                }).then(p => p.text()).then(p => {
                    let m = [];
                    try {
                        m = JSON.parse(p),
                        a.autocompleteUrlKey && (m = m[a.autocompleteUrlKey])
                    } catch (g) {
                        m = p.split(`
`)
                    }
                    e.autocomplete = e.autocomplete.concat(m)
                }
                )
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options
                  , i = o.closest(".tag-input")
                  , s = i.find(".input-wrapper")
                  , c = i.find(".autocomplete-list");
                s.on(t.events.focus, () => {
                    i.addClass("focused")
                }
                ),
                s.on(t.events.blur, () => {
                    i.removeClass("focused")
                }
                ),
                s.on(t.events.inputchange, () => {
                    s.attr("size", Math.ceil(s.val().length / 2) + 2)
                }
                ),
                s.on(t.events.keydown, d => {
                    let p = s.val().trim()
                      , m = d.key;
                    if (m === "Enter" && d.preventDefault(),
                    a.backspace === !0 && m === "Backspace" && p.length === 0) {
                        e.values.length > 0 && (e.values.splice(-1, 1),
                        o.siblings(".tag").last().remove(),
                        o.val(e.values.join(a.tagSeparator)));
                        return
                    }
                    p !== "" && e.triggers.includes(m) && (e._fireEvent("tag-trigger", {
                        key: m
                    }),
                    s.val(""),
                    e._addTag(p),
                    s.attr("size", 1))
                }
                ),
                s.on(t.events.keyup, d => {
                    let p = s.val()
                      , m = d.key;
                    e.triggers.includes(m) && p[p.length - 1] === m && s.val(p.slice(0, -1))
                }
                ),
                i.on(t.events.click, ".tag .action", function() {
                    let d = r(this).closest(".tag");
                    e._delTag(d)
                }),
                i.on(t.events.click, () => {
                    s.focus()
                }
                ),
                i.on(t.events.click, ".input-clear-button", () => {
                    let d = o.val();
                    e.clear(),
                    e._fireEvent("clear", {
                        val: d
                    })
                }
                ),
                s.on(t.events.input, function() {
                    let d = this.value.toLowerCase();
                    e._drawAutocompleteList(d)
                }),
                i.on(t.events.click, ".autocomplete-list .item", function() {
                    let d = r(this).attr("data-autocomplete-value");
                    s.val(""),
                    e._addTag(d),
                    s.attr("size", 1),
                    c.css({
                        display: "none"
                    }),
                    e._fireEvent("autocomplete-select", {
                        value: d
                    })
                })
            },
            _drawAutocompleteList: function(e) {
                let o = this
                  , a = this.element
                  , i = this.options
                  , s = a.closest(".tag-input")
                  , c = s.find(".input-wrapper")
                  , d = s.find(".autocomplete-list");
                if (d.length === 0)
                    return;
                d.html("");
                let p = this.autocomplete.filter(m => m.toLowerCase().indexOf(e) > -1);
                d.css({
                    display: p.length > 0 ? "block" : "none",
                    left: c.position().left
                }),
                r.each(p, function() {
                    if (i.autocompleteUnique && o.values.indexOf(this) !== -1)
                        return;
                    let m = this.toLowerCase().indexOf(e), g, f = r("<div>").addClass("item").attr("data-autocomplete-value", this);
                    m === 0 ? g = `<strong>${this.substring(0, e.length)}</strong>${this.substring(e.length)}` : g = `${this.substring(0, m)}<strong>${this.substring(m, e.length)}</strong>${this.substring(m + e.length)}`,
                    f.html(g).appendTo(d),
                    o._fireEvent("draw-autocomplete-item", {
                        item: f
                    })
                })
            },
            _addTag: function(e) {
                let o = this.element, a = this.options, i = o.closest(".tag-input"), s = i.find(".input-wrapper"), c, d, p;
                if (a.maxTags > 0 && this.values.length === a.maxTags || `${e}`.trim() === "" || !t.utils.exec(a.onBeforeTagAdd, [e, this.values], o[0]))
                    return;
                c = r("<span>").addClass("tag").addClass(p).addClass(a.clsTag).insertBefore(s),
                c.data("value", e),
                (a.static || i.hasClass("static-mode") || o.readonly || o.disabled || i.hasClass("disabled")) && c.addClass("static");
                let g = r("<span>").addClass("title").addClass(a.clsTagTitle).html(e);
                if (d = r("<span>").addClass("action").addClass(a.clsTagAction).html("&times;"),
                g.appendTo(c),
                d.appendTo(c),
                a.randomColor === !0) {
                    let f = Object.values(Object.assign({}, Farbe.StandardColors, Farbe.MetroColors))
                      , u = f[r.random(0, f.length - 1)]
                      , h = Farbe.Routines.darken(u, 15)
                      , b = Farbe.Routines.isDark(u) ? "#ffffff" : "#000000";
                    c.css({
                        backgroundColor: u,
                        color: b
                    }),
                    d.css({
                        backgroundColor: h,
                        color: b
                    })
                }
                this.values.push(e),
                o.val(this.values.join(a.tagSeparator)),
                this._fireEvent("tag-add", {
                    tag: c[0],
                    val: e,
                    values: this.values
                }),
                this._fireEvent("tag", {
                    tag: c[0],
                    val: e,
                    values: this.values
                })
            },
            _delTag: function(e) {
                let o = this.element
                  , a = this.options
                  , i = e.data("value");
                t.utils.exec(a.onBeforeTagRemove, [e, i, this.values], o[0]) && (t.utils.arrayDelete(this.values, i),
                o.val(this.values.join(a.tagSeparator)),
                this._fireEvent("tag-remove", {
                    tag: e[0],
                    val: i,
                    values: this.values
                }),
                this._fireEvent("tag", {
                    tag: e[0],
                    val: i,
                    values: this.values
                }),
                e.remove())
            },
            tags: function() {
                return this.values
            },
            val: function(e) {
                let o = this
                  , a = this.element
                  , i = this.options
                  , s = a.closest(".tag-input")
                  , c = [];
                return t.utils.isValue(e) ? (this.values = [],
                s.find(".tag").remove(),
                typeof e == "string" ? c = `${e}`.toArray(i.tagSeparator) : Array.isArray(e) && (c = e),
                r.each(c, function() {
                    o._addTag(this)
                }),
                this) : this.tags()
            },
            append: function(e) {
                let o = this
                  , a = this.options
                  , i = this.values;
                return typeof e == "string" ? i = `${e}`.toArray(a.tagSeparator) : Array.isArray(e) && (i = e),
                r.each(i, function() {
                    o._addTag(this)
                }),
                this
            },
            clear: function() {
                let e = this.element
                  , o = e.closest(".tag-input");
                return this.values = [],
                e.val("").trigger("change"),
                o.find(".tag").remove(),
                this
            },
            disable: function() {
                this.element.data("disabled", !0),
                this.element.parent().addClass("disabled")
            },
            enable: function() {
                this.element.data("disabled", !1),
                this.element.parent().removeClass("disabled")
            },
            toggleState: function() {
                this.elem.disabled ? this.disable() : this.enable()
            },
            toggleStatic: function(e) {
                let o = this.element.closest(".tag-input"), a;
                t.utils.isValue(e) ? a = t.utils.bool(e) : a = !o.hasClass("static-mode"),
                a ? o.addClass("static-mode") : o.removeClass("static-mode")
            },
            setAutocompleteList: function(e) {
                let o = t.utils.isObject(e);
                o !== !1 ? this.autocomplete = o : typeof e == "string" && (this.autocomplete = e.toArray(this.options.autocompleteDivider))
            },
            changeAttribute: function(e) {
                let o = this.element
                  , a = this.options
                  , i = () => {
                    let s = o.attr("value").trim();
                    this.clear(),
                    t.utils.isValue(s) && this.val(s.toArray(a.tagSeparator))
                }
                ;
                switch (e) {
                case "value":
                    i();
                    break;
                case "disabled":
                    this.toggleState();
                    break;
                case "static":
                    this.toggleStatic();
                    break
                }
            },
            destroy: function() {
                let e = this.element
                  , o = this.options
                  , a = e.closest(".tag-input")
                  , i = a.find(".input-wrapper");
                i.off(t.events.focus),
                i.off(t.events.blur),
                i.off(t.events.keydown),
                a.off(t.events.click, ".tag .action"),
                a.off(t.events.click),
                o.label && a.prev("label").remove(),
                a.remove()
            }
        }),
        r(document).on(t.events.click, () => {
            r(".tag-input .autocomplete-list").hide()
        }
        )
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            onTaskClick: t.noop,
            onMyObjectCreate: t.noop
        };
        t.taskBarSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroTaskBarSetup != "undefined" && t.taskBarSetup(globalThis.metroTaskBarSetup),
        t.Component("task-bar", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    tasks: [],
                    systemTray: [],
                    widgets: []
                }),
                this
            },
            _create: function() {
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("task-bar-create")
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options;
                e.addClass("task-bar"),
                e.append(r("<div>").addClass("widgets")),
                e.append(r("<div>").addClass("tasks")),
                e.append(r("<div>").addClass("system-tray"))
            },
            _createEvents: function() {
                let e = this
                  , o = this.element;
                o.on(t.events.click, ".task", function() {
                    let a = e.tasks[r(this).index()];
                    for (let i of e.tasks)
                        i.active = !1;
                    a.active = !0,
                    e._renderTasks(),
                    e._fireEvent("task-click", {
                        task: a,
                        element: a.ref
                    })
                }),
                o.on(t.events.click, ".system-tray-item", function() {
                    let a = e.systemTray[r(this).index()];
                    e._fireEvent("system-tray-click", {
                        item: a
                    })
                }),
                o.on(t.events.click, ".widget", function() {
                    let a = e.widgets[r(this).index()];
                    e._fireEvent("widget-click", {
                        item: a
                    })
                })
            },
            _renderTasks: function() {
                let e = this.element
                  , o = this.options
                  , a = e.find(".tasks").clear();
                for (let i of this.tasks) {
                    let s = r("<div>").addClass("task").attr("title", i.title).html(i.icon);
                    i.active && s.addClass("active"),
                    a.append(s)
                }
            },
            _renderSystemTray: function() {
                let o = this.element.find(".system-tray").clear();
                for (let a of this.systemTray)
                    o.append(r(a).addClass("system-tray-item"))
            },
            _renderWidgets: function() {
                let o = this.element.find(".widgets").clear();
                for (let a of this.widgets)
                    o.append(r(a).addClass("widget"))
            },
            addTask: function(e, o=!1) {
                if (o)
                    for (let a of this.tasks)
                        a.active = !1;
                this.tasks.push(st(V({}, e), {
                    active: o
                })),
                this._renderTasks()
            },
            removeTask: function(e) {
                this.tasks = this.tasks.filter(o => o.ref !== e),
                this._renderTasks()
            },
            activateTask: function(e) {
                let o = this.tasks.filter(i => i.ref === e);
                if (o.length === 0)
                    return;
                let a = o[0];
                for (let i of this.tasks)
                    i.active = !1;
                a.active = !0,
                this._renderTasks()
            },
            addToSystemTray: function(e) {
                this.systemTray.push(e),
                this._renderSystemTray()
            },
            addWidget: function(e) {
                this.widgets.push(e),
                this._renderWidgets()
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = (o, a, i) => {
            let s, c = "<%(.+?)%>", d = /(^( )?(var|if|for|else|switch|case|break|{|}|;))(.*)?/g, p = `with(obj) { var r=[];
`, m = 0, g, f, u = (h, b) => (b ? p += h.match(d) ? `${h}
` : `r.push(${h});
` : p += h !== "" ? `r.push("${h.replace(/"/g, '\\"')}");
` : "",
            u);
            for (t.utils.isValue(i) && (r.hasProp(i, "beginToken") && (c = c.replace("<%", i.beginToken)),
            r.hasProp(i, "endToken") && (c = c.replace("%>", i.endToken))),
            s = new RegExp(c,"g"),
            f = s.exec(o); f; )
                u(o.slice(m, f.index))(f[1], !0),
                m = f.index + f[0].length,
                f = s.exec(o);
            u(o.substring(m, o.length - m)),
            p = `${p}return r.join(""); }`.replace(/[\r\t\n]/g, " ");
            try {
                g = new Function("obj",p).apply(a, [a])
            } catch (h) {
                console.error(`'${h.message}'`, ` in 

Code:
`, p, `
`)
            }
            return g
        }
          , e = {
            templateData: null,
            onTemplateCompile: t.noop,
            onTemplateCreate: t.noop
        };
        t.templateSetup = o => {
            e = r.extend({}, e, o)
        }
        ,
        typeof globalThis.metroTemplateSetup != "undefined" && t.templateSetup(globalThis.metroTemplateSetup),
        t.Component("template", {
            init: function(o, a) {
                return this._super(a, o, e, {
                    template: null,
                    data: {}
                }),
                this
            },
            _compile: function() {
                let o = this.element
                  , a = this.template.replace(/(&lt;%)/gm, "<%").replace(/(%&gt;)/gm, "%>").replace(/(&lt;)/gm, "<").replace(/(&gt;)/gm, ">")
                  , i = l(a, this.data);
                o.html(i),
                this._fireEvent("template-compile", {
                    template: a,
                    compiled: i,
                    element: o
                })
            },
            _create: function() {
                let o = this.element
                  , a = this.options;
                this.template = o.html(),
                this.data = t.utils.isObject(a.templateData) || {},
                this._compile(),
                this._fireEvent("template-create", {
                    element: o
                })
            },
            buildWith: function(o) {
                let a = t.utils.isObject(o);
                a && (this.data = a,
                this._compile())
            },
            changeAttribute: function(o, a) {
                o === "data-template-data" && (this.options.templateData = a,
                this.data = t.utils.isObject(a) || {},
                this._compile())
            },
            destroy: function() {
                return this.element
            }
        }),
        t.template = l
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            state: t.theme.LIGHT,
            target: "html",
            saveState: !0,
            saveStateKey: "THEME:SWITCHER",
            clsDark: "",
            darkSymbol: "\u{1F319}",
            lightSymbol: "\u{1F31E}",
            mode: "switch",
            onThemeSwitcherCreate: t.noop,
            onChangeTheme: t.noop
        };
        t.themeSwitcherSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroThemeSwitcherSetup != "undefined" && t.themeSwitcherSetup(globalThis.metroThemeSwitcherSetup),
        t.Component("theme-switcher", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    container: null,
                    state: null,
                    target: null
                }),
                this.state = this.options.state,
                this
            },
            _create: function() {
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("theme-switcher-create")
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options
                  , a = "light";
                o.saveState && (a = t.storage.getItem(o.saveStateKey, !1)),
                e.attr("data-light-symbol", o.lightSymbol),
                e.attr("data-dark-symbol", o.darkSymbol),
                t.makePlugin(e, "switch"),
                this.container = e.wrap(r("<label>").addClass("theme-switcher")),
                this.container.addClass(`mode-${o.mode}`),
                this.target = r(o.target),
                this.target.length === 0 && (this.target = r("html")),
                this._setState(o.saveState ? a : o.state === t.theme.DARK),
                this._updateState()
            },
            _createEvents: function() {
                this.container.on("click", () => {
                    this._updateState()
                }
                ),
                this._observeClass()
            },
            _observeClass: function() {
                new MutationObserver(o => {
                    for (let a of o)
                        a.type === "attributes" && a.attributeName === "class" && (this.elem.checked = this.target[0].classList.contains("dark-side"))
                }
                ).observe(this.target[0], {
                    attributes: !0,
                    attributeFilter: ["class"]
                })
            },
            _setState: function(e=!1) {
                this.elem.checked = e
            },
            _updateState: function() {
                let e = r.meta("metro:theme").length > 0
                  , o = this.options
                  , a = this.elem
                  , i = this.target;
                e || (a.checked ? i.addClass("dark-side").addClass(this.options.clsDark) : i.removeClass("dark-side").addClass(this.options.clsDark),
                o.saveState && t.storage.setItem(o.saveStateKey, a.checked),
                this._fireEvent("change-theme", {
                    state: a.checked
                }))
            },
            val: function(e) {
                if (typeof e == "undefined")
                    return this.elem.checked ? t.theme.DARK : t.theme.LIGHT;
                this._setState(typeof e == "boolean" ? e : e === t.theme.DARK),
                this._updateState()
            },
            changeAttribute: function(e, o) {
                e === "data-target" && (this.target = r(o),
                this._updateState())
            },
            destroy: function() {
                this.container.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = ["slide-up", "slide-down", "slide-left", "slide-right", "fade", "zoom", "swirl", "switch"]
          , e = {
            tileDeferred: 0,
            size: "medium",
            cover: "",
            coverPosition: "center",
            effect: "",
            effectInterval: 3e3,
            effectDuration: 500,
            target: null,
            canTransform: !0,
            onTileClick: t.noop,
            onTileCreate: t.noop
        };
        t.tileSetup = o => {
            e = r.extend({}, e, o)
        }
        ,
        typeof globalThis.metroTileSetup != "undefined" && t.tileSetup(globalThis.metroTileSetup),
        t.Component("tile", {
            init: function(o, a) {
                return this._super(a, o, e, {
                    effectInterval: !1,
                    images: [],
                    slides: [],
                    currentSlide: -1,
                    unload: !1
                }),
                this
            },
            _create: function() {
                let o = this.element;
                this._createTile(),
                this._createEvents(),
                this._fireEvent("tile-create", {
                    element: o
                })
            },
            _createTile: function() {
                function o(p, m, g) {
                    setTimeout( () => {
                        p.fadeOut(500, () => {
                            p.css("background-image", `url(${m})`),
                            p.fadeIn()
                        }
                        )
                    }
                    , g * 300)
                }
                let a = this
                  , i = this.element
                  , s = this.options
                  , c = i.find(".slide")
                  , d = i.find(".slide-front, .slide-back");
                if (i.addClass(`tile-${s.size}`),
                s.effect.indexOf("hover-") > -1 && (i.addClass(`effect-${s.effect}`),
                r.each(d, function() {
                    let p = r(this);
                    p.data("cover") !== void 0 && a._setCover(p, p.data("cover"), p.data("cover-position"))
                })),
                l.includes(s.effect) && c.length > 1 && (r.each(c, function(p) {
                    let m = r(this);
                    a.slides.push(this),
                    m.data("cover") !== void 0 && a._setCover(m, m.data("cover"), m.data("cover-position")),
                    p > 0 && (["slide-up", "slide-down"].indexOf(s.effect) > -1 && m.css("top", "100%"),
                    ["slide-left", "slide-right"].indexOf(s.effect) > -1 && m.css("left", "100%"),
                    ["fade", "zoom", "swirl", "switch"].indexOf(s.effect) > -1 && m.css("opacity", 0))
                }),
                this.currentSlide = 0,
                this._runEffects()),
                s.cover !== "" && this._setCover(i, s.cover),
                s.effect === "image-set") {
                    i.addClass("image-set"),
                    r.each(i.children("img"), function() {
                        a.images.push(this),
                        r(this).remove()
                    });
                    let p = this.images.slice();
                    for (let g = 0; g < 5; g++) {
                        let f = r.random(0, p.length - 1)
                          , u = r("<div>").addClass(`img -js-img-${g}`).css("background-image", `url(${p[f].src})`);
                        i.prepend(u),
                        p.splice(f, 1)
                    }
                    let m = [0, 1, 4, 3, 2];
                    setInterval( () => {
                        let g = a.images.slice()
                          , f = Farbe.Routines.randomColor();
                        i.css("background-color", f);
                        for (let u = 0; u < m.length; u++) {
                            let h = r.random(0, g.length - 1)
                              , b = i.find(`.-js-img-${m[u]}`);
                            o(b, g[h].src, u),
                            g.splice(h, 1)
                        }
                        m = m.reverse()
                    }
                    , 5e3)
                }
            },
            _runEffects: function() {
                let o = this.options;
                this.effectInterval === !1 && (this.effectInterval = setInterval( () => {
                    let a, i;
                    a = r(this.slides[this.currentSlide]),
                    this.currentSlide++,
                    this.currentSlide === this.slides.length && (this.currentSlide = 0),
                    i = this.slides[this.currentSlide],
                    l.includes(o.effect) && t.Effects[Str.camelCase(o.effect)](r(a)[0], r(i)[0], {
                        duration: o.effectDuration
                    })
                }
                , o.effectInterval))
            },
            _stopEffects: function() {
                r.clearInterval(this.effectInterval),
                this.effectInterval = !1
            },
            _setCover: function(o, a, i) {
                o.css({
                    backgroundImage: `url(${a})`,
                    backgroundSize: "cover",
                    backgroundRepeat: "no-repeat",
                    backgroundPosition: i || this.options.coverPosition
                })
            },
            _createEvents: function() {
                let o = this
                  , a = this.element
                  , i = this.options;
                a.on(t.events.startAll, function(s) {
                    let c = r(this), d = {
                        w: a.width(),
                        h: a.height()
                    }, p = t.utils.pageXY(s).x - c.offset().left, m = t.utils.pageXY(s).y - c.offset().top, g;
                    t.utils.isRightMouse(s) === !1 && (p < d.w * 1 / 3 && (m < d.h * 1 / 2 || m > d.h * 1 / 2) ? g = "left" : p > d.w * 2 / 3 && (m < d.h * 1 / 2 || m > d.h * 1 / 2) ? g = "right" : p > d.w * 1 / 3 && p < d.w * 2 / 3 && m > d.h / 2 ? g = "bottom" : g = "top",
                    i.canTransform === !0 && c.addClass(`transform-${g}`),
                    i.target !== null && setTimeout( () => {
                        document.location.href = i.target
                    }
                    , 100),
                    o._fireEvent("tile-click", {
                        side: g
                    }))
                }),
                a.on([t.events.stopAll, t.events.leave].join(" "), function() {
                    r(this).removeClass("transform-left").removeClass("transform-right").removeClass("transform-top").removeClass("transform-bottom")
                })
            },
            changeAttribute: () => {}
            ,
            destroy: function() {
                let o = this.element;
                o.off(t.events.startAll),
                o.off([t.events.stopAll, t.events.leave].join(" ")),
                o.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            label: "",
            timepickerDeferred: 0,
            hoursStep: 1,
            minutesStep: 1,
            secondsStep: 1,
            value: null,
            distance: 3,
            hours: !0,
            minutes: !0,
            seconds: !0,
            showLabels: !0,
            scrollSpeed: 4,
            copyInlineStyles: !1,
            openMode: "auto",
            clsPicker: "",
            clsPart: "",
            clsHours: "",
            clsMinutes: "",
            clsSeconds: "",
            clsLabel: "",
            clsButton: "",
            clsOkButton: "",
            clsCancelButton: "",
            okButtonIcon: "\u2713",
            cancelButtonIcon: "\u{10102}",
            onSet: t.noop,
            onOpen: t.noop,
            onClose: t.noop,
            onScroll: t.noop,
            onTimePickerCreate: t.noop
        };
        t.timePickerSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroTimePickerSetup != "undefined" && t.timePickerSetup(globalThis.metroTimePickerSetup),
        t.Component("time-picker", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    picker: null,
                    isOpen: !1,
                    value: [],
                    listTimer: {
                        hours: null,
                        minutes: null,
                        seconds: null
                    },
                    id: null
                }),
                this
            },
            _create: function() {
                let e = this.element, o = this.options, a;
                for (this.id = e.attr("id") || Hooks.useId(this.elem),
                o.distance < 1 && (o.distance = 1),
                o.hoursStep < 1 && (o.hoursStep = 1),
                o.hoursStep > 23 && (o.hoursStep = 23),
                o.minutesStep < 1 && (o.minutesStep = 1),
                o.minutesStep > 59 && (o.minutesStep = 59),
                o.secondsStep < 1 && (o.secondsStep = 1),
                o.secondsStep > 59 && (o.secondsStep = 59),
                e.val() === "" && !t.utils.isValue(o.value) && (o.value = datetime().format("HH:mm:ss")),
                this.value = (e.val() !== "" ? e.val() : `${o.value}`).toArray(":"),
                a = 0; a < 3; a++)
                    this.value[a] === void 0 || this.value[a] === null ? this.value[a] = 0 : this.value[a] = Number.parseInt(this.value[a]);
                this._normalizeValue(),
                this._createStructure(),
                this._createEvents(),
                this._set(),
                this._fireEvent("time-picker-create", {
                    element: e
                })
            },
            _normalizeValue: function() {
                let e = this.options;
                e.hoursStep > 1 && (this.value[0] = t.utils.nearest(this.value[0], e.hoursStep, !0)),
                e.minutesStep > 1 && (this.value[1] = t.utils.nearest(this.value[1], e.minutesStep, !0)),
                e.minutesStep > 1 && (this.value[2] = t.utils.nearest(this.value[2], e.secondsStep, !0))
            },
            _createStructure: function() {
                let e = this.element, o = this.options, a = this.strings, i, s, c, d, p, m, g, f = Hooks.useId(e[0]);
                i = r("<div>").addClass(`wheel-picker time-picker ${e[0].className}`).addClass(o.clsPicker),
                i.attr("id") || i.attr("id", f),
                i.insertBefore(e),
                e.attr("readonly", !0).appendTo(i),
                this._addLabel(o.label, i, {
                    className: o.clsLabel,
                    id: i.attr("id"),
                    dir: e.attr("dir")
                }),
                m = r("<div>").addClass("time-wrapper").appendTo(i),
                o.hours && (s = r("<div>").attr("data-title", a.label_hours).addClass("hours").addClass(o.clsPart).addClass(o.clsHours).appendTo(m)),
                o.minutes && (c = r("<div>").attr("data-title", a.label_minutes).addClass("minutes").addClass(o.clsPart).addClass(o.clsMinutes).appendTo(m)),
                o.seconds && (d = r("<div>").attr("data-title", a.label_seconds).addClass("seconds").addClass(o.clsPart).addClass(o.clsSeconds).appendTo(m));
                let u = r("<div>").addClass("select-wrapper").appendTo(i);
                if (g = r("<div>").addClass("select-block").appendTo(u),
                o.hours === !0) {
                    for (s = r("<ul>").addClass("sel-hours").appendTo(g),
                    p = 0; p < o.distance; p++)
                        r("<li>").html("&nbsp;").data("value", -1).appendTo(s);
                    for (p = 0; p < 24; p = p + o.hoursStep)
                        r("<li>").addClass(`js-hours-${p}`).html(Str.lpad(p, "0", 2)).data("value", p).appendTo(s);
                    for (p = 0; p < o.distance; p++)
                        r("<li>").html("&nbsp;").data("value", -1).appendTo(s)
                }
                if (o.minutes === !0) {
                    for (c = r("<ul>").addClass("sel-minutes").appendTo(g),
                    p = 0; p < o.distance; p++)
                        r("<li>").html("&nbsp;").data("value", -1).appendTo(c);
                    for (p = 0; p < 60; p = p + o.minutesStep)
                        r("<li>").addClass(`js-minutes-${p}`).html(Str.lpad(p, "0", 2)).data("value", p).appendTo(c);
                    for (p = 0; p < o.distance; p++)
                        r("<li>").html("&nbsp;").data("value", -1).appendTo(c)
                }
                if (o.seconds === !0) {
                    for (d = r("<ul>").addClass("sel-seconds").appendTo(g),
                    p = 0; p < o.distance; p++)
                        r("<li>").html("&nbsp;").data("value", -1).appendTo(d);
                    for (p = 0; p < 60; p = p + o.secondsStep)
                        r("<li>").addClass(`js-seconds-${p}`).html(Str.lpad(p, "0", 2)).data("value", p).appendTo(d);
                    for (p = 0; p < o.distance; p++)
                        r("<li>").html("&nbsp;").data("value", -1).appendTo(d)
                }
                g.height((o.distance * 2 + 1) * 40);
                let h = r("<div>").addClass("action-block").appendTo(u);
                if (r("<button>").attr("type", "button").addClass("button action-now").addClass(o.clsButton).addClass(o.clsTodayButton).html(`<span class="caption">${this.strings.label_now}</span>`).appendTo(h),
                r("<button>").attr("type", "button").addClass("button action-ok").addClass(o.clsButton).addClass(o.clsOkButton).html(`<span class="icon">${o.okButtonIcon}</span>`).appendTo(h),
                r("<button>").attr("type", "button").addClass("button action-cancel").addClass(o.clsButton).addClass(o.clsCancelButton).html(`<span class="icon">${o.cancelButtonIcon}</span>`).appendTo(h),
                e[0].className = "",
                o.copyInlineStyles === !0)
                    for (p = 0; p < e[0].style.length; p++)
                        i.css(e[0].style[p], e.css(e[0].style[p]));
                o.showLabels === !0 && i.addClass("show-labels"),
                e.prop("disabled") && i.addClass("disabled"),
                this.picker = i
            },
            _createEvents: function() {
                let e = this
                  , o = this.options
                  , a = this.picker;
                a.on("touchstart", ".select-block ul", function(s) {
                    if (s.changedTouches)
                        return;
                    let c = t.utils.pageXY(s).y;
                    r(document).on("touchmove", d => {
                        this.scrollTop -= o.scrollSpeed * (c > t.utils.pageXY(d).y ? -1 : 1),
                        c = t.utils.pageXY(d).y
                    }
                    , {
                        ns: e.id
                    }),
                    r(document).on("touchend", () => {
                        r(document).off(t.events.move, {
                            ns: e.id
                        }),
                        r(document).off(t.events.stop, {
                            ns: e.id
                        })
                    }
                    , {
                        ns: e.id
                    })
                }),
                a.on(t.events.click, s => {
                    e.isOpen === !1 && e.open(),
                    s.stopPropagation()
                }
                ),
                a.on(t.events.click, ".action-ok", s => {
                    let c = a.find(".sel-hours li.active")
                      , d = a.find(".sel-minutes li.active")
                      , p = a.find(".sel-seconds li.active")
                      , m = c.length === 0 ? 0 : c.data("value")
                      , g = d.length === 0 ? 0 : d.data("value")
                      , f = p.length === 0 ? 0 : p.data("value");
                    e.value = [m, g, f],
                    e._normalizeValue(),
                    e._set(),
                    e.close(),
                    s.stopPropagation()
                }
                ),
                a.on(t.events.click, ".action-cancel", s => {
                    e.close(),
                    s.stopPropagation()
                }
                );
                let i = 150;
                r.each(["hours", "minutes", "seconds"], function() {
                    let s = a.find(`.sel-${this}`)
                      , c = Hooks.useDebounce(d => {
                        let p;
                        e.listTimer[this] = null,
                        p = Math.round(Math.ceil(s.scrollTop()) / 40),
                        this === "hours" && o.hoursStep && (p *= Number.parseInt(o.hoursStep)),
                        this === "minutes" && o.minutesStep && (p *= Number.parseInt(o.minutesStep)),
                        this === "seconds" && o.secondsStep && (p *= Number.parseInt(o.secondsStep));
                        let m = s.find(`.js-${this}-${p}`)
                          , g = m.position().top - o.distance * 40;
                        s.find(".active").removeClass("active"),
                        s[0].scrollTop = g,
                        m.addClass("active"),
                        t.utils.exec(o.onScroll, [m, s, a], s[0])
                    }
                    , i);
                    s.on("scroll", c)
                }),
                a.on(t.events.click, "ul li", function(s) {
                    let c = r(this)
                      , d = c.closest("ul")
                      , p = c.position().top - o.distance * 40;
                    d.find(".active").removeClass("active"),
                    r.animate({
                        el: d[0],
                        draw: {
                            scrollTop: p
                        },
                        dur: 300
                    }),
                    d[0].scrollTop = p,
                    c.addClass("active"),
                    t.utils.exec(o.onScroll, [c, d, a], d[0])
                }),
                a.on(t.events.click, ".action-now", s => {
                    let c = datetime()
                      , d = c.hour()
                      , p = c.minute()
                      , m = c.second();
                    a.find(`.sel-hours li.js-hours-${d}`).click(),
                    a.find(`.sel-minutes li.js-minutes-${p}`).click(),
                    a.find(`.sel-seconds li.js-seconds-${m}`).click(),
                    s.preventDefault(),
                    s.stopPropagation()
                }
                )
            },
            _set: function() {
                let e = this.element
                  , o = this.options
                  , a = this.picker
                  , i = "00"
                  , s = "00"
                  , c = "00";
                o.hours === !0 && (i = Number.parseInt(this.value[0]),
                a.find(".hours").html(Str.lpad(i, "0", 2))),
                o.minutes === !0 && (s = Number.parseInt(this.value[1]),
                a.find(".minutes").html(Str.lpad(s, "0", 2))),
                o.seconds === !0 && (c = Number.parseInt(this.value[2]),
                a.find(".seconds").html(Str.lpad(c, "0", 2))),
                e.val([i, s, c].join(":")).trigger("change"),
                this._fireEvent("set", {
                    val: this.value,
                    elementVal: e.val()
                })
            },
            open: function() {
                let e = this.options, o = this.picker, a, i, s, c, d, p, m = o.find("li"), g = o.find(".select-wrapper"), f, u, h;
                r.each(r(".time-picker"), function() {
                    r(this).find("input").each(function() {
                        t.getPlugin(this, "timepicker").close()
                    })
                }),
                g.show(0),
                m.removeClass("active"),
                e.openMode === "auto" ? (t.utils.inViewport(g[0]) || g.parent().addClass("drop-up-select"),
                t.utils.inViewport(g[0]) || (g.parent().removeClass("drop-up-select"),
                g.parent().addClass("drop-as-dialog"))) : e.openMode === "dialog" ? g.parent().addClass("drop-as-dialog") : e.openMode === "up" && g.parent().addClass("drop-up-select");
                let b = (w, Q) => {
                    w.scrollTop(0).animate({
                        draw: {
                            scrollTop: Q.position().top - e.distance * 40 + w.scrollTop()
                        },
                        dur: 100
                    })
                }
                ;
                e.hours === !0 && (a = Number.parseInt(this.value[0]),
                c = o.find(".sel-hours"),
                f = c.find(`li.js-hours-${a}`).addClass("active"),
                b(c, f)),
                e.minutes === !0 && (i = Number.parseInt(this.value[1]),
                d = o.find(".sel-minutes"),
                u = d.find(`li.js-minutes-${i}`).addClass("active"),
                b(d, u)),
                e.seconds === !0 && (s = Number.parseInt(this.value[2]),
                p = o.find(".sel-seconds"),
                h = p.find(`li.js-seconds-${s}`).addClass("active"),
                b(p, h)),
                this.isOpen = !0,
                this._fireEvent("open", {
                    val: this.value
                })
            },
            close: function() {
                let e = this.picker
                  , o = this.options;
                e.find(".select-wrapper").hide(0),
                o.openMode === "auto" && e.find(".select-wrapper").parent().removeClass("drop-up-select drop-as-dialog"),
                this.isOpen = !1,
                this._fireEvent("close", {
                    val: this.value
                })
            },
            _convert: e => {
                let o;
                return Array.isArray(e) ? o = e : typeof e.getMonth == "function" ? o = [e.getHours(), e.getMinutes(), e.getSeconds()] : t.utils.isObject(e) ? o = [e.h, e.m, e.s] : o = e.toArray(":"),
                o
            }
            ,
            val: function(e) {
                if (e === void 0)
                    return this.element.val();
                this.value = this._convert(e),
                this._normalizeValue(),
                this._set()
            },
            time: function(e) {
                if (e === void 0)
                    return {
                        h: this.value[0],
                        m: this.value[1],
                        s: this.value[2]
                    };
                this.value = this._convert(e),
                this._normalizeValue(),
                this._set()
            },
            date: function(e) {
                if (e === void 0 || typeof e.getMonth != "function")
                    return datetime().hour(this.value[0]).minute(this.value[1]).second(this.value[2]).ms(0).val();
                this.value = this._convert(e),
                this._normalizeValue(),
                this._set()
            },
            disable: function() {
                this.element.data("disabled", !0),
                this.element.parent().addClass("disabled")
            },
            enable: function() {
                this.element.data("disabled", !1),
                this.element.parent().removeClass("disabled")
            },
            toggleState: function() {
                this.elem.disabled ? this.disable() : this.enable()
            },
            changeAttribute: function(e, o) {
                switch (e) {
                case "data-value":
                    this.val(o);
                    break;
                case "disabled":
                    this.toggleState();
                    break
                }
            },
            destroy: function() {
                let e = this.element
                  , o = this.picker;
                r.each(["hours", "minutes", "seconds"], function() {
                    o.find(`.sel-${this}`).off("scroll")
                }),
                o.off(t.events.start, ".select-block ul"),
                o.off(t.events.click),
                o.off(t.events.click, ".action-ok"),
                o.off(t.events.click, ".action-cancel"),
                e.remove()
            }
        }),
        r(document).on(t.events.click, () => {
            r.each(r(".time-picker"), function() {
                r(this).find("input").each(function() {
                    t.getPlugin(this, "timepicker").close()
                })
            })
        }
        )
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        t.TOAST_POSITION = {
            TOP: "top",
            BOTTOM: "bottom",
            CENTER: "center"
        };
        let a = {
            callback: t.noop,
            timeout: 3e3,
            distance: 20,
            position: t.TOAST_POSITION.BOTTOM,
            clsToast: ""
        };
        t.toastSetup = s => {
            a = r.extend({}, a, s)
        }
        ,
        typeof globalThis.metroToastSetup != "undefined" && t.toastSetup(globalThis.metroToastSetup);
        let i = {
            create: (s, c) => {
                let d, p;
                typeof c == "function" && (c = r.extend({}, a, {
                    callback: c
                })),
                d = r.extend({}, a, c),
                p = r("<div>").addClass("toast").html(s).appendTo(r("body"));
                let m = p.outerWidth();
                d.position === "top" ? p.addClass("show-top").css({
                    top: d.distance
                }) : d.position === "center" ? p.addClass("show-center") : p.css({
                    bottom: d.distance
                }),
                p.css({
                    left: "50%",
                    "margin-left": -(m / 2)
                }).addClass(d.clsToast).fadeIn(200, () => {
                    setTimeout( () => {
                        i.remove(p, d.callback)
                    }
                    , d.timeout)
                }
                )
            }
            ,
            remove: (s, c) => {
                s.length && s.fadeOut(200, () => {
                    s.remove(),
                    t.utils.exec(c, null, s[0])
                }
                )
            }
        };
        t.toast = i,
        t.createToast = i.create
    }
    )(Metro, Dom);
    ( (t, r) => {
        let l = {
            onChange: t.noop,
            onButtonClick: t.noop,
            onToggleButtonCreate: t.noop
        };
        t.toggleButtonSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof window.metroToggleButtonSetup != "undefined" && t.toggleButtonSetup(window.metroToggleButtonSetup),
        t.Component("toggle-button", {
            init: function(e, o) {
                return this._super(o, e, l, {}),
                this
            },
            _create: function() {
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("toggle-buttons-create")
            },
            _createStructure: function() {
                let e = this.element;
                e.addClass("toggle-button");
                let o = e.children("button.active");
                o.length === 0 && e.children("button").first().addClass("active"),
                o.length > 1 && (o.removeClass("active"),
                o.first().addClass("active"))
            },
            _createEvents: function() {
                let e = this
                  , o = this.element
                  , a = this.options;
                o.on("click", "button", function() {
                    let i = r(this);
                    e._fireEvent("button-click", {
                        button: i
                    }),
                    !i.hasClass("active") && (o.find("button").removeClass("active"),
                    i.addClass("active"),
                    e._fireEvent("change", {
                        button: i
                    }))
                })
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            textToTokenize: "",
            spaceSymbol: "",
            spaceClass: "space",
            tokenClass: "",
            splitter: "",
            tokenElement: "span",
            useTokenSymbol: !0,
            useTokenIndex: !0,
            clsTokenizer: "",
            clsToken: "",
            clsTokenOdd: "",
            clsTokenEven: "",
            onTokenCreate: t.noop,
            onTokenize: t.noop,
            onTokenizerCreate: t.noop
        };
        t.tokenizerSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroTokenizerSetup != "undefined" && t.tokenizerSetup(globalThis.metroTokenizerSetup),
        t.Component("tokenizer", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    originalText: ""
                }),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options;
                this.originalText = o.textToTokenize ? o.textToTokenize.trim() : e.text().trim().replace(/[\r\n\t]/gi, "").replace(/\s\s+/g, " "),
                this._createStructure(),
                this._fireEvent("tokenizer-create")
            },
            _tokenize: function() {
                let e = this, o = this.element, a = this.options, i = 0, s, c;
                o.clear().attr("aria-label", this.originalText),
                r.each(this.originalText.split(a.splitter), function(d) {
                    let p = this === " ", m;
                    m = r(`<${a.tokenElement}>`).html(p ? a.spaceSymbol : this).attr("aria-hidden", !0).addClass(p ? a.spaceClass : "").addClass(p && a.useTokenSymbol ? "" : `ts-${this.replace(" ", "_")}`).addClass(p && a.useTokenIndex ? "" : `ti-${d + 1}`).addClass(a.tokenClass ? a.tokenClass : "").addClass(p ? "" : a.clsToken),
                    p || (i++,
                    m.addClass(i % 2 === 0 ? "te-even" : "te-odd"),
                    m.addClass(i % 2 === 0 ? a.clsTokenEven : a.clsTokenOdd)),
                    a.prepend && (c = r.isSelector(a.prepend) ? r(a.prepend) : r("<span>").html(a.prepend),
                    m.prepend(c)),
                    a.append && (s = r.isSelector(a.append) ? r(a.append) : r("<span>").html(a.append),
                    m.append(s)),
                    o.append(m),
                    e._fireEvent("token-create", {
                        token: m[0]
                    })
                }),
                e._fireEvent("tokenize", {
                    tokens: o.children().items(),
                    originalText: this.originalText
                })
            },
            _createStructure: function() {
                let e = this.element
                  , o = this.options;
                e.addClass(o.clsTokenizer),
                this._tokenize()
            },
            tokenize: function(e) {
                this.originalText = e,
                this._tokenize()
            },
            destroy: function() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            treeviewDeferred: 0,
            showChildCount: !1,
            duration: 100,
            hideActionsOnLeave: !0,
            recheckTimeout: 100,
            leaves: [],
            onNodeClick: t.noop,
            onNodeDblClick: t.noop,
            onNodeDelete: t.noop,
            onNodeInsert: t.noop,
            onNodeClean: t.noop,
            onCheckClick: t.noop,
            onRadioClick: t.noop,
            onExpandNode: t.noop,
            onCollapseNode: t.noop,
            onTreeViewCreate: t.noop
        };
        t.treeViewSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroTreeViewSetup != "undefined" && t.treeViewSetup(globalThis.metroTreeViewSetup),
        t.Component("tree-view", {
            init: function(e, o) {
                return this._super(o, e, l),
                this
            },
            _create: function() {
                let e = this
                  , o = this.element;
                this._createTree(),
                this._createEvents(),
                r.each(o.find("input"), function() {
                    r(this).is(":checked") && e._recheck(this)
                }),
                this._fireEvent("tree-view-create", {
                    element: o
                })
            },
            _createIcon: e => {
                let o = t.utils.isTag(e) ? r(e) : r("<img src='' alt=''>").attr("src", e)
                  , a = r("<span>").addClass("icon");
                return a.html(o.outerHTML()),
                a
            }
            ,
            _createCaption: (e, o) => {
                let a = r("<span>").addClass("caption").html(e);
                return o && (t.utils.isObject(o) ? a.css(o) : typeof o == "string" && (a[0].style.cssText = o)),
                a
            }
            ,
            _createToggle: () => r("<span>").addClass("node-toggle"),
            _createNode: function(e, o) {
                let a = this.options
                  , i = o || r("<li>")
                  , s = r("<a>");
                if (i.prepend(s),
                (e.link || e.href) && s.attr("href", e.link || e.href),
                e.caption && s.prepend(this._createCaption(e.caption, e.style)),
                e.icon && s.prepend(this._createIcon(e.icon)),
                e.html && s.append(e.html),
                e.attributes && r.type(e.attributes) === "object")
                    for (let c in e.attributes)
                        s.attr(c, e.attributes[c]);
                if (e.style && (typeof e.style == "string" ? s[0].style.cssText = e.style : r.type(e.style) === "object" && s.css(e.style)),
                e.badge) {
                    let[c,d] = e.badge.split(":");
                    s.append(r("<span>").addClass("badge").addClass(d).html(c))
                }
                if (e.badges && r.each(typeof e.badges == "string" ? e.badges.toArray(",") : Array.isArray(e.badges) ? e.badges : [], (c, d) => {
                    let[p,m] = d.split(":");
                    s.append(r("<span>").addClass("badge").addClass(m).html(p))
                }
                ),
                e.secondary) {
                    let[c,d] = e.secondary.split(":");
                    s.append(r("<span>").addClass("secondary-text").addClass(d).html(c))
                }
                if (e.actions) {
                    let c = r("<div class='dropdown-button'>").addClass("actions-holder")
                      , d = r("<span class='actions-list-trigger'>").text("\u22EE").appendTo(c)
                      , p = r("<ul data-role='dropmenu' class='d-menu actions-list'>").appendTo(c);
                    i.append(c);
                    for (let m of e.actions)
                        if (m.type && m.type === "divider")
                            r("<li>").addClass("divider").appendTo(p);
                        else {
                            let g = m.icon ? r(m.icon).addClass("icon").outerHTML() : ""
                              , f = `<span class="caption">${m.caption}</span>`
                              , u = r(`<li><a href="#">${g} ${f}</a></li>`).appendTo(p);
                            m.cls && u.addClass(m.cls),
                            u.find("a").on("click", function() {
                                t.utils.exec(m.onclick, [u[0]], this)
                            })
                        }
                    p.on(t.events.leave, m => {
                        a.hideActionsOnLeave && t.getPlugin(p, "dropmenu").close()
                    }
                    )
                }
                return e.current && i.addClass("current"),
                e.type === "node" && (i.addClass("tree-node"),
                i.append(r("<span>").addClass("node-toggle")),
                i.append(r("<ul>"))),
                i.children("ul").length && (i.addClass("tree-node"),
                i.append(r("<span>").addClass("node-toggle")),
                t.utils.bool(e.collapsed) !== !0 ? i.addClass("expanded") : i.children("ul").hide()),
                i
            },
            _createCheckNode: function(e, o) {
                var i, s;
                let a = o || r("<li>");
                if (a.append(`
                <input data-role="${e.type}" type="${(i = e.type) != null ? i : "checkbox"}" name="${e.name}" value="${(s = e.value) != null ? s : ""}" ${e.checked ? "checked" : ""} data-append="${e.caption}"/>
            `),
                e.icon && a.find("label").prepend(this._createIcon(e.icon)),
                e.attributes && r.type(e.attributes) === "object")
                    for (let c in e.attributes)
                        a.attr(c, e.attributes[c]);
                if (e.secondary) {
                    let[c,d] = e.secondary.split(":");
                    a.find("label").append(r("<span>").addClass("secondary-text").addClass(d).html(c))
                }
                return a
            },
            _createInputNode: (e, o) => {
                var i, s, c, d;
                let a = o || r("<li>");
                if (a.append(`
                <input data-role="${e.type}" type="${(i = e.type) != null ? i : "text"}" name="${e.name}" value="${(s = e.value) != null ? s : ""}" data-prepend="${(c = e.caption) != null ? c : ""}" placeholder="${(d = e.placeholder) != null ? d : ""}"/>
            `),
                e.secondary) {
                    let[p,m] = e.secondary.split(":");
                    a.find("label").append(r("<span>").addClass("secondary-text").addClass(m).html(p))
                }
                return a
            }
            ,
            _createTree: function() {
                let e = this.element
                  , o = this.options
                  , a = e.find("li[data-caption]");
                if (e.addClass("treeview"),
                r.each(a, (i, s) => {
                    let c = r(s);
                    c.data("type") === "checkbox" || c.data("type") === "radio" ? this._createCheckNode({
                        caption: c.data("caption"),
                        icon: c.data("icon"),
                        type: c.data("type"),
                        name: c.data("name"),
                        attributes: c.data("attributes"),
                        value: c.data("value"),
                        checked: c.data("checked") === "true",
                        secondary: c.data("secondary")
                    }, c) : c.data("type") === "input" ? this._createInputNode({
                        caption: c.data("caption"),
                        type: c.data("type"),
                        name: c.data("name"),
                        attributes: c.data("attributes"),
                        value: c.data("value"),
                        secondary: c.data("secondary"),
                        placeholder: c.data("placeholder")
                    }, c) : this._createNode({
                        caption: c.data("caption"),
                        icon: c.data("icon"),
                        html: c.data("html"),
                        attributes: c.data("attributes"),
                        badge: c.data("badge"),
                        badges: c.data("badges"),
                        actions: c.data("actions"),
                        type: c.data("type"),
                        collapsed: c.data("collapsed"),
                        link: c.data("link"),
                        href: c.data("href"),
                        secondary: c.data("secondary"),
                        style: c.data("style")
                    }, c)
                }
                ),
                o.leaves) {
                    let i = t.utils.isObject(o.leaves);
                    i && this.fillTree(i)
                }
                this._recheckTree()
            },
            _createEvents: function() {
                let e = this
                  , o = this.element;
                o.on(t.events.click, ".node-toggle", function(a) {
                    let s = r(this).parent();
                    e.toggleNode(s),
                    a.preventDefault()
                }),
                o.on(t.events.click, "a", function(a) {
                    let i = r(this).parent();
                    e.current(i),
                    e._fireEvent("node-click", {
                        node: i[0]
                    }),
                    a.preventDefault()
                }),
                o.on(t.events.dblclick, "a", function(a) {
                    let i = r(this).closest("li")
                      , s = i.children(".node-toggle")
                      , c = i.children("ul");
                    (s.length > 0 || c.length > 0) && e.toggleNode(i),
                    e._fireEvent("node-dbl-click", {
                        node: i[0]
                    }),
                    a.preventDefault()
                }),
                o.on(t.events.click, "input[type=radio]", function() {
                    let a = r(this)
                      , i = a.is(":checked")
                      , s = a.closest("li");
                    e.current(s),
                    e._fireEvent("radio-click", {
                        checked: i,
                        check: a[0],
                        node: s[0]
                    })
                }),
                o.on(t.events.click, "input[type=checkbox]", function() {
                    let a = r(this)
                      , i = a.is(":checked")
                      , s = a.closest("li");
                    e._recheck(a),
                    e._fireEvent("check-click", {
                        checked: i,
                        check: a[0],
                        node: s[0]
                    })
                })
            },
            _recheck: function(e) {
                let o = r(e)
                  , a = o.is(":checked")
                  , i = o.closest("li");
                this.current(i);
                let s = o.closest("li").find("ul input[type=checkbox]");
                s.attr("data-indeterminate", !1),
                s.prop("indeterminate", !1),
                s.prop("checked", a),
                s.trigger("change"),
                this._recheckTree()
            },
            _recheckTree: function(e) {
                setTimeout( () => {
                    let a = this.element.find("input[type=checkbox]").reverse();
                    r.each(a.reverse(), function() {
                        let i = r(this)
                          , s = i.closest("li").children("ul").find("input[type=checkbox]").length
                          , c = i.closest("li").children("ul").find("input[type=checkbox]").filter(d => d.checked).length;
                        s > 0 && c === 0 && (i.attr("data-indeterminate", !1),
                        i.prop("indeterminate", !1),
                        i.prop("checked", !1),
                        i.trigger("change")),
                        c === 0 ? (i.attr("data-indeterminate", !1),
                        i.prop("indeterminate", !1)) : c > 0 && s > c ? (i.attr("data-indeterminate", !0),
                        i.prop("indeterminate", !0)) : s === c && (i.attr("data-indeterminate", !1),
                        i.prop("indeterminate", !1),
                        i.prop("checked", !0),
                        i.trigger("change"))
                    })
                }
                , e != null ? e : this.options.recheckTimeout)
            },
            current: function(e) {
                let o = this.element;
                if (!e)
                    return o.find(".current");
                o.find(".current").removeClass("current"),
                e.addClass("current")
            },
            toggleNode: function(e) {
                let o = r(e)
                  , a = this.options
                  , i = !o.data("collapsed");
                o.toggleClass("expanded"),
                o.data("collapsed", i);
                let s = i === !0 ? "slideUp" : "slideDown";
                i ? this._fireEvent("collapse-node", {
                    node: o[0]
                }) : this._fireEvent("expand-node", {
                    node: o[0]
                }),
                o.children("ul")[s](a.duration)
            },
            addTo: function(e, o) {
                let a = this.element, i, s, c, d;
                return e ? (d = r(e),
                i = d.children("ul"),
                i.length === 0 && (i = r("<ul>").appendTo(d),
                c = this._createToggle(),
                c.appendTo(d),
                d.addClass("expanded")),
                d == null || d.addClass("tree-node")) : i = a,
                o.type === "checkbox" || o.type === "radio" ? s = this._createCheckNode(o) : o.type === "input" ? s = this._createInputNode(o) : s = this._createNode(o),
                s.appendTo(i),
                this._fireEvent("node-insert", {
                    node: s[0],
                    parent: d ? d[0] : null
                }),
                this._recheckTree(),
                s
            },
            insertBefore: function(e, o) {
                let a = this._createNode(o);
                if (!e)
                    return this.addTo(void 0, o);
                let i = r(e);
                return a.insertBefore(i),
                this._fireEvent("node-insert", {
                    node: a[0],
                    parent: i ? i[0] : null
                }),
                a
            },
            insertAfter: function(e, o) {
                let a = this._createNode(o);
                if (!e)
                    return this.addTo(void 0, o);
                let i = r(e);
                return a.insertAfter(i),
                this._fireEvent("node-insert", {
                    node: a[0],
                    parent: i[0]
                }),
                a
            },
            del: function(e) {
                let o = this.element
                  , a = r(e)
                  , i = a.closest("ul")
                  , s = i.closest("li");
                this._fireEvent("node-delete", {
                    node: a[0]
                }),
                a.remove(),
                i.children().length === 0 && !i.is(o) && (i.remove(),
                s.removeClass("expanded"),
                s.children(".node-toggle").remove()),
                this._recheckTree()
            },
            clean: function(e) {
                let o = r(e);
                o.children("ul").remove(),
                o.removeClass("expanded"),
                o.children(".node-toggle").remove(),
                this._fireEvent("node-clean", {
                    node: o[0]
                })
            },
            collapseNode(e) {
                let o = this.options
                  , a = r(e);
                a.removeClass("expanded"),
                a.data("collapsed", !0),
                a.children("ul").slideUp(o.duration),
                this._fireEvent("collapse-node", {
                    node: a[0]
                })
            },
            expandNode(e) {
                let o = this.options
                  , a = r(e);
                a.hasClass("tree-node") && (a.addClass("expanded"),
                a.data("collapsed", !1),
                a.children("ul").slideDown(o.duration),
                this._fireEvent("expand-node", {
                    node: a[0]
                }))
            },
            collapseAll() {
                let e = this.element
                  , o = this.options;
                e.find(".expanded").each( (a, i) => {
                    let s = r(i)
                      , c = !s.data("collapsed");
                    s.toggleClass("expanded"),
                    s.data("collapsed", c);
                    let d = c === !0 ? "slideUp" : "slideDown";
                    c ? this._fireEvent("collapse-node", {
                        node: s[0]
                    }) : this._fireEvent("expand-node", {
                        node: s[0]
                    }),
                    s.children("ul")[d](o.duration)
                }
                ),
                this._fireEvent("collapse-all")
            },
            expandAll() {
                let e = this.element
                  , o = this.options;
                e.find(".tree-node:not(.expanded)").each( (a, i) => {
                    let s = r(i)
                      , c = !s.data("collapsed");
                    s.toggleClass("expanded"),
                    s.data("collapsed", c);
                    let d = c === !0 ? "slideUp" : "slideDown";
                    c ? this._fireEvent("collapse-node", {
                        node: s[0]
                    }) : this._fireEvent("expand-node", {
                        node: s[0]
                    }),
                    s.children("ul")[d](o.duration)
                }
                ),
                this._fireEvent("expand-all")
            },
            fillTree: function(e, o) {
                for (let a of e) {
                    let i = this.addTo(o, st(V({}, a), {
                        type: a.items ? "node" : "item"
                    }));
                    a.items && this.fillTree(a.items, i)
                }
            },
            changeAttribute: function(e, o) {
                e === "data-recheck-timeout" && (this.options.recheckTimeout = o != null ? o : 100)
            },
            destroy: function() {
                let e = this.element;
                e.off(t.events.click, ".node-toggle"),
                e.off(t.events.click, "li > .caption"),
                e.off(t.events.dblclick, "li > .caption"),
                e.off(t.events.click, "input[type=radio]"),
                e.off(t.events.click, "input[type=checkbox]"),
                e.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            required: o => G.safeParse(G.required(), o).ok,
            length: (o, a) => G.safeParse(G.length(+a), o).ok,
            minlength: (o, a) => G.safeParse(G.minLength(+a), o).ok,
            maxlength: (o, a) => G.safeParse(G.maxLength(+a), o).ok,
            min: (o, a) => G.safeParse(G.minValue(+a), +o).ok,
            max: (o, a) => G.safeParse(G.maxValue(+a), +o).ok,
            email: o => G.safeParse(G.email(), o).ok,
            domain: o => G.safeParse(G.domain(), o).ok,
            url: o => G.safeParse(G.url(), o).ok,
            date: (o, a, i) => {
                try {
                    return a ? Datetime.from(o, a, i) : datetime(o),
                    !0
                } catch (s) {
                    return !1
                }
            }
            ,
            number: o => G.safeParse(G.number(), +o).ok,
            integer: o => G.safeParse(G.integer(), +o).ok,
            safeInteger: o => G.safeParse(G.safeInteger(), +o).ok,
            float: o => G.safeParse(G.float(), +o).ok,
            digits: o => G.safeParse(G.digits(), o).ok,
            hexcolor: o => G.safeParse(G.hexColor(), o).ok,
            color: o => t.utils.isValue(o) ? Farbe.Palette.color(o, Farbe.StandardColors) || Farbe.Routines.isColor(o) : !1,
            pattern: (o, a) => G.safeParse(G.pattern(a), o).ok,
            compare: (o, a) => o == a,
            not: (o, a) => o != a,
            notequals: (o, a) => o !== a,
            equals: (o, a) => o === a,
            custom: (o, a) => t.utils.isFunc(a) === !1 ? !1 : t.utils.exec(a, [o]),
            is_control: o => o.attr("data-role"),
            reset_state: o => {
                let a = r(o);
                l.is_control(a) ? a.parent().removeClass("invalid valid") : a.removeClass("invalid valid")
            }
            ,
            set_valid_state: o => {
                let a = r(o);
                l.is_control(a) ? a.parent().addClass("valid") : a.addClass("valid")
            }
            ,
            set_invalid_state: o => {
                let a = r(o);
                l.is_control(a) ? a.parent().addClass("invalid") : a.addClass("invalid")
            }
            ,
            reset: function(o) {
                let a = this;
                return r.each(r(o).find("[data-validate]"), function() {
                    a.reset_state(this)
                }),
                this
            },
            validate: function(o, a, i, s, c) {
                let d = !0, p = r(o), m = p.data("validate") !== void 0 ? String(p.data("validate")).split(" ").map(b => b.trim()) : [], g = [], f = p.closest("form").length > 0, u, h;
                return m.length === 0 ? !0 : (this.reset_state(p),
                p.attr("type") && p.attr("type").toLowerCase() === "checkbox" ? (m.indexOf("required") === -1 ? d = !0 : d = p.is(":checked"),
                d === !1 && g.push("required"),
                a !== void 0 && (a.val += d ? 0 : 1)) : p.attr("type") && p.attr("type").toLowerCase() === "radio" ? (u = p.attr("name"),
                typeof u == "undefined" ? d = !0 : (h = r(`input[name=${u.replace("[", "\\[").replace("]", "\\]")}]:checked`),
                d = h.length > 0),
                a !== void 0 && (a.val += d ? 0 : 1)) : r.each(m, function() {
                    if (d === !1)
                        return;
                    let b = this.split("="), w, Q, C;
                    w = b[0],
                    b.shift(),
                    Q = b.join("="),
                    ["compare", "not", "equals", "notequals"].indexOf(w) > -1 && (Q = f ? p[0].form.elements[Q].value : r(`[name=${Q}]`).val()),
                    w === "date" && (Q = p.attr("data-value-format"),
                    C = p.attr("data-value-locale")),
                    t.utils.isFunc(l[w]) === !1 ? d = !0 : c === !0 || w === "required" || p.val().trim() !== "" ? d = l[w](p.val(), Q, C) : d = !0,
                    d === !1 && g.push(w),
                    a !== void 0 && (a.val += d ? 0 : 1)
                }),
                d === !1 ? (this.set_invalid_state(p),
                a !== void 0 && a.log.push({
                    input: p[0],
                    name: p.attr("name"),
                    value: p.val(),
                    funcs: m,
                    errors: g
                }),
                s !== void 0 && t.utils.exec(s, [p, p.val()], p[0])) : (this.set_valid_state(p),
                i !== void 0 && t.utils.exec(i, [p, p.val()], p[0])),
                d)
            }
        };
        t.validator = l;
        let e = {
            validatorDeferred: 0,
            submitTimeout: 200,
            interactiveCheck: !1,
            clearInvalid: 0,
            requiredMode: !0,
            useRequiredClass: !0,
            onBeforeSubmit: t.noop_true,
            onSubmit: t.noop,
            onError: t.noop,
            onValidate: t.noop,
            onErrorForm: t.noop,
            onValidateForm: t.noop,
            onValidatorCreate: t.noop
        };
        t.validatorSetup = o => {
            e = r.extend({}, e, o)
        }
        ,
        typeof globalThis.metroValidatorSetup != "undefined" && t.validatorSetup(globalThis.metroValidatorSetup),
        t.Component("validator", {
            init: function(o, a) {
                return this._super(a, o, e, {
                    _onsubmit: null,
                    _onreset: null,
                    result: []
                }),
                this
            },
            _create: function() {
                let o = this.element
                  , a = this.options
                  , i = o.find("[data-validate]");
                o.attr("novalidate", "novalidate"),
                r.each(i, function() {
                    let s = r(this);
                    s.data("validate").indexOf("required") > -1 && a.useRequiredClass === !0 && (l.is_control(s) ? s.parent().addClass("required") : s.addClass("required")),
                    a.interactiveCheck === !0 && s.on(t.events.inputchange, function() {
                        l.validate(this, void 0, void 0, void 0, a.requiredMode)
                    })
                }),
                this._onsubmit = null,
                this._onreset = null,
                o[0].onsubmit !== null && (this._onsubmit = o[0].onsubmit,
                o[0].onsubmit = null),
                o[0].onreset !== null && (this._onreset = o[0].onreset,
                o[0].onreset = null),
                o[0].onsubmit = () => this._submit(),
                o[0].onreset = () => this._reset(),
                this._fireEvent("validator-create", {
                    element: o
                })
            },
            _reset: function() {
                l.reset(this.element),
                this._onreset !== null && t.utils.exec(this._onreset, null, this.element[0])
            },
            _submit: function() {
                let o = this.element
                  , a = this.options
                  , i = this.elem
                  , s = o.find("[data-validate]")
                  , c = o.find("input[type=submit], button[type=submit]")
                  , d = {
                    val: 0,
                    log: []
                }
                  , p = r.serializeToArray(o);
                return c.length > 0 && c.attr("disabled", "disabled").addClass("disabled"),
                r.each(s, function() {
                    l.validate(this, d, a.onValidate, a.onError, a.requiredMode)
                }),
                c.removeAttr("disabled").removeClass("disabled"),
                d.val += t.utils.exec(a.onBeforeSubmit, [p], this.elem) === !1 ? 1 : 0,
                d.val === 0 ? (this._fireEvent("validate-form", {
                    data: p
                }),
                setTimeout( () => {
                    t.utils.exec(a.onSubmit, [p], i),
                    o.fire("formsubmit", {
                        data: p
                    }),
                    this._onsubmit !== null && t.utils.exec(this._onsubmit, null, i)
                }
                , a.submitTimeout)) : (this._fireEvent("error-form", {
                    log: d.log,
                    data: p
                }),
                a.clearInvalid > 0 && setTimeout( () => {
                    r.each(s, function() {
                        let m = r(this);
                        l.is_control(m) ? m.parent().removeClass("invalid") : m.removeClass("invalid")
                    })
                }
                , a.clearInvalid)),
                d.val === 0
            },
            changeAttribute: () => {}
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            duration: 4e3,
            animationDuration: null,
            transitionDuration: null,
            transition: "fade",
            animation: null,
            slides: [],
            shuffle: !1,
            align: "center",
            valign: "center",
            loop: !0,
            autoplay: !0,
            mute: !0,
            cover: !0,
            preload: !0,
            timer: !0,
            overlay: 2,
            color: null,
            volume: 1,
            onPlay: t.noop,
            onPause: t.noop,
            onEnd: t.noop,
            onWalk: t.noop,
            onNext: t.noop,
            onPrev: t.noop,
            onJump: t.noop,
            onVegasCreate: t.noop
        };
        t.vegasSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroVegasSetup != "undefined" && t.vegasSetup(globalThis.metroVegasSetup),
        t.Component("vegas", {
            videoCache: {},
            init: function(e, o) {
                return this.transitions = ["fade", "fade2", "slideLeft", "slideLeft2", "slideRight", "slideRight2", "slideUp", "slideUp2", "slideDown", "slideDown2", "zoomIn", "zoomIn2", "zoomOut", "zoomOut2", "swirlLeft", "swirlLeft2", "swirlRight", "swirlRight2"],
                this.animations = ["kenburns", "kenburnsUp", "kenburnsDown", "kenburnsRight", "kenburnsLeft", "kenburnsUpLeft", "kenburnsUpRight", "kenburnsDownLeft", "kenburnsDownRight"],
                this.support = {
                    objectFit: "objectFit"in document.body.style,
                    video: !/(Android|webOS|Phone|iPad|iPod|BlackBerry|Windows Phone)/i.test(navigator.userAgent)
                },
                this._super(o, e, l, {
                    slide: 0,
                    slides: null,
                    total: 0,
                    noshow: !1,
                    paused: !1,
                    ended: !1,
                    timer: null,
                    overlay: null,
                    first: !0,
                    timeout: !1
                }),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options;
                this.slides = t.utils.isObject(o.slides) || [],
                this.total = this.slides.length,
                this.noshow = this.total < 2,
                this.paused = !o.autoplay || this.noshow,
                o.shuffle && this.slides.shuffle(),
                o.preload && this._preload(),
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("vegas-create", {
                    element: e
                })
            },
            _createStructure: function() {
                let e = this.element, o = this.options, a = e[0].tagName === "BODY", i;
                a || (e.css("height", e.css("height")),
                i = r('<div class="vegas-wrapper">').css("overflow", e.css("overflow")).css("padding", e.css("padding")),
                e.css("padding") || i.css("padding-top", e.css("padding-top")).css("padding-bottom", e.css("padding-bottom")).css("padding-left", e.css("padding-left")).css("padding-right", e.css("padding-right")),
                e.children().appendTo(i),
                e.clear()),
                e.addClass("vegas-container"),
                a || e.append(i),
                o.timer && (this.timer = r('<div class="vegas-timer"><div class="vegas-timer-progress">'),
                e.append(this.timer)),
                o.overlay && (this.overlay = r('<div class="vegas-overlay">').addClass(`overlay${typeof o.overlay == "boolean" || Number.isNaN(o.overlay) ? 2 : +o.overlay}`),
                e.append(this.overlay)),
                setTimeout( () => {
                    t.utils.exec(o.onPlay, null, e[0]),
                    this._goto(this.slide)
                }
                , 1)
            },
            _createEvents: () => {}
            ,
            _preload: function() {
                let e, o;
                for (o = 0; o < this.slides.length; o++) {
                    let a = this.slides[o];
                    a.src && (e = new Image,
                    e.src = this.slides[o].src),
                    a.video && (Array.isArray(a.video) ? this._video(a.video) : this._video(a.video.src))
                }
            },
            _slideShow: function() {
                let e = this.options;
                this.total > 1 && !this.ended && !this.paused && !this.noshow && (this.timeout = setTimeout( () => {
                    this.next()
                }
                , e.duration))
            },
            _timer: function(e) {
                let o = this.options;
                clearTimeout(this.timeout),
                this.timer && (this.timer.removeClass("vegas-timer-running").find("div").css("transition-duration", "0ms"),
                !(this.ended || this.paused || this.noshow) && e && setTimeout( () => {
                    this.timer.addClass("vegas-timer-running").find("div").css("transition-duration", `${+o.duration - 100}ms`)
                }
                , 100))
            },
            _fadeSoundIn: function(e, o) {
                let a = this.options;
                r.animate({
                    el: e,
                    draw: {
                        volume: +a.volume
                    },
                    dur: o
                })
            },
            _fadeSoundOut: (e, o) => {
                r.animate({
                    el: e,
                    draw: {
                        volume: 0
                    },
                    dur: o
                })
            }
            ,
            _video: function(e) {
                let o, a = e.toString(), i = Array.isArray(e) ? e : [e];
                if (this.videoCache[a])
                    return this.videoCache[a];
                let s = document.createElement("video");
                s.preload = !0;
                for (let c of i)
                    o = document.createElement("source"),
                    o.src = c,
                    s.appendChild(o);
                return this.videoCache[a] = s,
                s
            },
            _goto: function(e) {
                let o = this
                  , a = this.element
                  , i = this.options
                  , s = e;
                typeof this.slides[s] == "undefined" && (s = 0),
                this.slide = s;
                let c, d, p, m, g, f = a.children(".vegas-slide"), u = this.slides[e], h = i.cover, b, w, Q, C;
                this.first && (this.first = !1),
                h !== "repeat" && (h === !0 ? h = "cover" : h === !1 && (h = "contain")),
                i.transition === "random" ? b = r.random(this.transitions) : b = i.transition ? i.transition : this.transitions[0],
                i.animation === "random" ? w = r.random(this.animations) : w = i.animation ? i.animation : this.animations[0],
                i.transitionDuration ? i.transitionDuration === "auto" || +i.transitionDuration > +i.duration ? Q = +i.duration : Q = +i.transitionDuration : Q = +i.duration,
                i.animationDuration ? i.animationDuration === "auto" || +i.animationDuration > +i.duration ? C = +i.duration : C = +i.animationDuration : C = +i.duration,
                c = r("<div>").addClass("vegas-slide").addClass(`vegas-transition-${b}`),
                this.support.video && u.video ? (p = Array.isArray(u.video) ? this._video(u.video) : this._video(u.video.src),
                p.loop = u.video.loop ? u.video.loop : i.loop,
                p.muted = u.video.mute ? u.video.mute : i.mute,
                p.muted ? p.pause() : this._fadeSoundIn(p, Q),
                g = r(p).addClass("vegas-video").css("background-color", i.color || "#000000"),
                this.support.objectFit ? g.css("object-position", `${i.align} ${i.valign}`).css("object-fit", h).css("width", "100%").css("height", "100%") : h === "contain" && g.css("width", "100%").css("height", "100%"),
                c.append(g)) : (m = new Image,
                d = r("<div>").addClass("vegas-slide-inner").css({
                    backgroundImage: `url("${u.src}")`,
                    backgroundColor: i.color || "#000000",
                    backgroundPosition: `${i.align} ${i.valign}`
                }),
                h === "repeat" ? d.css("background-repeat", "repeat") : d.css("background-size", h),
                w && d.addClass(`vegas-animation-${w}`).css("animation-duration", `${C}ms`),
                c.append(d)),
                f.length ? f.eq(f.length - 1).after(c) : a.prepend(c),
                f.css("transition", "all 0ms").each(function() {
                    this.className = "vegas-slide",
                    this.tagName === "VIDEO" && (this.className += " vegas-video"),
                    b && (this.className += ` vegas-transition-${b}`,
                    this.className += ` vegas-transition-${b}-in`)
                }),
                this._timer(!1);
                function B() {
                    o._timer(!0),
                    setTimeout( () => {
                        f.css("transition", `all ${Q}ms`).addClass(`vegas-transition-${b}-out`),
                        f.each( () => {
                            let x = f.find("video").get(0);
                            x && (x.volume = 1,
                            o._fadeSoundOut(x, Q))
                        }
                        ),
                        c.css("transition", `all ${Q}ms`).addClass(`vegas-transition-${b}-in`);
                        for (let x = 0; x < f.length - 1; x++)
                            f.eq(x).remove();
                        o._fireEvent("walk", {
                            slide: o.current(!0)
                        }),
                        o._slideShow()
                    }
                    , 100)
                }
                p ? (p.readyState === 4 && (p.currentTime = 0),
                p.play(),
                B()) : (m.src = u.src,
                m.complete ? B() : m.onload = B)
            },
            _end: function() {
                this.ended = this.options.autoplay,
                this._timer(!1),
                this._fireEvent("end", {
                    slide: this.current(!0)
                })
            },
            play: function() {
                this.paused && (this._fireEvent("play", {
                    slide: this.current(!0)
                }),
                this.paused = !1,
                this.next())
            },
            pause: function() {
                this._timer(!1),
                this.paused = !0,
                this._fireEvent("pause", {
                    slide: this.current(!0)
                })
            },
            toggle: function() {
                this.paused ? this.play() : this.pause()
            },
            playing: function() {
                return !this.paused && !this.noshow
            },
            current: function(e) {
                return e ? {
                    slide: this.slide,
                    data: this.slides[this.slide]
                } : this.slide
            },
            jump: function(e) {
                if (e <= 0 || e > this.slides.length || e === this.slide + 1)
                    return this;
                this.slide = e - 1,
                this._fireEvent("jump", {
                    slide: this.current(!0)
                }),
                this._goto(this.slide)
            },
            next: function() {
                let e = this.options;
                if (this.slide++,
                this.slide >= this.slides.length) {
                    if (!e.loop)
                        return this._end();
                    this.slide = 0
                }
                this._fireEvent("next", {
                    slide: this.current(!0)
                }),
                this._goto(this.slide)
            },
            prev: function() {
                let e = this.options;
                if (this.slide--,
                this.slide < 0) {
                    if (!e.loop)
                        return this.slide++,
                        this._end();
                    this.slide = this.slides.length - 1
                }
                this._fireEvent("prev", {
                    slide: this.current(!0)
                }),
                this._goto(this.slide)
            },
            changeAttribute: function(e) {
                let o = this.element
                  , a = this.options
                  , i = Str.camelCase(e.replace("data-", ""));
                i === "slides" ? (a.slides = o.attr("data-slides"),
                this.slides = t.utils.isObject(a.slides) || [],
                this.total = this.slides.length,
                this.noshow = this.total < 2,
                this.paused = !this.options.autoplay || this.noshow) : typeof l[i] != "undefined" && (a[i] = JSON.parse(o.attr(e)))
            },
            destroy: function() {
                let e = this.element
                  , o = this.options;
                clearTimeout(this.timeout),
                e.removeClass("vegas-container"),
                e.find("> .vegas-slide").remove(),
                e.find("> .vegas-wrapper").children().appendTo(e),
                e.find("> .vegas-wrapper").remove(),
                o.timer && this.timer.remove(),
                o.overlay && this.overlay.remove(),
                e.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            videoDeferred: 0,
            src: null,
            poster: "",
            logo: "",
            logoHeight: 32,
            logoWidth: "auto",
            logoTarget: "",
            volume: .5,
            loop: !1,
            autoplay: !1,
            fullScreenMode: t.fullScreenMode.DESKTOP,
            aspectRatio: t.aspectRatio.HD,
            controlsHide: 3e3,
            showLoop: !0,
            showPlay: !0,
            showStop: !0,
            showMute: !0,
            showFull: !0,
            showStream: !0,
            showVolume: !0,
            showInfo: !0,
            loopIcon: "\u2B94",
            stopIcon: "\u23F9",
            playIcon: "\u25B6",
            pauseIcon: "\u23F8",
            muteIcon: "\u{1F507}",
            volumeLowIcon: "\u{1F508}",
            volumeMediumIcon: "\u{1F509}",
            volumeHighIcon: "\u{1F50A}",
            screenMoreIcon: "\u2B1C",
            screenLessIcon: "\u25AB\uFE0F",
            onPlay: t.noop,
            onPause: t.noop,
            onStop: t.noop,
            onEnd: t.noop,
            onMetadata: t.noop,
            onTime: t.noop,
            onVideoPlayerCreate: t.noop
        };
        t.videoPlayerSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroVideoPlayerSetup != "undefined" && t.videoPlayerSetup(globalThis.metroVideoPlayerSetup),
        t.Component("video-player", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    fullscreen: !1,
                    preloader: null,
                    player: null,
                    video: o,
                    stream: null,
                    volume: null,
                    volumeBackup: 0,
                    muted: !1,
                    fullScreenInterval: !1,
                    isPlaying: !1,
                    id: null
                }),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options;
                this.id = e.attr("id") || Hooks.useId(this.elem),
                t.fullScreenEnabled === !1 && (o.fullScreenMode = t.fullScreenMode.WINDOW),
                this._createPlayer(),
                this._createControls(),
                this._createEvents(),
                this._setAspectRatio(),
                o.autoplay === !0 && this.play(),
                this._fireEvent("video-player-create", {
                    element: e,
                    player: this.player
                })
            },
            _createPlayer: function() {
                let e = this.element
                  , o = this.options
                  , a = this.video
                  , i = e.wrap("<div>").addClass(`media-player video-player ${e[0].className}`)
                  , s = r("<div>").addClass("preloader").appendTo(i)
                  , c = r("<a>").attr("href", o.logoTarget).addClass("logo").appendTo(i);
                e.wrap("<div>").addClass("video-wrapper"),
                r.each(["muted", "autoplay", "controls", "height", "width", "loop", "poster", "preload"], function() {
                    e.removeAttr(this)
                }),
                e.attr("preload", "auto"),
                o.poster !== "" && e.attr("poster", o.poster),
                a.volume = o.volume,
                s.activity({
                    type: "cycle",
                    style: "color"
                }),
                s.hide(),
                this.preloader = s,
                o.logo !== "" && r("<img>").css({
                    height: o.logoHeight,
                    width: o.logoWidth
                }).attr("src", o.logo).appendTo(c),
                o.src !== null && this._setSource(o.src),
                e[0].className = "",
                this.player = i
            },
            _setSource: function(e) {
                let o = this.element;
                o.find("source").remove(),
                o.removeAttr("src"),
                Array.isArray(e) ? r.each(e, function() {
                    this.src !== void 0 && r("<source>").attr("src", this.src).attr("type", this.type !== void 0 ? this.type : "").appendTo(o)
                }) : o.attr("src", e)
            },
            _createControls: function() {
                let e = this.element
                  , o = this.options
                  , a = this.elem
                  , i = r("<div>").addClass("controls").addClass(o.clsControls).appendTo(this.player)
                  , s = r("<div>").addClass("stream").appendTo(i)
                  , c = r("<input>").addClass("stream-slider ultra-thin cycle-marker").appendTo(s)
                  , d = r("<div>").addClass("volume").appendTo(i)
                  , p = r("<input>").addClass("volume-slider ultra-thin cycle-marker").appendTo(d)
                  , m = r("<div>").addClass("info-box").appendTo(i);
                o.showInfo !== !0 && m.hide(),
                t.makePlugin(c, "slider", {
                    clsMarker: "bg-red",
                    clsHint: "bg-cyan fg-white",
                    clsComplete: "bg-cyan",
                    hint: !0,
                    onStart: () => {
                        a.paused || a.pause()
                    }
                    ,
                    onStop: f => {
                        a.seekable.length > 0 && (a.currentTime = (this.duration * f / 100).toFixed(0)),
                        a.paused && a.currentTime > 0 && a.play()
                    }
                }),
                this.stream = c,
                o.showStream !== !0 && s.hide(),
                t.makePlugin(p, "slider", {
                    clsMarker: "bg-red",
                    clsHint: "bg-cyan fg-white",
                    hint: !0,
                    value: o.volume * 100,
                    onChangeValue: f => {
                        a.volume = f / 100
                    }
                }),
                this.volume = p,
                o.showVolume !== !0 && d.hide();
                let g;
                o.showLoop === !0 && (g = r("<button>").attr("type", "button").addClass("button square loop").attr("title", this.strings.label_loop).html(o.loopIcon).appendTo(i)),
                o.showPlay === !0 && r("<button>").attr("type", "button").addClass("button square play").attr("title", this.strings.label_play).html(o.playIcon).appendTo(i),
                o.showStop === !0 && r("<button>").attr("type", "button").addClass("button square stop").attr("title", this.strings.label_stop).html(o.stopIcon).appendTo(i),
                o.showMute === !0 && r("<button>").attr("type", "button").addClass("button square mute").attr("title", this.strings.label_mute).html(o.muteIcon).appendTo(i),
                o.showFull === !0 && r("<button>").attr("type", "button").addClass("button square full").html(o.screenMoreIcon).appendTo(i),
                o.loop === !0 && (g.addClass("active"),
                e.attr("loop", "loop")),
                this._setVolume(),
                o.muted && (this.volumeBackup = a.volume,
                t.getPlugin(this.volume, "slider").val(0),
                a.volume = 0),
                m.html("00:00 / 00:00")
            },
            _createEvents: function() {
                let e = this.element
                  , o = this.options
                  , a = this.elem
                  , i = this.player;
                e.on("loadstart", () => {
                    this.preloader.show()
                }
                ),
                e.on("loadedmetadata", () => {
                    this.duration = a.duration.toFixed(0),
                    this._setInfo(0, this.duration),
                    t.utils.exec(o.onMetadata, [a, i], e[0])
                }
                ),
                e.on("canplay", () => {
                    this._setBuffer(),
                    this.preloader.hide()
                }
                ),
                e.on("progress", () => {
                    this._setBuffer()
                }
                ),
                e.on("timeupdate", () => {
                    let s = Math.round(a.currentTime * 100 / this.duration);
                    this._setInfo(a.currentTime, this.duration),
                    t.getPlugin(this.stream, "slider").val(s),
                    t.utils.exec(o.onTime, [a.currentTime, this.duration, a, i], e[0])
                }
                ),
                e.on("waiting", () => {
                    this.preloader.show()
                }
                ),
                e.on("loadeddata", () => {}
                ),
                e.on("play", () => {
                    i.find(".play").html(o.pauseIcon),
                    t.utils.exec(o.onPlay, [a, i], e[0])
                }
                ),
                e.on("pause", () => {
                    i.find(".play").html(o.playIcon),
                    t.utils.exec(o.onPause, [a, i], e[0])
                }
                ),
                e.on("stop", () => {
                    t.getPlugin(this.stream, "slider").val(0),
                    t.utils.exec(o.onStop, [a, i], e[0])
                }
                ),
                e.on("ended", () => {
                    t.getPlugin(this.stream, "slider").val(0),
                    t.utils.exec(o.onEnd, [a, i], e[0])
                }
                ),
                e.on("volumechange", () => {
                    this._setVolume()
                }
                ),
                i.on(t.events.click, ".play", () => {
                    a.paused ? this.play() : this.pause()
                }
                ),
                i.on(t.events.click, ".stop", () => {
                    this.stop()
                }
                ),
                i.on(t.events.click, ".mute", () => {
                    this._toggleMute()
                }
                ),
                i.on(t.events.click, ".loop", () => {
                    this._toggleLoop()
                }
                ),
                i.on(t.events.click, ".full", () => {
                    this.fullscreen = !this.fullscreen,
                    i.find(".full").html(this.fullscreen === !0 ? o.screenLessIcon : o.screenMoreIcon),
                    o.fullScreenMode === t.fullScreenMode.WINDOW ? this.fullscreen === !0 ? i.addClass("full-screen") : i.removeClass("full-screen") : this.fullscreen === !0 ? (t.requestFullScreen(a),
                    this.fullScreenInterval === !1 && (this.fullScreenInterval = setInterval( () => {
                        t.inFullScreen() === !1 && (this.fullscreen = !1,
                        clearInterval(this.fullScreenInterval),
                        this.fullScreenInterval = !1,
                        i.find(".full").html(o.screenMoreIcon))
                    }
                    , 1e3))) : t.exitFullScreen()
                }
                ),
                r(globalThis).on(t.events.keyup, s => {
                    this.fullscreen && s.keyCode === 27 && i.find(".full").click()
                }
                , {
                    ns: this.id
                }),
                r(globalThis).on(t.events.resize, () => {
                    this._setAspectRatio()
                }
                , {
                    ns: this.id
                })
            },
            _toggleLoop: function() {
                let e = this.player.find(".loop");
                e.length !== 0 && (e.toggleClass("active"),
                e.hasClass("active") ? this.element.attr("loop", "loop") : this.element.removeAttr("loop"))
            },
            _toggleMute: function() {
                this.muted = !this.muted,
                this.muted === !1 ? this.video.volume = this.volumeBackup : (this.volumeBackup = this.video.volume,
                this.video.volume = 0),
                t.getPlugin(this.volume, "slider").val(this.muted === !1 ? this.volumeBackup * 100 : 0)
            },
            _setInfo: function(e, o) {
                this.player.find(".info-box").html(`${t.utils.secondsToFormattedString(Math.round(e))} / ${t.utils.secondsToFormattedString(Math.round(o))}`)
            },
            _setBuffer: function() {
                let e = this.video.buffered.length ? Math.round(Math.floor(this.video.buffered.end(0)) / Math.floor(this.video.duration) * 100) : 0;
                t.getPlugin(this.stream, "slider").buff(e)
            },
            _setVolume: function() {
                let e = this.video
                  , o = this.player
                  , a = this.options
                  , i = o.find(".mute")
                  , s = e.volume * 100;
                s > 1 && s < 30 ? i.html(a.volumeLowIcon) : s >= 30 && s < 60 ? i.html(a.volumeMediumIcon) : s >= 60 && s <= 100 ? i.html(a.volumeHighIcon) : i.html(a.muteIcon)
            },
            _setAspectRatio: function() {
                let e = this.player, o = this.options, a = e.outerWidth(), i;
                switch (o.aspectRatio) {
                case t.aspectRatio.SD:
                    i = t.utils.aspectRatioH(a, "4/3");
                    break;
                case t.aspectRatio.CINEMA:
                    i = t.utils.aspectRatioH(a, "21/9");
                    break;
                default:
                    i = t.utils.aspectRatioH(a, "16/9")
                }
                e.outerHeight(i)
            },
            aspectRatio: function(e) {
                this.options.aspectRatio = e,
                this._setAspectRatio()
            },
            play: function(e) {
                e && this._setSource(e),
                !(this.element.attr("src") === void 0 && this.element.find("source").length === 0) && (this.isPlaying = !0,
                this.video.play())
            },
            pause: function() {
                this.isPlaying = !1,
                this.video.pause()
            },
            resume: function() {
                this.video.paused && this.play()
            },
            stop: function() {
                this.isPlaying = !1,
                this.video.pause(),
                this.video.currentTime = 0,
                t.getPlugin(this.stream, "slider").val(0),
                this._offMouse()
            },
            setVolume: function(e) {
                if (typeof e == "undefined")
                    return this.video.volume;
                let o = Number.parseFloat(e);
                o > 1 && (o /= 100),
                this.video.volume = o,
                t.getPlugin(this.volume[0], "slider").val(e * 100)
            },
            loop: function() {
                this._toggleLoop()
            },
            mute: function() {
                this._toggleMute()
            },
            changeAspectRatio: function() {
                this.options.aspectRatio = this.element.attr("data-aspect-ratio"),
                this._setAspectRatio()
            },
            changeSource: function() {
                let e = JSON.parse(this.element.attr("data-src"));
                this.play(e)
            },
            changeVolume: function() {
                let e = this.element.attr("data-volume");
                this.setVolume(e)
            },
            changeAttribute: function(e) {
                switch (e) {
                case "data-aspect-ratio":
                    this.changeAspectRatio();
                    break;
                case "data-src":
                    this.changeSource();
                    break;
                case "data-volume":
                    this.changeVolume();
                    break
                }
            },
            destroy: function() {
                let e = this.element
                  , o = this.player;
                return t.getPlugin(this.stream, "slider").destroy(),
                t.getPlugin(this.volume, "slider").destroy(),
                e.off("loadstart"),
                e.off("loadedmetadata"),
                e.off("canplay"),
                e.off("progress"),
                e.off("timeupdate"),
                e.off("waiting"),
                e.off("loadeddata"),
                e.off("play"),
                e.off("pause"),
                e.off("stop"),
                e.off("ended"),
                e.off("volumechange"),
                o.off(t.events.click, ".play"),
                o.off(t.events.click, ".stop"),
                o.off(t.events.click, ".mute"),
                o.off(t.events.click, ".loop"),
                o.off(t.events.click, ".full"),
                r(globalThis).off(t.events.keyup, {
                    ns: this.id
                }),
                r(globalThis).off(t.events.resize, {
                    ns: this.id
                }),
                e
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            onViewport: t.noop,
            onViewportEnter: t.noop,
            onViewportLeave: t.noop,
            onViewportCheckCreate: t.noop
        };
        t.viewportCheckSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroViewportCheckSetup != "undefined" && t.viewportCheckSetup(globalThis.metroViewportCheckSetup),
        t.Component("viewport-check", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    inViewport: !1,
                    id: null
                }),
                this
            },
            _create: function() {
                this.id = this.element.attr("id") || Hooks.useId(this.elem),
                this.inViewport = t.utils.inViewport(this.elem),
                this._createEvents(),
                this._fireEvent("viewport-check-create")
            },
            _createEvents: function() {
                let e = this.elem;
                r(globalThis).on(t.events.scroll, () => {
                    let o = this.inViewport;
                    this.inViewport = t.utils.inViewport(e),
                    o !== this.inViewport && (this.inViewport ? this._fireEvent("viewport-enter") : this._fireEvent("viewport-leave")),
                    this._fireEvent("viewport", {
                        state: this.inViewport
                    })
                }
                , {
                    ns: this.id
                })
            },
            state: function() {
                return this.inViewport
            },
            destroy: function() {
                return r(globalThis).off(t.events.scroll, {
                    ns: this.id
                }),
                this.element
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            _runtime: !1,
            windowDeferred: 0,
            hidden: !1,
            width: "auto",
            height: "auto",
            btnClose: !0,
            btnMin: !0,
            btnMax: !0,
            draggable: !0,
            dragElement: ".window-caption .title",
            dragArea: "parent",
            shadow: !1,
            icon: "",
            title: "Window",
            content: null,
            resizable: !0,
            overlay: !1,
            overlayColor: "transparent",
            overlayAlpha: .5,
            modal: !1,
            position: "absolute",
            checkEmbed: !0,
            top: "auto",
            left: "auto",
            place: "auto",
            closeAction: t.actions.HIDE,
            customButtons: null,
            status: "",
            canClose: !0,
            canMaximize: !0,
            canMinimize: !0,
            clsCustomButton: "",
            clsCaption: "",
            clsContent: "",
            clsWindow: "",
            minWidth: 0,
            minHeight: 0,
            maxWidth: 0,
            maxHeight: 0,
            onDragStart: t.noop,
            onDragStop: t.noop,
            onDragMove: t.noop,
            onWindowClick: t.noop,
            onCaptionClick: t.noop,
            onCaptionDblClick: t.noop,
            onCloseClick: t.noop,
            onMaxClick: t.noop,
            onMinClick: t.noop,
            onResizeStart: t.noop,
            onResizeStop: t.noop,
            onResize: t.noop,
            onWindowCreate: t.noop,
            onShow: t.noop,
            onWindowDestroy: t.noop,
            onCanClose: t.noop_true,
            onMinimize: t.noop,
            onMaximize: t.noop,
            onClose: t.noop
        };
        t.windowSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroWindowSetup != "undefined" && t.windowSetup(globalThis.metroWindowSetup),
        t.Component("window", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    win: null,
                    overlay: null,
                    position: {
                        top: 0,
                        left: 0
                    },
                    hidden: !1,
                    content: null
                }),
                this
            },
            _create: function() {
                let e = this.element, o = this.options, a, i, s = o.dragArea === "parent" ? e.parent() : r(o.dragArea), c;
                o.modal === !0 && (o.btnMax = !1,
                o.btnMin = !1,
                o.resizable = !1),
                t.utils.isNull(o.content) || (t.utils.isUrl(o.content) && t.utils.isVideoUrl(o.content) ? (o.content = t.utils.embedUrl(o.content),
                e.css({
                    height: "100%"
                })) : !t.utils.isQ(o.content) && t.utils.isFunc(o.content) && (o.content = t.utils.exec(o.content)),
                c = r(o.content),
                c.length === 0 ? e.appendText(o.content) : e.append(c)),
                o.content = e,
                o._runtime === !0 && this._runtime(e, "window"),
                a = this._window(o),
                a.addClass("no-visible"),
                s.append(a),
                o.overlay === !0 && (i = this._overlay(),
                i.appendTo(a.parent()),
                this.overlay = i),
                this.win = a,
                this._fireEvent("window-create", {
                    win: this.win[0],
                    element: e
                }),
                setTimeout( () => {
                    this._setPosition(),
                    o.hidden !== !0 && this.win.removeClass("no-visible"),
                    this._fireEvent("show", {
                        win: this.win[0],
                        element: e
                    })
                }
                , 100)
            },
            _setPosition: function() {
                let e = this.options, o = this.win, a = e.dragArea === "parent" ? o.parent() : r(e.dragArea), i = a.height() / 2 - o[0].offsetHeight / 2, s = a.width() / 2 - o[0].offsetWidth / 2, c, d, p, m;
                if (e.place !== "auto") {
                    switch (e.place.toLowerCase()) {
                    case "top-left":
                        c = 0,
                        d = 0,
                        p = "auto",
                        m = "auto";
                        break;
                    case "top-center":
                        c = 0,
                        d = s,
                        p = "auto",
                        m = "auto";
                        break;
                    case "top-right":
                        c = 0,
                        p = 0,
                        d = "auto",
                        m = "auto";
                        break;
                    case "right-center":
                        c = i,
                        p = 0,
                        d = "auto",
                        m = "auto";
                        break;
                    case "bottom-right":
                        m = 0,
                        p = 0,
                        d = "auto",
                        c = "auto";
                        break;
                    case "bottom-center":
                        m = 0,
                        d = s,
                        p = "auto",
                        c = "auto";
                        break;
                    case "bottom-left":
                        m = 0,
                        d = 0,
                        p = "auto",
                        c = "auto";
                        break;
                    case "left-center":
                        c = i,
                        d = 0,
                        p = "auto",
                        m = "auto";
                        break;
                    default:
                        c = i,
                        d = s,
                        m = "auto",
                        p = "auto"
                    }
                    o.css({
                        top: c,
                        left: d,
                        bottom: m,
                        right: p
                    })
                }
            },
            _window: function(e) {
                let o, a, i, s, c, d, p, m, g, f, u = e.width, h = e.height;
                if (o = r("<div>").addClass("window"),
                e.modal === !0 && o.addClass("modal"),
                a = r("<div>").addClass("window-caption"),
                i = r("<div>").addClass("window-content"),
                o.append(a),
                o.append(i),
                (e.status || e.resizable) && (f = r("<div>").addClass("window-status").html(e.status),
                o.append(f)),
                e.shadow === !0 && o.addClass("shadowed"),
                t.utils.isValue(e.icon) && (s = r("<span>").addClass("icon").html(e.icon),
                s.appendTo(a)),
                r("<span>").addClass("title").html(t.utils.isValue(e.title) ? e.title : "&nbsp;").appendTo(a),
                t.utils.isNull(e.content) || (t.utils.isQ(e.content) ? e.content.appendTo(i) : i.html(e.content)),
                c = r("<div>").addClass("buttons"),
                c.appendTo(a),
                e.btnMax === !0 && (m = r("<span>").addClass("button small square btn-max sys-button"),
                m.appendTo(c)),
                e.btnMin === !0 && (p = r("<span>").addClass("button small square btn-min sys-button"),
                p.appendTo(c)),
                e.btnClose === !0 && (d = r("<span>").addClass("button small square btn-close sys-button"),
                d.appendTo(c)),
                e.customButtons) {
                    let w = t.utils.isObject(e.customButtons);
                    w && r.each(w, function() {
                        let Q = r("<span>");
                        Q.addClass("button btn-custom").addClass(e.clsCustomButton).addClass(this.cls).attr("tabindex", -1).html(this.html),
                        this.attr && typeof this.attr == "object" && r.each(this.attr, (C, B) => {
                            Q.attr(Str.dashedName(C), B)
                        }
                        ),
                        Q.data("action", this.onclick),
                        c.prepend(Q)
                    })
                }
                return a.on(t.events.click, ".btn-custom", function(w) {
                    if (t.utils.isRightMouse(w))
                        return;
                    let Q = r(this)
                      , C = Q.data("action");
                    t.utils.exec(C, [Q], this)
                }),
                o.attr("id", e.id === void 0 ? Hooks.useId(o[0]) : e.id),
                o.on(t.events.startAll, ".window-caption", w => {
                    this._fireEvent("caption-click", {
                        win: o[0],
                        e: w
                    })
                }
                ),
                o.on(t.events.dblclick, ".window-caption", w => {
                    this.maximize(w)
                }
                ),
                a.on(t.events.click, ".btn-max, .btn-min, .btn-close", w => {
                    if (t.utils.isRightMouse(w))
                        return;
                    let Q = r(w.target);
                    Q.hasClass("btn-max") && e.canMaximize && this.maximize(w),
                    Q.hasClass("btn-min") && e.canMinimize && this.minimize(w),
                    Q.hasClass("btn-close") && e.canClose && this.close(w)
                }
                ),
                o.on(t.events.click, w => {
                    this._fireEvent("window-click", {
                        win: o[0],
                        e: w
                    })
                }
                ),
                e.draggable === !0 && t.makePlugin(o, "draggable", {
                    dragContext: o[0],
                    dragElement: a,
                    dragArea: e.dragArea,
                    onDragStart: e.onDragStart,
                    onDragStop: e.onDragStop,
                    onDragMove: e.onDragMove
                }),
                o.addClass(e.clsWindow),
                a.addClass(e.clsCaption),
                i.addClass(e.clsContent),
                e.minWidth === 0 && (e.minWidth = 34,
                r.each(c.children(".btn-custom"), function() {
                    e.minWidth += t.utils.hiddenElementSize(this).width
                }),
                e.btnMax && (e.minWidth += 34),
                e.btnMin && (e.minWidth += 34),
                e.btnClose && (e.minWidth += 34)),
                e.minWidth > 0 && !Number.isNaN(e.width) && e.width < e.minWidth && (u = e.minWidth),
                e.minHeight > 0 && !Number.isNaN(e.height) && e.height > e.minHeight && (h = e.minHeight),
                e.resizable && (g = r("<span>").addClass("resize-element"),
                g.appendTo(o),
                o.addClass("resizable"),
                t.makePlugin(o, "resizable", {
                    minWidth: e.minWidth,
                    minHeight: e.minHeight,
                    maxWidth: e.maxWidth,
                    maxHeight: e.maxHeight,
                    resizeElement: ".resize-element",
                    onResizeStart: e.onResizeStart,
                    onResizeStop: e.onResizeStop,
                    onResize: e.onResize
                })),
                o.css({
                    width: u,
                    height: h,
                    position: e.position,
                    top: e.top,
                    left: e.left
                }),
                o
            },
            _overlay: function() {
                let e = this.options
                  , o = r("<div>");
                return o.addClass("overlay"),
                e.overlayColor === "transparent" ? o.addClass("transparent") : o.css({
                    background: Farbe.Routines.toRGBA(Farbe.Routines.parse(e.overlayColor), e.overlayAlpha)
                }),
                o
            },
            width: function(e) {
                let o = this.win;
                return t.utils.isValue(e) ? (o.css("width", Number.parseInt(e)),
                this) : o.width()
            },
            height: function(e) {
                let o = this.win;
                return t.utils.isValue(e) ? (o.css("height", Number.parseInt(e)),
                this) : o.height()
            },
            maximize: function(e) {
                var s;
                let o = this.win
                  , a = this.options
                  , i = r(e.target);
                a.btnMax && (o.removeClass("minimized"),
                o.toggleClass("maximized")),
                (s = i.hasClass) != null && s.call(i, "title") ? this._fireEvent("caption-dbl-click", {
                    win: o[0]
                }) : this._fireEvent("max-click", {
                    win: o[0]
                }),
                this._fireEvent("maximize", {
                    win: o[0]
                })
            },
            minimize: function() {
                let e = this.win;
                this.options.btnMin && (e.removeClass("maximized"),
                e.toggleClass("minimized")),
                this._fireEvent("min-click", {
                    win: e[0]
                }),
                this._fireEvent("minimize", {
                    win: e[0]
                })
            },
            close: function() {
                let e = this.win
                  , o = this.options;
                if (t.utils.exec(o.onCanClose, [e]) === !1)
                    return !1;
                let a = 0;
                o.onClose !== t.noop && (a = 500),
                this._fireEvent("close", {
                    win: e[0]
                }),
                setTimeout( () => {
                    o.modal === !0 && e.siblings(".overlay").remove(),
                    this._fireEvent("close-click", {
                        win: e[0]
                    }),
                    o.closeAction === t.actions.REMOVE ? (this._fireEvent("window-destroy", {
                        win: e[0]
                    }),
                    e.remove()) : this.hide()
                }
                , a)
            },
            hide: function() {
                let e = this.win;
                e.css({
                    display: "none"
                }),
                this._fireEvent("hide", {
                    win: e[0]
                })
            },
            show: function() {
                let e = this.win;
                e.removeClass("no-visible").css({
                    display: "flex"
                }),
                this._fireEvent("show", {
                    win: e[0]
                })
            },
            toggle: function() {
                this.win.css("display") === "none" || this.win.hasClass("no-visible") ? this.show() : this.hide()
            },
            isOpen: function() {
                return this.win.hasClass("no-visible")
            },
            min: function(e) {
                e ? this.win.addClass("minimized") : this.win.removeClass("minimized")
            },
            max: function(e) {
                e ? this.win.addClass("maximized") : this.win.removeClass("maximized")
            },
            changeClass: function(e) {
                let o = this.element
                  , a = this.win
                  , i = this.options;
                e === "data-cls-window" && (a[0].className = `window ${i.resizable ? " resizable " : " "}${o.attr("data-cls-window")}`),
                e === "data-cls-caption" && (a.find(".window-caption")[0].className = `window-caption ${o.attr("data-cls-caption")}`),
                e === "data-cls-content" && (a.find(".window-content")[0].className = `window-content ${o.attr("data-cls-content")}`)
            },
            toggleShadow: function() {
                let e = this.element
                  , o = this.win;
                JSON.parse(e.attr("data-shadow")) === !0 ? o.addClass("win-shadow") : o.removeClass("win-shadow")
            },
            setContent: function(e) {
                let o = this.element, a = this.win, i = t.utils.isValue(e) ? e : o.attr("data-content"), s;
                !t.utils.isQ(i) && t.utils.isFunc(i) ? s = t.utils.exec(i) : t.utils.isQ(i) ? s = i.html() : s = i,
                a.find(".window-content").html(s)
            },
            setTitle: function(e) {
                let o = this.element
                  , a = this.win
                  , i = t.utils.isValue(e) ? e : o.attr("data-title");
                a.find(".window-caption .title").html(i)
            },
            setIcon: function(e) {
                let o = this.element
                  , a = this.win
                  , i = t.utils.isValue(e) ? e : o.attr("data-icon");
                a.find(".window-caption .icon").html(i)
            },
            getIcon: function() {
                return this.win.find(".window-caption .icon").html()
            },
            getTitle: function() {
                return this.win.find(".window-caption .title").html()
            },
            toggleDraggable: function(e) {
                let o = this.win
                  , a = t.utils.bool(e)
                  , i = t.getPlugin(o, "draggable");
                a === !0 ? i.on() : i.off()
            },
            toggleResizable: function(e) {
                let o = this.win
                  , a = t.utils.bool(e)
                  , i = t.getPlugin(o, "resizable");
                a === !0 ? (i.on(),
                o.find(".resize-element").removeClass("resize-element-disabled")) : (i.off(),
                o.find(".resize-element").addClass("resize-element-disabled"))
            },
            changePlace: function(e) {
                let o = this.element
                  , a = this.win
                  , i = t.utils.isValue(e) ? e : o.attr("data-place");
                a.addClass(i)
            },
            pos: function(e, o) {
                return this.win.css({
                    top: e,
                    left: o
                }),
                this
            },
            top: function(e) {
                return this.win.css({
                    top: e
                }),
                this
            },
            left: function(e) {
                return this.win.css({
                    left: e
                }),
                this
            },
            changeAttribute: function(e, o) {
                let a = function(c, d) {
                    let p = this.win, m;
                    if (c === "data-top") {
                        if (m = Number.parseInt(d),
                        !Number.isNaN(m))
                            return;
                        p.css("top", m)
                    }
                    if (c === "data-left") {
                        if (m = Number.parseInt(d),
                        !Number.isNaN(m))
                            return;
                        p.css("left", m)
                    }
                }
                  , i = function(c, d) {
                    let p = this.win
                      , m = p.find(".btn-close")
                      , g = p.find(".btn-min")
                      , f = p.find(".btn-max")
                      , h = t.utils.bool(d) ? "show" : "hide";
                    switch (c) {
                    case "data-btn-close":
                        m[h]();
                        break;
                    case "data-btn-min":
                        g[h]();
                        break;
                    case "data-btn-max":
                        f[h]();
                        break
                    }
                }
                  , s = function(c, d) {
                    let p = this.win;
                    c === "data-width" && p.css("width", +d),
                    c === "data-height" && p.css("height", +d)
                };
                switch (e) {
                case "data-btn-close":
                case "data-btn-min":
                case "data-btn-max":
                    i(e, o);
                    break;
                case "data-width":
                case "data-height":
                    s(e, o);
                    break;
                case "data-cls-window":
                case "data-cls-caption":
                case "data-cls-content":
                    this.changeClass(e);
                    break;
                case "data-shadow":
                    this.toggleShadow();
                    break;
                case "data-icon":
                    this.setIcon();
                    break;
                case "data-title":
                    this.setTitle();
                    break;
                case "data-content":
                    this.setContent();
                    break;
                case "data-draggable":
                    this.toggleDraggable(o);
                    break;
                case "data-resizable":
                    this.toggleResizable(o);
                    break;
                case "data-top":
                case "data-left":
                    a(e, o);
                    break;
                case "data-place":
                    this.changePlace();
                    break
                }
            },
            destroy: function() {
                return this.element
            }
        }),
        t.window = {
            isWindow: e => t.utils.isMetroObject(e, "window"),
            min: function(e, o) {
                if (!this.isWindow(e))
                    return !1;
                t.getPlugin(e, "window").min(o)
            },
            max: function(e, o) {
                if (!this.isWindow(e))
                    return !1;
                t.getPlugin(e, "window").max(o)
            },
            show: function(e) {
                if (!this.isWindow(e))
                    return !1;
                t.getPlugin(e, "window").show()
            },
            hide: function(e) {
                if (!this.isWindow(e))
                    return !1;
                t.getPlugin(e, "window").hide()
            },
            toggle: function(e) {
                if (!this.isWindow(e))
                    return !1;
                t.getPlugin(e, "window").toggle()
            },
            isOpen: function(e) {
                return this.isWindow(e) ? t.getPlugin(e, "window").isOpen() : !1
            },
            close: function(e) {
                if (!this.isWindow(e))
                    return !1;
                t.getPlugin(e, "window").close()
            },
            pos: function(e, o, a) {
                if (!this.isWindow(e))
                    return !1;
                t.getPlugin(e, "window").pos(o, a)
            },
            top: function(e, o) {
                if (!this.isWindow(e))
                    return !1;
                t.getPlugin(e, "window").top(o)
            },
            left: function(e, o) {
                if (!this.isWindow(e))
                    return !1;
                t.getPlugin(e, "window").left(o)
            },
            width: function(e, o) {
                if (!this.isWindow(e))
                    return !1;
                t.getPlugin(e, "window").width(o)
            },
            height: function(e, o) {
                if (!this.isWindow(e))
                    return !1;
                t.getPlugin(e, "window").height(o)
            },
            create: (e, o) => {
                let a = r("<div>").appendTo(r(o || "body"))
                  , i = r.extend({
                    _runtime: !0
                }, e || {});
                return t.makePlugin(a, "window", i),
                t.getPlugin(a, "window").win
            }
        }
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            wizardDeferred: 0,
            start: 1,
            finish: 0,
            iconHelp: "\u{1F4A1}",
            iconPrev: "\u2190",
            iconNext: "\u2192",
            iconFinish: "\u2714",
            buttonMode: "cycle",
            buttonOutline: !0,
            duration: 300,
            clsWizard: "",
            clsActions: "",
            clsHelp: "",
            clsPrev: "",
            clsNext: "",
            clsFinish: "",
            onPage: t.noop,
            onNextPage: t.noop,
            onPrevPage: t.noop,
            onFirstPage: t.noop,
            onLastPage: t.noop,
            onFinishPage: t.noop,
            onHelpClick: t.noop,
            onPrevClick: t.noop,
            onNextClick: t.noop,
            onFinishClick: t.noop,
            onBeforePrev: t.noop_true,
            onBeforeNext: t.noop_true,
            onWizardCreate: t.noop
        };
        t.wizardSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroWizardSetup != "undefined" && t.wizardSetup(globalThis.metroWizardSetup),
        t.Component("wizard", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    id: null
                }),
                this
            },
            _create: function() {
                let e = this.element;
                this.id = Hooks.useId(this.elem),
                this._createWizard(),
                this._createEvents(),
                this._fireEvent("wizard-create", {
                    element: e
                })
            },
            _createWizard: function() {
                let e = this.element
                  , o = this.options;
                e.addClass("wizard").addClass(o.view).addClass(o.clsWizard);
                let a = r("<div>").addClass("action-bar").addClass(o.clsActions).appendTo(e)
                  , i = o.buttonMode === "button" ? "" : o.buttonMode;
                o.buttonOutline === !0 && (i += " outline"),
                o.iconHelp !== !1 && r("<button>").attr("type", "button").addClass("button wizard-btn-help").addClass(i).addClass(o.clsHelp).html(o.iconHelp).appendTo(a),
                o.iconPrev !== !1 && r("<button>").attr("type", "button").addClass("button wizard-btn-prev").addClass(i).addClass(o.clsPrev).html(o.iconPrev).appendTo(a),
                o.iconNext !== !1 && r("<button>").attr("type", "button").addClass("button wizard-btn-next").addClass(i).addClass(o.clsNext).html(o.iconNext).appendTo(a),
                o.iconFinish !== !1 && r("<button>").attr("type", "button").addClass("button wizard-btn-finish").addClass(i).addClass(o.clsFinish).html(o.iconFinish).appendTo(a),
                this.toPage(o.start),
                this._setHeight()
            },
            _setHeight: function() {
                let e = this.element
                  , o = e.children("section")
                  , a = 0;
                o.children(".page-content").css("max-height", "none"),
                r.each(o, function() {
                    let i = r(this).height();
                    a < Number.parseInt(i) && (a = i)
                }),
                e.height(a)
            },
            _createEvents: function() {
                let e = this
                  , o = this.element;
                o.on(t.events.click, ".wizard-btn-help", () => {
                    let i = o.children("section").get(e.current - 1);
                    e._fireEvent("help-click", {
                        index: e.current,
                        page: i
                    })
                }
                ),
                o.on(t.events.click, ".wizard-btn-prev", () => {
                    e.prev();
                    let i = o.children("section").get(e.current - 1);
                    e._fireEvent("prev-click", {
                        index: e.current,
                        page: i
                    })
                }
                ),
                o.on(t.events.click, ".wizard-btn-next", () => {
                    e.next();
                    let i = o.children("section").get(e.current - 1);
                    e._fireEvent("next-click", {
                        index: e.current,
                        page: i
                    })
                }
                ),
                o.on(t.events.click, ".wizard-btn-finish", () => {
                    let i = o.children("section").get(e.current - 1);
                    e._fireEvent("finish-click", {
                        index: e.current,
                        page: i
                    })
                }
                ),
                o.on(t.events.click, ".complete", function() {
                    let a = r(this).index() + 1;
                    e.toPage(a)
                }),
                r(globalThis).on(t.events.resize, () => {
                    e._setHeight()
                }
                , {
                    ns: this.id
                })
            },
            next: function() {
                let e = this.element
                  , o = this.options
                  , a = e.children("section")
                  , i = r(e.children("section").get(this.current - 1));
                this.current + 1 > a.length || t.utils.exec(o.onBeforeNext, [this.current, i, e]) === !1 || (this.current++,
                this.toPage(this.current),
                i = r(e.children("section").get(this.current - 1)),
                this._fireEvent("next-page", {
                    index: this.current,
                    page: i[0]
                }))
            },
            prev: function() {
                let e = this.element
                  , o = this.options
                  , a = r(e.children("section").get(this.current - 1));
                this.current - 1 === 0 || t.utils.exec(o.onBeforePrev, [this.current, a, e]) === !1 || (this.current--,
                this.toPage(this.current),
                a = r(e.children("section").get(this.current - 1)),
                this._fireEvent("prev-page", {
                    index: this.current,
                    page: a[0]
                }))
            },
            last: function() {
                let e = this.element;
                this.toPage(e.children("section").length);
                let o = r(e.children("section").get(this.current - 1));
                this._fireEvent("last-page", {
                    index: this.current,
                    page: o[0]
                })
            },
            first: function() {
                let e = this.element;
                this.toPage(1);
                let o = r(e.children("section").get(0));
                this._fireEvent("first-page", {
                    index: this.current,
                    page: o[0]
                })
            },
            toPage: function(e) {
                let o = this.element
                  , a = this.options
                  , i = r(o.children("section").get(e - 1))
                  , s = o.children("section")
                  , c = o.find(".action-bar");
                if (i.length === 0)
                    return;
                let d = o.find(".wizard-btn-finish").addClass("disabled")
                  , p = o.find(".wizard-btn-next").addClass("disabled")
                  , m = o.find(".wizard-btn-prev").addClass("disabled");
                this.current = e,
                o.children("section").removeClass("complete current").removeClass(a.clsCurrent).removeClass(a.clsComplete),
                i.addClass("current").addClass(a.clsCurrent),
                i.prevAll().addClass("complete").addClass(a.clsComplete);
                let g = o.children("section.complete").length === 0 ? 0 : Number.parseInt(t.utils.getStyleOne(o.children("section.complete")[0], "border-left-width"));
                c.animate({
                    draw: {
                        left: o.children("section.complete").length * g + 41
                    },
                    dur: a.duration
                }),
                (this.current === s.length || a.finish > 0 && this.current >= a.finish) && d.removeClass("disabled"),
                Number.parseInt(a.finish) > 0 && this.current === Number.parseInt(a.finish) && this._fireEvent("finish-page", {
                    index: this.current,
                    page: i[0]
                }),
                this.current < s.length && p.removeClass("disabled"),
                this.current > 1 && m.removeClass("disabled"),
                this._fireEvent("page", {
                    index: this.current,
                    page: i[0]
                })
            },
            changeAttribute: () => {}
            ,
            destroy: function() {
                let e = this.element;
                e.off(t.events.click, ".wizard-btn-help"),
                e.off(t.events.click, ".wizard-btn-prev"),
                e.off(t.events.click, ".wizard-btn-next"),
                e.off(t.events.click, ".wizard-btn-finish"),
                e.off(t.events.click, ".complete"),
                r(globalThis).off(t.events.resize, {
                    ns: this.id
                }),
                e.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        let l = {
            buttons: "next, prev, finish, cancel, help",
            startPage: 1,
            height: 300,
            labelNext: "",
            labelPrev: "",
            labelHelp: "",
            labelFinish: "",
            labelCancel: "",
            iconNext: "",
            iconPrev: "",
            iconHelp: "",
            iconFinish: "",
            iconCancel: "",
            clsWizard: "",
            clsPage: "",
            clsActions: "",
            clsActionHelp: "",
            clsActionPrev: "",
            clsActionNext: "",
            clsActionFinish: "",
            clsActionCancel: "",
            onBeforePage: t.noop_true,
            onPage: t.noop,
            onNext: t.noop,
            onPrev: t.noop,
            onFinish: t.noop,
            onCancel: t.noop,
            onHelp: t.noop,
            onMyObjectCreate: t.noop
        };
        t.wizardClassicSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof window.metroWizardClassicSetup != "undefined" && t.wizardClassicSetup(window.metroWizardClassicSetup),
        t.Component("wizard-classic", {
            init: function(e, o) {
                return this._super(o, e, l, {
                    currentPage: 0
                }),
                this
            },
            _create: function() {
                let e = this.element
                  , o = this.options;
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("wizard-create")
            },
            _createStructure: function() {
                var s;
                let e = this.element
                  , o = this.options;
                e.addClass(`wizard-classic ${o.clsWizard}`).css({
                    height: o.height
                });
                let a = r("<div>").addClass("wizard-pages").appendTo(e)
                  , i = r("<div>").addClass("wizard-actions").appendTo(e);
                for (let c of o.buttons.toArray(",")) {
                    let d = r("<button>").addClass("wizard-action").attr("data-wizard-action", c).html(`${o[`icon${str(c).capitalize()}`] ? o[`icon${str(c).capitalize()}`] : ""} ${o[`label${str(c).capitalize()}`] || this.strings[`label_${c}`]}`).appendTo(i);
                    c === "next" ? d.addClass(`wizard-next ${o.clsActionNext}`) : c === "prev" ? d.addClass(`wizard-prev ${o.clsActionPrev}`) : c === "finish" ? d.addClass(`wizard-finish ${o.clsActionFinish}`) : c === "cancel" ? d.addClass(`wizard-cancel ${o.clsActionCancel}`) : c === "help" && d.addClass(`wizard-help ${o.clsActionHelp}`)
                }
                this.pages = e.find(".page").addClass(o.clsPage),
                this.pages.appendTo(a),
                this.pages[o.startPage - 1] === void 0 && (o.startPage = 0),
                this.currentPage = o.startPage - 1,
                (s = this.pages[this.currentPage]) == null || s.classList.add("active"),
                this._refreshButtons()
            },
            _createEvents: function() {
                let e = this.element
                  , o = this.options;
                e.on("click", ".wizard-action", a => {
                    let i = r(a.target).closest("button").attr("data-wizard-action");
                    if (i === "next") {
                        if (t.utils.exec(o.onBeforePage, [this.currentPage, this.pages[this.currentPage]]) === !1)
                            return !1;
                        this.next(),
                        this._fireEvent("next")
                    } else if (i === "prev") {
                        if (t.utils.exec(o.onBeforePage, [this.currentPage, this.pages[this.currentPage]]) === !1)
                            return !1;
                        this.prev(),
                        this._fireEvent("prev")
                    } else
                        i === "finish" ? this._fireEvent("finish") : i === "cancel" ? this._fireEvent("cancel") : i === "help" && this._fireEvent("help")
                }
                )
            },
            _refreshButtons: function() {
                let e = this.element
                  , o = this.options
                  , a = this.pages
                  , i = e.find(".wizard-action");
                i.each( (s, c) => {
                    r(c).removeClass("disabled")
                }
                ),
                this.currentPage === 0 && i.filter(".wizard-prev").addClass("disabled"),
                this.currentPage === a.length - 1 && (i.filter(".wizard-next").addClass("disabled"),
                i.filter(".wizard-finish").removeClass("disabled")),
                this.currentPage >= 0 && this.currentPage < a.length - 1 && i.filter(".wizard-finish").addClass("disabled"),
                this.currentPage > 0 && i.filter(".wizard-prev").removeClass("disabled")
            },
            next: function() {
                let e = this.element
                  , o = this.options
                  , a = e.find(".page");
                this.currentPage < a.length - 1 && (r(a[this.currentPage]).addClass("out"),
                setTimeout(i => {
                    r(a[i]).removeClass("active")
                }
                , 300, this.currentPage),
                this.currentPage++,
                r(a[this.currentPage]).addClass("active")),
                this._refreshButtons()
            },
            prev: function() {
                let e = this.element
                  , o = this.options
                  , a = e.find(".page");
                this.currentPage > 0 && (r(a[this.currentPage]).removeClass("active"),
                this.currentPage--,
                r(a[this.currentPage]).removeClass("out").addClass("active")),
                this._refreshButtons()
            },
            changeAttribute: (e, o) => {}
            ,
            destroy: function() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = {
            onStateChange: t.noop,
            onWorkingTreeCreate: t.noop
        };
        t.workingTreeSetup = e => {
            l = r.extend({}, l, e)
        }
        ,
        typeof globalThis.metroWorkingTreeSetup != "undefined" && t.workingTreeSetup(globalThis.metroWorkingTreeSetup),
        t.Component("working-tree", {
            init(e, o) {
                return this._super(o, e, l, {}),
                this
            },
            _create() {
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("tree-create")
            },
            addNode({id: e, title: o="", value: a="", items: i=[]}={}) {
                let s = this.element
                  , c = (e || Hooks.useId(`working-tree-node-${s.children().length}`)).replace(/:/gi, "")
                  , d = `
                <li id="${c}">
                    <div class="bull"></div>
                    <div class="node">
                        <div class="title">${o}</div>
                        <div class="value">${a}</div>
                    </div>
                    <ul class="leaves">
                        ${i.map(p => `<li><div class="title">${p.title}</div><div class="value">${p.value}</div> </li>`).join(`
`)}                    
                    </ul>
                </li>
            `;
                return this.element.append(d),
                c
            },
            setState(e, o="pending") {
                let i = this.element.find(`#${e}`).clearClasses().addClass(`work-${o}`);
                return i.find(".bull").html(`<span data-role="bull" data-type="${o}"></span>`),
                this._fireEvent("state-change", {
                    id: e,
                    state: o,
                    node: i
                }),
                this
            },
            _createStructure() {
                this.element.addClass("working-tree")
            },
            _createEvents() {},
            changeAttribute(e, o) {},
            destroy() {
                this.element.remove()
            }
        })
    }
    )(Metro, Dom);
    ( (t, r) => {
        "use strict";
        let l = "[data-role-dropmenu], [data-role-dropdown]"
          , e = '<svg aria-hidden="true" width="16" height="16" viewBox="0 0 24 24"><path d="m14.83 11.29-4.24-4.24a1 1 0 1 0-1.42 1.41L12.71 12l-3.54 3.54a1 1 0 0 0 0 1.41 1 1 0 0 0 .71.29 1 1 0 0 0 .71-.29l4.24-4.24a1.002 1.002 0 0 0 0-1.42Z"></path></svg>'
          , o = {
            height: "auto",
            align: "left",
            onMenuCreate: t.noop
        };
        t.dropMenuSetup = a => {
            o = r.extend({}, o, a)
        }
        ,
        typeof globalThis.metroDropMenuSetup != "undefined" && t.dropMenuSetup(globalThis.metroDropMenuSetup),
        t.Component("dropmenu", {
            init: function(a, i) {
                return this._super(i, a, o, {
                    toggle: null,
                    displayOrigin: null,
                    isOpen: !1,
                    level: 0
                }),
                this
            },
            _create: function() {
                this._createStructure(),
                this._createEvents(),
                this._fireEvent("menu-create")
            },
            _toggle: function() {
                let a = this.element
                  , i = a.siblings(".menu-toggle, .dropdown-toggle, a");
                if (i.length === 0 && (i = a.prev(),
                i.length === 0))
                    throw new Error("Menu toggle not found");
                return r(i[0])
            },
            _createStructure: function() {
                let a = this.element
                  , i = this.options;
                this.level = a.parents("[data-role-dropmenu]").length,
                this.toggle = this._toggle(),
                this.toggle.append(e),
                this.displayOrigin = a.css("display"),
                this.element.addClass("drop-menu").css("z-index", `calc(var(--z-index-fixed) + ${this.level})!important`).hide(),
                i.height !== "auto" && a.css("max-height", i.height)
            },
            _createEvents: function() {
                let a = this.element;
                this.toggle.on("click", i => {
                    r(l).each( (s, c) => {
                        let d = r(c)
                          , p = a.parents("[data-role-dropmenu]").is(c);
                        if (c === a[0] || p || d.hasClass("keep-open") || d.hasClass("stay-open") || d.hasClass("ignore-document-click"))
                            return;
                        let m = t.getPlugin(c, "dropdown")
                          , g = t.getPlugin(c, "dropmenu");
                        m && m.close(),
                        g && g.close()
                    }
                    ),
                    this.isOpen === !1 ? this.open() : this.close(),
                    i.preventDefault(),
                    i.stopPropagation()
                }
                )
            },
            close: function() {
                this.isOpen !== !1 && (this.toggle.removeClass("active-toggle"),
                this.element.hide(),
                this.isOpen = !1)
            },
            open: function() {
                let a = this.element
                  , i = this.options
                  , s = t.utils.rect(this.toggle[0])
                  , c = a.parents("[data-role-dropmenu]").length;
                if (a.show().visible(!1),
                c === 0) {
                    a.css({
                        top: s.bottom,
                        left: s.left
                    });
                    let d = t.utils.viewportOutByWidth(a[0])
                      , p = t.utils.viewportOutByHeight(a[0]);
                    (i.align === "right" || d) && (a.css({
                        left: s.right - a.width()
                    }),
                    i.align !== "right" && t.utils.viewportOutByWidth(a[0]) && a.css({
                        left: s.left
                    })),
                    p && (a.css({
                        top: s.top - a.height()
                    }),
                    t.utils.viewportOutByHeight(a[0]) && a.css({
                        top: s.bottom
                    }))
                } else {
                    a.css({
                        top: s.top,
                        left: s.right
                    });
                    let d = t.utils.viewportOutByWidth(a[0]);
                    (i.align === "right" || d) && (a.css({
                        left: s.left - a.width()
                    }),
                    i.align !== "right" && t.utils.viewportOutByWidth(a[0]) && a.css({
                        left: s.right
                    }))
                }
                this.toggle.addClass("active-toggle"),
                this.isOpen = !0,
                a.visible(!0)
            },
            changeAttribute: (a, i) => {}
            ,
            destroy: function() {
                this.element.remove()
            }
        }),
        r(document).on("click", () => {
            r(l).each( (a, i) => {
                let s = r(i);
                if (s.hasClass("keep-open") || s.hasClass("stay-open") || s.hasClass("ignore-document-click"))
                    return;
                let c = t.getPlugin(i, "dropdown")
                  , d = t.getPlugin(i, "dropmenu");
                c && c.close(),
                d && d.close()
            }
            )
        }
        )
    }
    )(Metro, Dom);
}
)();
//!node.hasClass("expanded");
/*! Bundled license information:

@olton/datetime/dist/datetime.js:
  (*!
   * Datetime v3.2.5.
   * Build time: 18.05.2025, 14:46:05
   * Copyright 2025 by Serhii Pimenov
   * Licensed under MIT
   *
   * Build time: 18.05.2025 14:46:05
   *)

@olton/string/dist/string.js:
  (*!
   * String v0.10.2 (@olton/string)
   * Copyright 2025 by Serhii Pimenov
   * Built: 18.05.2025, 14:39:06
   * Licensed under MIT
   *)

@olton/dom/dist/dom.js:
  (*!
   * DOM - Work with HTML elements (@olton/dom, https://metroui.org.ua)
   * Version: 1.5.1
   * Build date: 18.05.2025, 14:45:23
   * Copyright 2012-2025 by Serhii Pimenov
   * Licensed under MIT
   *)

@olton/hooks/dist/hooks.js:
  (*!
   * Hooks v0.13.0 (@olton/hooks)
   * Copyright 2025 by Serhii Pimenov <serhii@pimenov.com.ua>
   * Built: 07.03.2025, 23:32:05
   * Licensed under MIT
   *)

@olton/farbe/dist/farbe.js:
  (*!
   * Farbe v1.0.9. Color Routines for JavaScript.
   * Build: 18.05.2025, 14:44:28
   * Copyright 2025 by Serhii Pimenov
   * Licensed under MIT
   *)

@olton/html/dist/html.js:
  (*!
   * Html.js v0.15.1
   * Description: Creating HTML Elements with JavaScript
   * Build: 18.05.2025, 14:41:46
   * Copyright 2025 by Serhii Pimenov
   * Licensed under MIT
   *)

@olton/guardian/dist/guardian.js:
  (*!
   * Guardian v0.7.3. Data guard and validation library.
   * Copyright 2025 Serhii Pimenov
   * Licensed under MIT
   * Build time: 18.05.2025 14:43:24
   *)

@olton/router/dist/router.js:
  (*!
   * Router v0.4.1 (Router ror SPA)
   * Build: 18.05.2025, 14:39:57
   * Copyright 2025 by Serhii Pimenov
   * Licensed under MIT
   *)

@olton/model/dist/model.js:
  (*!
   * Model v0.18.1
   * Build: 18.05.2025, 14:40:40
   * Copyright 2012-2025 by Serhii Pimenov
   * Licensed under MIT
   *)
*/
//# sourceMappingURL=metro.js.map
